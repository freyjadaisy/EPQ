[
  {
    "title": "Linus Torvalds built Git in 10 days - and never imagined it would last 20 years",
    "body": "",
    "score": 3515,
    "url": "",
    "created_utc": 1744368494.0,
    "author": "CrankyBear"
  },
  {
    "title": "Sam Altman says AI will make coders 10x more productive, not replace them — Even Bill Gates claims the field is too complex",
    "body": "",
    "score": 1581,
    "url": "",
    "created_utc": 1744091477.0,
    "author": "fungussa"
  },
  {
    "title": "Okta's CEO Says Software Engineers Will Be More in Demand, Not Less - Business Insider",
    "body": "",
    "score": 1254,
    "url": "",
    "created_utc": 1744230554.0,
    "author": "BlazorPlate"
  },
  {
    "title": "The Insanity of Being a Software Engineer",
    "body": "",
    "score": 1100,
    "url": "",
    "created_utc": 1743938221.0,
    "author": "sousapereira"
  },
  {
    "title": "Clever code is probably the worst code you could write",
    "body": "",
    "score": 585,
    "url": "",
    "created_utc": 1744486908.0,
    "author": "Rtzon"
  },
  {
    "title": "Senior Engineer tries Vibe Coding.",
    "body": "",
    "score": 567,
    "url": "",
    "created_utc": 1744139086.0,
    "author": "floriandotorg"
  },
  {
    "title": "AI coding mandates are driving developers to the brink",
    "body": "",
    "score": 555,
    "url": "",
    "created_utc": 1744118502.0,
    "author": "scarey102"
  },
  {
    "title": "NVIDIA Drops a Game-Changer: Native Python Support Hits CUDA",
    "body": "",
    "score": 494,
    "url": "",
    "created_utc": 1744197892.0,
    "author": "codeagencyblog"
  },
  {
    "title": "How to spoof a Pokémon Red Trade (with Go)",
    "body": "This is a write up of some notes I took when I tried to spoof a Pokémon trade as a weekend project. Maybe someone here finds this interesting. :)",
    "score": 384,
    "url": "",
    "created_utc": 1744280630.0,
    "author": "nitwhiz"
  },
  {
    "title": "OpenSSH 10 relies on standards for quantum-safe key exchange",
    "body": "",
    "score": 317,
    "url": "",
    "created_utc": 1744350330.0,
    "author": "donutloop"
  },
  {
    "title": "Writing C for curl | daniel.haxx.se",
    "body": "",
    "score": 288,
    "url": "",
    "created_utc": 1744030137.0,
    "author": "yawaramin"
  },
  {
    "title": "The “S” in MCP Stands for Security",
    "body": "",
    "score": 274,
    "url": "",
    "created_utc": 1744047265.0,
    "author": "iamkeyur"
  },
  {
    "title": "20 years of Git",
    "body": "",
    "score": 219,
    "url": "",
    "created_utc": 1744074142.0,
    "author": "iamkeyur"
  },
  {
    "title": "Tauri vs. Electron Benchmark: ~58% Less Memory, ~96% Smaller Bundle – Our Findings and Why We Chose Tauri",
    "body": "",
    "score": 202,
    "url": "",
    "created_utc": 1744355306.0,
    "author": "kostakos14"
  },
  {
    "title": "Hacking the PlayStation Boot Logo",
    "body": "&gt;The classic PlayStation boot logo is actually a 3D model rendered real time from the disc. [Learn more](https://www.youtube.com/watch?v=duJAfH3S9zA) about how this works and the technical reasons behind this quirky design.\n\n&gt;The source code for extracting and patching PSX licenses is found at [GitHub](https://github.com/jbreckmckye/psx-license-tool)",
    "score": 192,
    "url": "",
    "created_utc": 1744162993.0,
    "author": "NXGZ"
  },
  {
    "title": "PEP 750 – Template Strings has been accepted",
    "body": "",
    "score": 178,
    "url": "",
    "created_utc": 1744317690.0,
    "author": "ketralnis"
  },
  {
    "title": "A flowing WebGL gradient, deconstructed",
    "body": "",
    "score": 162,
    "url": "",
    "created_utc": 1744454768.0,
    "author": "XLEX97"
  },
  {
    "title": "6 usability improvements in GCC 15",
    "body": "",
    "score": 104,
    "url": "",
    "created_utc": 1744291699.0,
    "author": "dmalcolm"
  },
  {
    "title": "OpenSSL 3.5.0 now contains post-quantum procedures",
    "body": "",
    "score": 100,
    "url": "",
    "created_utc": 1744173670.0,
    "author": "donutloop"
  },
  {
    "title": "The Best Programmers I Know | Matthias Endler",
    "body": "",
    "score": 90,
    "url": "",
    "created_utc": 1744029448.0,
    "author": "Xadartt"
  },
  {
    "title": "Demystifying the #! (shebang): Kernel Adventures",
    "body": "",
    "score": 71,
    "url": "",
    "created_utc": 1744137065.0,
    "author": "CrociDB"
  },
  {
    "title": "Don't Mock Your Framework: Writing Tests You Won't Regret",
    "body": "",
    "score": 64,
    "url": "",
    "created_utc": 1744028762.0,
    "author": "bezomaxo"
  },
  {
    "title": "rsync replaced with openrsync on macOS Sequoia",
    "body": "",
    "score": 62,
    "url": "",
    "created_utc": 1744042391.0,
    "author": "iamkeyur"
  },
  {
    "title": "Ship Software That Does Nothing",
    "body": "",
    "score": 71,
    "url": "",
    "created_utc": 1744510579.0,
    "author": "KerrickLong"
  },
  {
    "title": "How we clone a running VM in 2 seconds",
    "body": "",
    "score": 55,
    "url": "",
    "created_utc": 1744398604.0,
    "author": "ketralnis"
  },
  {
    "title": "A surprising enum size optimization in the Rust compiler",
    "body": "",
    "score": 55,
    "url": "",
    "created_utc": 1744215799.0,
    "author": "ketralnis"
  },
  {
    "title": "Erlang's not about lightweight processes and message passing",
    "body": "",
    "score": 51,
    "url": "",
    "created_utc": 1744398497.0,
    "author": "ketralnis"
  },
  {
    "title": "Message Queues in 1 diagram and 180 words",
    "body": "",
    "score": 48,
    "url": "",
    "created_utc": 1744027813.0,
    "author": "stmoreau"
  },
  {
    "title": "Default styles for h1 elements are changing",
    "body": "",
    "score": 50,
    "url": "",
    "created_utc": 1744398741.0,
    "author": "ketralnis"
  },
  {
    "title": "Why I chose Calendar Versioning for my open source project",
    "body": "Hi all, last weekend I tagged the first version of Vigilant, an open-source, self hostable website monitoring application.\n\nI've received positive feedback which I am very happy with.\n\nI wanted to share why I chose for Calendar Versioning instead of the more traditional SemVer.\n\nLet me know what you think and if this is the best way for managing versions!\n\n",
    "score": 48,
    "url": "",
    "created_utc": 1744305393.0,
    "author": "DutchBytes"
  },
  {
    "title": "How Does C Code Become Assembly",
    "body": "",
    "score": 43,
    "url": "",
    "created_utc": 1744215637.0,
    "author": "ketralnis"
  },
  {
    "title": "Why I Value Firebreak Sprints for Managing Technical Debt",
    "body": "",
    "score": 37,
    "url": "",
    "created_utc": 1744101275.0,
    "author": "Practical-Ideal6236"
  },
  {
    "title": "Graphics programming like it’s 2000 – An esoteric introduction to PlayStation 2 graphics – Part 1",
    "body": "",
    "score": 33,
    "url": "",
    "created_utc": 1744370734.0,
    "author": "NXGZ"
  },
  {
    "title": "The E-Graph Data Structure",
    "body": "",
    "score": 34,
    "url": "",
    "created_utc": 1744247325.0,
    "author": "self"
  },
  {
    "title": "20 years of Git",
    "body": "",
    "score": 32,
    "url": "",
    "created_utc": 1744211313.0,
    "author": "namanyayg"
  },
  {
    "title": "Interactive Git Log – A Smarter Git GUI for VSCode",
    "body": "[**Interactive Git Log**](https://marketplace.visualstudio.com/items?itemName=interactive-smartlog.interactive-smartlog) is a free VSCode extension I built to make Git more manageable — especially in shared repos where you collaborate through pull requests.\n\nIt shows only the branches and commits that are active in your workflow, so you’re not buried in noise. Uncommitted changes appear just like `git status`, and y**ou can run Git actions like committing, rebasing, resolving conflicts, and managing branches — all from the UI.**\n\nWhen paired with [GitHub CLI](https://cli.github.com/), it also shows PR status, CI results, and comment counts inline.\n\nIt’s inspired by Meta’s Smartlog (from the Sapling source control system), but adapted for Git.\n\nWould love feedback if you try it out.",
    "score": 33,
    "url": "",
    "created_utc": 1744502220.0,
    "author": "dashmn210"
  },
  {
    "title": "I implemented HOTP & TOTP from scratch to understand how one-time passwords work",
    "body": "I found 2FA and OTPs mysterious, so I decided to go deep on how they work and wrote my own HOTP/TOTP implementation. I have also explained how they work and idea behind them in this post.  \n  \nThe post walks through HMAC, time-based counters, dynamic truncation, and shares the code to a sample application.  \n  \nWould love feedback or suggestions!",
    "score": 29,
    "url": "",
    "created_utc": 1744379147.0,
    "author": "Dogacel"
  },
  {
    "title": "I ditched my laptop for a pocketable mini PC and a pair of AR glasses — here’s what happened",
    "body": "",
    "score": 48,
    "url": "",
    "created_utc": 1744520633.0,
    "author": "adamard"
  },
  {
    "title": "How Indexes Work in Partitioned Databases",
    "body": "",
    "score": 28,
    "url": "",
    "created_utc": 1744425079.0,
    "author": "scalablethread"
  },
  {
    "title": "Crystal 1.16.0 is released!",
    "body": "",
    "score": 32,
    "url": "",
    "created_utc": 1744290706.0,
    "author": "sdogruyol"
  },
  {
    "title": "Bye-bye Three-way Handshake, and Hello to 0-RTT",
    "body": "",
    "score": 27,
    "url": "",
    "created_utc": 1744236380.0,
    "author": "ketralnis"
  },
  {
    "title": "Remembering John Conway's FRACTRAN, a ridiculous, yet surprisingly deep language",
    "body": "",
    "score": 27,
    "url": "",
    "created_utc": 1744098906.0,
    "author": "Kabra___kiiiiiiiid"
  },
  {
    "title": "Unofficial Safety-Critical Software: how dangerous is this program anyway?",
    "body": "Something I've been mulling over. Curious what folks think.",
    "score": 29,
    "url": "",
    "created_utc": 1743954415.0,
    "author": "me_again"
  },
  {
    "title": "Employees Leading Themselves: The Power Of Self-Managed Teams At Work",
    "body": "",
    "score": 26,
    "url": "",
    "created_utc": 1744062839.0,
    "author": "adamard"
  },
  {
    "title": "The Y Combinator Explained in Python",
    "body": "",
    "score": 22,
    "url": "",
    "created_utc": 1744301333.0,
    "author": "ketralnis"
  },
  {
    "title": "The Deceptive Complexity of P2P Connections and the Solution We Found",
    "body": "",
    "score": 19,
    "url": "",
    "created_utc": 1744272988.0,
    "author": "lets-p2p"
  },
  {
    "title": "Oracle: Preparing for Post Quantum Cryptography",
    "body": "",
    "score": 19,
    "url": "",
    "created_utc": 1744348681.0,
    "author": "donutloop"
  },
  {
    "title": "How I use remind",
    "body": "",
    "score": 19,
    "url": "",
    "created_utc": 1744192397.0,
    "author": "mr-figs"
  },
  {
    "title": "Hacker News Hug of Deaf",
    "body": "",
    "score": 18,
    "url": "",
    "created_utc": 1744322071.0,
    "author": "ChiliPepperHott"
  },
  {
    "title": "The Invisible Difference",
    "body": "",
    "score": 17,
    "url": "",
    "created_utc": 1744206697.0,
    "author": "yusufaytas"
  },
  {
    "title": "Go Zero Values",
    "body": "",
    "score": 16,
    "url": "",
    "created_utc": 1744109265.0,
    "author": "simon_o"
  },
  {
    "title": "Advanced Messaging Patterns: Blackboard - For Zero-Copy Inter-Process Communication",
    "body": "",
    "score": 16,
    "url": "",
    "created_utc": 1744482710.0,
    "author": "elfenpiff"
  },
  {
    "title": "A Case for Lua Performance",
    "body": "",
    "score": 17,
    "url": "",
    "created_utc": 1744447851.0,
    "author": "_Sharp_"
  },
  {
    "title": "Quantum Physics & Computing for programming addicts",
    "body": "I'm the developer of Quantum Odyssey and decided to go all out and make this series of quantum physics and computing videos that touch everything you need to know to start messing around with a quantum computer through the lens of my videogame.\n\nGive me your feedback! Is it a good practice to put these directly in the game?",
    "score": 15,
    "url": "",
    "created_utc": 1744289847.0,
    "author": "QuantumOdysseyGame"
  },
  {
    "title": "The Best Programmers I Know",
    "body": "",
    "score": 17,
    "url": "",
    "created_utc": 1744218515.0,
    "author": "iamkeyur"
  },
  {
    "title": "Bridging Worlds: How we Unified gRPC and REST APIs in Rust",
    "body": "",
    "score": 15,
    "url": "",
    "created_utc": 1744113091.0,
    "author": "c10n3x_"
  },
  {
    "title": "Elevate Your Engineering Culture: The Power of Documenting Architecture Decisions",
    "body": "",
    "score": 14,
    "url": "",
    "created_utc": 1744013856.0,
    "author": "Azdaroth"
  },
  {
    "title": "Async from scratch 1: What's in a Future, anyway?",
    "body": "",
    "score": 14,
    "url": "",
    "created_utc": 1744301283.0,
    "author": "ketralnis"
  },
  {
    "title": "Bilinear interpolation on a quadrilateral using Barycentric coordinates",
    "body": "",
    "score": 14,
    "url": "",
    "created_utc": 1744393744.0,
    "author": "mariuz"
  },
  {
    "title": "Elliptical Python Programming",
    "body": "",
    "score": 13,
    "url": "",
    "created_utc": 1744282409.0,
    "author": "symbolicard"
  },
  {
    "title": "Solving a \"Layton Puzzle\" with Prolog • Buttondown",
    "body": "",
    "score": 12,
    "url": "",
    "created_utc": 1744177646.0,
    "author": "FoxInTheRedBox"
  },
  {
    "title": "My Own Private Binary: An Idiosyncratic Introduction to Linux Kernel Modules",
    "body": "",
    "score": 10,
    "url": "",
    "created_utc": 1744317732.0,
    "author": "ketralnis"
  },
  {
    "title": "Obituary for Cyc",
    "body": "",
    "score": 11,
    "url": "",
    "created_utc": 1744218558.0,
    "author": "iamkeyur"
  },
  {
    "title": "We should talk more about Architecture Congruency",
    "body": "",
    "score": 9,
    "url": "",
    "created_utc": 1744421037.0,
    "author": "chrisza4"
  },
  {
    "title": "Why I Program in Lisp",
    "body": "",
    "score": 10,
    "url": "",
    "created_utc": 1744398732.0,
    "author": "ketralnis"
  },
  {
    "title": "Building Transformers from Scratch ... in Python",
    "body": "The transformer architecture revolutionized the field of natural language processing when introduced in the landmark 2017 paper [*Attention is All You Need*](https://arxiv.org/abs/1706.03762). Breaking away from traditional sequence models, transformers employ **self-attention** mechanisms (more on this later) as their core building block, enabling them to capture long-range dependencies in data with remarkable efficiency. In essence, the transformer can be viewed as a general-purpose computational substrate—a programmable logical tissue that reconfigures based on training data and can be stacked as layers build large models exhibiting fascinating emergent behaviors.\n\n",
    "score": 11,
    "url": "",
    "created_utc": 1744378802.0,
    "author": "dtseng123"
  },
  {
    "title": "Hiding elements that require JavaScript without JavaScript",
    "body": "",
    "score": 11,
    "url": "",
    "created_utc": 1744053866.0,
    "author": "ketralnis"
  },
  {
    "title": "Apple’s Darwin OS and XNU Kernel Deep Dive",
    "body": "",
    "score": 9,
    "url": "",
    "created_utc": 1744053767.0,
    "author": "ketralnis"
  },
  {
    "title": "Solving a “Layton Puzzle” with Prolog",
    "body": "",
    "score": 10,
    "url": "",
    "created_utc": 1744236155.0,
    "author": "namanyayg"
  },
  {
    "title": "Any program can be a GitHub Actions shell",
    "body": "",
    "score": 10,
    "url": "",
    "created_utc": 1744226236.0,
    "author": "namanyayg"
  },
  {
    "title": "gRPC API Gateway: Bridging the Gap Between REST and gRPC",
    "body": "",
    "score": 8,
    "url": "",
    "created_utc": 1744388164.0,
    "author": "ZuploAdrian"
  },
  {
    "title": "Build Your Own Dynamic DNS with Cloudflare and Python in Minutes",
    "body": "I needed a simple way to keep my Cloudflare DNS records up to date whenever my public IP address changes. So, I put together a lightweight Python script that does exactly that.\n\nCloudflare’s API is well-documented and super easy to use, which made the process smooth. As for getting the current public IP, I found that OpenDNS has an `A` record query that conveniently returns your IP — perfect for this use case.\n\nThe script is minimal, and I run it via a cronjob to automate everything.\n\nI’ve written a short Medium article with all the details (no paywall, of course!).  \nHope it’s helpful to anyone facing a similar need!",
    "score": 8,
    "url": "",
    "created_utc": 1744361650.0,
    "author": "docaicdev"
  },
  {
    "title": ".NET 10 Preview 3 — extension members, null-conditional assinment, and more",
    "body": "",
    "score": 8,
    "url": "",
    "created_utc": 1744318245.0,
    "author": "Atulin"
  },
  {
    "title": "6 usability improvements in GCC 15",
    "body": "",
    "score": 7,
    "url": "",
    "created_utc": 1744316465.0,
    "author": "JRepin"
  },
  {
    "title": "Parser Combinators Beat Regexes",
    "body": "",
    "score": 8,
    "url": "",
    "created_utc": 1744131535.0,
    "author": "ketralnis"
  },
  {
    "title": "Happy FORTRAN DAY",
    "body": "Happy FORTRAN DAY to those who celebrate\n\nMay all your systems be sufficiently bug-free to distribute\n\nhttps://functional.cafe/@racketlang/114299405695003141",
    "score": 8,
    "url": "",
    "created_utc": 1744116452.0,
    "author": "sdegabrielle"
  },
  {
    "title": "WebRTC for the Curious",
    "body": "",
    "score": 8,
    "url": "",
    "created_utc": 1744398615.0,
    "author": "ketralnis"
  },
  {
    "title": "Knowledge graphs, part 1 | Gel Blog",
    "body": "",
    "score": 6,
    "url": "",
    "created_utc": 1744394925.0,
    "author": "1st1"
  },
  {
    "title": "Programming in PostScript – Retro Coding Fun: Games on Your Printer",
    "body": "I've been experimenting with PostScript programming over the past two years, creating several small games (Tic-Tac-Toe, Chess, Sokoban and Tetris) all running in Ghostscript or directly on printers.  \n  \nHere are my annotated slides about this quirky and fun journey, filled with insights, code snippets, and lessons learned.",
    "score": 8,
    "url": "",
    "created_utc": 1744377241.0,
    "author": "Dull_Replacement8890"
  },
  {
    "title": "Learning to Program with Haiku",
    "body": "",
    "score": 9,
    "url": "",
    "created_utc": 1744301033.0,
    "author": "ketralnis"
  },
  {
    "title": "We built an Open MCP Client to chat with any MCP server, self hosted and open source!",
    "body": "",
    "score": 7,
    "url": "",
    "created_utc": 1744220400.0,
    "author": "nate4t"
  },
  {
    "title": "Mercedes Bernard: Friendly Code Welcomes Everyone In",
    "body": "",
    "score": 9,
    "url": "",
    "created_utc": 1744127148.0,
    "author": "robbyrussell"
  },
  {
    "title": "[DEVLOG] Razen Language – Now with VS Code Extension + Major Updates",
    "body": "Hey folks,  \nI’ve been building a small programming language called **Razen**, and I’m excited to share a big update. I’m 16, and this project started as a fun experiment — but it’s been growing steadily, and now it has its own **VS Code extension** to make working with it a lot more comfortable.\n\n# What is Razen?\n\nRazen is a lightweight, beginner-friendly language designed with flexibility and simplicity in mind. I wanted something that felt different from most traditional languages — more expressive, less rigid. It’s still in active development, but the idea is to make it both fun and functional.\n\n# What’s New?\n\n* **VS Code Extension** Now available with syntax highlighting and basic support. Makes writing Razen code way smoother.\n* **New Features &amp; Keywords** Added things like `razen:freestyle` for more open, dynamic logic. Also improved how variables work and cleaned up a lot of syntax.\n* **Core Improvements** Performance is better, codebase is more organized, and things are just more stable overall.\n\n# Try It Out\n\nIf you’re interested in language design, like playing with new ideas, or just want to see something built from scratch — give Razen a shot.\n\n**GitHub:** [https://github.com/BasaiCorp/Razen-Lang](https://github.com/BasaiCorp/Razen-Lang)\n\nOpen to feedback, thoughts, or contributions. Still early days, but I’m proud of how far it’s come. Thanks for reading!",
    "score": 6,
    "url": "",
    "created_utc": 1744530893.0,
    "author": "GladJellyfish9752"
  },
  {
    "title": "A Guide to Bearer Tokens: JWT vs. Opaque Tokens",
    "body": "",
    "score": 4,
    "url": "",
    "created_utc": 1744373767.0,
    "author": "Permit_io"
  },
  {
    "title": "CAP Theorem Explained : The Simplest Explanation!",
    "body": "# Theorem that can make or break your system design interview!\n\n  \nCheck out the article here : [https://scortier.substack.com/p/cap-theorem-explained](https://scortier.substack.com/p/cap-theorem-explained)",
    "score": 5,
    "url": "",
    "created_utc": 1744217089.0,
    "author": "scortierHQ"
  },
  {
    "title": "Mistakes and cool things to do with arena allocators",
    "body": "",
    "score": 8,
    "url": "",
    "created_utc": 1744183342.0,
    "author": "Xadartt"
  },
  {
    "title": "Decoding the 90s: Cryptography in Early Software Development",
    "body": "",
    "score": 6,
    "url": "",
    "created_utc": 1744043846.0,
    "author": "ketralnis"
  },
  {
    "title": "how data travels the world to reach your screen",
    "body": "all that boring stuff like OSI, TCP/IP, HTTP, and TCP/UDP explained in a very simple way.",
    "score": 5,
    "url": "",
    "created_utc": 1744364634.0,
    "author": "FederalRace5393"
  },
  {
    "title": "Java 21 Coding Practice Example- Hospital Management System",
    "body": "",
    "score": 6,
    "url": "",
    "created_utc": 1744352265.0,
    "author": "erdsingh24"
  },
  {
    "title": "Purely Functional Sliding Window Aggregation Algorithm",
    "body": "",
    "score": 7,
    "url": "",
    "created_utc": 1744301326.0,
    "author": "ketralnis"
  },
  {
    "title": "Fifty Years of Open Source Software Supply Chain Security",
    "body": "",
    "score": 5,
    "url": "",
    "created_utc": 1744211310.0,
    "author": "namanyayg"
  },
  {
    "title": "\"Verified\" \"Compilation\" of \"Python\" with Knuckledragger, GCC, and Ghidra",
    "body": "",
    "score": 5,
    "url": "",
    "created_utc": 1744131560.0,
    "author": "ketralnis"
  },
  {
    "title": "OAK - Open Agentic Knowledge",
    "body": "",
    "score": 5,
    "url": "",
    "created_utc": 1744024682.0,
    "author": "aspleenic"
  },
  {
    "title": "Super ppt: How to Code an Interactive Slide with Markdown and WL",
    "body": "",
    "score": 5,
    "url": "",
    "created_utc": 1744013168.0,
    "author": "Inst2f"
  },
  {
    "title": "Clojure: Realtime collaborative web apps without ClojureScript",
    "body": "",
    "score": 3,
    "url": "",
    "created_utc": 1744398734.0,
    "author": "ketralnis"
  },
  {
    "title": "How Netflix Accurately Attributes eBPF Flow Logs",
    "body": "",
    "score": 6,
    "url": "",
    "created_utc": 1744236159.0,
    "author": "namanyayg"
  },
  {
    "title": "PostgreSQL BM25 Full-Text Search: Speed Up Performance with These Tips",
    "body": "",
    "score": 4,
    "url": "",
    "created_utc": 1744182486.0,
    "author": "hallelujah-amen"
  },
  {
    "title": "Identity Tokens Explained: Best Practices for Better Access Control",
    "body": "",
    "score": 4,
    "url": "",
    "created_utc": 1744175114.0,
    "author": "Permit_io"
  },
  {
    "title": "Kafka and .NET: Practical Guide to Building Event-Driven Services",
    "body": "Hi everyone!!  \n  \nI just published a blog post on integrating Apache Kafka with .NET to build event-driven services, and I’d love to share it with you.\n\nThe post starts with a brief introduction to Kafka and its fundamentals, then moves on to a code-based example showing how to implement Kafka integration in .NET.\n\nHere’s what it covers:\n\n* Setting up Kafka with Docker\n* Producing events from [ASP.NET](http://ASP.NET) Core\n* Consuming events using background workers\n* Handling idempotency, offset commits, and Dead Letter Queues (DLQs)\n* Managing Kafka topics using the AdminClient\n\nIf you're interested in event-driven architecture and building event-driven services, this blog post should help you get started.\n\nRead it here: [https://hamedsalameh.com/kafka-and-net-practical-guide-to-building-event-driven-services/](https://hamedsalameh.com/kafka-and-net-practical-guide-to-building-event-driven-services/)\n\nI’d really appreciate your thoughts and feedback!",
    "score": 4,
    "url": "",
    "created_utc": 1744093465.0,
    "author": "DotDeveloper"
  },
  {
    "title": "When should a compiler expand garbage collection barriers?",
    "body": "",
    "score": 3,
    "url": "",
    "created_utc": 1744053904.0,
    "author": "ketralnis"
  },
  {
    "title": "Study Finds That 52 Percent of ChatGPT Answers to Programming Questions Are Wrong",
    "body": "",
    "score": 6380,
    "url": "",
    "created_utc": 1716555858.0,
    "author": "anseho",
    "permalink": "/r/programming/comments/1czk8nv/study_finds_that_52_percent_of_chatgpt_answers_to/"
  },
  {
    "title": "Stack Overflow bans users en masse for rebelling against OpenAI partnership — users banned for deleting answers to prevent them being used to train ChatGPT | Tom's Hardware",
    "body": ".",
    "score": 4256,
    "url": "",
    "created_utc": 1715228732.0,
    "author": "PIZT",
    "permalink": "/r/programming/comments/1cnom0h/stack_overflow_bans_users_en_masse_for_rebelling/"
  },
  {
    "title": "Stop Designing Your Web Application for Millions of Users When You Don't Even Have 100",
    "body": "",
    "score": 2878,
    "url": "",
    "created_utc": 1726739575.0,
    "author": "bizzehdee",
    "permalink": "/r/programming/comments/1fkh1k7/stop_designing_your_web_application_for_millions/"
  },
  {
    "title": "After 3 Years, I Failed. Here's All My Startup's Code.",
    "body": "",
    "score": 2175,
    "url": "",
    "created_utc": 1734438793.0,
    "author": "_srbhr_",
    "permalink": "/r/programming/comments/1hg9mu3/after_3_years_i_failed_heres_all_my_startups_code/"
  },
  {
    "title": "Distracting software engineers is way more harmful than managers think",
    "body": "",
    "score": 2082,
    "url": "",
    "created_utc": 1714633349.0,
    "author": "zaidesanton",
    "permalink": "/r/programming/comments/1ci99rm/distracting_software_engineers_is_way_more/"
  },
  {
    "title": "Linus Torvalds Lands A 2.6% Performance Improvement With Minor Linux Kernel Patch",
    "body": "",
    "score": 1967,
    "url": "",
    "created_utc": 1730455369.0,
    "author": "Akkeri",
    "permalink": "/r/programming/comments/1gh1vlq/linus_torvalds_lands_a_26_performance_improvement/"
  },
  {
    "title": "Cloudflare took down our website after trying to force us to pay 120k$ within 24h",
    "body": "",
    "score": 1804,
    "url": "",
    "created_utc": 1716739871.0,
    "author": "RayNone",
    "permalink": "/r/programming/comments/1d14rb7/cloudflare_took_down_our_website_after_trying_to/"
  },
  {
    "title": "Jenkins was invented b/c an engineer “got tired of incurring the wrath of his team every time his code broke the build.”",
    "body": "",
    "score": 1746,
    "url": "",
    "created_utc": 1712874963.0,
    "author": "fosterfriendship",
    "permalink": "/r/programming/comments/1c1slh3/jenkins_was_invented_bc_an_engineer_got_tired_of/"
  },
  {
    "title": "Uncle Bob Martin: \"I am in the midst of writing the second edition of Clean Code. It's a complete rewrite, and it's coming out very different from the first. Oh, the message is the same. But the presentation is entirely different.\"",
    "body": "",
    "score": 1663,
    "url": "",
    "created_utc": 1723217231.0,
    "author": "markiiitu",
    "permalink": "/r/programming/comments/1eo2lo5/uncle_bob_martin_i_am_in_the_midst_of_writing_the/"
  },
  {
    "title": "Let's blame the dev who pressed \"Deploy\"",
    "body": "",
    "score": 1595,
    "url": "",
    "created_utc": 1721555217.0,
    "author": "skwee357",
    "permalink": "/r/programming/comments/1e8ipxf/lets_blame_the_dev_who_pressed_deploy/"
  },
  {
    "title": "Lessons learned after 3 years of fulltime Rust game development, and why we're leaving Rust behind",
    "body": "",
    "score": 1551,
    "url": "",
    "created_utc": 1714150286.0,
    "author": "progfu",
    "permalink": "/r/programming/comments/1cdqd3m/lessons_learned_after_3_years_of_fulltime_rust/"
  },
  {
    "title": "My snake game is now 58 bytes thanks to an idea I once had",
    "body": "5 months ago I had the idea of simplifying the branching tree by using the carry flag from operations in the next pre-branching instruction instead of branching twice ([#40](https://github.com/donno2048/snake/pull/40)).\n\nSounds simple enough, but it turns out to be more complicated than it seems at first, and that's why I abandoned it then.\n\nHowever, this week I for some reason looked at the code again and thought about the exact same approach ([#62](https://github.com/donno2048/snake/issues/62)).\n\nAfter a lot of trial and error, I managed to get it working and to reduce two bytes ([#63](https://github.com/donno2048/snake/pull/63)).",
    "score": 1539,
    "url": "",
    "created_utc": 1713003343.0,
    "author": "Perfect-Highlight964",
    "permalink": "/r/programming/comments/1c2ym57/my_snake_game_is_now_58_bytes_thanks_to_an_idea_i/"
  },
  {
    "title": "JetBrains Makes Rider and WebStorm Free for Non-Commercial Use – A Game-Changer for Web Devs!",
    "body": "",
    "score": 1533,
    "url": "",
    "created_utc": 1729779164.0,
    "author": "chriswoodruff",
    "permalink": "/r/programming/comments/1gb3l0c/jetbrains_makes_rider_and_webstorm_free_for/"
  },
  {
    "title": "Why good engineers fail technical interviews",
    "body": "",
    "score": 1513,
    "url": "",
    "created_utc": 1725033176.0,
    "author": "Bobeyna",
    "permalink": "/r/programming/comments/1f4yoqd/why_good_engineers_fail_technical_interviews/"
  },
  {
    "title": "PySkyWiFi: completely free, unbelievably stupid wi-fi on long-haul flights",
    "body": "",
    "score": 1498,
    "url": "",
    "created_utc": 1720780968.0,
    "author": "wheybags",
    "permalink": "/r/programming/comments/1e1ejon/pyskywifi_completely_free_unbelievably_stupid/"
  },
  {
    "title": "Why don't tech companies pay their engineers to stay?",
    "body": "",
    "score": 1490,
    "url": "",
    "created_utc": 1725577505.0,
    "author": "StellarNavigator",
    "permalink": "/r/programming/comments/1fa09fs/why_dont_tech_companies_pay_their_engineers_to/"
  },
  {
    "title": "I scraped 12M programming job offers for 21 months and here are the most demanded programming languages!",
    "body": "",
    "score": 1485,
    "url": "",
    "created_utc": 1729694008.0,
    "author": "__dacia__",
    "permalink": "/r/programming/comments/1gac15b/i_scraped_12m_programming_job_offers_for_21/"
  },
  {
    "title": "How an empty S3 bucket can make your AWS bill explode",
    "body": "",
    "score": 1480,
    "url": "",
    "created_utc": 1714461195.0,
    "author": "avinassh",
    "permalink": "/r/programming/comments/1cgmq28/how_an_empty_s3_bucket_can_make_your_aws_bill/"
  },
  {
    "title": "Netflix has one 8kb “hello world” on production ",
    "body": "",
    "score": 1475,
    "url": "",
    "created_utc": 1713540111.0,
    "author": "SDcat09",
    "permalink": "/r/programming/comments/1c7zjeo/netflix_has_one_8kb_hello_world_on_production/"
  },
  {
    "title": "Google Staff Engineer shares how reading whitepapers took his career to the next level",
    "body": "",
    "score": 1449,
    "url": "",
    "created_utc": 1714317977.0,
    "author": "xxjcutlerxx",
    "permalink": "/r/programming/comments/1cf8z5w/google_staff_engineer_shares_how_reading/"
  },
  {
    "title": "Github Copilot is Free in VS Code",
    "body": "",
    "score": 1422,
    "url": "",
    "created_utc": 1734547079.0,
    "author": "connor4312",
    "permalink": "/r/programming/comments/1hh8c4x/github_copilot_is_free_in_vs_code/"
  },
  {
    "title": "Github down globally",
    "body": "",
    "score": 1411,
    "url": "",
    "created_utc": 1723677693.0,
    "author": "TheBazlow",
    "permalink": "/r/programming/comments/1esfxce/github_down_globally/"
  },
  {
    "title": "Devs gaining little (if anything) from AI coding assistants",
    "body": "",
    "score": 1395,
    "url": "",
    "created_utc": 1727624038.0,
    "author": "Zardotab",
    "permalink": "/r/programming/comments/1fs72u2/devs_gaining_little_if_anything_from_ai_coding/"
  },
  {
    "title": "CrowdStrike update takes down most Windows machines worldwide",
    "body": "",
    "score": 1388,
    "url": "",
    "created_utc": 1721376432.0,
    "author": "OpetKiks",
    "permalink": "/r/programming/comments/1e6yh7f/crowdstrike_update_takes_down_most_windows/"
  },
  {
    "title": "If AI is too dangerous for open source AI development, then it's 100 times too dangerous for proprietary AI development by Google, Microsoft, Amazon, Meta, Apple, etc.",
    "body": "",
    "score": 1344,
    "url": "",
    "created_utc": 1719612348.0,
    "author": "EUR0PA_TheLastBattle",
    "permalink": "/r/programming/comments/1dqvmdh/if_ai_is_too_dangerous_for_open_source_ai/"
  },
  {
    "title": "James Gosling, creator of Java, announced that he is retiring",
    "body": "",
    "score": 1343,
    "url": "",
    "created_utc": 1720222189.0,
    "author": "davidalayachew",
    "permalink": "/r/programming/comments/1dwbpdu/james_gosling_creator_of_java_announced_that_he/"
  },
  {
    "title": "Generative AI Banned on StackOverflow",
    "body": "",
    "score": 1333,
    "url": "",
    "created_utc": 1725300913.0,
    "author": "atthereallicebear",
    "permalink": "/r/programming/comments/1f7dptx/generative_ai_banned_on_stackoverflow/"
  },
  {
    "title": "US employment of software developers is in decline, and has been since pre-pandemic",
    "body": "",
    "score": 1320,
    "url": "",
    "created_utc": 1718657633.0,
    "author": "JaredGoffFelatio",
    "permalink": "/r/programming/comments/1di8pe9/us_employment_of_software_developers_is_in/"
  },
  {
    "title": "Thomas E. Kurtz, the inventor or BASIC, has passed",
    "body": "",
    "score": 1298,
    "url": "",
    "created_utc": 1731651588.0,
    "author": "intelw1zard",
    "permalink": "/r/programming/comments/1grq3fo/thomas_e_kurtz_the_inventor_or_basic_has_passed/"
  },
  {
    "title": "Microservices: it's because of the way our backend works",
    "body": "",
    "score": 1260,
    "url": "",
    "created_utc": 1720531960.0,
    "author": "big_hole_energy",
    "permalink": "/r/programming/comments/1dz2iph/microservices_its_because_of_the_way_our_backend/"
  },
  {
    "title": "How is this Website so fast!? — Breaking down the McMaster Carr website and the techniques they use to make it so dang fast",
    "body": "",
    "score": 1256,
    "url": "",
    "created_utc": 1729332664.0,
    "author": "h4l",
    "permalink": "/r/programming/comments/1g75r84/how_is_this_website_so_fast_breaking_down_the/"
  },
  {
    "title": "Winamp finally open sources their code, under license preventing forking and source/binary distribution",
    "body": "people have been discussing that this breaks GitHub TOS and is no more open source than a leak. I think it's cool that we have an up to date piece of winamp source. ",
    "score": 1255,
    "url": "",
    "created_utc": 1727260089.0,
    "author": "bruisedandbroke",
    "permalink": "/r/programming/comments/1fp15q0/winamp_finally_open_sources_their_code_under/"
  },
  {
    "title": "How YouTube Was Able to Support 2.49 Billion Users With MySQL",
    "body": "",
    "score": 1244,
    "url": "",
    "created_utc": 1717157252.0,
    "author": "sdxyz42",
    "permalink": "/r/programming/comments/1d4u12d/how_youtube_was_able_to_support_249_billion_users/"
  },
  {
    "title": "Uber Migrates 1 Trillion Records from DynamoDB to LedgerStore to Save $6 Million Annually",
    "body": "",
    "score": 1236,
    "url": "",
    "created_utc": 1716228206.0,
    "author": "rgancarz",
    "permalink": "/r/programming/comments/1cwm04c/uber_migrates_1_trillion_records_from_dynamodb_to/"
  },
  {
    "title": "How Discord Reduced Websocket Traffic by 40%",
    "body": "",
    "score": 1233,
    "url": "",
    "created_utc": 1726982826.0,
    "author": "ketralnis",
    "permalink": "/r/programming/comments/1fmlyvg/how_discord_reduced_websocket_traffic_by_40/"
  },
  {
    "title": "Most micromanagers don't know their engineers consider them to be such.",
    "body": "",
    "score": 1202,
    "url": "",
    "created_utc": 1713424477.0,
    "author": "zaidesanton",
    "permalink": "/r/programming/comments/1c6x7eg/most_micromanagers_dont_know_their_engineers/"
  },
  {
    "title": "I spent 18 months rebuilding my algorithmic trading in Rust. I’m filled with regret.",
    "body": "",
    "score": 1191,
    "url": "",
    "created_utc": 1719545430.0,
    "author": "Starks-Technology",
    "permalink": "/r/programming/comments/1dqa2dm/i_spent_18_months_rebuilding_my_algorithmic/"
  },
  {
    "title": "AI engineers report burnout, rushed rollouts as ‘rat race’ to stay competitive hits tech industry",
    "body": "",
    "score": 1186,
    "url": "",
    "created_utc": 1714738680.0,
    "author": "Franco1875",
    "permalink": "/r/programming/comments/1cj78vc/ai_engineers_report_burnout_rushed_rollouts_as/"
  },
  {
    "title": "One Of The Rust Linux Kernel Maintainers Steps Down - Cites \"Nontechnical Nonsense\"",
    "body": "",
    "score": 1178,
    "url": "",
    "created_utc": 1724943541.0,
    "author": "steveklabnik1",
    "permalink": "/r/programming/comments/1f44kp0/one_of_the_rust_linux_kernel_maintainers_steps/"
  },
  {
    "title": "Linux Creator Torvalds Says Rust Adoption in Kernel Lags Expectations ",
    "body": "",
    "score": 1165,
    "url": "",
    "created_utc": 1724508034.0,
    "author": "unixmachine",
    "permalink": "/r/programming/comments/1f05yrf/linux_creator_torvalds_says_rust_adoption_in/"
  },
  {
    "title": "Main maintainer of ldapjs has decommissioned the project after an hateful email he received ",
    "body": "",
    "score": 1168,
    "url": "",
    "created_utc": 1715947912.0,
    "author": "[deleted]",
    "permalink": "/r/programming/comments/1cu3l1t/main_maintainer_of_ldapjs_has_decommissioned_the/",
    "comments": [
      {
        "author": "CritterNYC",
        "body": "Unfortunately, receiving abuse is a standard part of running an open source project. In the 20 years I've run [PortableApps.com](http://PortableApps.com) I've gotten death threats, rape threats, been doxxed, called just about any name or slur you can think of, been accused of donating a kidney to my Dad for clout, pocketing money from the project to support a lavish lifestyle (in my 1 bedroom apt), etc. Some days, I have to step back for my own mental health.\n\nIt could be just doing anything 'good' online gets you backlash. No good deed and all. I got backlash for [WorldTradeAftermath.com](http://WorldTradeAftermath.com) in the form of 9/11 \"truthers\" accusing me of playing a role in the attack.",
        "score": 844,
        "replies": [
          {
            "author": "adzm",
            "body": "I'm still at a loss at how anyone could be so upset at you for portable apps. It's been a great resource to me and many people I know. Maybe we all need to share positive feedback more to reduce the ratio of this kind of bad vibes.",
            "score": 203,
            "replies": [
              {
                "author": "bkgn",
                "body": "It's not always about being upset, some people just want to be hateful for kicks, like the email in the OP.",
                "score": 44,
                "replies": []
              },
              {
                "author": "optimal_substructure",
                "body": "I've started thumbs-upping YouTube videos and leaving pleasant comments. I know I like seeing nice things/feeling appreciated. No reason it has to be localized within YouTube",
                "score": 8,
                "replies": []
              },
              {
                "author": "ptoki",
                "body": "&gt; how anyone could be so upset at you\n\nMental problems and the fact that you are not seeing 100k of people who are happy with the product, 20 who contribute and 2 who are just dicks.\n\nGo out and just be outside doing something (painting, play instrument, do mime) you will see how many people dont care but you will encounter one or two deranged folks.\n\nIn the past the community could deal with them. Today they are given protection by system but not get corrected because the system does not care.",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "r2d2rigo",
            "body": "Huh, never in my life would have I thought I would come across the creator of one of the things I've been using for a long time in a random Reddit thread.\n\nThanks a lot for your work on PortableApps - they were a godsend in the pre-cloud storage era! Some of them still live inside my Dropbox account :)",
            "score": 172,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "I've been around on reddit since 2010, so I pop into random threads here and there :) You're welcome!",
                "score": 5,
                "replies": []
              },
              {
                "author": "ThreeLeggedChimp",
                "body": "Same.",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "christophski",
            "body": "Holy shit haha, I used portable apps about 17 years ago to run Firefox on school computers. Thanks for that, it was awesome and great to see it's still about.",
            "score": 61,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome! I'm glad they've been helpful. Still about and kicking with a cloud folder focus.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Green0Photon",
            "body": "Bruh, Portable Apps is the GOAT!\n\nI haven't used it for years and years, but it was a lifesaver several times over a decade and more ago.\n\nThank you so much for it, I think it definitely made the world a better place",
            "score": 42,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome and thanks for the compliment! Glad it's helped you out!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "killerbake",
            "body": "With the IT team I have. Ty for portable apps",
            "score": 35,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "ericjmorey",
            "body": "&gt; been accused of donating a kidney to my Dad for clout\n\nThis is so absurd. I'm sorry you had to experience it.",
            "score": 103,
            "replies": []
          },
          {
            "author": "blumpkin",
            "body": "Well, well, well ...we meet again Mr. I-Gave-A-Kidney-To-My-Dad. I have a bone to pick with you.",
            "score": 62,
            "replies": [
              {
                "author": "amazondrone",
                "body": "Ahem. You have an _organ_ to pick with him.",
                "score": 28,
                "replies": [
                  {
                    "author": "shevy-java",
                    "body": "Hmm. I get the comment, but I remember when I was surprised that blood is also called an organ (its totality + function). So, perhaps we can say that the sceletto-system is also acting like an organ. After all bone is not entirely static but grows or shrinks too.)",
                    "score": 10,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Azuvector",
            "body": "I just don't understand that stuff. Like, sure, okay, you don't like a project, think it's garbage and shit and incompetently maintained....why would any of the other things even come up if you're going to rant about it?\n\nNot maintained an OS project, but I've done free software with a significant userbase, and even when that group would get toxic, it tended to be about the software and design decisions, not personal typically.",
            "score": 21,
            "replies": [
              {
                "author": "acdha",
                "body": "Part of the problem is that you never really know what you’re going to get and the outliers are just bonkers. A lot of projects only have sensible interactions and might be uneventful for years but then you might get unlucky and get the guy who thinks he has a platinum enterprise support contract, or has some political vendetta or mental illness, or thinks your forum is a dating site, or is actively trying to subvert your users. Even if those people are relatively rare, they’re far more memorable. ",
                "score": 23,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 3,
                    "replies": [
                      {
                        "author": "acdha",
                        "body": "I think it’s especially bad in tech because so many bad behaviors have been tolerated due to skill shortages, so a certain percentage never really experience consequences for being rude or abusive. ",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "shevy-java",
                "body": "&gt; if you're going to rant about it?\n\nIt would not strike my head either, but some people are just strange and some are just troublemakers. The Joker said that best in the movie The Dark Knight.",
                "score": 4,
                "replies": []
              },
              {
                "author": "nerd4code",
                "body": "We are now directly connected to any lunatic who can find our address. In the past, distance and effort would dissuade all but the looniest, but everybody’s smooshed together on the Internet.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "HeckXX",
            "body": "Wtf. PortableApps????? You are a legend",
            "score": 21,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "Thanks!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "secretBuffetHero",
            "body": "omg I have not seen that site in years. thank you for your contribution to the world.",
            "score": 17,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "amolbh",
            "body": "I used to heavily use portable apps in the early 2010s when internet access was still limited but USB drives were cheap. Thank you for leading such an important project!",
            "score": 10,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome! I'm glad it helped you out",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Azubaele",
            "body": "You're like a software celebrity and I just want to say your site is great, thank you for running it all these years! \n\nAlso screw the haters",
            "score": 13,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Rea-sama",
            "body": "PortableApps was so helpful when I was in high school on PCs with locked down admin privileges. Surprised at the hate.\n\nDidn't expect to meet the creator on reddit either as well! 🤣",
            "score": 8,
            "replies": []
          },
          {
            "author": "alphaglosined",
            "body": "I used to use it around 15 years ago, so I want to say thank you for your contributions. It was quite a useful set of tools for me in high school!",
            "score": 15,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Oh hey, shout out, I've been using your site since I was a 14yr nerd amazed what I could put on a USB.",
            "score": 6,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "Shout back!",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "patrulek",
            "body": "Sounds like just an hour of playing League of Legends.",
            "score": 8,
            "replies": []
          },
          {
            "author": "atomic1fire",
            "body": "Portable apps is neat (and when everything was on a flashdrive, it was very useful) and anyone who abuses someone else for a project that they're not even paying for needs to touch grass.\n\nI'm sorry you went through that.",
            "score": 7,
            "replies": []
          },
          {
            "author": "D7R103",
            "body": "Thanks for your dedication to the project - it's been a lifesaver in a few occasions\n\nI've still got a USB (and a directory on a few machines) that still run it. I've enjoyed keeping a set of apps entirely in userspace for when the time comes\n\nIt really just goes to show just how bad humanity can be at times.... You really don't deserve the hate and I wish you all the best :)",
            "score": 6,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome! And thanks!",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "jfp1992",
            "body": "Portable apps has been a great part of internet history. It was a great way to get able to run tools without installing stuff, which I know is literally the purpose, but still. It was very cool have a usb that can just have its own start menu with all the apps you added onto it. GG",
            "score": 5,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "Thanks for the kind words.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "sorressean",
            "body": "I built cvstats.net, which was supposed to hel pblind people when there was no alternative to consuming CVStats data. Basically I wanted to know how dangerous my area was and a ton of other people loved it. The death threats for \"spreading misinformation,\" promises of \"copying the site to provide fake data and spread misinformation to help show covid as a hoax,\" and so much more was overwhelming and not what I expected. I genuinely don't know if I would've published it knowing the nonsense I would've received. Granted it was like 5% of the feedback, but that 5% can really bring you down.",
            "score": 6,
            "replies": []
          },
          {
            "author": "iamromand",
            "body": "I'll also add from myself that I used to love portableapps - when using a locked university computer, I even got inspired by your effords, found a non-erasable network folder, and was able to turn some popular game to its portable version (if I remember correctly it was easy - install it on your personal PC and just copy the folder). Then I also used the auto load functionality to directly have some sort of on-usb desktop with many of your apps. Thanks :)",
            "score": 4,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome, I'm glad it helped you out!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "_LePancakeMan",
            "body": "Thank you for portable Apps - I have no need for it personally, but it fulfills an important role for students and people under restrictive it",
            "score": 3,
            "replies": []
          },
          {
            "author": "IrrerPolterer",
            "body": "What do people have against open source projects?! The fuck?",
            "score": 3,
            "replies": []
          },
          {
            "author": "Phenomite-Official",
            "body": "Thankyou for your service!",
            "score": 3,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "gjvnq1",
            "body": "I would like to say that your software saved my butt far more times than I can remember, especially when I was still in Middle and High School. ♥️",
            "score": 3,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "Glad to hear it helped you!",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "timsredditusername",
            "body": "Hello there.\n\n\nI'll add myself to the growing list of people who want to tell you that I find portableapps to be very useful. Thank you!",
            "score": 3,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "peazip",
            "body": "Thank you for PortableApps!\nI'm sorry to hear about that level of hate, and I just wanted to remember you how great is your work.",
            "score": 4,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome. I've learned to deal with it better. Realizing most of the anger has nothing to do with me helps.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Desperate-Country440",
            "body": "You are my hero!",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "I never knew of your work and now that I do I'ma share it to all my friends. It's so nice.",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "HoratioWobble",
            "body": "I built a social network once, got quite big. Got regular threats / abuse.\n\nSome people are animals.",
            "score": 2,
            "replies": []
          },
          {
            "author": "ososalsosal",
            "body": "Wow thanks for your service and sorry people suck.\n\nProbably people upset about \"shadow IT\" taking it out on you rather than serving their organisation's needs",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "rscarson",
            "body": "Oh shit\n\nPortsbleapps got me through high school",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "Cool!",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "distark",
            "body": "Ohh mate that's terrible to hear, for what it's worth I used to use this alot back in the day and I'm very grateful to this day... Thank you",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "twigboy",
            "body": "Fuck them demented haters, portable apps was amazing!\n\nHope you're in a better place now",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "I'm pretty good thanks. Life stuff. Planning career things. And still running PortableApps.com. Plus doing improv.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "radiocate",
            "body": "I feel like I'm in the midst of a celebrity haha, thank you for the work on PortableApps! ",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome. It's funny I never thought of that angle until some high school kids wanted me to sign their flash drives at a computer show one year. Cool.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "machacker89",
            "body": "OP thank you for that awesome Resource. i know i appreciate it and you for contributing. haters going to hate!!",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "kusoday",
            "body": "You made my life at school so much better. Thank you for your service.",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "rippledshadow",
            "body": "TY for portableapps. Your service is among the hall of heroes as far as I'm concerned.",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "jomandaman",
            "body": "Wha…who…why… I haven’t even had the pleasure of running my own open source project yet and you’re scaring the ever living shit out of me! I assumed this happens to teachers, but OSI maintainers??",
            "score": 2,
            "replies": []
          },
          {
            "author": "srpulga",
            "body": "thanks for your work, portable apps has been very useful in the corporate it environment",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "r_hcaz",
            "body": "I for one absolutely love your work and used it for years!",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "beachandbyte",
            "body": "Just gotta say thank you so much made my computing life so much better, such an awesome app / resource.",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "aprilla2crash",
            "body": "Hey thanks for your work.\n\nWhen in college i didn't have a Pc but i had a memory stick with a few portable apps working the way i liked because of you",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome!",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Thank you for your hard work. People suck. :)",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "You're welcome! Some people do, most do not. Don't let the small number that do mess with your ability to connect with all the awesome ones who do not.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "-Beaver-Butter-",
            "body": "I hope your kidney donation got you some clout with Dad, at least.",
            "score": 2,
            "replies": [
              {
                "author": "CritterNYC",
                "body": "It did. I'd occasionally tell him to get me something in the kitchen because my kidney was tired. And we always joked it was a lease to own. He'd own it once he'd had it a single day more than I did. Sadly we didn't quite make it.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Bunstonious",
            "body": "Love your work.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "exec_get_id",
        "body": "JFC, what an email. What a piece of shit that person is",
        "score": 787,
        "replies": [
          {
            "author": "summerteeth",
            "body": "So what’s interesting about this in terms of the post-xz attack analysis - pundits have speculated that it’s not just trolls doing this, it is also state level actors setting up supply chain attacks. I don’t know enough about this particular project to make any comments but it is interesting how complicated and challenging the world of open source is for people who are just doing it as a hobby.\n\nUltimately this maintainer needs to do what is best for their own mental health. The industry has major problems with how we treat open source projects beyond this particular example.",
            "score": 606,
            "replies": [
              {
                "author": "sir-draknor",
                "body": "This is really the only explanation that makes sense to me in a post-XZ world:\n\n1. Bully a maintainer of a library that you can use as an attack vector\n\n2. Contribute, take it over, and/or create an alternative library.\n\n3. ???\n\n4. Profit\n\n  \n(I mean sure - could just be people being dicks &amp; trolls, that's always a possibility too.)",
                "score": 263,
                "replies": [
                  {
                    "author": "Old_Elk2003",
                    "body": "Certainly plausible with the security implications of an LDAP lib.",
                    "score": 140,
                    "replies": []
                  },
                  {
                    "author": "SittingWave",
                    "body": "it's actually terrifying that we have this problem. A supply chain attack is definitely a possibility.",
                    "score": 83,
                    "replies": [
                      {
                        "author": "FRIKI-DIKI-TIKI",
                        "body": "There are entire teams, state sponsored that sit around all day and play thru these scenarios. The find all kinds of non-conventional ways to compromise anything they can. That is their sole goal is to compromise, once they do, then they evaluate how it could be used effectively for intel harvesting.  The net has become the dystopian vision of what we did not want it to become.\n\nSadly in today's world, it is best to create unrelated personas for anything like open source contribution, something you can disconnect from and cannot be tied by to the real world you.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "s73v3r",
                    "body": "&gt; (I mean sure - could just be people being dicks &amp; trolls, that's always a possibility too.)\n\nI mean, Occam's razor would suggest this is the most likely scenario.",
                    "score": 50,
                    "replies": [
                      {
                        "author": "b0w3n",
                        "body": "This just feels like a run of the mill dumbfuck trolling on the internet.\n\nI totally understand not wanting to maintain a project while being attacked, but at the same time, I've gotten more offensive spam than this thing.  Just block and move on, you really do need a thick skin in general when working with the general public like this.  Not that this excuses being the target of abuse, so don't think I'm saying that either.",
                        "score": 21,
                        "replies": [
                          {
                            "author": "McPhage",
                            "body": "He did block and move on. He moved on from the project, because seriously, who needs that in their life?",
                            "score": 31,
                            "replies": []
                          },
                          {
                            "author": "s73v3r",
                            "body": "&gt; you really do need a thick skin in general when working with the general public like this.\n\nAgain, why has it become acceptable that people have to adapt themselves to let the assholes be assholes?",
                            "score": 15,
                            "replies": [
                              {
                                "author": "binlargin",
                                "body": "What can you do though? In email there's no mods to complain to, the words are there on your screen entering your brain so if you're vulnerable to them then someone can attack you.\n\nThis is an example of someone being sensitive and the attack being overt and immoral, but the problem is bigger than assholes. In the general case there's an \"email space\" of all possible character combinations, and presumably a large number of them in there could make you quit a project, send a password, leak information, even kill yourself. And deliberately hitting small targets in a large problem space is the definition of intelligence, and LLMs seem pretty intelligent and up to that task.\n\nWe're gonna need webs of trust and information filtering if we want to be safe from AI. We're in for a rough ride for sure.",
                                "score": 7,
                                "replies": []
                              },
                              {
                                "author": "[deleted]",
                                "body": "[deleted]",
                                "score": 3,
                                "replies": []
                              },
                              {
                                "author": "AlienCrashSite",
                                "body": "… there have always been assholes. You have to have thick skin because that’s just how it is. \n\nNeurology is still a black hole. Some people are born with mental issues. Some people have bad lives. Some people hit their head and lose their mind. \n\nThat doesn’t even include things like cultural differences, basic misunderstandings, or even just subjective opinion on what defines asshole. \n\nMaking threats is pretty cut and dry for sure, but enforcing that on the internet? The methods needed to do that bring up ethical questions let alone how nearly impossible it would be.",
                                "score": 7,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "OllyTrolly",
                "body": "You raise a really interesting point. Open Source, Free software is a wonderful paradigm for raising the floor on software around the globe. I've contributed to FSF under the auspice that free software _should_ somehow contribute to improved standard of living for everyone as it lowers the cost and improves the quality of so much around us. However, as larger and larger amounts of it end up in public service, public infrastructure &amp; defence projects it is a mounting security risk. Especially those maintained by individuals like this.  \n  \nI don't know if I'm mad, but I can imagine a world where we have National Source owned and maintained by governments and even perhaps shared between strategic allies.",
                "score": 56,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 28,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 4,
                        "replies": []
                      },
                      {
                        "author": "OllyTrolly",
                        "body": "Perhaps I didn't explain myself fully. I totally understand what Open Source is for, and its benefits. I don't think it should go away.  \n  \nIn the UK where I live I am well aware of how much software and particularly Open Source is included in government services (tax, immigration, passports, driving licenses, blah blah). It's getting more complex and expensive to handle Open Source vulnerabilities and the patch/update cycle around them. If Threat Actors become clever, persistent and targeted enough I can see a point where the costs outweigh the benefits (at least on smaller, newer tools/libraries, not so much GNU type tools where there is a mature, robust, and large community of people involved) and it makes sense to leverage common code within nations or across specific allied nations which is kept secure and obfuscated from those Threat Actors.  \n  \nArmchair reddit only speculation though!",
                        "score": 2,
                        "replies": [
                          {
                            "author": "frankster",
                            "body": "Closed source software has the issues with supply chain, patching etc. the difference with closed source is you sign a contract with a vendor. With open source you may try to manage it yourself or you may pay specialists to manage it for you. Solar Winds for example was a victim of a nation state level attack, despite being a commercial org.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "bwainfweeze",
                    "body": "The main flaw with open source is that I can’t pay someone for a library even if I wanted to. There’s no market for commecial modules because they compete with free. And without the money, Open Source cannot provide the level of service that is needed to really make commercial software. Some companies try a hybrid approach to split the difference, which we also complain about.\n\nIf you don’t pretend to love the former then you get shit on by the Internet. \n\nUltimately this is a thirty to forty year old finance problem that we kicked down the road by trying to replace payware. Most of us use OSS because nobody with the checkbook can lord it over us that they won’t pay for the tools we need.",
                    "score": 7,
                    "replies": [
                      {
                        "author": "moratnz",
                        "body": "You totally can pay for a library if you want. But if you're the only one paying for it, you're probably not going to want to pay the required amount. \n\nThere are heaps of freelance coders who are more than happy to maintain or extend open source code for money (I'm currently working for a company where this is a large part of our business model). But the kicker is they're not magically cheaper just because they're working on OSS code - you're looking at $500-$1000 per day per coder.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "gjvnq1",
                "body": "Governments using paid agents to harass people into stopping what they are doing is definitely nothing new but I had never thought about this being used in such a targeted way for cyber security reasons.\n\nBut yeah, it does make a lot of sense.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "sonstone",
            "body": "Poe’s law in action.  It’s so bad that it almost feels like parody.",
            "score": 52,
            "replies": [
              {
                "author": "McGlockenshire",
                "body": "Na it's just terminal 4chan poisoning.  The email address is the giveaway.",
                "score": 13,
                "replies": []
              }
            ]
          },
          {
            "author": "hanoian",
            "body": "squeal wrong snobbish sand upbeat snatch simplistic thought wipe gullible\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
            "score": 21,
            "replies": [
              {
                "author": "repocin",
                "body": "Yeah, if I got an email like that I'd probably delete it before I'd finished reading the first five words.\n\nThat said, this highlights an important reason why a lot of people don't want to maintain open source software. Way too many assholes out there.",
                "score": 9,
                "replies": []
              },
              {
                "author": "matthewt",
                "body": "Honestly, I'd probably laugh my arse off and re-publish it somewhere as a testimonial.\n\nBut growing up as the little nerd with the surname Trout rather inured me to this sort of shit and this is not in any way a suggestion that being as upset as he clearly was isn't an entirely reasonable response.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "aksdb",
        "body": "In the end the mail was just a final straw that broke the camels back, but I still somewhat dislike that it sends the signal that you can just bully people into submission. That dumb-fuck who wrote the mail has essentially won :-/",
        "score": 553,
        "replies": [
          {
            "author": "theB1ackSwan",
            "body": "It sucks to admit, but cyberbullying works *really* well against basically everyone. We are all susceptible to being treated like shit and having a bad day and making real, consequential choices because of it.",
            "score": 296,
            "replies": [
              {
                "author": "ridicalis",
                "body": "While I'm loathe to admit it, when I get into an online discussion that turns against me, it gets to me.  It won't change my life, but my mood can go south over a bad comment from a keyboard warrior that won't ever touch the same grass as me.\n\nHow much harder to be providing a service, only to have someone crap all over it and everything about myself?  I don't envy high-profile project maintainers.",
                "score": 124,
                "replies": [
                  {
                    "author": "aksdb",
                    "body": "Even downvotes on reddit get to me. I hate that it does, but I kinda can't escape it either.",
                    "score": 69,
                    "replies": [
                      {
                        "author": "Schmittfried",
                        "body": "You can. Don’t look at your vote counts, add an addon to hide them or delete your account. I‘m basically one motivational afternoon away from exporting my saved comments and posts and deleting mine. There is almost no value in social media, let alone participating in it. ",
                        "score": 26,
                        "replies": [
                          {
                            "author": "turudd",
                            "body": "I delete mine every couple of years, my entire history on this site. I find overtime my views have changed and certain things I said 2 years ago aren't as relevant and there are plenty of people on this page who will do nothing buy dig through comment histories to poke holes in anything you say.",
                            "score": 10,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "bucolucas",
                        "body": "I was going to go upvote some of your comments but I don't speak German. I'll just upvote this one instead",
                        "score": 13,
                        "replies": [
                          {
                            "author": "aksdb",
                            "body": "People like you are why I am stuck here on reddit ... the good and funny encounters offset the few bad ones and the bad ones typically just have a short time where they affect one. Maybe it's also a chance to learn to deal with it.\n\nI guess my problem is that I often think I have a good point and in my head all makes sense, so the downvotes feel like not being understood correctly, which in turn makes me feel helpless that I can't find the right words to express my real intent. Even though I know that downvotes sometimes are kind of automatic. Once you get downvotes a bit, others read your comment with a much more negative view and then tend to disagree even more.\n\nAh damn, now I am overthinking it again.\n\nAnyway: I'll try to improve and to not let it get to me :)",
                            "score": 19,
                            "replies": [
                              {
                                "author": "bucolucas",
                                "body": "Oh yeah the downvote train. Seems like people love nothing more than misinterpreting a comment and punching down.\n\nThe way I deal with it is disable notifications on any risky comment, or when I want to \"have the last word.\" If I never get notified of a reply then I win the argument right?\n\nThe hardest part is when I wonder \"am I actually a piece of shit?\" because either 80 humans are wrong, or one autistic midwestern American.\n\nFeel free to message or otherwise connect, we seem like kindred spirits.",
                                "score": 10,
                                "replies": [
                                  {
                                    "author": "Tasgall",
                                    "body": "&gt; The hardest part is when I wonder \"am I actually a piece of shit?\" because either 80 humans are wrong, or one autistic midwestern American.\n\nSometimes, if I'm writing a particularly heated response, I'll just go to the bathroom before I post it. At least that way, I know I'm not full of shit when I do.",
                                    "score": 10,
                                    "replies": [
                                      {
                                        "author": "tigwyk",
                                        "body": "I laughed. Thank you.",
                                        "score": 3,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "Blando-Cartesian",
                        "body": "Human brain doesn’t make a distinction between physical violence and social rejection. Downvotes are literally processed as pain.",
                        "score": 3,
                        "replies": []
                      },
                      {
                        "author": "smellycoat",
                        "body": "Honestly, most of the time I just delete comments that get downvoted. Once a comment gets one or two it'll often just get more and more for no really good reason (people love to pile on I guess), and eventually abusive replies as the only people that will see it are people looking for a fight. I've long since come to the conclusion that it's not worth it.\n\nSometimes I leave them there if it's a hill I'm particularly willing to die on, and very occasionally they'll bounce back which is kinda gratifying.\n\nBut most of the time deleting them simultaneously stops the problem and means I don't have to look at it any more so I can move on.",
                        "score": 5,
                        "replies": []
                      },
                      {
                        "author": "RogerLeigh",
                        "body": "Likewise.  It did result in me changing my behaviour a bit in response though.  I routinely upvote posts I like, but rarely downvote posts I don't like or I disagree with.  I reserve it solely for posts which are grossly abusive or obviously incorrect.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "aksdb",
                            "body": "Same. I try to differentiate between \"bad intention\" and \"different opinion\". I may disagree with what someone says, but that doesn't mean I have to downvote. Instead of downvote I simply not upvote and leave a comment then.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "isoforp",
                "body": "Not all of us have such thin skin. Some of us don't give two shits what some random Joe Blow nobody thinks of us or says to us. We can just block/ban/file-as-spam/etc and move on.",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 41,
            "replies": []
          },
          {
            "author": "maxstader",
            "body": "He did not win. He has a project that needs this library, and now that library doesn't have support. That email cost him time and effort.",
            "score": 75,
            "replies": [
              {
                "author": "Worth_Trust_3825",
                "body": "What support? The library already provided a working primitive. Just because it's decomissioned/not being actively worked on/complete, does not mean that you must throw that library out the window and go on to the next integration.",
                "score": 24,
                "replies": [
                  {
                    "author": "maxstader",
                    "body": "You aren't wrong, but neither am I. The last maintainer only started doing it because his company needed it for a project. It was a good working primitive and didn't want to throw it out the window. It cost them to maintain it that's my point.",
                    "score": 11,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "Well, maybe some \"friend of him\" would take over in a sort of xz-Style.",
                "score": 25,
                "replies": []
              },
              {
                "author": "ArchReaper",
                "body": "You assume the troll's goal is to have the library updated rather than intentionally unmaintained.",
                "score": 19,
                "replies": [
                  {
                    "author": "ahfoo",
                    "body": "Yeah, you should always consider the possibility that things are not what they seem in such cases. This could be a social engineering hack hoping to get maintainers to abandon projects so they can be picked up by bad actors posing as people offering to help maintain abandoned projects. It might sound far-fetched but look at what happend with the XZ exploit.",
                    "score": 13,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Genesis2001",
                "body": "Does he though? The email and name look like a disposable email. The example code might be contrived to *look* like it's needed.",
                "score": 5,
                "replies": [
                  {
                    "author": "maxstader",
                    "body": "Just tells me he doesn't want that nasty email publicly attributed to him. Or maybe you are right, just you and me guessing at this point?",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "stonerism",
            "body": "If he was getting paid for the project, sure. I think the problem is that billion dollar businesses are using this person's work for free without kicking anything back. Open-source needs to fix that problem.",
            "score": 13,
            "replies": [
              {
                "author": "fakehalo",
                "body": "We should really hold the CEO of Open-source accountable at some point.",
                "score": 21,
                "replies": []
              }
            ]
          },
          {
            "author": "tsammons",
            "body": "Best response to this is \"Cool. 👍\"",
            "score": 11,
            "replies": [
              {
                "author": "AnyJamesBookerFans",
                "body": "Best response it to delete the email and get on with your life.",
                "score": 18,
                "replies": []
              },
              {
                "author": "ProgrammaticallySale",
                "body": "Yeah, this email was just average noise on the internet from the shitheads who have infested it since about 1996. Having a thin skin isn't really going to make this world fun to live in.",
                "score": 4,
                "replies": []
              },
              {
                "author": "balder1993",
                "body": "“I’ll just assume you forgot to take your meds today, aneurism is a real threat. Take care, man”",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "alex_3814",
            "body": "Reading the repo don't think the guy won anything as the author doesn't express any resentment but just wanted to expose the asshole. They can't maintain the project so archive status is best to indicate correct status.",
            "score": 2,
            "replies": [
              {
                "author": "aksdb",
                "body": "That's what I meant with \"final straw\". They could and maybe should have archived it without giving that asshole any attention.\n\nIt _might_ be that the asshole gets negativity out of his action now. But knowing trolls, I fear they don't and even get satisfaction from it, which would just reinforce such behavior.\n\n(Just in case: I don't blame the author. Their repo, their life and their choice. I also don't have hard evidence for my claims. I simply wanted to express my concern and maybe discuss it.)",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Kinglink",
            "body": "&gt; That dumb-fuck who wrote the mail has essentially won :-/\n\nI'm glad I'm not the only one who sees this.   This is essentially the worst thing someone can do on the internet, but it's his choice. \n\nI hate saying it but to be in the public eye or the point of contact person for anything you pretty much have to have a thick skin because you will eventually get hate thrown at you.",
            "score": 2,
            "replies": []
          },
          {
            "author": "QuickQuirk",
            "body": "and is likely thrilled, and boasting about it. And will now go and try the same thing on other projects, and so will others.\n\nKinda shit. We need a new internet without the trolls.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "saxbophone",
        "body": "Special place in hell reserved for people who act with such entitlement as the author of that horrid email",
        "score": 118,
        "replies": [
          {
            "author": "EastLandUser",
            "body": "if they didn't like the code, a simple PR could solve the problem. But lets go mental instead....",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 171,
        "replies": []
      },
      {
        "author": "QualitySoftwareGuy",
        "body": "That email is just pathetic. Talk about a motivational killer to contribute to open source.",
        "score": 107,
        "replies": [
          {
            "author": "aeric67",
            "body": "It was pathetic, and it was from pathetic. Look at things like this a verbal (or text) manifestation of the pain that people are feeling. It’s one of the only ways you know someone else is hurt. If they tell you honestly (rare) or they lash out in kind (common). When you practice seeing this stuff through this lens you start to feel sorry for people instead of being offended and bad about yourself.",
            "score": 22,
            "replies": [
              {
                "author": "bwainfweeze",
                "body": "It’s a life skill to be able to find the constructive criticism buried in a rant.",
                "score": 7,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "LinearArray",
        "body": "There's a special place reserved in hell for people who send hateful mails to open source maintainers like this.",
        "score": 24,
        "replies": []
      },
      {
        "author": "nathan_lesage",
        "body": "Full solidarity with this guy. That he even maintained this project even though he himself didn’t need it anymore was great of him. That after such an asshole email he decides it’s the final straw? 100% understandable. I’m a FOSS developer myself and have developed a thick skin, but I can so much feel how not everyone has that, and that is absolutely fine. Developing should not come with an unpaid hobby burnout attached.",
        "score": 61,
        "replies": []
      },
      {
        "author": "Conjo_",
        "body": "reeks of 4chan",
        "score": 18,
        "replies": []
      },
      {
        "author": "amazondrone",
        "body": "I dunno if it's just me but I wouldn't have even opened that email, I'd have deleted it on sight from the subject line and carried on with my life. Obviously if I was getting loads even that would become untenable, but assuming it's only the odd crackpot (otherwise, presumably, the maintainer would have taken this action earlier) this personally seems like an overreaction to me and, perhaps, they were already looking for an excuse or reason to get out. \n\n\nEveryone's different and the maintainer is obviously perfectly within their rights to take this action; this isn't intended to invalidate their reaction or experience or criticise their response. It's merely my own reflection, albeit not as someone who's personally put themselves out their in this way or had to deal with such things.",
        "score": 15,
        "replies": []
      },
      {
        "author": "irfn",
        "body": "While this is indeed pathetic, If I received this email I am quite certain I would have marked as spam / blocked and archived just by reading the subject line and not even bothered to read it.",
        "score": 83,
        "replies": [
          {
            "author": "Wodsole",
            "body": "Exactly my point. Why this guy felt so personally offended by this is a little beyond me. It's such a mindlessly troll. Mark spam and ignore and carry on with life.",
            "score": 30,
            "replies": [
              {
                "author": "DenkJu",
                "body": "As somebody being involved in the development of a decently popular open source app, it's not a single email like this that makes you throw the towel. It's the constant unproductive whining and temper tantrums of entitled dumbasses thinking the fact that they use your (free) tool makes **you** owe them free labour as well. It adds up over time.",
                "score": 13,
                "replies": []
              },
              {
                "author": "b0w3n",
                "body": "Yeah the word vomit looked just like a general spam email trying to get me to click a link.\n\nHardly elicits this level of response, but I understand this could just be the straw that broke the camel's back.",
                "score": 8,
                "replies": []
              },
              {
                "author": "SatisfactionAny6169",
                "body": "I'm gay and I laughed my ass off reading the dude's rant. So much condensed seething rage over an allegedly bad API is nothing worth losing sleep about. \n\nEven less decommissioning an entire project and potentially penalize everyone depending on it.",
                "score": 12,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 16,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "aboothe726",
        "body": "If you Google the email address that sent the email, which you can find on the GitHub page and I will not post here, you’ll find [a thread about this on 4chan](https://boards.4chan.org/g/thread/100492437), where they are (unsurprisingly) blaming the maintainer and email recipient for overreacting as opposed to the sender for being a jerk.\n\nI do hope the email was just a “joke,” in however poor taste, as opposed to a legitimate threat, but emails like this are just beyond the pale. They’re not funny, they’re not helpful, and they’re certainly not how you treat someone who has freely given you their time and energy in the form of open source software. \n\nI think GitHub should reconsider listing people’s email addresses in the clear for all to see, even if users provide an email address. It’s one thing to get a PR like this, but another entirely to receive emails in your own inbox.",
        "score": 45,
        "replies": [
          {
            "author": "space_interprise",
            "body": "On that last point github already do that, you can change your email settings to private and github will create an noreply email for you that you can use to comment and sign your commits so that your real email doesn't get leaked",
            "score": 16,
            "replies": [
              {
                "author": "wieschie",
                "body": "Yeah, but you have to do this before you contribute to anything.  Even rewriting the history of any public repos that you own is a lot of work, but any old commits merged through a pull request will retain the original author information.",
                "score": 10,
                "replies": []
              },
              {
                "author": "aboothe726",
                "body": "That’s great info! Thanks for posting.",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "qntmfred",
            "body": "mister jewstein is on 4chan? I am shocked.",
            "score": 27,
            "replies": []
          }
        ]
      },
      {
        "author": "davlumbaz",
        "body": "that swear vocabulary and ability to chain all that shit in one single sentence is actually quite amusing. (but dont do that pls)",
        "score": 62,
        "replies": [
          {
            "author": "Free_Math_Tutoring",
            "body": "It's like the author watched 2008-era Zero Punctuation on loop for ten days straight while refusing to engage with any of the newer stuff because it's too woke.",
            "score": 27,
            "replies": [
              {
                "author": "davlumbaz",
                "body": "dunno what is zero punctuation, i hope i am not missing anything significant",
                "score": 5,
                "replies": [
                  {
                    "author": "Free_Math_Tutoring",
                    "body": "It's a video game review YouTube series that's been running for 17 years now. Fast-paced, with colorful and imaginative sweary language. Technically it's now called Fully Ramblomatic due to corporate fuckery.\n\nNot something that's important to know, but overall it's fairly big and influential.",
                    "score": 13,
                    "replies": [
                      {
                        "author": "Ashnoom",
                        "body": "They used to not be on YouTube for a long time. To be able to monetize through their own website.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "To quote another comment in this thread, the email vocabulary is awful to the point of parody. \n\nOr someone had a mental breakdown when they were working on a deadline and decided to take it out on an OSS maintainer.",
            "score": 8,
            "replies": []
          }
        ]
      },
      {
        "author": "Wodsole",
        "body": "maybe I'm alone and thinking this, but that email is so outlandishly comically over the top and stupid how could anyone possibly take it seriously? I mean this is the sort of classic mindless trolling that's been going on in the Internet for literally over 20 years. I could hop on call of duty right now and hear the exact same thing from a four-year-old within five minutes. Sureit's stupid, but that's the end of it. I just don't see how anyone could ever possibly take this personally or even waste a second of their brain space caring about it.",
        "score": 42,
        "replies": [
          {
            "author": "Tryouffeljager",
            "body": "I will never understand why people label comments like this as death threats. I get being angry at abuse and calling it out. But pretending that you are concerned over your safety from comments like this is baffling. I could see being concerned if it was done with mentions of doxx or attending some con. But that is never part of the messages that people concern troll over.",
            "score": 13,
            "replies": []
          }
        ]
      },
      {
        "author": "ZirePhiinix",
        "body": "This is most likely a supply chain attack than someone actually doing that.\n\nThis is actually MUCH WORSE than someone being an ass.",
        "score": 113,
        "replies": [
          {
            "author": "zombarista",
            "body": "Devil’s advocate; here’s how it could work…\n\nEmail author wants to take advantage of a third party library that uses this LDAP library. Email author writes a “drop-in, supported replacement” and the third party library migrates. The drop-in replacement has a backdoor in it.\n\nBy targeting this library, the attacker ensures access to credentials and entire organization directories if the bugged replacement is ever brought in.\n\nEven if this isn’t targeted at one organization, it could get a valuable foothold in some orgs that use LDAP/AD and exfiltrate lots of PII.",
            "score": 20,
            "replies": []
          },
          {
            "author": "pihkal",
            "body": "I doubt it. Unfortunately, there's way more assholes than spies on the internet.",
            "score": 55,
            "replies": [
              {
                "author": "staticfive",
                "body": "Is that unfortunate?",
                "score": 11,
                "replies": [
                  {
                    "author": "EmanueleAina",
                    "body": "I guess so, if there were fewer assholes spies would have a harder life and the total number would be much lower than today.",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "Kinglink",
                    "body": "Yup, \n\nIt'd be lovely if we had 0 assholes and 0 spies, but spies are always going to be there.  Assholes don't have to.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "s73v3r",
            "body": "Really? That's more likely than someone just being an ass to someone on the internet?",
            "score": 10,
            "replies": []
          },
          {
            "author": "wobfan_",
            "body": "sorry, but tbh since xz somehow every email and comment is supposed to be a supply chain attack. i don't think anyone would write such a bullshit letter with this much of condensed and even creative swearing in it, in an honest attempt to do something evil.",
            "score": 9,
            "replies": [
              {
                "author": "NoxiferNed",
                "body": "Since xz it would be prudent to assume the worst intentions from scenarios like these.",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Compux72",
        "body": "Honestly the mail has me intrigued if the api is really that bad",
        "score": 29,
        "replies": []
      },
      {
        "author": "awfulentrepreneur",
        "body": "I'm convinced that:\n\n* hitting the delete key, or\n* hitting the downvote and/or hide button(s), or\n* swiping left,\n\nare the most empowering actions that any user can and ought to be able to take to keep their sanity.",
        "score": 12,
        "replies": []
      },
      {
        "author": "Shaper_pmp",
        "body": "This sucks on every level, not least that somewhere there's a troll grinning like a maniac and touching themselves over this reaction.",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "ink spark wild mysterious physical marble flowery airport grandfather frame\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
        "score": 3,
        "replies": []
      },
      {
        "author": "RevolutionaryHumor57",
        "body": "I don't understand how mature person can burn all bridges because someone who he do not even know sends him some random bullshit.\n\nIn moments like that, I really feel that there are devs that love their job because if anything gets them out of comfort zone, they can just close the computer and forget about it instead of confront it",
        "score": 3,
        "replies": []
      },
      {
        "author": "BlueeWaater",
        "body": "I still can't wrap my head around how someone could get hate for contributing their time and knowledge to help humanity for free. It makes me lose hope in humanity.",
        "score": 2,
        "replies": []
      },
      {
        "author": "faustoc5",
        "body": "Free labor\n\nNobody ever mentions that open source is free labor that is used by multi million dollar companies for profit and as their infrastructure. For example Linux kernel is in all android phones and 99.999999% of the people disregard it, etc\n\nWhen there is so much dependency on free labor and these people stop working and there is no plan B then we see how shitty, precarious and broken the technology world is. Risk management assessments never takes this into consideration.",
        "score": 2,
        "replies": []
      }
    ]
  },
  {
    "title": "I'm a programmer and I'm stupid",
    "body": "",
    "score": 1163,
    "url": "",
    "created_utc": 1713855936.0,
    "author": "fagnerbrack",
    "permalink": "/r/programming/comments/1cay7xw/im_a_programmer_and_im_stupid/",
    "comments": [
      {
        "author": "xubaso",
        "body": "Reminds me of https://grugbrain.dev/\n\nActually both articles read like experienced developers giving their advice in a humorous way.",
        "score": 444,
        "replies": [
          {
            "author": "Tohnmeister",
            "body": "&gt; end to end tests good, show whole system work, but! hard to understand when break and drive grug crazy very often, sometimes grugs just end up ignoring because \"oh, that break all time\" very bad!\n\nOh man... This hits home.",
            "score": 192,
            "replies": []
          },
          {
            "author": "falconfetus8",
            "body": "&gt; javascript developers call very special complexity demon spirit in javascript \"callback hell\" because too much closure used by javascript libraries very sad but also javascript developer get what deserved let grug be frank\n\nNow that was just uncalled for.",
            "score": 117,
            "replies": [
              {
                "author": "[deleted]",
                "body": "As a backend dev that sometimes has to jump in and help out the front end team from time to time - it’s definitely called for.",
                "score": 42,
                "replies": []
              }
            ]
          },
          {
            "author": "SunnerLP",
            "body": "&gt; inexperienced big brain developer see nested loop and often say \"O(n^2)? Not on my watch!\"\n\nFuck, I just did exactly that today, way to call me out grug",
            "score": 23,
            "replies": [
              {
                "author": "Kiuhnm",
                "body": "Am I the only one who thinks it makes sense for watches as they are kind of underpowered?",
                "score": 14,
                "replies": [
                  {
                    "author": "SunnerLP",
                    "body": "Well, it's called \"**Premature** optimization is the root of all evil\" for a reason. If you program for low power devices, inefficient code will show its inefficiencies sooner than on your average desktop PC for example.\n\nIn my case I was reviewing some code that will likely not run on large amounts of data and will also run on devices that are fairly powerful. So it won't be much of a problem if it's a bit inefficient.\n\nIn my opinion, it's a trade-off between readability/maintainability and performance. If the code is super performance critical, it might make sense to sacrifice \"nice code\" to get performant code. If it's not really that much of a deal, it's better to ensure you and others can still understand the code in a few months.",
                    "score": 16,
                    "replies": [
                      {
                        "author": "Kiuhnm",
                        "body": "+1 You're perfectly right. That said, you know mine was a joke based on the double meaning of \"watch\", right? (\"Not on my watch!\")",
                        "score": 20,
                        "replies": [
                          {
                            "author": "SunnerLP",
                            "body": "Well, I do now xD",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "[deleted]",
                        "body": "Also worth considering how often it will be executed. \n\nI’ve actually seen someone take my code that processed data in 20 minutes, rewrite it so that it ran in 5 minutes. \n\nCongratulations! Well done! Wow! You’re superior!!!\n\nTook him 2 hours. It was to be used only once, ever. \n\nSo if it’s a process that runs once a year or something, don’t fret over a few minutes.",
                        "score": 5,
                        "replies": [
                          {
                            "author": "arobie1992",
                            "body": "I agree with your point, so none of this is meant as a rebuttal. It depends on circumstance. It just triggered a memory that's a fun story for me. It's nothing novel, but it was the first time this ever really slapped me in the face and how absolutely stark the difference was was funny to me at the time.\n\nWe were doing a table with selectable rows on a webpage that could display up to 10,000 rows. We had to do some customized behavior for the select all behavior. For, reasons\\*, the table didn't natively support this, but did provide plenty of event hooks so we could do it ourselves. We'd done something like this on a previous project where there was only about a max of 50 rows, so basically what i had it do, like in the earlier project, was when you clicked a row, it checked all the other rows to determine the check-all status. When you clicked check all, it did have the unfortunate effect of running that check for every row, so n-1 checks for n rows, hence n\\^2. Not optimal, but meh, no one noticed.\n\nBack to the big table. I did the same thing because I still had access to the old code and I'm lazy. Get it done and time to test. 10 rows: fine. 50 rows: fine. 100 rows: fine. Ok, so far so good. Let's load test. 10,000 rows: whole webpage locks up. I let it sit for a bit. Still locked up. Obviously, it's not acceptable for prod, but at this point I'm curious, so I decide to let it chug for a bit. I go get some tea and talk to one of my coworkers in the break room. Get back, and it's still locked up. At that point I think it'd been about 15-20 minutes. Since I do have things to do, I kill the page and start refactoring. Maybe about an hour and some squirreled away table-level state later, I have it at n time. Try 10 rows just make sure the logic works. It does, so I move on to the 10,000 case. Finishes in about 0.5 seconds; there's a semi-perceptible delay if you're really paying attention to it, but if you're not you don't notice it.\n\n\\*The table did support this, but only the paid version. I'd talked to my boss about getting approval for said paid version which wasn't terribly expensive, but we weren't sure it'd be approved in time for our release deadline, and I didn't really have the time to look for a new table library that supported this for free as well as rework all the other tables in the app so look and feel were consistent. I really hope they got that approval finally and threw away my jank.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Oh my god i love this 😂",
            "score": 19,
            "replies": []
          },
          {
            "author": "KaneDarks",
            "body": "Great article tbh\n\n&gt; ... javascript developer get what deserved let grug be frank\n\nGiggity",
            "score": 43,
            "replies": [
              {
                "author": "Infiniteh",
                "body": "My working life is a constant duality of being grug-brained and having a grug sticker on my laptop, while also working in Typescript",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "johny_james",
            "body": "Grug is way funnier to me.",
            "score": 9,
            "replies": []
          },
          {
            "author": "WhompWump",
            "body": "ironically I'm too stupid to understand this (too many layers of meta). I like the OP more",
            "score": 8,
            "replies": []
          },
          {
            "author": "ninthjhana",
            "body": "maybe same grug maybe not but this good [big yell](https://dynomight.net/grug/) on other subject",
            "score": 5,
            "replies": []
          },
          {
            "author": "mrdevlar",
            "body": "Literally came here to post this.\n\nSo I've been coding with an LLM lately, and I made a character sheet which is Grug through which I route all my assistance requests. I love it, he keeps me in check.",
            "score": 5,
            "replies": []
          },
          {
            "author": "stagnantdev",
            "body": "I miss Primate Programming Inc.",
            "score": 2,
            "replies": []
          },
          {
            "author": "danishjuggler21",
            "body": "&gt; world is ugly and gronky many times and so also must code be\n\nHard-to-swallow pill",
            "score": 2,
            "replies": []
          },
          {
            "author": "devalue4801",
            "body": "Grug taught CS at my college. Nice guy",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "returnnull",
        "body": "Programming made me so dumb that I ended up a manager 🙃",
        "score": 135,
        "replies": [
          {
            "author": "joerdie",
            "body": "Hey! That's me you're talking about!",
            "score": 26,
            "replies": []
          },
          {
            "author": "codeByNumber",
            "body": "How was the switch? I really enjoy programming but I’m also kind of looking forward in my career and realizing that maybe I actually don’t want to be an IC my whole career.\n\nI’m decently technically minded but there are certainly better engineers than me where I work. I tend to excel at working with product owners and really nailing down wtf they actually want and explaining the pros and cons of different possible solutions.",
            "score": 10,
            "replies": [
              {
                "author": "checkenginelight",
                "body": "I made the switch, so I can speak about this. I will start by saying that I think I'm a fairly decent programmer, but I moved into management relatively young (age 27). So I'm in the position you describe: I am by no means a better programmer than most of the people on my team.\n\nI think that if you excel at working with product owners and other \"soft skills\", then management might be for you. A manager who can argue for good outcomes for their team while being respected within their company is rare and cherished by their employees. That said, there's a good chance you'll end up missing coding. It's so fun, and managing can't replicate the problem solving high, in my experience.\n\nIt likely depends on what size of team you manage. I really enjoyed managing a team of 5-6 engineers, because I found enough time to code and help guide them. Now I manage managers and get almost no time to code. You have to be very mindful of graduating to that point and making sure it's the right move for you.",
                "score": 4,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Lily2468",
        "body": "I wish I had coworkers like this person.\n\nEverything has to be the most complex it can be nowadays. And coming into a new team and project you’re instantly overloaded, because nowadays we don’t just have a pipeline, we have a terraform, gitops and argocd. \nWe don’t just have logging, we have a prometheus, grafana and jaeger. \nWe don’t just have APIs, we have graphQL, with dapr in front, and a CQRS pattern to call what happens after. \n\nIt’s all great tech, but it’s a LOT!\nI wish I could write code and not spend all my time fixing configuration.",
        "score": 683,
        "replies": [
          {
            "author": "ascii",
            "body": "The best programmers choose the simplest solution that solves the problem. Always. \n\nThat said, at least most of the technologies you bring up are high quality products that when used in an appropriate environment, will help you solve very real problems. It's just that the majority of people don't actually *have* the problems that require microservices, GraphQL, NoSQL, Prometheus, Grafana, or Terraform to solve. They just think that the big boys (e.g. Google or Facebook) use those things, so they must be good. But unless you're processing Petabytes of data, and many millions QPS across multiple continents, most of those techs are inappropriate.",
            "score": 253,
            "replies": [
              {
                "author": "miyakohouou",
                "body": "&gt; The best programmers choose the simplest solution that solves the problem. Always. \n\nThe problem is that people don't always agree on what's simple. For example, some people will argue that dynamically typed languages are simpler because you don't have to think about types, and other people will argue that statically typed languages are simpler because the type checker will catch errors for you, allowing you to use your limited brain power to worry about other things. Some people will argue that large frameworks or languages with large standard libraries are simpler, because they already do everything you need. Other people will argue that they are too complicated to understand and writing what you need or using smaller individual libraries that only do what you need results in simpler code because you aren't paying for complexity you aren't using.\n\nThis seems to scale almost infinitely in both directions. I've heard first time programmers earnestly argue that functions and modules are too complicated and it's much simpler to just write all of your code as a stream of consciousness in one file. At the other end of the spectrum you have \"a monad is just a monoid in the category of endofunctors, what's the problem?\".\n\nIt seems to me like ultimately it comes down to the blub paradox. A ton of things are simpler once you understand them, and the industry as a whole seems to largely have settled on something somewhere in the middle as the \"correct\" level and everything above it is too complicated.",
                "score": 43,
                "replies": [
                  {
                    "author": "hippydipster",
                    "body": "&gt; For example, some people will argue that dynamically typed languages are simpler because you don't have to think about types, and other people will argue that statically typed languages are simpler because the type checker will catch errors for you, allowing you to use your limited brain power to worry about other things. \n\nSure, but some of those people are wrong.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "renatoathaydes",
                        "body": "Until you try to prove they're wrong and realize it's basically impossible.\nI am totally on the statically-typed languages side, but then you see Clojure/Common Lisp/Elixir people writing large software just as reliably as the Haskell people and you've got to question that.\n\nIt's usually the same with every one of these never-ending arguments, which is why they're not (and will likely never be) settled.",
                        "score": 8,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Kiuhnm",
                    "body": "&gt; A ton of things are simpler once you understand them,\n\nEven better: things are simpler when you don't have to understand them to use them.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "miyakohouou",
                        "body": "Not necessarily. There are ideas that can simplify the way you think about problems, but understanding the idea still requires effort. This is the nature of abstraction. Sometimes it's possible to use an abstraction without knowing what you're doing, but I don't think that's always desirable, and requiring that someone understand an abstraction isn't necessarily bad.\n\nThink about programming languages. They are an abstraction over the way the computer works, and people would generally agree that writing in a modern language is simpler than trying to build an entire program in assembly. Still, you have to understand how the language you're working with works if you want to build programs with it.",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "TryHardEggplant",
                "body": "And other engineering professions. KISS (Keep It Simple, Stupid) in some variant has been around and is a good principle to follow.",
                "score": 72,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "Any engineer can build a bridge that stands, it takes a great engineer to build a bridge that just barely stands",
                    "score": 63,
                    "replies": [
                      {
                        "author": "antagron1",
                        "body": "And it takes a g-d miracle worker to due it within cost and schedule targets!",
                        "score": 9,
                        "replies": [
                          {
                            "author": "double-you",
                            "body": "oh so instead of being one of those who think it is not okay to write \"god\" (even though it is not their god's name), and so they write \"g-d\", you are using it as \"god damn\"? That'll put a spicy twist into the conversation.",
                            "score": 12,
                            "replies": [
                              {
                                "author": "Torisen",
                                "body": "The funny part of that to me is that \"taking the lords name in vain\" is not saying god or Jesus, or inri, or Muhammad, or elohim or whatever, it's hiding under the cover of faith while not practicing the tenants, so most \"religious\" people who don't donate their wealth, heal the sick, welcome the stranger, etc.\n\nIt's masking your callous disregard for life and kindness under the vanity of \"the lords name\"",
                                "score": 17,
                                "replies": []
                              },
                              {
                                "author": "antagron1",
                                "body": "I hadn’t considered the - as a letter placeholder but I’m all for spicing up the conversation if possible.",
                                "score": 5,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "[deleted]",
                            "body": "G dash D damn it, Hammer!",
                            "score": 4,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Robert_Denby",
                    "body": "Keep it Stupid, Simple. Wait.",
                    "score": 8,
                    "replies": []
                  }
                ]
              },
              {
                "author": "boat-la-fds",
                "body": "You need to  be processing petabytes of data before using Prometheus, Grafana, or Terraform? So what do you do before that? Deploy everything manually and don't monitor shit?",
                "score": 31,
                "replies": [
                  {
                    "author": "ascii",
                    "body": "I work in one of those companies that *do* process petabytes and have been for a decade, so my knowledge on the latest and greatest in small scale monitoring is out of date. Back when, I used to use Munin, Zabbix and Nagios for monitoring. They're all a great deal easier to get going than Grafana and Prometheus, but I'd be disappointed if they haven't been replaced by something better. Not my field to know what, though. \n\nAnd yes, Terraform/gitops is complete overkill if all you have is a few dozen servers. Ansible or Puppet will give you to the same place with one tenth the work.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "boat-la-fds",
                        "body": "I didn't use Grafana myself but I've used Prometheus and it seems easy enough to use.\n\nI've used a bit Ansible and IMO it's not the same use cases as Terraform. Is there a state in Ansible? Can you deploy most cloud resources using Ansible?",
                        "score": 7,
                        "replies": [
                          {
                            "author": "rusmo",
                            "body": "Terraform is as exactly as complicated as you tell it to be. It’s absolutely fine for small-scale cloud-based projects.",
                            "score": 18,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "kinss",
                "body": "After having worked on a codebase with tens of millions lines of overcomplicated code and none of these tools I've reversed my position on this. I believe more of it comes from not properly pruning shit. All of these technologies save maybe complex metrics setups and graphql can be pretty damn useful when used correctly at ANY scale. The real problems arise when team members or managers aren't drinking the same Kool aid and don't properly buy in and learn. \n\nThe earlier in a product's lifecycle you learn to implement a lot of these tools the easier it is too.",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "tophatstuff",
            "body": "Fair, except terraform is so goooood and worth it even for a single server and a single domain name.",
            "score": 15,
            "replies": []
          },
          {
            "author": "flif",
            "body": "Just like we had a financial crisis in 2007 because people were overloaded with loans, I think some businesses in the future will be overloaded with code complexity.\n\n They will not be able to compete or will not be able to recover from a system breakdown.",
            "score": 39,
            "replies": [
              {
                "author": "slvrsnt",
                "body": "Lol ... SOME COMPANIES use that as a Strategy",
                "score": 13,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Resume driven development",
            "score": 11,
            "replies": [
              {
                "author": "renatoathaydes",
                "body": "Which is a fair thing for inexperienced devs to do. All jobs they want to apply for require all of those fancy techs, so if they don't get to learn at least some of them where they are, they may get stuck for a long time.\n\nTerrible for the company though. Which is why the company needs to have experienced people making these decisions.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Wgolyoko",
            "body": "They told me these tools would make me write less code. What they didn't tell me was that I'd be writing configurations instead",
            "score": 12,
            "replies": [
              {
                "author": "RoosterBrewster",
                "body": "So writing code to code?",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "rar_m",
            "body": "&gt; I wish I could write code and not spend all my time fixing configuration.\n\nSo true.",
            "score": 5,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 23,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 6,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "RadioFreeDoritos",
                "body": "Nothing wrong with distributed tracing. When you've got a browser, a backend, and a database, that's already a distributed system with three moving parts - being able to profile a request from start to finish can save you tons of headache.",
                "score": 4,
                "replies": [
                  {
                    "author": "free_chalupas",
                    "body": "There's a reason it's mostly called \"tracing\" these days. It's just a better way to instrument any system",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "MornwindShoma",
            "body": "From a point of view from mid size corporate.... How is that an issue really? \n\nIt's not my job to handle the ELK stack, or do DevOps, or run the K8s stuff. There's specialized people to do that. I currently make SPAs, and that's all I need to work on. If I had to ship the app myself, I would ship some static bundle. Even writing a dockerfile or making a simple pipeline is easy enough to be a 2 hour task.\n\nI get how things connect to each other, I don't really care about writing configs every day because it's more often than not a one and done deal.",
            "score": 12,
            "replies": [
              {
                "author": "Lily2468",
                "body": "Thats alright then, it’s a multi-team landscape and is big enough that the devOps topics are mostly covered by dedicated teams, it’s not really a problem.\nBut when you have a single team project, then that techstack is just wayyy too much.\n\nCurrently actually my team has approximately the infrastructure I mentioned within the team, so we do have to handle it all, and finding bugs that could be anywhere in any configuration or code, oftentimes in a system you never saw before, becomes really annoying.",
                "score": 13,
                "replies": []
              },
              {
                "author": "davlumbaz",
                "body": "&gt; there s specialized people to do that\n\nthat is the problem,  a role called devops shouldnt even be this important at the first place.",
                "score": 9,
                "replies": [
                  {
                    "author": "StackedQueue",
                    "body": "The “everybody devops” track is honestly awful. I hate the idea of having to know everything about every tool. I DE at a small shop and having to learn each tool because our devops guy was overloaded has been very time consuming and ate into a lot of my project times and blew multiple deadlines when I had to figure out details of k8s or EC2 that I would have gladly handed off. \nI can’t imagine what it’d be like with more complex systems. \n\nDevops, platform engineers etc should be “this important”. They provide consistency in deployment, consistency in expense, and consistency in reliability. Leaving that to all the individual teams and throwing yet another style document at them sounds like a recipe for disaster",
                    "score": 20,
                    "replies": []
                  },
                  {
                    "author": "BehindThyCamel",
                    "body": "I wish. Apparently, according to some people, dev teams doing their own devops is a good thing. So now every team at my company has to figure out the same dozen of technologies. What a waste of effort.",
                    "score": 16,
                    "replies": []
                  },
                  {
                    "author": "MornwindShoma",
                    "body": "If you have hundreds of applications and services online, perhaps it is. Someone still has to make sure that the infrastructure works, that there is accountancy on what's going on. You can't just ship and pray, and most developers don't have system or network skills, and rightfully so.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "sweetLew2",
                        "body": "Right but maybe hundreds of micro services is part of the problem too?",
                        "score": 4,
                        "replies": [
                          {
                            "author": "MornwindShoma",
                            "body": "It's hundreds of micro services when you have two dozen products in production, if you just assume there is at least a small number to take for granted (at least one user related service to handle sessions, some core domain service that is rarely just one, some sort of gateway, some sort of static file proxy say from a bucket, the FE service handling the UI) when doing a micro service architecture. \n\nMy current project uses half a dozen products from three major cloud and saas providers plus calls out to multiple different micro services from other products and those require additional processes. We developers didn't pick them, I didn't even pick the client lol.\n\nComplexity is real when you have dozens of thousands of users, many businesses relying on it for critical internal processes and need to adhere to strict data handling regulations.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "dijalektikator",
                        "body": "&gt; If you have hundreds of applications and services online, perhaps it is. \n\nMost companies that shovel all of that crap into their system usually don't. It's definitely a cargo cult at this point, at least in some places.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "MornwindShoma",
                            "body": "I pity those who do their jobs as a years long resume filling activity, yes.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "BehindThyCamel",
                "body": "I wish. Apparently, according to some people, dev teams doing their own devops is a good thing. So now every team at my company has to figure out the same dozen of technologies. What a waste of effort.",
                "score": 2,
                "replies": [
                  {
                    "author": "Tasgall",
                    "body": "&gt; So now every team at my company has to figure out the same dozen of technologies.\n\nWith no training, of course - you should just be magically familiar with their infrastructure from day one.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "evonhell",
            "body": "Yeah, maintaining all this overengineered infrastructure is going to be a blast in 10 years.\n\nCompanies who use 50 microservices deployed in kubernetes but they have like 500 users.. I mean, stuff like Kubernetes exist for a reason, it's the enormous companies that could benefit from them but they are only adding complexity to everyone else that uses them pretty much. That's a hill I'm willing to die on.\n\nMost stuff out there today could probably be a monolith that is easier to build; maintain and continue to develop.",
            "score": 4,
            "replies": []
          },
          {
            "author": "BehindThyCamel",
            "body": "This hits hard. Cloud is very useful but as a developer I've grown to hate it.",
            "score": 2,
            "replies": []
          },
          {
            "author": "kinss",
            "body": "Configuration IS code. These tools exist to solve real problems, especially when scaling. The complexity would honestly be much higher at the current scale of many platforms if it wasn't for these tools.",
            "score": 1,
            "replies": []
          },
          {
            "author": "tistalone",
            "body": "Does your company's promotion process involve having technically complex systems as a requirement?\n\nIf so, your company rewarded and incentivized folks for making things worse in this exact way!",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "icemelter4K",
        "body": "Working 6 years as a paid Python software dev. I can only hope to be as stupid as you are in 9 years. #stupidpeoplearepeopletoo",
        "score": 170,
        "replies": [
          {
            "author": "junior_dos_nachos",
            "body": "I will always hire a honest and self aware developer than a FAANG reject with a chip on his shoulder. I am not sure this Anton fella is stupid because his approach reminds mine and I am pretty sure not stupid (not very smart either, just enough to survive and enjoy)",
            "score": 45,
            "replies": [
              {
                "author": "icemelter4K",
                "body": "In my experience the most important skill in software is perseverance",
                "score": 45,
                "replies": [
                  {
                    "author": "junior_dos_nachos",
                    "body": "Yea. As a survivor of a major burnout that still enjoys coding, for sure",
                    "score": 12,
                    "replies": []
                  },
                  {
                    "author": "C_Madison",
                    "body": "ftfy: In my experience the most important skill is perseverance\n\nYes, you need a certain amount of intelligence. But that's only a necessary component, not sufficient. Going on and on in the face of whatever your job throws at you is the most important thing.",
                    "score": 8,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "TryHardEggplant",
            "body": "After reading this post, I don't know if I'm his version of stupid or just plain stupid. I've been in this industry for 17 years myself. Was a Ruby backend developer during the Ruby craze in the late 2000s, and at some point in my career got shoved in Python and DevOps and can't escape now.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "t0rakka",
        "body": "welcome to the club.. I am the dumbest idiot to ever write a line of code, I only do it because for some reason I find it \"fun\"",
        "score": 23,
        "replies": [
          {
            "author": "Blursed_Technique",
            "body": "No no, I'm the dumbest idiot to write a line of code.",
            "score": 3,
            "replies": [
              {
                "author": "[deleted]",
                "body": "you haven't read my code",
                "score": 2,
                "replies": [
                  {
                    "author": "that_guywho_raves",
                    "body": "If writing dumb code is cool, then consider me Miles Davis",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "creepy_doll",
        "body": "I more or less agree on everything he's doing except the microservices, but I will admit that there's a HUGE AMOUNT of microservice abuse where they make things more complicated because they're far too tightly coupled to one another.\n\nUltimately I feel the best solution is the simplest viable solution. If SQL is good enough for your scale, goddamn use it. And any kind of code that is \"magical\" should just get the hell out of here. It should be quickly apparent where behavior comes from and a lot of the \"tricks\" languages allow you to do now are great at solving todays problems at the cost of tomorrow.",
        "score": 31,
        "replies": [
          {
            "author": "ulyssesdot",
            "body": "SE radio had a good interview with Casey Muratori where Casey made the argument that microservices introduce code complexity (and performance bottlenecks) to solve an organizational problem. They're a good solution for that, but if your org doesn't need them, then they aren't worth the code and infrastructure overhead.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "pindab0ter",
        "body": "This sounds like a developer [Grug](https://grugbrain.dev/) would approve of.",
        "score": 12,
        "replies": []
      },
      {
        "author": "trxxruraxvr",
        "body": "I agree with most of that except his comment about rust. I use rust for my hobby projects because the rust compiler catches errors that I'm to stupid to catch myself.",
        "score": 21,
        "replies": [
          {
            "author": "renatoathaydes",
            "body": "Yes, but if you generally know how to fix the errors the compiler mercilessly throws at you at every dumb line you write, then you must be really smart.",
            "score": 2,
            "replies": [
              {
                "author": "trxxruraxvr",
                "body": "Or just do a lot of trial and error and use stackoverflow a lot",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "madmulita",
        "body": "I am really smart, future me is the moron.",
        "score": 8,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "&gt; I use the simplest mainstream language available (Go)\n\nPretty sure Go is not the simplest programming language out there. It has so many quirks I almost surrender. Dealing with json is painful, dealing with SQL is painful, dealing with any interface is painful, dealing with default values is painful, thousands if err != nil, mock here mock there, not to mention a tons of generated code, etc etc.\n\nAre you sure?\n\nBut at least it has generics now, which is nice.",
        "score": 9,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 99,
        "replies": [
          {
            "author": "[deleted]",
            "body": "I've seen more companies/teams that don't actually need kubernetes than the other way around.",
            "score": 90,
            "replies": []
          },
          {
            "author": "TheHollowJester",
            "body": "I thought Postgres was good for everything until I had to design and write an MVP for an app dealing with financial data; turns out timeseries databases exist for a reason :D",
            "score": 23,
            "replies": [
              {
                "author": "indigo945",
                "body": "TimescaleDB is proof that Postgres really *is* good for everything.",
                "score": 20,
                "replies": [
                  {
                    "author": "GooberMcNutly",
                    "body": "I use one Postgres’s db and store time series, LLM vector data and GIS data together and have systems that join all 3. It’s divine!",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "who_am_i_to_say_so",
                "body": "Out of curiosity, did you land on something like InfluxDB for financial data?",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "NotSoButFarOtherwise",
            "body": "The idea, I think, is more that it’s harder to retrofit scalability than it is to build it in from the start, and the productivity loss from complexity will be made up later on. (These points are debatable.)\n\nMost companies never need the scalability, but given that many of them are startups trying to hit it big, if you don’t think you’re going to reach that point you might as well not bother at all.",
            "score": 14,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 14,
                "replies": [
                  {
                    "author": "NotSoButFarOtherwise",
                    "body": "To take the perspective of someone who thinks scaling early is crucial (not that I necessarily agree - IMO it’s extremely dependent on the type of application) the concern is that you won’t get to the point where you can hire an army of developers if you can’t already scale. If you’re hunting for VC cash, the investors are going to want to see that you can scale before signing up. If you’re looking to get bought up, the buying company is going to want to roll your app out worldwide across all their users/customers on a short timetable which doesn’t allow for onboarding a large number of people (if they wanted it to take a year, they’d do it themselves). If you’re looking to grow organically and have an IPO, you might have more time - but you might also randomly go viral  and if nobody can use your service your brand is toast. The thing that changed Airbnb from yet another “Uber for X” startups to a household name and ultimately a unicorn was hurricane Sandy flooding New York. Opportunity may only knock once and if you’re serving 503s instead of answering the door you may not get another shot.\n\nBut as I said, you have to know your product and your market. I’ve worked on on-premise products where the customers don’t want horizontal scaling because they prefer a steady pace and predictable costs to shorter processing times but potentially large cloud bills.",
                    "score": 8,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Mewrulez99",
            "body": "\\*shards aggressively\\*",
            "score": 5,
            "replies": [
              {
                "author": "Glass_Scale_Throwawa",
                "body": "I've been in a company where a team applied the \"Postgres is the way\" mantra, and before you know it we were spending a few millions a month for 15 PG clusters on AWS RDS.\n\nThe company could afford it, but the department looked really bad because of it. We were spending much more than other departments without the corresponding revenues.",
                "score": 2,
                "replies": [
                  {
                    "author": "hackenschmidt",
                    "body": "&gt; a few millions a month for 15 PG clusters on AWS RDS.\n\nCalling bullshit on this.\n\nTake one of the most expensive PG offerings in RDS: Aurora serverless. Running a single 128 ACU serverless instance is only $15k/m. Even with 15 clusters, multi-az and/or multiple readers, you aren't even getting close to a million. And again, thats one of the most expensive options. Provisioned RIs are going to be less than half that. So the instances themselves, aren't why.\n\nA petabyte of storage is still only $230k. This is the *only* way you're going to be reaching millions of dollars in RDS spent with PG, and you'd basically need to have on the order of 10+ petabytes in postgres. The serious architecture design problem aside, that is impossible with PG in RDS. The Aurora cluster limit is 128Tb, and standard PG even less. \n\nSo even if you pushing the absolute limits of RDS, you'd barely be getting a $1 million RDS spend on 15 clusters. Yeah, there are other billing facets (like cross-az traffic), but several times that, is far beyond questionable. Thats extreme negligence or even just pure fraud somewhere in the company\n\n\n&gt; but the department looked really bad because of it. \n\nAs they should. Thats some serious mismanagement.",
                    "score": 15,
                    "replies": []
                  },
                  {
                    "author": "indigo945",
                    "body": "15 clusters does not seem like a lot, though? I mean, if you have the kind of data where a single PG cluster *won't* cut it, paying for 15 servers doesn't seem insane... that's barely a single rack!",
                    "score": 4,
                    "replies": [
                      {
                        "author": "timmyotc",
                        "body": "I think that's the point of comparing it to revenue - They were taking in a ton of data because they wanted to lean so heavily on PG that they felt it was their strength and that's where they wanted to invest their engineering effort. But they weren't taking in the cash to justify that kind of infra expense.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Soldjaboy52",
                    "body": "Could you please explain what did they do wrong and how could one go about solving this?\n\n\nSorry, I haven't got much experience with databases:)",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "GooberMcNutly",
            "body": "All that less-is-more goes right out the window at 3 9s SLA. At 4 or 5 nines you have systems of those systems. I guess you could write it yourself, no dependencies, flat file structure, then write it to your floppy disc and put it in the drawer for the night.\n\nLife is not a blog post.",
            "score": 2,
            "replies": []
          },
          {
            "author": "beyphy",
            "body": "&gt; There seems to be a recurring strawman in software engineering claiming nobody needs those, and they just bring complexity for no good reason.\n\nStuff like that happens on Reddit all the time. While it happens in software engineering it also happens for other stuff as well. Lots of people promote self-serving narratives. An example of something of that general structure might be like:\n\n&gt; Nobody uses {thing that's hard or that I happen to not be good at}. Everybody uses {thing that's easy or that's hard but that I happen to be good at}",
            "score": 2,
            "replies": []
          },
          {
            "author": "WileEPeyote",
            "body": "There are many projects within mid-sized and FAANGs that don't need it though. I've been involved in several over-engineered projects that were, in the end, used by less than 100 internal users.",
            "score": 4,
            "replies": []
          },
          {
            "author": "johny_james",
            "body": "Wait, how do you think that most need Kubernetes?\n\nReality is the other way around.\n\nYou don't need a full-blown cluster at all, either VMs managed with Ansible, or just Docker containers.",
            "score": 3,
            "replies": [
              {
                "author": "Old_Elk2003",
                "body": "High availability is non-negotiable for me, because I don’t like early-morning phone calls.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "clarkcox3",
        "body": "As I explained to my wife (girlfriend at the time), programming is just what I call “applied laziness”. I write code in an effort to not have to write more later. Tests, best practices, etc. are just tools to allow me to be lazier in the future.",
        "score": 6,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "The whole point of computers is that you tell them how to do something once and they can do it over and over and over again. The whole point of programmers is to do the telling.\n\nThe number of programmers I encounter who are happy performing a rote set of actions every day or every few days is just nuts.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "_thelastwildpoet_",
        "body": "This piece is an excellent demonstration of the difference between intelligence and wisdom. You're stuck with the intelligence you're born with, but wisdom is learned and can be intentionally cultivated if you're willing to expand your horizons.\n\nIntelligence's effect is tactical. Wisdom's is strategic.  Wisdom can plan for the failure of intelligence, but intelligence cannot plan for the failure of wisdom.\n\nThe author may feel they've not started their careers with as much intelligence as their peers, but they've developed the wisdom to build systems that don't rely on high-level intelligence to function or maintain - which are vastly more valuable than the alternative provided that the project's goals are fulfilled. Not every system needs to be a sports car, and there's no need for every programmer to be Dale Earnhart. \n\nAnd it's a fact that the world needs more truckers than it does race car drivers.",
        "score": 13,
        "replies": [
          {
            "author": "fagnerbrack",
            "body": "&gt; Intelligence's effect is tactical. Wisdom's is strategic.  Wisdom can plan for the failure of intelligence, but intelligence cannot plan for the failure of wisdom.\n\nThat alone is the best insight I’ve seen for a number of weeks now.",
            "score": 5,
            "replies": []
          },
          {
            "author": "_nobody_else_",
            "body": "Well said.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "richardathome",
        "body": "ie. \"The simplest thing that works, but no simpler.\"\n\nIt's been my mantra my whole coding career (decades). Code I wrote 20 years ago is still running / being maintained to this day.",
        "score": 13,
        "replies": []
      },
      {
        "author": "aanzeijar",
        "body": "Same author: [Idempotent close in Go](https://antonz.org/idempotent-close/)\n\nDo not confuse his humblebrags with actual stupidity. He knows what he's doing albeit with terrible taste in languages.",
        "score": 39,
        "replies": [
          {
            "author": "a_deneb",
            "body": "You're calling Go a terrible language?",
            "score": 7,
            "replies": [
              {
                "author": "aanzeijar",
                "body": "I do.",
                "score": 20,
                "replies": []
              },
              {
                "author": "DenkJu",
                "body": "It absolutely is. I recommend [this article](https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride).",
                "score": 7,
                "replies": [
                  {
                    "author": "touristtam",
                    "body": "&gt; I like to remind everyone that we're not out there cheering for sports team, just discussing our tools.\n\nGold",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "invisi1407",
            "body": "The concept of idempotence isn't really complex for what that article demonstrates.",
            "score": 3,
            "replies": []
          },
          {
            "author": "epic_pork",
            "body": "Should use a sync.Once instead of bool + sync.Mutex",
            "score": 1,
            "replies": []
          },
          {
            "author": "dikkie91",
            "body": "Do you think he’s really a humblebrag? I mean I get where he’s coming from and can understand calling yourself stupid with all this difficult modern technology..",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "GeoffW1",
        "body": "&gt; I can't really follow complex dependencies in a code base.\n\nI don't think anyone can, right ... though some developers seem to be more confident in their *assumptions* than others.",
        "score": 18,
        "replies": [
          {
            "author": "junior_dos_nachos",
            "body": "Only those that designed it and only if it happened within the last year and only if they are still active in this code base",
            "score": 19,
            "replies": [
              {
                "author": "supermitsuba",
                "body": "Started on a project in the past year.  I know mostly how it works from blackbox test / seeing how it works from the UI perspective.  Had to show the group a code review to a new team lead.  I was sad because as I was going to through the code, I quickly realized how big of a mess it was.  Lots of indirection and abstractions that really could have been boiled down to a simple pipeline.  There I realized that the original authors intent was lost.  Sometimes people bolt on things so much and lose track of the purpose.  Got to keep the intent simple and easy to convey in the code and architecture so new people can come in and understand.",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 9,
        "replies": [
          {
            "author": "supermitsuba",
            "body": "I cant believe the author uses zero external dependencies.  Some are needed for web development and all sorts of things.  I doubt they are talking about writing that.  But I see it as the case of JavaScript libraries like lodash that have many functions that do the same thing as built in functions.  Like you said, I don’t want to write code I don’t have to.\n\nBut is the author just describing not wanting to learn about new technology, which is super important in our field?  Or do they just don’t want to be bleeding edge?",
            "score": 4,
            "replies": [
              {
                "author": "johanneswelsch",
                "body": "Theoretically, you can actually write a full stack app in Go with only one dependency (you need a database driver).",
                "score": 2,
                "replies": [
                  {
                    "author": "supermitsuba",
                    "body": "But does it make sense to, and can you do a lot without external packages?\n\nI’m starting to think the author isn’t a programmer but uses programming to do the job they need.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "johanneswelsch",
                        "body": "It does in some way and it is prevalent in the Go community. This is what I am doing right now with Go templates. Your code will not be outdated in 5 years. Whereas if you do use lots of packages, most of them will be outdated in 5 years.\n\nLearning Go made me a better developer imho. If I now have a problem I try to first solve it with the standard library and if that is too complicated and bug prone, then I use a package.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "PeachScary413",
        "body": "Is this just a humble brag post in disguise?",
        "score": 21,
        "replies": [
          {
            "author": "ShinyHappyREM",
            "body": "How is\n\n&gt; my mental capacity is very limited. I find even easier Leetcode problems challenging. Reading about a basic consensus algorithm makes my head explode. I can't really follow complex dependencies in a code base. I can't learn a fancy language like Rust (I tried, but honestly, it's too much). I hate microservices and modern frontends because there are so many moving parts, I can't keep track of them all\n\na brag?",
            "score": 18,
            "replies": [
              {
                "author": "PeachScary413",
                "body": "It's the 4000 IQ reverse-brag, you make it seem like you are in fact really stupid but.. you discovered something unique and you are special in contrast to all the other sheep that don't even know they don't need those shiny new tools, you have a special intuitive understanding that no one else has.. which in fact makes you the smarter one.",
                "score": 21,
                "replies": []
              }
            ]
          },
          {
            "author": "junior_dos_nachos",
            "body": "No. A lot of points are valid. I wish all the big brains I know and worked with read and digest this article",
            "score": 4,
            "replies": [
              {
                "author": "PeachScary413",
                "body": "This just reads to me like \"I'm actually the biggest brain because I'm smart enough to figure out things that I don't need to use\"..",
                "score": 8,
                "replies": [
                  {
                    "author": "mfizzled",
                    "body": "Seems like the bar is pretty low if you consider someone explaining that their job role doesn't require a complicated tech stack to be humble bragging. Just seems like a person explaining that their simple problem only requires a simple solution.",
                    "score": 18,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "fruityloooops",
        "body": "is this a made up personality to call out as many bad traits about the reader as possible",
        "score": 3,
        "replies": []
      },
      {
        "author": "fagnerbrack",
        "body": "**Snapshot summary:**\n\nThis post candidly explores the author's self-professed limitations in understanding complex programming concepts, despite 15 years of experience. Admitting struggles with advanced algorithms, dependencies, and languages like Rust, the author emphasizes simplicity in their work. By using mainstream languages like Go and Python, avoiding deep abstractions, and minimizing external dependencies, they craft understandable and maintainable code. The author also values clear module design, basic resilience patterns, and thorough documentation. Despite their simplicity, the software they develop meets user and business needs effectively, proving that embracing one's limitations can lead to success.\n\nIf you don't like the summary, just downvote and I'll try to delete the comment eventually 👍\n\n[^(Click here for more info, I read all comments)](https://www.reddit.com/user/fagnerbrack/comments/195jgst/faq_are_you_a_bot/)",
        "score": 26,
        "replies": [
          {
            "author": "tav_stuff",
            "body": "Real talk this reads nothing like ‘I’m stupid’ and everything like ‘I’m allergic to complexity’. Unfortunately modern software engineering is all about making everything as complicated as possible to fit some ‘optimal’ abstraction.",
            "score": 42,
            "replies": [
              {
                "author": "creepy_doll",
                "body": "&gt; Unfortunately modern software engineering is all about making everything as complicated as possible to fit some ‘optimal’ abstraction.\n\nA lot of the time it's just a dickwaving competition",
                "score": 13,
                "replies": []
              },
              {
                "author": "richardathome",
                "body": "Premature abstraction is the root of all evil!!!",
                "score": 8,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "nierama2019810938135",
        "body": "Working with smart developers is a nightmare. I thought I was somewhat smart until a really smart and senior developer told me I'm an idiot. From the top of his lungs.\n\nThe smart or \"clever\" developer will write clever code. And when it gets hard for the average developer to understand, read, refactor, maintain, then the clever developer throws a fit and tells everyone how stupid they are. Then they usually do the thing themselves all by their lonesome, because that is faster.\n\nHaving smart developers who write clever code is expensive. The smart ones cost more to begin with, and you need more smart ones to follow the other smart ones you already have. The pool of smart developers is tiny, for obvious reasons, which just makes them even more expensive. They are also detrimental to morale, productivity, and collaboration.\n\nI found that the average developer is the best, and the smart developer is the worst. I even prefer a dumb developer to the smart one.\n\nUnless it is a really smart one who code as if they are average, and show me how to do things if I don't get it. I love those. Throw money at those.",
        "score": 11,
        "replies": [
          {
            "author": "supermitsuba",
            "body": "Doesn’t sound like the problem is smart or dumb, sounds like people need to be humble and accept feedback.",
            "score": 17,
            "replies": [
              {
                "author": "nierama2019810938135",
                "body": "Yes, I think that might be my point, clumsily made, and stupidly written :(",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "Critical_Impact",
            "body": "A smart developer writes code that's clear to someone with enough knowledge. If they are writing \"clever\" code that's hard to read and hard to maintain they aren't smart",
            "score": 9,
            "replies": []
          },
          {
            "author": "Mickl193",
            "body": "If the code is smart but unmaintainable then it’s not smart at all. There’s really a very very limited set of jobs where you need to create ultra performant coding masterpieces. In all other applications maintainability and feature development time are much much more valuable. Worst case you just throw money at the problem more often than not it’s cheaper than some dev’s time spent optimizing 🤷‍♂️",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "moolcool",
        "body": "&gt;I hate microservices and modern frontends because there are so many moving parts, I can't keep track of them all  \n  \nThis guy might be on to something",
        "score": 6,
        "replies": []
      },
      {
        "author": "DoneItDuncan",
        "body": "Can you please replace my coworkers",
        "score": 4,
        "replies": []
      },
      {
        "author": "yanitrix",
        "body": "Sometimes I feel like developers want to follow any principle - whether it's SOLID or something else - except for one: KISS. And then you get \"clear code\" (according to some made-up rules) that is actually complicated",
        "score": 5,
        "replies": []
      },
      {
        "author": "anki_steve",
        "body": "I’m super dumb. I still code in Perl and see no reason to change. It does what I need it to do.",
        "score": 5,
        "replies": [
          {
            "author": "hippydipster",
            "body": "Finally, true stupidity!  I commend you, sir.",
            "score": 11,
            "replies": []
          },
          {
            "author": "PM_Me_Your_Java_HW",
            "body": "Serious question, are you older than 45?",
            "score": 3,
            "replies": [
              {
                "author": "anki_steve",
                "body": "Reverse that number.",
                "score": 3,
                "replies": [
                  {
                    "author": "vplatt",
                    "body": "So, you're 211.  Got it!\n\n&gt;!Decimal: 45!&lt;\n\n&gt;!Binary: 0010 1101!&lt;\n\n&gt;!Complement: 1101 0011!&lt;\n\n&gt;!Decimal: 211!&lt;",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "hagenbuch",
        "body": "40 years professional experience, never only coding but still. I am even more stupid but some of my code runs 19 years now.",
        "score": 3,
        "replies": [
          {
            "author": "DeRoeVanZwartePiet",
            "body": "&gt;but some of my code runs 19 years now\n\nBecause it's to complex that nobody dares to touch it ?\n\nJust kidding ;)  \nI have some running for 13 years and it's still going strong.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "chakan2",
        "body": "After 8 years or so in Python, man I feel this. \n\nI'm so sad to see Python quickly going the way of JavaScript in terms of complexity and dependencies.",
        "score": 2,
        "replies": []
      },
      {
        "author": "mereszeta",
        "body": "This is just a humble flex, I feel being taken advantage of- the culture of us, stupid people is not your LinkedIn feel good story.",
        "score": 1,
        "replies": []
      },
      {
        "author": "barraymian",
        "body": "Can someone explain to me what he means by \"I always choose composition over inheritance or mixins\"? Ya, I'm stupid...",
        "score": 1,
        "replies": [
          {
            "author": "clarkcox3",
            "body": "If you’re making something that is similar, but a bit different, to something else, you basically have three choices:\n- Rewrite; rewrite it from scratch or copy it\n- Inheritance; write code that inherits from the original code (e.g. make a subclass)\n- Composition; write code that uses/wraps the original code",
            "score": 3,
            "replies": []
          },
          {
            "author": "arobie1992",
            "body": "I know I'm late, but I don't much like any of the explanations. They're a bit too focused on the philosophy rather than explaining what the difference is. Also, none actually address mixins.\n\nBy inheritance, the author likely means class subtyping, as opposed to interface subtyping. Composition is where you nest classes that you would use as parent classes and delegate calls to them by using a common parent interface. I'll use Java-ish code and a \"file system\" to illustrate. First you have your interface:\n\n    interface FileSystem {\n        String readFile(String fileName)\n        void writeFile(String fileName, String contents)\n    }\n\nSay you need to support Windows, and Linux. Windows has 7 and 10 which share some behavior. Linux has Ubuntu and Arch. I'm going to focus on Windows since Linux would be pretty much identical. In inheritance:\n\n    abstract class WindowsFS implements FileSystem { \n        String readFile(String fileName) { \n            // shared logic \n        } \n        void writeFile(String fileName, String contents) { \n            // shared logic \n        } \n    }\n    \n    public class Windows7FS extends WindowsFS {\n        String readFile(String fileName) {\n            // custom logic\n            return super.readFile(fileName)\n        }\n    }\n    \n    class Windows10FS extends WindowsFS {\n        String writeFile(String fileName, String contents) {\n            // custom logic\n            super.writeFile(fileName, contents)\n        }\n    }\n\nEach subclass only overrides the method it needs to customize. This reduces duplicated code and lets you transparently inherit extensions to the parent class. The two problems are this can be overdone so you end up with complex inheritance structures and don't know which class in the inheritance call chain is actually handling the behavior, and sometimes you don't want to transparently inherit extensions.\n\nIn composition:\n\n    class WindowsFS implements FileSystem {\n        String readFile(String fileName) {\n            // shared logic\n        }\n    \n        void writeFile(String fileName, String contents) {\n            // shared logic\n        }\n    }\n    \n    class Windows7FS implements FileSystem {\n        private const windowsFS = new WindowsFS();\n    \n        String readFile(String fileName) {\n            // custom logic\n            return windowsFS.readFile(fileName);\n        }\n    \n        void writeFile(String fileName, String contents) {\n            windowsFS.writeFile(fileName, contents);\n        }\n    }\n    \n    class Windows10FS extends WindowsFS {\n        private const windowsFS = new WindowsFS()\n    \n        String readFile(String fileName) {\n             return windowsFS.readFile(fileName)\n        }\n    \n        void writeFile(String fileName, String contents) {\n            // custom logic\n            windowsFS.writeFile(fileName, contents)\n        }\n    }\n\nThere's more code. But the advantages are that there's a visible chain of delegation, not as much risk of ending up with complex inheritance hierarchies, and if someone modifies `WindowsFS`, it's not automatically exposed.\n\nNow mixins. Java doesn't have them, so this is more made up. I'm also basing this on Ruby, which I'm not an expert in, so some of this may be a bit off, and languages may differ. Generally speaking, mixins are a way of simulating multiple inheritance. Keeping with the FS example, say you also have an `OpenBSDFS` class. Turns out both Ubutu and OpenBSD need a `boolean probe(String fileName)` that happens to be identical behavior. You'd like to reuse that behavior in Ubutu, but OpenBSD isn't Linux and vice versa so it doesn't make sense to inherit either way, so you use mixins. First pass:\n\nclass UbuntuFS extends LinuxFS { mixin OpenBSDFS\n\n        String readFile(String fileName) {\n            var contents = super.readFile(String fileName)\n            // custom logic\n            return contents\n        }\n    }\n\nThe problem is mixins take priority. So you end up with `OpenBSDFS`'s `writeFile` behvioar. A second pass:\n\n    class UbuntuFS implements FileSystem {\n        mixin LinuxFS\n        mixin OpenBSDFS\n    \n        String readFile(String fileName) {\n            var contents = mixin.readFile(String fileName)\n            // custom logic\n            return contents\n        }\n    }\n\nTurns out the last declared mixin takes priority, so you still have the same issue. Even worse, you're actually using `OpenBSDFS`'s `readFile` behavior too. Finally, a working one:\n\n    class UbuntuFS implements FileSystem {\n        mixin OpenBSDFS\n        mixin LinuxFS\n        \n        String readFile(String fileName) {\n            var contents = mixin.readFile(String fileName)\n            // custom logic\n            return contents\n        }\n    }\n\nYou still have the same issues as with inheritance. There's not a visible delegation hierarchy, and if someone implements `probe` on `LinuxFS`, your code breaks.\n\nIn composition:\n\n    class UbuntuFS implements FileSystem {\n        private const openBSDFS = new OpenBSDFS()\n        private const linuxFS = new LinuxFS()\n        \n        String readFile(String fileName) {\n            var contents = linuxFS.readFile(String fileName)\n            // custom logic\n            return contents\n        }\n    \n        void writeFile(String fileName, String contents) {\n            linuxFS.writeFile(fileName, contents)\n        }\n    \n        public boolean probeFile(String fileName) {\n            return openBSDFS.probeFile(fileName)\n        }\n    }\n\nMore code, but there's a visible delegation path and you don't have to worry about `probe` being added to `LinuxFS`.\n\nThe part other people have mentioned about \"is a\" and \"has a\" is about when each is appropriate. I also suspect that's not necessarily what the original author of the blog post had in mind as there's been a strong swing against class inheritance to the point where some languages like [Go intentionally don't support it](https://go.dev/doc/faq#inheritance).\n\nAnyway, I'm getting sidetracked. In the case of the \"is a\" and \"has a\" advice, Windows 7 and 10 are Windows file systems, and same for Ubuntu, Arch, and Linux, so the advice would suggest inheritance. By contrast, `UbuntuFS` might have a list of existing files to make sure you can only read files that exist; in this case, the advice would suggest using composition. Mixins actually don't factor into this advice because they're not super common, but they'd probably fall into a gray area between \"is a\" and \"has a.\"\n\nThat was longer than intended, but sunk cost and whatnot. If you have any questions, feel free to ask.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "AirborneHedgehog",
        "body": "\"Welcome to the party, pal!\"\n\nNo matter how smart you think you are, there's always going to be someone around that's smarter.\n\nThis stuff might not come easily to you, and *that's OK.* Do what you can with what you have.  You don't have to be the smartest guy in the room to succeed.",
        "score": 1,
        "replies": []
      },
      {
        "author": "ImaginaryCoolName",
        "body": "I want to take coffee breaks with Grug",
        "score": 1,
        "replies": []
      },
      {
        "author": "18randomcharacters",
        "body": "I feel like I could have written this.",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "I like it a lot but I prefer languages that have type and variable name in the correct order so I avoid Go, Scala, etc. That's a preference, it's easier on my brain.\n\nI tend to mostly only use inheritance in one place these days. In tests, I create a TestBase which houses common methods that all or most of my tests use to avoid repeating them in each test class (DRY).\n\nI don't use nginx, not for any logical or technological reason, merely because it was made by Russians (or at least one Russian) so I use Apache. It's not sleek or sexy, it's a work horse.\n\nI've never used GraphQL so I can't say I wouldn't ever use it though I do know REST/JSON work so well it's difficult to say whether I'd ever warm up to GraphQL, perhaps.\n\nI do like microservices and queues. They are more complex but by distributing logic and work using them, it makes it ~~easier~~ more tenable, to update/upgrade code over a long time with engineers (like me) who job hop a lot, for what we at least think are principled reasons.\n\nOverall good blog post, simple is almost always better.",
        "score": 1,
        "replies": []
      },
      {
        "author": "parker_fly",
        "body": "I have never felt so *seen*.",
        "score": 1,
        "replies": []
      },
      {
        "author": "martinator001",
        "body": "A tool exists because there is a use case, which you might or might not have. As always, you shouldn't default to overcomplicating things, but don't reinvent the wheel either",
        "score": 1,
        "replies": []
      },
      {
        "author": "johanneswelsch",
        "body": "Are you saying I should not put each letter of Hello, world! into its own microservice and run it in a distributed system so that my users can enjoy the fastest response there is?",
        "score": 1,
        "replies": [
          {
            "author": "Infiniteh",
            "body": "&gt; Hello, wnullrld!",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "Tux-Lector",
        "body": "This is actually one very nice and refreshing article. Unique of a kind. And straight to the point. And what else is notable here ? The fact that person who wrote the article, actually really wrote a lots of manuals, docs and howTo's, as it is stated. In the short story.",
        "score": 1,
        "replies": []
      },
      {
        "author": "kwinz",
        "body": "Ok.",
        "score": 1,
        "replies": []
      },
      {
        "author": "genericdeveloper",
        "body": "Yeah we know. We all are.\n\nGet to the back of the line.",
        "score": 1,
        "replies": []
      },
      {
        "author": "joesii",
        "body": "(This isn't facetious/sarcasm right? Or am I the dumb one?)\n\nI have doubts that they're actually stupid. Or they really didn't seem to give any sufficient evidence for it.\n\nJust seems to be low self confidence, imposter syndrome, or even humble, and probably a KISS advocate.\n\nProgramming is inherently an intellectual action that is probably only viable for like the top 20% of people or something. At best he's only dumb for a programmer of that much experience in that field or something (which is very specific).",
        "score": 1,
        "replies": []
      },
      {
        "author": "jeaanj3443",
        "body": "The simplicity in the tech stack approach is refreshing. It reminds us that not every project needs to scale like Google's to be successful.",
        "score": 1,
        "replies": []
      },
      {
        "author": "jeffrey_f",
        "body": "When you need a solution KISS - Keep It Simple Stupid.  A convoluted method to do these things aren't always faster because of the complexities in creating it while Go, R or Python may be easier to get it done.",
        "score": 1,
        "replies": []
      },
      {
        "author": "bpg542",
        "body": "I wish we had more dumb people like you at our company",
        "score": 1,
        "replies": []
      },
      {
        "author": "Mamoulian",
        "body": "&gt; I apply basic resilience patterns like timeouts, circuit breakers, and backpressure\n\n\nHow is backpressure handled in this context?",
        "score": 1,
        "replies": []
      },
      {
        "author": "crozone",
        "body": "&gt; It won't impress a Google engineer, that's for sure. \n\nYou'd be surprised, what is described here is basically Google's approach to software too - why do you think they all use Go? Because the code needs to be picked up and worked on by many different people who don't have time to understand it super deeply, mostly contractors.",
        "score": 1,
        "replies": []
      },
      {
        "author": "TidalCheyange",
        "body": "Me too",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "I'm computer smart but everything else stupid",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "Microsoft has open sourced its new cross-platform virtual machine layer written in Rust",
    "body": "",
    "score": 1159,
    "url": "",
    "created_utc": 1729148154.0,
    "author": "mareek",
    "permalink": "/r/programming/comments/1g5kxl2/microsoft_has_open_sourced_its_new_crossplatform/",
    "comments": [
      {
        "author": "_zenith",
        "body": "This is very cool, and a valuable learning opportunity as well (reading its code and how they do some complex stuff) even if you don't plan to use this package!\n\nedit: This [`unsafe` code policy](https://openvmm.dev/dev_guide/contrib/code.html#unsafe-code-policy) is a great demonstration of how useful it is having such code contained to explicitly defined areas that are readily searchable and thus identifiable for putting additional scrutiny to that code. In particular, this part:\n&gt;Editing a file containing unsafe code will trigger CI to automatically add the OpenVMM Unsafe Approvers group to your PR. This is to ensure that all unsafe code is audited for correctness by area experts.",
        "score": 474,
        "replies": [
          {
            "author": "jxf",
            "body": "Q: I scanned the repository but couldn't find this easily -- do we know where the rules that CI enforces are encoded?",
            "score": 59,
            "replies": [
              {
                "author": "tecnofauno",
                "body": ".github/scripts/add_unsafe_reviewers/add-unsafe-reviewers.py",
                "score": 87,
                "replies": [
                  {
                    "author": "jxf",
                    "body": "I think that's a different part, where they add the reviewers. I was talking about [this check](https://openvmm.dev/dev_guide/contrib/code.html#unsafe-code-policy):\n\n&gt; These requirements are enforced by CI, and will cause the build to fail if required documentation is missing.\n\nI think your link enforces this check:\n\n&gt; Editing a file containing unsafe code will trigger CI to automatically add the OpenVMM Unsafe Approvers group to your PR. This is to ensure that all unsafe code is audited for correctness by area experts.",
                    "score": 29,
                    "replies": [
                      {
                        "author": "Halkcyon",
                        "body": "`SAFETY` comments are enforced via clippy/lints.\n\nhttps://github.com/microsoft/openvmm/blob/e3b4401a48014716eb18cdd2b773f740128faca0/openhcl/hcl/src/lib.rs#L7-L9",
                        "score": 54,
                        "replies": [
                          {
                            "author": "PublicFurryAccount",
                            "body": "“It looks like you’re trying to write some unsafe code”",
                            "score": 39,
                            "replies": [
                              {
                                "author": "[deleted]",
                                "body": "[deleted]",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "jxf",
                            "body": "Got it, and thank you for the clarification. So it's not that CI is doing something special to check this specifically (which explains why I couldn't find anything), it's just that clippy will fail.",
                            "score": 12,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "smalis-msft",
                        "body": "As the comment above said the SAFETY comments are enforced by clippy. However the UNSAFETY comments are a custom lint living in https://github.com/microsoft/openvmm/blob/32d2c07cdbdadbe3c1c6aea452aa5f3c4d7ec305/xtask/src/tasks/fmt/house_rules/unsafe_code_comment.rs",
                        "score": 9,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "_zenith",
                "body": "No, sorry! I had trouble finding it in a quick look, too, too unfamiliar with the layout. The workflows seems to be controlled by the `flowey` module, but as to the actual CI config (presumably, parameters for calling into flowey), I couldn't find it.\n\nIs it possible that it's not in the repo, because it contains API keys also? Just a thought. I'm not sure how GitHub works when it comes to CI, having never used it there.",
                "score": 5,
                "replies": [
                  {
                    "author": "daniel5151",
                    "body": "It's actually the other way around - `flowey` is a Rust framework for writing workflows that can run locally, as well as be \"compiled\" to YAML.\n\nThe source for our primary PR and CI pipelines are in https://github.com/microsoft/openvmm/blob/main/flowey/flowey_hvlite/src/pipelines/checkin_gates.rs",
                    "score": 14,
                    "replies": [
                      {
                        "author": "_zenith",
                        "body": "That’s even cooler than I thought then 👍 nice",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 5,
                    "replies": [
                      {
                        "author": "_zenith",
                        "body": "I agree, that is indeed much more likely. I mentioned it only for completeness, really.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 3,
                            "replies": [
                              {
                                "author": "_zenith",
                                "body": "Ah, nice, yes that is an extensive workflow script indeed...\n\nAnyway, I think I found the unsafe code review bit: https://github.com/microsoft/openvmm/blob/main/.github/workflows/unsafe-reviewers.yml\n\nIt calls https://github.com/microsoft/openvmm/blob/main/.github/scripts/add_unsafe_reviewers/add-unsafe-reviewers.py for the actual keywork check",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "fiah84",
            "body": "&gt; This is to ensure that all unsafe code is audited for correctness by area experts.\n\nwell that's one way to get compliance from your developers. I approve, this way they know damn well to avoid anything unsafe unless they really *really* know what they're doing",
            "score": 13,
            "replies": [
              {
                "author": "Temporary-Pea-9665",
                "body": "I’d stamp everything",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "teh_mICON",
            "body": "edge abundant safe silky familiar fine screw domineering nutty market\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
            "score": 2,
            "replies": [
              {
                "author": "angelicosphosphoros",
                "body": "It is because it is C APIs that cannot verify automatically that you use them correctly. It is possible to write a safe wrapper around them, for example, std library of Rust is a such wrapper for many APIs.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "smalis-msft",
        "body": "Hey all, one of the devs here! We didn't expect this to hit reddit so quickly haha, but we'll be paying attention and answering your questions. We're very excited to finally be able to share this with the world.",
        "score": 189,
        "replies": [
          {
            "author": "shevy-java",
            "body": "I think context is needed for people who aren't well versed in the Rust ecosystem.",
            "score": 36,
            "replies": [
              {
                "author": "smalis-msft",
                "body": "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/openhcl-the-new-open-source-paravisor/ba-p/4273172 just got published!",
                "score": 57,
                "replies": [
                  {
                    "author": "topherhead",
                    "body": "You're killing it, smalis!",
                    "score": 25,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "jaskij",
            "body": "I'm curious, is it at all connected with the recent news I saw about MS sending code to Linux to make it work as Dom0 on Hyper-V? Or are these separate projects?",
            "score": 1,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "Care to comment on how this differs from Amazon’s [Firecracker](https://firecracker-microvm.github.io/), in particular with regard to performance and security?",
            "score": 1,
            "replies": [
              {
                "author": "smalis-msft",
                "body": "Going to just copy /u/gigastarks's comment here:\n\nPerhaps the most important thing, compared to other Rust-based VMMs, is that OpenVMM has a unique threading model, more suitable to running in a paravisor environment. In a paravisor, you really want to make sure that if you're doing work on behalf of guest virtual CPU #3, you're doing it _on CPU #3_, and not jumping around to other cores in the meantime. Otherwise, you end up stalling work on other CPUs, leading to all kinds of performance problems in the guest.\n\nWe achieve this by using Rust's `async` throughout the codebase. Combined with a per-CPU executor (built on io-uring), we get cheap, fine grained control over where tasks run. So far, other Rust-based VMMs have used a more traditional threading model, without `async`.\n\nWe hope to write up a blog entry on this in the coming weeks.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "CHF0x",
            "body": "Great work! Do you think it will eventually replace/extend Hyper-V, or is it designed primarily with cloud support in mind?",
            "score": 1,
            "replies": [
              {
                "author": "smalis-msft",
                "body": "We have no plans to replace or deprecate Hyper-V",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "BibianaAudris",
        "body": "Any context about the usage scenarios? Read the documentation but still at a loss why someone would want a mid-layer-VM like OpenHCL. Is it more like Xen or more like libvirt? Why not just do all the tasks on host instead?",
        "score": 58,
        "replies": [
          {
            "author": "lood9phee2Ri",
            "body": "Well,  there are the associated changes to split guests into further fine-grained multiple privilege levels (these show up as vCPU facilties, though there's no physical processor with VTLs)\n\nMicrosoft are calling them VTL0,VTL1, VTL2... with higher numbers not lower ones meaning higher privilege, arguably unconventionally but it's probably mostly just a quirk of our timeline that we tend to consider lower numbers higher privilege.  I'm not sure the intent is for VTL2 to be precisely analogous to a real device \"ring -2\" in x86-64 terms or anything, mind (ring -2? classic ring 0 stopped being the highest (lowest-numbered) privilege of today's [pre-pwned x86-64](https://en.wikipedia.org/wiki/Protection_ring#Miscellaneous) quite some time ago, with ring -1 being  hw virt, ring -2 smm mode and ring -3 mr. creepy ime/psp \\)\n\nNotably e.g. OpenHCL can run in the more privileged guest layer VTL1/VTL2 to e.g. act as a \"vTPM\"  for the final guest in VTL0.  that vTPM can also be *different* for each final guest.   I would strongly suspect this is really like 90% about the TPMs for them  :-/,  though they also talk about securing now-familiar sr-iov type device passthrus a bit better (and again different for each guest).   \n\ni.e. So they can offer signed cloud execution environments - though that's not really secure (and very different to holy-grail surprisingly-possible-but-currently-inefficient [fully-homomorphic encrypted](https://en.wikipedia.org/wiki/Homomorphic_encryption#Fully_homomorphic_encryption) secure remote computing) - after all the cloud host can clearly still break the security, more a box-ticking exercise for people who mistake bureaucratic compliance with security policy for security.\n\n\"attestation\" in the diagram. TCtastic.\n\n* https://openvmm.dev/user_guide/openhcl.html\n* https://openvmm.dev/reference/architecture/_images/openhcl.png\n* https://techcommunity.microsoft.com/t5/windows-os-platform-blog/openhcl-evolving-azure-s-virtualization-model/ba-p/4248345\n* https://thenewstack.io/microsoft-open-sources-openhcl-a-linux-based-paravisor/\n\nNote microsoft also intends api enabling these virtual privileged guest to be added to official Linux kernel KVM, see \"Heki\" (though actually the kvm devs may go with later very recent amazon work in same area mentioned [other comment](/r/programming/comments/1g5kxl2/microsoft_has_open_sourced_its_new_crossplatform/lsdvett/)? I dunno)\n\n* https://github.com/heki-linux\n* https://lore.kernel.org/all/20240503131910.307630-2-mic@digikod.net/\n\nI feel like there may be some conceptual overlap with just doing some full nested virtualization, but that's probably higher-overheads.  https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/\n\nNote I'm also not saying this is intrinsically bad. Main problem with TPM is just when we the nominal owners don't have root signing keys and the Corpies do. So they own \"our\" devices and we don't.",
            "score": 42,
            "replies": [
              {
                "author": "BibianaAudris",
                "body": "Thanks for the explanations. So... it's kind of a mix between Xen and QEMU? Putting the larger-attack-surface device emulation inside the \"paravisor\" to reduce attack surface?\n\nBut doesn't having a Windows host defeat the point? After all, the device emulation are written in Rust and likely both smaller and more secure than the Windows host and Hyper-V stuff. And won't the guest slow down everything enough and render any host-OpenHCL level acceleration pointless?\n\nLooks more like box-ticking than something actually useful. The Rust device emulation could have made much more difference if put in QEMU instead.",
                "score": 8,
                "replies": [
                  {
                    "author": "lood9phee2Ri",
                    "body": "&gt; But doesn't having a Windows host defeat the point?\n\nIt's actively not windows host specific *in principle* I think - though required linux host side changes appear to be still at some PoC / \"RFC v3\" level, don't appear to be upstreamed yet - details clearly still being workshopped including very basic decisions/debates such as whether kvm would provide an api modelled directly on hyper-v's [vsm/vtls](https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/tlfs/vsm#virtual-trust-level-vtl) or something more divergent but still allowing building something functionally equivalent, as of May 2024 - https://lore.kernel.org/linux-hardening/20240514.OoPohLaejai6@digikod.net/\n\nIt doesn't *look* like a lip-service thing where they'd accidentally never finish the linux kvm physical host changes, leaving only windows hyper-v physical hosts possible.\n\nAlso relevant- Amazon apparently also working on adding hyper-v-like vsm/vtl support to qemu+kvm https://kvm-forum.qemu.org/2024/KVM_Forum_2024_-_VBSVSM_WSXE3pb.pdf  anyway, presumably for approximately the same cloudy reasons.  Probably some consensus on any required changes to linux kvm host side will emerge.  https://lore.kernel.org/kvm/D47UPV0JIIMY.35CRZ8ZNZCGA1@amazon.com/  - getting into Sep 2024 with that.... [Oct 2024](https://lore.kernel.org/kvm/20241004140810.34231-1-nikwip@amazon.de/) apparently now enough to boot windows server 2019 *with* its vsm usage under outer qemu+kvm...  Anyway, point is appears to be Coming.\n\n&gt; And won't the guest slow down everything enough and render any host-OpenHCL level acceleration pointless?\n\nNote OpenHCL is running in the guest VTL2 layer not the host.  Perhaps some overhead but not total, assuming sr-iov passthru to the vtl2, and sufficiently efficient paravirt upcalls from vtl0 to vtl2.\n\nNote diagram https://openvmm.dev/reference/architecture/_images/openhcl.png  - note the diagram's \"hypervisor and hardware\" could be *either* a linux kvm host or windows hyper-v host AFAICS, and not to be confused with the other openhcl+linux-kernel in vtl2 of the guest.  Then could then be another guest linux again or a guest windows in vtl0 of the guest.\n\nAt present I do still feel like [full nested vms](https://www.linux-kvm.org/page/Nested_Guests) are a conceptually cleaner model than these partitioned guests, though have their own problems of course...    \n\nAnd not that it's rare for some conceptual clarity / clean abstraction to be sacrificed at the altar of real-world efficiency.",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "jaskij",
                    "body": "Microsoft seems to be going towards Linux as dom0 on Hyper-V, at least according to a headline I saw on Phoronix.  They did send enablement patches to the mailing list.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "smalis-msft",
            "body": "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/openhcl-the-new-open-source-paravisor/ba-p/4273172 just got posted!",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "itsmontoya",
        "body": "I love these kind of projects, well done to the teams who worked on this!",
        "score": 7,
        "replies": []
      },
      {
        "author": "imsoindustrial",
        "body": "A personal congratulations to the amazing individuals who made this happen. It really is an incredible feat of engineering and you all should be proud.\n\nThat said it is too little, too late to keep me in Microsoft ecosystem after Window 10 EOL, but I’ll cheers its developers for building cool things all day long.",
        "score": 80,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 18,
            "replies": [
              {
                "author": "daniel5151",
                "body": "This is incorrect. OpenVMM builds natively on both Windows and Linux (WSL2 is entirely optional).\n\nThat said, OpenHCL (AKA, the more specialized paravisor configuration) does indeed require Linux to build at the moment.",
                "score": 7,
                "replies": [
                  {
                    "author": "_zenith",
                    "body": "Ahhh, I must have mixed them up when reading. Admittedly that was at like 2am haha",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Enip0",
            "body": "It's supposed to be cross platform and has an MIT license. I'm always torn on such projects. It does come from Microsoft, but on the other hand that doesn't make it automatically evil, might be worth a chance",
            "score": 52,
            "replies": [
              {
                "author": "imsoindustrial",
                "body": "In most cases the MIT license would convince me but it feels moot when immense financial pressure, underlying platform ownership, and business connections are available to influence regardless.\n\nI trust by example and when Recall was raised as an “in-demand feature”, it was moderately concerning (beyond adverts in OS, telemetry, etc). The way they handled the backlash of it felt more confirmation of ill-intention speculation than clarification or qualified substantiation in my opinion.",
                "score": 15,
                "replies": []
              },
              {
                "author": "KevinCarbonara",
                "body": "The important part is to be open source, imo. We've seen open source projects and libraries insert ads, viruses, Russian spyware, all sorts of things. When it comes down to it, open source devs aren't any more trustworthy than corporate devs. What you're relying on, in either case, is the ability to identify any malicious/abusive changes as they are created, and the potential for someone to fork the project should it happen.",
                "score": 8,
                "replies": []
              },
              {
                "author": "zabby39103",
                "body": "MIT licenses protect software developers not consumers.  You can close source an MIT project whenever you want for any future development.  I'm not going to touch any *platform* isn't at least GPLv2.  Honestly we won't touch any library for an *application* that is GPL at work for the same reason (unless we want to open source it), because management wants that leverage that MIT gives you.\n\nEven with GPL companies like RedHat like to try shenanigans, but they are restricted in how far they can go.  They'll try to get you on the vendor lock-in, then slam the door shut if they can make money off it.",
                "score": 0,
                "replies": [
                  {
                    "author": "Duckliffe",
                    "body": "With a permissive licence like MIT though, isn't there always the option to fork it to GPLv2 yourself if you so wish?",
                    "score": 9,
                    "replies": [
                      {
                        "author": "zabby39103",
                        "body": "As I understand it yes you can change licenses to a more restrictive one generally, although only for the changes you make going forward of course.  That's what happened to Bash on OSX they changed from GPLv2 to GPLv3 and so Apple kept using the old version for ages before switching to Zsh.\n\nIf you compile against anything that's GPL though you are bound by the GPL license, so once you have GPL in your code base and you're compiling against it the whole thing is GPL.  So it's really hard to go backwards because you end up using a lot of tools that are GPL.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "Duckliffe",
                            "body": "Actually you can close-source a GPL codebase going forward (although only for the new bits, exactly like with the MIT licence) with the agreement of all contributors. This is much easier with a Contributor Licencing Agreement (which many GPL projects do have) or if you're a company that has corporate ownership of your whole codebase even though you have multiple devs",
                            "score": 3,
                            "replies": [
                              {
                                "author": "zabby39103",
                                "body": "Right, with the agreement of all the contributors via CLA or otherwise.  I suppose it would depend on the project, but if you get sucked into the GPL ecosystem it could be difficult to extricate yourself without a large re-write (i've been part of a fairly major rewrite *just* to get rid of BASH due to GPLv3).  If the GPL code is all internal, sure it might not be too hard... good luck getting projects written by open source community or even other companies to agree to that though.  \n\nThere's no perfect solution, but your protections with GPL are a lot stronger.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": -17,
                "replies": [
                  {
                    "author": "lux44",
                    "body": "dotnet folk seem to be reasonably open",
                    "score": 23,
                    "replies": []
                  },
                  {
                    "author": "haby001",
                    "body": "Idk man every PR I've opened they've taken in or discussed and then closed.\n\nIt just takes them time since most employees balance multiple projects and duties",
                    "score": 16,
                    "replies": []
                  },
                  {
                    "author": "Hopeful-Sir-2018",
                    "body": "Are you meaning \"public contributions\" to mean bug fixing? Or are you meaning adding features?\n\nBecause I mean.. simply being OSS is pretty huge. The community doesn't get to dictate the direction they go - that would be ridiculous, surely.\n\nAnd adding features, from public contributions, would add a substantial layer of responsibility on their part that's non-trivial - which would inherently explain why it's rare.\n\nOut-right bugs or security fixes, on the other hand...",
                    "score": 9,
                    "replies": []
                  },
                  {
                    "author": "Duckliffe",
                    "body": "source-available has a definition my dude, and something licenced under MIT does not meet it",
                    "score": 2,
                    "replies": [
                      {
                        "author": "uCodeSherpa",
                        "body": "All open source should be somewhat source available. \n\nNot all source available is open source.\n\nThe main difference being licensing the usage. If a corporation cannot exploit your work for free, you are not open source. ",
                        "score": 1,
                        "replies": [
                          {
                            "author": "Duckliffe",
                            "body": "&gt;Source-available software is software released through a source code distribution model that includes arrangements where the source can be viewed, and in some cases modified, but without necessarily meeting the criteria to be called open-source.\n\nhttps://en.m.wikipedia.org/wiki/Source-available_software",
                            "score": 1,
                            "replies": [
                              {
                                "author": "uCodeSherpa",
                                "body": "Exactly what I wrote!\n\nThe primary cause of software losing the “open source” title is people licensing such that corporations have to pay their fair share. \n\nThis is why there is such strong propaganda against source available vs open source. Open Source is a corporate bootlicker title. Your software does not need it. ",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": -1,
                        "replies": [
                          {
                            "author": "Duckliffe",
                            "body": "Nah, being open source but with shitty business practices isn't the same as being source-available. That's the exact argument that companies use to justify closing off their open source projects (for example: ElasticSearch) by arguing that what they're doing is 'in the spirit of open source'",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "grulepper",
            "body": "As if you're the one in charge of tooling at your workplace lol, thanks for the daily cringe",
            "score": -37,
            "replies": []
          }
        ]
      },
      {
        "author": "CumCloggedArteries",
        "body": "I'm a bit confused about the concept of a \"virtual machine monitor\" - If I'm understanding right, all this does is manage virtual machines? But are those guest operating systems being emulated with OpenVMM, or are they being emulated with something else like QEMU?",
        "score": 3,
        "replies": []
      },
      {
        "author": "devraj7",
        "body": "Is this just a VM? Are there languages that generate code for it? Why use this instead of. Net?",
        "score": 8,
        "replies": [
          {
            "author": "Moschn",
            "body": "This is a VMM, a virtual machine _monitor_. A VMM essentially allows you to run VMs on a host. A comparable existing VMM is QEMU or hyper-v.\n\nThis has nothing to do with languages that run in a VM like .Net or Java.",
            "score": 101,
            "replies": [
              {
                "author": "devraj7",
                "body": "I missed that extra letter, thanks for the clarification!",
                "score": 24,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 3,
                "replies": [
                  {
                    "author": "mmmicahhh",
                    "body": "I think the main difference between a hypervisor and this paravisor are the innate execution privilege levels. Hypervisors are ultimately root-like processes, while this paravisor runs on top of an OS (which is not necessarily Windows). I don't know much about this area, but it seems like the idea in general is better safety, portability, and various other cloud infrastructure-related benefits.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "_zenith",
            "body": "Read https://openvmm.dev/user_guide/openvmm.html if you're curious",
            "score": 7,
            "replies": []
          },
          {
            "author": "BatForge_Alex",
            "body": "&gt; Why use this instead of. Net?\n\nHow *dare* you! \n\nThat's our lord and savior Rust you're questioning",
            "score": -38,
            "replies": [
              {
                "author": "devraj7",
                "body": "I don't have a problem with Rust, it's my main language. \n\nI don't care about the language this VM is written in, none of my questions were related to that. \n\nI'm just asking clarifications on the purpose of this VM because the README says nothing.",
                "score": 18,
                "replies": [
                  {
                    "author": "ventuspilot",
                    "body": "You may have missed that the github links the website https://openvmm.dev/ which seems go go into a lot more detail.",
                    "score": 14,
                    "replies": []
                  },
                  {
                    "author": "BatForge_Alex",
                    "body": "Sorry, was a sarcastic comment because you were getting downvoted like crazy - I'm also not sure",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "spezdrinkspiss",
                "body": "rust haters are weird man",
                "score": 3,
                "replies": [
                  {
                    "author": "BatForge_Alex",
                    "body": "But, I uh... I don't hate Rust\n\nI'll wear the downvotes with pride for daring to make a joke at Rust's expense",
                    "score": 2,
                    "replies": [
                      {
                        "author": "_zenith",
                        "body": "I think the problem is plenty say this totally unironically. So your joke is indistinguishable from your average garden-variety deranged hater :p",
                        "score": 11,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "danted002",
                "body": "Two words: garbage collector.",
                "score": 0,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "So what is the future of Hyper-V?",
        "score": 1,
        "replies": []
      },
      {
        "author": "RedNailGun",
        "body": "Microsoft needs to be split up.  It's a monopoly.",
        "score": -29,
        "replies": [
          {
            "author": "jhuang0",
            "body": "What do you think it has a monopoly in?",
            "score": 8,
            "replies": [
              {
                "author": "sweating_teflon",
                "body": "Original Monopoly is very East Coast. We need a West Coast Monopoly with properties such as Bellevue, Mission District and Compton.",
                "score": 7,
                "replies": []
              },
              {
                "author": "RedNailGun",
                "body": "# Microsoft Desktop OS Dominance\n\n**Market Dominance**: According to various sources, including court findings and expert opinions, Microsoft has maintained a significant market share dominance in the desktop operating system market for an extended period. The search results indicate that Microsoft’s Windows operating system has held over 90% market share for over a decade, with some periods reaching above 95%.\n\n**Monopoly Power**: The search results also suggest that Microsoft has been accused of exercising monopoly power in the market. The U.S. government, in the 1998 antitrust case, declared that Microsoft possessed monopoly power in the market for personal computer operating systems. Similarly, a 2024 court finding stated that Microsoft enjoys monopoly power in the relevant market.\n\n**Bundling and Exclusionary Practices**: Microsoft’s bundling of Internet Explorer with Windows and restrictions on OEMs and users to uninstall IE have been criticized as exclusionary practices aimed at protecting its Windows monopoly. These practices have hindered competitors’ ability to gain traction in the market.\n\n**Challenges to Dominance**: Despite Microsoft’s dominance, there have been and continue to be challenges from alternative operating systems, such as Linux and macOS. However, these alternatives have not yet managed to significantly erode Microsoft’s market share.\n\n**Conclusion**: Based on the search results, it appears that Microsoft has a significant market share dominance in the desktop operating system market, and its business practices have been accused of exercising monopoly power. While there are competitors and alternatives, Microsoft’s Windows operating system remains the dominant player in the market.",
                "score": -21,
                "replies": [
                  {
                    "author": "happyCarbohydrates",
                    "body": "get thee behind me, bot",
                    "score": 9,
                    "replies": []
                  },
                  {
                    "author": "jhuang0",
                    "body": "Breaking up a company is really the solution of last resort. I'll be honest, you're not entirely wrong about their market dominance with Windows... but it's an increasingly irrelevant market. Where do most people spend their time? Phones. Where is the bulk of the world infrastructure built on? Linux. Even within Windows, I'd pretty much guarantee you that most people spend most of their time in a web browser... and not Microsoft's browser at that. \n\nTo me, you're suggesting that we should break up the red shoe company because they make 90% of the world's red shoes. Sure... it's a dominant market share.... but who really cares about red shoes?",
                    "score": 7,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": -6,
        "replies": [
          {
            "author": "zoom23",
            "body": "The import commit says it’s 5 years worth of work from ~120 contributors inside Microsoft.\n\nThe public website indicates that it used in production systems as part of Azure",
            "score": 35,
            "replies": [
              {
                "author": "mx2301",
                "body": "Out of curiosity, what did the person above wrote ? Did they say it was something akin to a pet project?",
                "score": 5,
                "replies": [
                  {
                    "author": "_--_-_---__---___",
                    "body": "They were complaining that this project appeared to be \"pre-alpha\" and so was not worthy of being announced this early.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "shevy-java",
        "body": "Definitely better than keeping it closed source. I am just wondering whether people really interact much with Microsoft-derived software; to me it seems all geared towards e. g. Windows. I'd much prefer to remain fully committed within, say, the Linux ecosystem instead.",
        "score": -14,
        "replies": []
      },
      {
        "author": "Joslencaven55",
        "body": "Cool way to keep code safe More projects should try this Thoughts",
        "score": -3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": -28,
        "replies": [
          {
            "author": "pali6",
            "body": "It's not a VM.",
            "score": 16,
            "replies": []
          },
          {
            "author": "PaintItPurple",
            "body": "They already have a Java-competitive VM — it's called CLR. This is for managing VMs that virtualize hardware.",
            "score": 15,
            "replies": []
          },
          {
            "author": "atomic1fire",
            "body": "As others have pointed out it's basically a rust based alternative to virtual box or QEMU.\n\nBut I just wanted to point out that Microsoft maintains their own build of OpenJDK.\n\nIn fact there are multiple companies that maintain OpenJDK builds outside of Oracle, if you really need Java.",
            "score": 7,
            "replies": []
          }
        ]
      },
      {
        "author": "takingastep",
        "body": "EEE",
        "score": -6,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "OMG rust!!! fapfapfapfap \\*pewpewpew\\* \\*face shot\\*",
        "score": -39,
        "replies": [
          {
            "author": "Irregular_Person",
            "body": "This project is the exact sort of thing Rust is *actually* good for",
            "score": 9,
            "replies": [
              {
                "author": "[deleted]",
                "body": "why do you think my pleasure over this news means i don't like this or something? WEIRD TAKE",
                "score": -19,
                "replies": []
              }
            ]
          },
          {
            "author": "atomic1fire",
            "body": "So Microsoft releasing their own (free and open source) alternative to Virtual Box or QEMU deserves a meme response because of the language it's written in?",
            "score": 11,
            "replies": [
              {
                "author": "[deleted]",
                "body": "how is my pleasure in this project a meme response? i love rust",
                "score": -12,
                "replies": []
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Dev rejects CVE severity, makes his GitHub repo read-only",
    "body": "",
    "score": 1151,
    "url": "",
    "created_utc": 1719764885.0,
    "author": "lelanthran",
    "permalink": "/r/programming/comments/1ds5csl/dev_rejects_cve_severity_makes_his_github_repo/",
    "comments": [
      {
        "author": "recurse_x",
        "body": "Time for CVEs on CVEs",
        "score": 225,
        "replies": [
          {
            "author": "Pilchard123",
            "body": "I'm not well-up on CVSS, but could we spin \"it is possible to submit bogus CVEs and harass developers until they close the issue tracker/take the project down\" as a denial of service attack?\n\nPer [a NIST calculator](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator), the current state of the CVE process has a vulnerability with a **9.3 - Severe** score.\n\n---\n\n**Attack Vector: Network**\n\nThe attack can be trivially performed over HTTP or SMTP.\n\n**Attack Complexity: Low**\n\nAnyone who can write a coherent sentence is able to submit a CVE.\n\n**Privileges Required: None**\n\nIt is possible to submit a CVE anonymously. \n\n**User Interaction: None**\n\nOnce the bogus CVE is submitted, the CVE may be published with no input from the target required.\n\n**Scope: Changed**\n\nA bogus CVE can cause damage to systems that are not owned by the target, [as demonstrated in the case of cURL](https://daniel.haxx.se/blog/2023/04/24/deleting-system32curl-exe/), though this extended attack may require user interaction.\n\n**Confidentiality Impact: None**\n\nHandling a CVE, bogus or otherwise, does not require disclosure of confidential information. Confidential information may be disclosed to disprove the alleged vulnerability, but the CVE by itself does not cause the release of confidential information.\n\n**Integrity Impact: Low**\n\nThe attacker can cause the creation of unwanted data and modification of affected projects:\n\n* A successfully-submitted bogus CVE will pollute the CVE list. No other CVEs will be affected.\n\n* A bogus CVE may a targeted library or application to be modified to appease the attacker and/or other parties. The target may also create documentation refuting or disputing the CVE. The attacker has limited control over the content of such changes or documentation.\n\n**Availability Impact: High**\n\nIn all cases, the target must spend resources dealing with the reputational damage from the bogus CVE.\n\n[It has been demonstrated](https://old.reddit.com/r/programming/comments/1ds5csl/dev_rejects_cve_severity_makes_his_github_repo/) that a target can be so burdened by handling a bogus CVE that they remove the ability to submit tickets for all issues.\n\nIt is not inconceivable that a coordinated attack of sufficient size could cause support for or continued development of a target to be stopped altogether.",
            "score": 168,
            "replies": [
              {
                "author": "moratnz",
                "body": "Given that taking over a trusted OSS repo from a burned out maintainer is a great way of setting up a supply chain attack then in all seriousness this should be looked at as an actual security issue.",
                "score": 109,
                "replies": [
                  {
                    "author": "Manbeardo",
                    "body": "Seems like a great way for an enterprising attacker to leverage a *real* undiscovered vulnerability. File bogus reports against releases that came out before the relevant vuln was introduced. If the target shuts down the project, their exploit is unlikely to be addressed for quite some time. If the target transfers ownership of the project, they can add backdoors in the same release that addresses the bogus CVEs.",
                    "score": 30,
                    "replies": []
                  },
                  {
                    "author": "QSCFE",
                    "body": "I mean the maintainer wrote this so 🤷\n&gt;I'd be happy to give contributor bits and npm ownership to a person who has a track of maintaining some packages with reasonable download count. Thanks so much for raising this topic!",
                    "score": 10,
                    "replies": []
                  },
                  {
                    "author": "Pilchard123",
                    "body": "Good point. If the Integrity Impact is increased to High (because the attacker can attempt to take over the targetted repo and make arbitrary changes) the score becomes 10. Well, it probably becomes more than 10, but the score is clamped between 0 and 10.\n\nI could see a reasonable argument that the Confidentiality Impact should be higher than None, too, but I don't want to weaken the argument by being unnecessarily hyperbolic.",
                    "score": 7,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 77,
            "replies": [
              {
                "author": "jaybeeto",
                "body": "The reporter doesnt get to specify the cvss score.",
                "score": 24,
                "replies": [
                  {
                    "author": "GrouchyVillager",
                    "body": "Still. Report bogus CVEs? Get blacklisted.",
                    "score": 15,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Zealousideal-Okra523",
        "body": "The level of severity has been bullshit for a few years now. It's like every RCE gets 9.x even if exploiting it means you have to use actual magic.",
        "score": 1176,
        "replies": [
          {
            "author": "drcforbin",
            "body": "The folk reporting bugs as CVEs get to say \"I discovered six &gt;9 severity CVEs\" on their resume",
            "score": 569,
            "replies": [
              {
                "author": "bwainfweeze",
                "body": "And I thought it was bad when QA people would enter feature requests as bugs.",
                "score": 238,
                "replies": [
                  {
                    "author": "drcforbin",
                    "body": "We had to take away the \"blocker\" status in our bug report system. When 50% of the tickets coming in are \"drop everything else going on and get these customers running again,\" but our biggest clients are happily working without issues, the severity selections aren't helpful",
                    "score": 178,
                    "replies": [
                      {
                        "author": "r0bb3dzombie",
                        "body": "I've tried explaining to my support team that if everything is a show stopper or a blocker, then nothing is. A single customer with a particular issue, yelling at them, doesn't make something a blocker.",
                        "score": 119,
                        "replies": [
                          {
                            "author": "Pantzzzzless",
                            "body": "For the past 2-3 months, our UAT testers have been in the habit of logging minor bugs found in prod as P0 blocking defects.\n\nI'm starting to think they are just doing this because they think the issues they raise will be addressed quicker.",
                            "score": 36,
                            "replies": []
                          },
                          {
                            "author": "Chii",
                            "body": "What i tried (without success unfortunately), is to let the support team put their reported bugs in a list ordered by what they believe is important. It's not a status or a field, but an ordering. This way, i thought, they must put one ahead of another bug, despite saying both are \"equally important\". \n\nUnfortunately, what ended up  happening is that each new support engineer simply put _their_ current customer's bug at the top, and since turnover is high in the support team, old bugs that reappear or the customer re-complains about, gets moved back to the top. \n\nIt's basically completely useless to allow support team to prioritize bugs, regardless of the system used.",
                            "score": 8,
                            "replies": []
                          },
                          {
                            "author": "seanmorris",
                            "body": "You're using one field for two ideas. A blocker just means it prevents work from being done somehow. It might be a blocker for the customer, sure, but that doesn't mean it needs to be prioritized as a blocker for the developers. In fact, it is by definition NOT a blocker for developers unless its preventing THEM from doing their work.\n\n\"Blocker\" by itself doesn't even imply high priority. If X blocks Y, but Y is a very low priority task, then we only know that X's priority is at least just above Y's. It doesn't tell us anything else.\n\nAlso, you can't call rightly something a blocker unless you can state WHAT its blocking.\n\nAnd why is your support team prioritizing things? That's the project manager's job. They're doing it wrong because they're probably not qualified to do that. Your support staff should be assisting customers and taking objective reports.",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "bwainfweeze",
                        "body": "One of the insights I’ve had about customers is that many are perfectly fine knowing when their pains will be fixed. \n\nOne of the better places I worked we had customers who were missing features they really wanted but they trusted that we would eventually get them. They bought into the story of us being competent but new. I’ve tried to push three or four other places into this model with limited success. \n\nIt can be better to sound clueful and have self esteem than to rush features and give off a vibe of impostor syndrome.",
                        "score": 49,
                        "replies": []
                      },
                      {
                        "author": "braiam",
                        "body": "This is why status definitions are important. I am big fan of Debian's status tags, the only release blockers are license ones.",
                        "score": 34,
                        "replies": []
                      },
                      {
                        "author": "orthoxerox",
                        "body": "At one place I know the severity of incidents was graded like this:\n\n- critical - the CIO must be paged immediately\n- very high - the department head must be paged immediately, and the CIO must see it listed in his daily report\n- high - the department head must see it listed in his daily report\n- medium\n- low\n\nFor some reason very few things became actually critical when these rules were implemented.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Jugales",
            "body": "“This is a severe ZERO DAY!!”\n\nConditions for exploit: must be running Windows 2000, Netscape, Java 21, and League of Legends",
            "score": 242,
            "replies": [
              {
                "author": "Practical_Cartoonist",
                "body": "It drives me crazy how \"zero day\" became some meaningless bullshit buzzword.\nIts actual meaning is \"the public became aware of the vulnerability on the same day that the devs became aware of it\".\nThat's it.\nThere's nothing exciting or scandalous about a zero day vulnerability, especially if there's no RCE vulnerability.",
                "score": 84,
                "replies": [
                  {
                    "author": "Nahdahar",
                    "body": "White hat: reports vulnerability to company privately\n\nCompany: does nothing\n\nWhite hat: contacts news outlet after 6 months\n\nNews outlet: ZERO DAY VULNERABILITY FOUND IN [XY]!!!",
                    "score": 43,
                    "replies": []
                  },
                  {
                    "author": "Lambda_Wolf",
                    "body": "This might be my ignorance, but I've understood it to mean a vulnerability that is exploited on the same day the vulnerable code is released or deployed. But maybe that's only applicable to the DRM-cracking community.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "oceandocent",
                        "body": "It refers to there being 0 days to prepare a patch because it was leaked or exploited before the developers were aware of it.",
                        "score": 17,
                        "replies": []
                      },
                      {
                        "author": "im-a-guy-like-me",
                        "body": "I always thought it was the time the Devs have to fix it before it is released.",
                        "score": 9,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "PCLOAD_LETTER",
                "body": "&gt;Conditions for exploit: must be running Windows 2000, Netscape, Java 21, and League of Legends \n\nOS has have been booted more than 800 days ago, contain an odd number of MBs of memory and have a desktop wallpaper in tiled bmp format.",
                "score": 19,
                "replies": [
                  {
                    "author": "oceandocent",
                    "body": "Malicious actors may gain access if they can rub their tummy clockwise while patting their head and licking their elbow all at once.",
                    "score": 8,
                    "replies": []
                  }
                ]
              },
              {
                "author": "IglooDweller",
                "body": "Also requires physical access to the machine!!!",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "This has been virtually every security issue that I’ve seen raised that our team has had to address the last 3 years. “If the user has compromised access to the network and has root access, they can leverage X to do …” yeah of course they could congrats.",
            "score": 104,
            "replies": [
              {
                "author": "lIIllIIlllIIllIIl",
                "body": "Security people call it \"defense in depth\", and it makes me want to pull my hair out whenever they use it as an argument.",
                "score": 28,
                "replies": [
                  {
                    "author": "plumarr",
                    "body": "Why not, but not as an emergency.\n\nIt reminds me of the good practice of \"not using the String class for password in Java\" because a String can persist in memory even when there is not référence remaining references to it.\n\nYeah, yeah, if an attacker can read the raw memory of the JVM, I probably have a bigger problem than that. \n\nI'm ok to change it but it certainly doesn't require an hotfix.",
                    "score": 35,
                    "replies": [
                      {
                        "author": "Captain_Cowboy",
                        "body": "Because you're assuming they are reading memory using appropriately privileged system interfaces, not taking advantage of the 13 other \"probably not a big deal\" CVEs your org decided to ignore.",
                        "score": 7,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "if you are at any point where attacker can read app's memory, you're fucked.\n\nThe severity 9 issue is reading the memory, not using String class.\n\nIt's the issue to fix eventually in next refactor, not security problem to fix now",
                            "score": 11,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "Most of them are checkbox tickers with no actual useful knowledge about making secure systems.\n\n\"We think it isn't secure. We can't describe well why or how to fix it, but change it so it passes our checklist\"\n\nWe had to implement password rotation scheme to a bunch of servers we already used hardware token  to access..",
                    "score": 6,
                    "replies": []
                  }
                ]
              },
              {
                "author": "spareminuteforworms",
                "body": "Same places routinely give insane whitelist access to \"privileged individuals\" aka \"team players\" aka \"the one who ultimately blows a hole in the uuhhh hull\".",
                "score": 6,
                "replies": []
              },
              {
                "author": "Spongman",
                "body": "&gt; It rather involved being on the other side of this airtight hatchway\n\n\nhttps://devblogs.microsoft.com/oldnewthing/20060508-22/?p=31283",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 268,
            "replies": [
              {
                "author": "LongUsername",
                "body": "We just got bought and the new \"attack surface reduction team\" is giving us shit because we occasionally use a tool that uses Log4j v1 something. It's a local application, not a server. And Log4j v1 is not vulnerable to the Log4Shell vulnerability (granted, it has some other minor vulns)",
                "score": 27,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 130,
                "replies": [
                  {
                    "author": "vips7L",
                    "body": "Yeah it was awful. Just a bunch of IT jabronis doing full text search for any string matching log4j without verifying JVM or library versions. We received a few reports of people who were using a 2.x version of our desktop app, we're now on 4.x (almost a decade later), and no longer use log4j.",
                    "score": 98,
                    "replies": [
                      {
                        "author": "ZorbaTHut",
                        "body": "At the place I was working, the lead IT person took the log4j vulnerability as an argument against *all open-source software*, and said we had to remove everything from all of our systems. Eventually I pointed out that one of our main proprietary closed-source development tools actually *included a vulnerable copy of log4j*, and they didn't have a fix yet. He didn't really have an answer to that.\n\nThankfully, he pursued the \"eradicate open-source software\" task with the same amount of effort that he pursued most of his duties, and we never heard another thing about it.",
                        "score": 125,
                        "replies": [
                          {
                            "author": "Jonathan_the_Nerd",
                            "body": "Did you mention Windows' original TCP/IP stack was copied almost verbatim from FreeBSD?  Better stop using Windows.",
                            "score": 50,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Norse_By_North_West",
                        "body": "Hah, I remember a client freaking out about it. I told them that our systems are on such old versions of Java that it really wasn't an issue",
                        "score": 31,
                        "replies": [
                          {
                            "author": "OffbeatDrizzle",
                            "body": "well I guess that's ok then... \n\nhold up",
                            "score": 20,
                            "replies": [
                              {
                                "author": "Norse_By_North_West",
                                "body": "Lol, yep. They've got money for maintenance, but not for upgrades",
                                "score": 8,
                                "replies": [
                                  {
                                    "author": "zynasis",
                                    "body": "Upgrades should be in maintenance imo",
                                    "score": 10,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "Polantaris",
                        "body": "I got told to fix it on Log4Net. There's nothing to fix.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "RLutz",
                    "body": "To be fair, that one was pretty trivial to exploit if using a vulnerable version. You could demonstrate PoC by just opening a socket with netcat and sending a JDNI string to that socket",
                    "score": 13,
                    "replies": []
                  },
                  {
                    "author": "bwainfweeze",
                    "body": "Some of my coworkers worked through the company Christmas break to fix that one. Shitty handling all around.",
                    "score": 30,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Vidyogamasta",
                "body": "Security in my company is equally as inept. \n\nThey recently raised a \"vulnerability\" that said a client demonstrated to them that if an admin left their session open, someone could come by and make a request, copy the session information from that request, and then escalate themselves to admin with those session keys. Then claimed it was a vital vulnerability that needed to be fixed. \n\nLike, if someone leaves the keys hanging on the door, that's not a problem with the lock. For all the random business lingo crap they force us to do twice a year, they seem to have no idea what a threat model actually is lol",
                "score": 19,
                "replies": [
                  {
                    "author": "kamikazewave",
                    "body": "Without knowing more about that specific issue, that actually does sound like a vulnerability, if that exploit allows permanent escalation privileges.\n\n\nIt's mitigated by using some sort of short lived credential.\n\n\nIf the credentials were already temporary then yeah I agree it's a nonsensical vulnerability.",
                    "score": 7,
                    "replies": [
                      {
                        "author": "Vidyogamasta",
                        "body": "The ticket said nothing about session lifetimes, I don't think it's anywhere on their radar. But they're old school stateful server sessions with invalidation on logout and relatively short session timeouts, I think we're good there. What concerned them was the transferability of a session. \"This session should only work on device A, this user copied it onto device B and resumed the session!!!!\" \n\nLike... yeah. A session is just a byte string that gets shoved along with the request. Security is all about establishing secure channels that protect these tokens, and proper encryption to make them non-guessable. \"Physical access copy\" is a ridiculous (and impossible) thing to try to guard against. \n\nTheir \"fix\" was to just also include a check against the user agent, as if that wasn't also spoofable lol. \n\nBut on the topic of session lifetimes, I actually *did* catch a vulnerability a coworker in a previous job tried to push out. We had our own JWT/Refresh thing going on, and we wanted user spoofing as a feature (all logging will be the actual logged in user, but all data lookups acted under a target user's permissions). Coworker tried to make a new endpoint to generate a \"spoofed user\" access token, but didn't require a stateful proof (e.g. password or refresh token) alongside that generation. In this case an attacker *would* have been able to keep any arbitrary token alive forever by generating new spoof tokens indefinitely, even if the user changed their password or invalidated their refresh tokens. Fortunately I caught it in code review, but that one would've been nasty.",
                        "score": 8,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 17,
                "replies": [
                  {
                    "author": "technofiend",
                    "body": "You're not measuring risk in enough dimensions.  *Just* a CVE/CSSS score is nearly meaningless without assigning a risk score that includes impact to your business.  You don't use Java in your enterprise?  All CVEs for Java instantly get set to zero: zero risk.  You need to include business impact based on their goals (avoid SOC1 risk, avoid customer-impacting events, avoid going down if us-east-1 goes kabloooie) and then take the intersection of CVEs against that. Otherwise you get caught up in blanket statements (AVOID ALL RISK) that are about as sensible as assuming if you never drive on the road you'll never get a flat tire.  Great, but we're a trucking company, boss.",
                    "score": 13,
                    "replies": []
                  },
                  {
                    "author": "uncasualgamer44",
                    "body": "Which tool are you using which provides compensating controls for CVEs detected?",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "edgmnt_net",
                "body": "I agree critical CVEs might not impact your code, but it's also hard to keep track of exceptions. Someone could start using a vulnerable feature at any time, long after advisories have been processed by relevant people. Highly siloed projects (which I don't personally encourage) with dedicated security teams might also not trust developers to take such decisions and be aware of such caveats. It's often easier to just upgrade and if your code lags a lot behind you should consider formalizing some form of regular maintenance or switching to a more reliable (which is also debatable, it might just be that it gets less attention) / LTS implementation. Plausible attack vectors might also be beyond the pay grade of the security team and, while some proficiency can be argued for certain simple cases, there can be terribly difficult ones too so this approach can definitely result in ignoring important risks.\n\nI'd personally default to \"just upgrade\" and make exceptions in very limited cases.",
                "score": 4,
                "replies": []
              },
              {
                "author": "iamapizza",
                "body": "Cybersecurity teams in orgs have become little more than spreadsheet chasers. It literally doesn't matter if it's a bogus critical (as has been happening) or doesn't actually apply for the conditions described. They need that 'remediated', it's pretty sad that so many of them joining the field are distant from actual software development. The more experienced ones tend to get promoted to uselessness.",
                "score": 13,
                "replies": [
                  {
                    "author": "baordog",
                    "body": "I mean this happens because orgs higher cheap Nessus scan runners rather than people with skills in vulnerability research.\n\nCan you imagine how the other side feels?\n\n“We’ve given you 8 hours to pwn the app - why aren’t there any findings?”\n\nOrgs do this to themselves because they want cheap engineers to rubber stamp their security rather than actual high quality investigation of their security posture.",
                    "score": 14,
                    "replies": [
                      {
                        "author": "Captain_Cowboy",
                        "body": "We need that last sentence embroidered on a pillow.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "VodkaMargarine",
                "body": "&gt;At some point it got escalated to the CTO\n\nI'd have escalated to the CTO immediately. Two teams that most likely both report into your CTO. One team is decreasing productivity in engineering, I'm sure your CTO would want to know about that straight away. Ultimately they are accountable for _both_ the security _and_ the productivity of their org. At least let your CTO make the decision of where the balance should be.",
                "score": 7,
                "replies": []
              },
              {
                "author": "danikov",
                "body": "Ours just caved because the customers are now demanding it. Their security team doesn't care and certainly doesn't trust ours so it's become zero tolerance.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "thomasfr",
            "body": "I'm not even sure that severity scoring is even good to have at all.  Especially for libraries it depends on how the code that is using that library uses it how severe the problem is. It is the resposibility of anyone that uses third party code to always read all CVEs to evaluate if further action is required. Makring some issues as non severe might lead to people to not reading them when they actually can be much more secvere for their own sofware than another critical issue is.",
            "score": 56,
            "replies": [
              {
                "author": "cogman10",
                "body": "My favorite 2 examples of this.\n\n1. A zlib vulnerability in an extension portion of the code that I'm certain almost nobody knew about.  Basically if you used that extension to open a file you could RCE.\n\n2. pip executes code when installing packages, so if you tell it to install code from an untrusted source it can do something malicious... (seriously...).  So obviously that means everything that has python installed is now at risk even if there's no path to execute pip.",
                "score": 69,
                "replies": [
                  {
                    "author": "grundrauschen",
                    "body": "Oh do we have fun with the first one. RedHat reduced the value because they do not compile the module, but updated the lib never the less. Debian reduced the value but did not update the library. Our security team is not happy with the Debian in one container image.",
                    "score": 12,
                    "replies": [
                      {
                        "author": "pja",
                        "body": "Yeah, Debian always backports patches to the versions in the stable release which means the version numbers don't change.\n\n\nThis occasionally gives inexperienced security teams conniptions when they find a Debian image with a zillion \"insecure\" package versions.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "edgmnt_net",
                    "body": "The second one is a fairly common issue for package managers, build systems and even toolchains, as building requires some form of arbitrary code execution in many ecosystems (e.g. Makefiles, code generation and so on). Obviously the final binary could also be compromised no matter what you do, if you cannot verify authenticity in some way, or maybe the toolchain isn't hardened enough against arbitrary source code. But I still think it's worth at some level to close those other gaps.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Zealousideal-Okra523",
                "body": "I think it needs to be split into \"severity if exploited\" and \"chance for exploiting\".",
                "score": 18,
                "replies": [
                  {
                    "author": "jaskij",
                    "body": "AFAIK those both *are* rated separately and are the major components of the final CVE. But nobody looks past the single number.\n\nA great example are privilege escalations which require a preexisting RCE.",
                    "score": 39,
                    "replies": [
                      {
                        "author": "Zealousideal-Okra523",
                        "body": "I didn't even know there were multiple numbers. I just see these numbers thrown around and they never make sense.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "jaskij",
                            "body": "That's another systemic failure. Many people, probably including many \"security experts\" just don't know what goes into a CVE or how it's assigned.\n\nAnd well... Vulnerabilities are also rarely absolute. Often they will have some conditions for exploitation that just never occur. Fuck, you probably remember log4j, that one was very difficult to exploit if you didn't log user supplied data. Or you could have disabled the niche feature which included the vulnerability by changing some configs.\n\nBut people will take a binary yes/no approach because it's easier, or because compliance or insurance requires them to.",
                            "score": 11,
                            "replies": [
                              {
                                "author": "baordog",
                                "body": "What? Security experts have to assign cvss scores. We do it rationally via a calculation, this is all related in the cvssV2 string.\n\nUnless you were massively bullshitting your job you would know how the system works.\n\nThe problem is that if that one feature that causes the library to be vulnerable isn’t used today the devs might use it tomorrow.",
                                "score": 4,
                                "replies": [
                                  {
                                    "author": "All_Work_All_Play",
                                    "body": "&gt; Unless you were massively bullshitting your job you would know how the system works.\n\nThis could never, ever happen in business.",
                                    "score": 5,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Xyzzyzzyzzy",
                    "body": "One of the problems with evaluating \"chance of being exploited\" is that often the risk of exploitation depends on the presence of other vulnerabilities - most security breaches take advantage of vulnerability chains, not single vulnerabilities.\n\nThis is non-trivial to estimate because exploitable vulnerabilities travel in packs. A system that has one exploitable vulnerability is likely to have many different exploitable vulnerabilities.\n\nFor example, you're unlikely to find a system that stores passwords in plaintext but has no other serious security issues, because that sort of system wouldn't store passwords in plaintext! Instead, you're likely to find plaintext password storage on the same system that allows arbitrary incoming connections to its production database, has `admin:password` as its admin credentials, and is completely devoid of any logging or monitoring to detect suspicious behavior.",
                    "score": 12,
                    "replies": []
                  },
                  {
                    "author": "rainy_brain",
                    "body": "[EPSS score](https://www.first.org/epss/) aims to estimate likelihood of exploitation for any given CVE",
                    "score": 6,
                    "replies": [
                      {
                        "author": "ShoddyAd1527",
                        "body": "What would be more useful is simply listing the actual conditions for exploitation, instead of packing it into a number.\n\nA score of \"4.5 exploitables\" isn't really meaningful, compared to \"you must call this function on a Tuesday\" and the appropriate developers confirming this isn't their use case.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "ottawadeveloper",
                "body": "There should be a flag for \"related to a specific feature that may or may not be in use\" vs \"if you use this at all you are vulnerable\".\n\n\nLike, if Python has a security issue that requires the use of the IP address module, then the flag is set. If it's in core Python (or something widely used like io or os), then that shouldnt have it applied. Users could then more easily say this CVE isn't an issue because that feature isnt in use.",
                "score": 26,
                "replies": [
                  {
                    "author": "Rakn",
                    "body": "IMHO that's hard to do. In a sufficiently large organization it can't be expected that every developer knows all CVEs of a library. I don't even know all the libraries I'm using because I'm so many layers away from them in our code base. So if there is a CVE in a library the repository is using it gets patched, no matter the relevance to the current code base. If it's a small project maintained by 2-3 folks that care about security, then that's another thing and might work. But somehow I doubt that this works on a grand scale.\n\nStill. I agree that more detailed information can't hurt.",
                    "score": 29,
                    "replies": []
                  }
                ]
              },
              {
                "author": "roastedfunction",
                "body": "MITRE and NVD always score worst-case possible scenario because the US government could be running this code on public servers. It’s a joke that anyone relies on this data at all and I’m constantly fighting with security people about their bullshit scan results which just regurgitate all that noise while offering nothing to maintainers to actually improve their code’s security. ",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "accountability_bot",
            "body": "Everyone wants to make an impact and gain a reputation. I field public vuln reports all the time where I'm at. Every single report I've ever reviewed had a greatly exaggerated severity. \n\nI think the most worthless report I ever received was a dude who uploaded the output of an open-source scanning tool, but didn't even remotely understand the results and didn't know how to decipher it. Rated it as critical, and then asked for money.",
            "score": 10,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "The NVD is a joke, the punchline is that the alternative is worse.",
            "score": 8,
            "replies": []
          },
          {
            "author": "AlienRobotMk2",
            "body": "It's the same thing with all technology.\n\nUpdate your dependencies to replace known vulnerabilities by unknown vulnerabilities.",
            "score": 5,
            "replies": []
          },
          {
            "author": "mods-are-liars",
            "body": "Pretty sure I saw a CVE within the last few years for a RCE with a 9.x severity rating and the \"remote\" code execution required physical access to the machine.",
            "score": 2,
            "replies": []
          },
          {
            "author": "elrata_",
            "body": "Really? Which Caves got &gt;9 and are questionable? I didn't see them",
            "score": 1,
            "replies": [
              {
                "author": "Zealousideal-Okra523",
                "body": "The PHP one for starters. CVE-2024-4577\n\nThat severity is an absolute joke. It was only possible for bad production setups with some Asian alphabets.",
                "score": 2,
                "replies": [
                  {
                    "author": "James_Jack_Hoffmann",
                    "body": "The doom and gloom on that CVE when it broke out was CS undergrad brain rot because it was \"le php lol amirite\".",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "zerpa",
            "body": "In cybersecurity, one man's magic is another's daily toolbox.",
            "score": 1,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "There is need for some level of indication to know which problems to tackle first. It just has been mismanaged to the level of uselessness.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "SaltyInternetPirate",
        "body": "A 9.8? There's bugs that allow for remote code execution in ring 0 without interaction from the victim and they don't even get a score that high.",
        "score": 74,
        "replies": []
      },
      {
        "author": "Jacobinite",
        "body": "It is pretty shitty that most people complaining about CVEs are coming from people working in fortune 500 companies that have vulnerabilities scans that require their employees to action on it.\n\nAll these stupid vulnerability scan tools that companies buy into are just adding more stress to open source developers without actually addressing most real issues, nor helping providing the resources to fix real issues.",
        "score": 592,
        "replies": [
          {
            "author": "SanityInAnarchy",
            "body": "It does address *some* issues. Companies like that will often just *never* update a dependency if they can avoid it. Having a scan that tells them they *must* upgrade is sometimes the only reason upgrades ever happen! Even if 90% of those vulnerabilities aren't that secure, this might be the only way they ever patch the other 10%.\n\nIMO the bigger problem is the lack of resources. Instead of just piling onto a bug tracker, what if they actually sent patches? They could contribute to the project, get credit, *and* limit the impact to their own systems.",
            "score": 232,
            "replies": [
              {
                "author": "CodeNCats",
                "body": "Worked at one of those companies. I feel like there's some companies where careers go to die or cash in the experience for that last role before retirement or moving on. I want to work with a team of motivated engineers. Yes we all get our burnout phases. Yet overall working with people who want to make good software and who challenge each other is what I want to do. \n\nThere have been those companies where it's like a lot of people just doing the bare minimum. It's not a problem until somehow it is. At the very least some of these alerts prompt other people to ask what's doing on. That's like hell. Living in just keep the lights on mode. Nobody wants to work cross team. Everyone exists in their silos. \n\nThe worst part is when the domain knowledge experts in those silos feel somehow challenged. Like maybe their processes can be improved. Even highlighting a suggestion. You get massive pushback because it wasn't their idea. They have been working in the system for X amount of years and feel they know better. No discussion. Just zero response. You weren't trying to challenge them or attack them. It's just maybe you have come across a similar problem at a previous job and you can provide more insight. Nope. That won't work.",
                "score": 54,
                "replies": [
                  {
                    "author": "SanityInAnarchy",
                    "body": "That's one way this can show up...\n\nHere's another: Plenty of cross-team work, plenty of discussion, and plenty of people care... about building and launching stuff. Even if people *want* to work on maintenance or quality control, there is never any time in the schedule for tech debt, and it's no one's job to track dependencies.\n\nSo, tragedy of the commons: No one has time to work on anything that isn't directly their job. The only way this stuff ever happens is if you get lucky and have one particularly-obsessive person who's willing to sacrifice their own career progression to clean up this shit... *or* if you can convince someone that your overall lack of security here is an existential threat to the company.\n\nThe nice thing about a vulnerability-scanner is how little time and effort it takes to get it to start reporting stuff. It'll take time and effort to *investigate,* to work out which CVEs are false positives and such, but you can at least generate a report that can force the company to start moving.",
                    "score": 21,
                    "replies": [
                      {
                        "author": "moratnz",
                        "body": "Agreed. And someone who's effectively and proactively managing problems and tech debt is someone who is neither releasing new features, driving new revenue, nor fixing high profile problems / helping SLT avoid looking like assholes. Which is a recipe for obscurity and getting quietly downsized next time there's a restructure.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "SanityInAnarchy",
                            "body": "You'd think this would be an easy concept to explain to management, though: That's a force multiplier. Letting them go, aside from murdering team morale, is also going to make all of the people you know about less effective.\n\nBut... evidently not. More than all the other layoffs lately, the one that confuses me the most is [Google letting go of their Python team](https://news.ycombinator.com/item?id=40176338).",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "rome_vang",
                "body": "My current side project is finding and patching vulnerable work stations for a 80 something person company. I have a giant spreadsheet to go through. I started with my workstations and hoping to find a common denominator that can be automated to reduce our vulnerability count.",
                "score": 3,
                "replies": []
              },
              {
                "author": "josefx",
                "body": "&gt; They could contribute to the project, get credit, and limit the impact to their own systems.\n\nWhy contribute to third party libraries that are in the open and will continue to get flagged until the end of time. Keeping third party libraries around only asks for future work. Zip is compromised? Roll your own compression algorithm. OpenSSL had a bug? Ask your CEOs demented step child to code up something in K&amp;R C. No one will ever look at that code and more importantly, no one will ever raise a CVE for it because no one outside of your company uses it.",
                "score": 5,
                "replies": [
                  {
                    "author": "SanityInAnarchy",
                    "body": "Depends who's asking.\n\nAs leadership, why would you approve someone using third-party libraries instead of rolling your own? Because it's still vulnerable even if no one raises a CVE for it, and breaches will cost you money and trust when someone finds them. Security through obscurity won't save you.\n\nAs an individual contributor... what's the problem with future work? Yes, you will continue to patch them until the end of time, generating a nice profile of open source contributions and using the vuln-scanner tool to demonstrate the value of this to your boss. And this new job you've created for yourself sounds way more interesting than rolling your own, shittier versions of everything and then getting back to that CRUD app.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "PurpleYoshiEgg",
                        "body": "Measure: Number of CVEs in our product.\n\nTarget: Minimize the number of CVEs in our product.\n\n[Goodhart's law ensues](https://en.wikipedia.org/wiki/Goodhart's_law).  It's not a smart decision for everyone involved, but the metrics are going to look good until that golden parachute will deploy for management, if it ever needs to.\n\nFor the individual contributor, usually there's other things they'd rather be working on.  Or, they're expected to patch everything *on top of* their normal duties.  And because it's security, I expect a lot of CVE activities in larger organizations are massively bureaucratic, meeting-dense, or both, and I don't blame people for avoiding meetings that could just be emails or not about actual issues.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "jaskij",
            "body": "Meanwhile, Daniel Steinberg: makes `curl` its own CNA with the power to reject CVEs.",
            "score": 100,
            "replies": [
              {
                "author": "schlenk",
                "body": "Meanwhile: kernel.org becomes its own CNA and floods the dysfunctional system with hundreds of CVEs. (https://sigma-star.at/blog/2024/03/linux-kernel-cna/ )",
                "score": 31,
                "replies": [
                  {
                    "author": "jaskij",
                    "body": "I knew how they became a CNA, didn't know that's how it turned out. Makes sense tbh.",
                    "score": 6,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "schlenk",
            "body": "The main stupidity there is to take the **Base** CVSS score instead of the adjusted environmental CVSS. The CVSS 4.0 version tries to address that issue a bit more.\nThe scanners just dump the base score in the lap of the admins and they do not adjust it for their environment due to stupid policies.",
            "score": 14,
            "replies": []
          },
          {
            "author": "iiiinthecomputer",
            "body": "I hate them.\n\nWe have \"vulnerabilities\" rated critical because a component we build into an os/less container pulls the golang gRPC proto package from some massive monorepo that also contains an executable with a completely unrelated issue. We don't build or use the executable. Still have to go through full emergency patch response because stupid tooling is stupid, and our customers demand that their own stupid tooling must report clean scans on our container images etc.\n\nOur code is shitty and insecure. But it's Vulnerability (TM) Free!",
            "score": 14,
            "replies": [
              {
                "author": "moratnz",
                "body": "&gt; Our code is shitty and insecure. But it's Vulnerability (TM) Free!\n\nI feel that in my bones.\n\n\"I'm not saying we don't have problems; we just don't have _those_ problems. And time spent on those problems is time not spent working on our _actual_ problems. So time spent on fixing that 'vulnerability' actually makes us actively less secure\"",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "pixel_of_moral_decay",
            "body": "And they buy into those scanners because insurance and/or compliance basically dictates it.\n\nIt’s a whole cyclical industry to just suck money and resources out of IT without doing anything to address real issues",
            "score": 10,
            "replies": [
              {
                "author": "b0w3n",
                "body": "Third party vendor basically made me \"prove\" to them that sonarqube wasn't finding glaring security problems in our code.\n\nThey made me reinstall with _their_ copy of the software.\n\nThey _still_ told us we weren't secure enough for their liking because ???.  Every quarter my boss asks me what we can do to get them to play ball and I tell him \"buy their company\".",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "Syntaire",
            "body": "Let's not sell them short. They're adding more stress to *everyone*. I had to upgrade some software on our entire production environment over a flag for a vulnerability that not only would never happen, but it was falsely flagged for a version of the software we didn't even have to begin with.",
            "score": 3,
            "replies": []
          },
          {
            "author": "cheezballs",
            "body": "Ugh, tell me about it. Our scans flag `react-scripts` because they dont bother updating the fucking transitive dependencies in that repo, so we have to enter a whole bunch of exceptions into the scanning tools.",
            "score": 1,
            "replies": []
          },
          {
            "author": "captmac",
            "body": "Or the cyber insurance outsourcing their vulnerability scans that ignore any kind of common sense.  \n\nSuch as threatening to raise our rates because we are using MS exchange and Exchange had an unpatched vulnerability when Abe Lincoln used it in 1860 instead of realizing and listening that we’re on O365. \n\nConstant stupid crap like that?",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "rlbond86",
        "body": "Great article on how bullshit CVEs have become: https://www.sqlite.org/cves.html",
        "score": 47,
        "replies": [
          {
            "author": "masklinn",
            "body": "There's also https://daniel.haxx.se/blog/2023/08/26/cve-2020-19909-is-everything-that-is-wrong-with-cves/\n\nCurl actually [became a CNA](https://daniel.haxx.se/blog/2024/01/16/curl-is-a-cna/) to mitigate that bullshit.",
            "score": 6,
            "replies": []
          },
          {
            "author": "mist83",
            "body": "Yo dawg, I heard you like CVEs, so I put some CVEs in your CV so you can expose vulnerabilities while you expose your experience!",
            "score": 9,
            "replies": []
          }
        ]
      },
      {
        "author": "dahud",
        "body": "Ok  so the root of this CVE is that a function that returns whether an IP address is public or private will incorrectly return public for some oddly-formatted private IPs.\n\n*How is this a vulnerability?*\n\nEven if this function was being used improperly as a security measure, *even if* it was the only gate on accessing a privileged resource, and *EVEN IF* the attacker is somehow able to control the content and format of his IP address with great precision, then surely this function is failing safe. Surely the programmer would have granted access to the goodies on private IPs, not public ones.\n\nImagine a string compare function that incorrectly claims that strings containing zalgo-text don't match, even when they do. Imagine claiming that this is a catastrophic vulnerability, because someone could use this string comparison in a login system that logs you in if the passwords *don't* match. \n\nFucking resume-padding bullshit.",
        "score": 492,
        "replies": [
          {
            "author": "ElusiveGuy",
            "body": "&gt; Surely the programmer would have granted access to the goodies on private IPs, not public ones.\n\nThe Synapse server for Matrix has a URL preview function, which will fetch and render (preview) links in chat messages. In its configuration, there is an IP blacklist that is pre-populated with RFC1918 private addresses, which are not allowed to be previewed. The intention here is that a public address is fair game, but internal/private addresses should not be exposed by this (chat) server.\n\nThis is a real-world scenario where you would want to allow access only to public resources, and not private ones. It is conceivable that a library public/private function could be used in place of this explicit blacklist.\n\nAll that said, I don't think this should be counted as a *security vulnerability* against the library, as this does not serve a security function within the library. It's just a more standard bug.",
            "score": 96,
            "replies": [
              {
                "author": "AndrewNeo",
                "body": "Previewing private network IPs could quickly turn into an SSRF so it's especially important to handle correctly",
                "score": 23,
                "replies": []
              }
            ]
          },
          {
            "author": "Pure-Huckleberry-484",
            "body": "Imagine having to “fix” CVEs that only exist if the code is executed on a linux/unix OS and your employer still makes you do it in your complete Windows environment.",
            "score": 105,
            "replies": [
              {
                "author": "rooood",
                "body": "My company has a severely strict security team, to the point it gets in the way of doing the actual job almost on a daily basis, but they still have the sense of analysing and then ignoring CVEs which are harmless to our specific architecture.",
                "score": 25,
                "replies": []
              },
              {
                "author": "Takeoded",
                "body": "that actually happened once to me, but the other way around (something about on Windows, fopen is case-insensitive, but on Linux, it's case sensitive.. don't remember much more than that sorry)",
                "score": 5,
                "replies": [
                  {
                    "author": "nerd4code",
                    "body": "Tecccccccχᵪχᵪχᵪχcccchnically Linux leaves it up to the filesystem driver—e.g., V/-FAT is not case-sensitive by default, but ext2/3/4(/5?/6? do we have a 6 yet?) and most others are. Often case-handling is configured at mount time, so it’s mostly up to Mr. Root (ﷺ) in practice.\n\nFun fact: DOS, Windows, WinNT, and various older UNIXes also have a rather terrifying situation regarding filename (and sometimes pathname) truncation.\n\nIdeally, attempting to access an overlong file- or pathname should raise an error (e.g., `ENAMETOOLONG`), but various OSes will silently lop off anything beyond the limits and sally glibly forth as if nothing were wrong. DOS, DOSsy Windows, and AFAIK older NT truncate filenames; DOS also truncates extensions, so `myspoonistoobig.com-capture.htm` might become `myspooni.com`, which is distinctly unsettling.\n\nModern NT doesn’t truncate *filenames* at least, and IIRC modern POSIX requires the NOTRUNC option (indicating an API-level promise to return an error if an erroneous input is fed in), but older systems may require you to check functionality for individual paths with `f`-/`pathconf`, or might just not tell you at all whether truncation will occur (iow, FAFO and one-offery are the only detection methods).\n\nHowever, everything must be twice as complicated as it ought to be when you’re Microsoft, and therefore NT pathnames support resource fork names or WETF MS calls them (Apple called them that on HFS IIRC, at least), and *those* do still truncate silently.\n\nSeeing as to how most stuff just uses files and directories or container formats when it wants forkyness, I assume fucking nothing outside MS’s own software, malware, and MS’s own malware uses this feature. —I mean, I know the forkjobbies are used regardless, but not named in any explicit fashion. In any event, as long as an attacker doesn’t control pathnames too directly it shouldn’t matter. Just another small hole left open, and the terse “Caution: Holes (Intentional)” sign at the entrance to the park will surely suffice to keep tourists from sinking their ankle in and faceplanting.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "ElusiveGuy",
                        "body": "&gt; resource fork names or WETF MS calls them\n\nI believe you're talking about Alternate Data Streams?\n\nThe only place I've seen them used in reality are for the zone identifier, i.e. to mark a file as having been downloaded from an external source and therefore apply additional security restrictions on it (the famous \"unblock\" dialog). All modern browsers add this ADS to downloaded files. I believe macOS uses an extended attribute for the same functionality.\n\nI'm surprised that the stream name can be silently truncated, though.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "lelanthran",
            "body": "&gt; oddly-formatted private IPs.\n\nIPs are ... strange. \"Oddly formatted\" means nothing when \"normally formatted\" can look like `0xc1.0627.2799` or `3232242671`.\n\nUsing regexes to decode an IP from a string is just broken - you can't do it for all representations of an IP address. You have to parse it into individual octets and *then* check it.\n\n[EDIT: Those examples above are IP4 (4-byte), not IP6]",
            "score": 53,
            "replies": [
              {
                "author": "insanelygreat",
                "body": "&gt; Using regexes to decode an IP from a string is just broken\n\nI tend to agree. For reference here's how it's done in:\n\n- [Python](https://github.com/python/cpython/blob/1a84bdc2371ada60c01c72493caba62c9860007b/Lib/ipaddress.py#L1079-L1093) with [constants here](https://github.com/python/cpython/blob/1a84bdc2371ada60c01c72493caba62c9860007b/Lib/ipaddress.py#L1588-L1610)\n- [Ruby](https://github.com/ruby/ipaddr/blob/036836d910473aa56d224eb22c8518e1df41013c/lib/ipaddr.rb#L277-L298)\n- [Golang](https://github.com/golang/go/blob/82c371a307116450e9ab4dbce1853da3e69f4061/src/net/ip.go#L133-L150)\n- [Rust](https://github.com/rust-lang/rust/blob/ef3d6fd7002500af0a985f70d3ac5152623c1396/library/core/src/net/ip_addr.rs#L628-L662) with [IPv6 here](https://github.com/rust-lang/rust/blob/ef3d6fd7002500af0a985f70d3ac5152623c1396/library/core/src/net/ip_addr.rs#L1525-L1547)\n\nWorth noting that all of the above ship with their respective language.\n\nThat said, open source developers owe us nothing, and I don't fault them for getting burnt out. The regex-based solution might have worked just fine for the dev's original use-case. IMHO, companies that rely on OSS need to contribute more to lift some of the burden off volunteers.",
                "score": 16,
                "replies": []
              },
              {
                "author": "istarian",
                "body": "IPv4 had a reasonably sensible address scheme and I assume it was intended by it's designer to be human readable.  \n  \nBy comparison IPv6 addresses are absolutely nightmarish, especially when you add all the other craziness.",
                "score": 33,
                "replies": [
                  {
                    "author": "moratnz",
                    "body": "v4 addresses are 32bit binary strings; dotted quad notation (1.2.3.4 form) is a human readable transform. 192.168.0.254 is equally validly 3232235774, 0b11000000101010000000000011111110, 0xc0.a8.0.fe or 0300.250.0.376, and of those the 'most correct' is the binary one, because that's what's actually used on the network.\n\nv6 addresses are the same, they're just 128bit strings rather than 32bit, and we've settled on colon-seperated hex rather than dot-separated decimal as the human readable version",
                    "score": 9,
                    "replies": []
                  }
                ]
              },
              {
                "author": "moratnz",
                "body": "Yep; IPv4 addresses are 32bit binary strings. Anything else you're looking at is a convenience transform. \n\nThis is a fact that an awful lot of networking instructionals ignore (I'm looking at you, Cisco), leading to people getting way too hung up on byte boundaries (no, you don't have a class C network. No-one has class C networks any more. You really really never have a class C network in 10. space) and trying to get their head around truly awful maths by doing net mask comparison in dotted-quad form.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "alerighi",
            "body": "Also... we can say that if a software is relying on that function as a security mechanism it's vulnerable in the first place. I mean security shall be enforced with firewalls, not something that tells \"no you can't make this request, it's a private address\".",
            "score": 3,
            "replies": []
          },
          {
            "author": "Moleculor",
            "body": "&gt; Surely the programmer would have granted access to the goodies on private IPs, not public ones.\n\nCrazily enough, I have on my machine a program that I *only* want running when connected to a *connection* I've labeled as Public in Windows. It transmits/receives only when connected to a Public network rather than Private. \n\nSo I use Firewall rules to only Allow the program to run when I'm connected to networks I've told Windows are Public.\n\nNow, obviously this is NOT referring to the IP designation stuff referred to in the article? I'm instead referring to Windows' method of letting you distinguish between connecting to (for example) your home network vs your local McDonald's WiFi for determining whether or not you're doing file sharing and printer sharing, etc?\n\nI leverage that same designation method to make a program *only* transmit/share data on a network I've labeled Public in that fashion. \n\nAm I weird? Yes.  \nIs this an extremely oddball edge case? Yes.  \nAm I going to be more specific about why? Nooooope.  \nIs there possibly/probably a better solution? Yeah, maybe. This, at least, utilizes built in core-Windows features to do traffic control in a way that doesn't rely on 3rd party software.\n\nBut considering how fucking weird I am? I can't discount the possibility that someone, somewhere, wrote code that uses the public/private distinction to control data *and* used it in a way where they only want data being transmitted to IPs designated as Public. \n\nBecause there's more than a billion people in the world, and that's a lot of screwball oddities that can happen.",
            "score": 13,
            "replies": [
              {
                "author": "Horace-Harkness",
                "body": "https://xkcd.com/1172/",
                "score": 45,
                "replies": [
                  {
                    "author": "Moleculor",
                    "body": "I had that comic in my head the moment I thought about writing my reply. 😂",
                    "score": 10,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Franks2000inchTV",
                "body": "It's [Hyrum’s Law](https://www.hyrumslaw.com/)",
                "score": 7,
                "replies": []
              },
              {
                "author": "kagato87",
                "body": "Not weird.  This prevents a compromised device or application from scanning the local network.\n\nMany wireless access points do this by default - you can only talk to the big-I Internet.",
                "score": 6,
                "replies": []
              },
              {
                "author": "Dontgooglemejess",
                "body": "Ok yea. But also no.\n\nI think the salient point you miss here is that all machines have a public and private ip and are free to self address as public. That is, it’s nonsense to say ‘only allow public ips’, because that is just all machines. \n\nPut another way , you can say ‘no cops allowed’ and that makes sense but to say ‘only humans’ and try to argue that that means no cops is silly. Public ip is all ips.\n\nThe only way that this is an exploit is if the person implementing it think is if the person implementing super misunderstood what public vs private ip meant, at which point this is not an exploit it’s just bad code.",
                "score": 6,
                "replies": [
                  {
                    "author": "Moleculor",
                    "body": "&gt;  Public ip is all ips.\n\nUh, what?\n\nI had the understanding that some IPs were public, and some were private, but none were both. Like, specifically for example `10.*.*.*` is private. It's *not* public, so far as I understand.\n\nYeah, I'm not following. The specific code seems to be determining whether it falls into the IANA's category of public or private, and that seems very strictly delineated in a way where *not* all IPs are Public, in their eyes? Or so I'm interpreting what I'm double checking online? 🤷‍♂️\n\n&gt; all machines have a public and private ip\n\nHuh? Uh... wait, really? That... doesn't *sound* right, but I admit I'm not an expert in this field. \n\nI'm currently sitting on my local machine poking around trying to figure out what public IP address it has assigned to it, and I'm not finding anything. All I see is 192.168.1.3. And that's Private according to the IANA. \n\nGot a way for me to get my Windows machine to cough up what Public IP address it has been assigned? And no, I don't mean the [public IP address for my network](https://www.google.com/search?q=what's+my+IP+google), which is (as far as I'm aware) assigned to my *router* and not my PC.",
                    "score": 10,
                    "replies": []
                  },
                  {
                    "author": "moratnz",
                    "body": "&gt; all machines have a public and private ip \n\nv4 or v6? Because most machines very emphatically don't have both.\n\nNone of the machines on my home network (other than the edge firewall) have a public v4 address assigned to them. Yes, they can reach the wider internet via NAT on that firewall, but they have no knowledge of or control over that NAT - they just know that if they send traffic destined to 8.8.8.8 to 192.168.1.1, they get a response back, and that's all they care about.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "edgmnt_net",
            "body": "It should be fixed, documented as a limitation or it should return an error when parsing fails, IMO. It's far from straightforward to claim it's safe anyway when calling code could be falling back in a larger if-elif-else based on some reasonable assumptions according to the standard (\"if it's neither public nor multicast nor... then it must be a private address\" which is obviously quite debatable in code, but it makes sense according to the spec).\n\nI think it's reasonable to try and get people to write code that is primarily correct and reduce scope if needed. I also agree with what people like Linus have said that most bugs may have wider implications, but I'd rather make more of a fuss about regular bugs than doubt CVEs.",
            "score": 2,
            "replies": []
          },
          {
            "author": "dekoboko_melancholy",
            "body": "That's very much not failing safe. I'd wager, based on my experience performing source code review for security, it's much more common to be using an isPrivate function to filter _outbound_ traffic. \n\nI don't think this is a critical issue on its own, for sure, but it could easily lead to one layer of \"defense in depth\" being broken.",
            "score": 6,
            "replies": [
              {
                "author": "bbm182",
                "body": "A concrete example for the down-voters: Your service calls a customer-supplied webhook to notify them when some event has occurred. You want to prevent this feature from being used to probe your internal network so you use this package to disallow the entry of URLs with private IPs (DNS names will be handled by a custom resolver).",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "BeABetterHumanBeing",
            "body": "The risk is that you may make calls outside your internal network, thereby exporting the contents of a request that aren't intended to be seen elsewhere.\n\nE.g. \"create user\" request that passes all of a user's PII, and is now sent randomly elsewhere in the internet.",
            "score": 3,
            "replies": [
              {
                "author": "istarian",
                "body": "I think his point was that it's okay, but not great if it tells you that one of your private IPs is in fact public.\n\nI.e. you wouldn't be using it.",
                "score": 9,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Gwaptiva",
        "body": "So now those developing possibly competing products can raise bogus CVEs against the FOSS equivaldnt to force it out of business? Surely that system needs reform",
        "score": 177,
        "replies": [
          {
            "author": "abeuscher",
            "body": "This is open source. The problem isn't Machiavellian it's that too many low end devs are bounty hunting because it raises their profile. In a sense the employment situation in the field is probably driving some of the uptick. I agree the system is broken; it's just not broken in the way everything else is.",
            "score": 77,
            "replies": [
              {
                "author": "bwainfweeze",
                "body": "Didn’t Torvalds declare war on a CS department that was trying to inject vulnerabilities into Linux for “research”?",
                "score": 52,
                "replies": [
                  {
                    "author": "ZorbaTHut",
                    "body": "[The University of Minnesota](https://www.reddit.com/r/HobbyDrama/comments/nku6bt/kernel_development_that_time_linux_banned_the/).",
                    "score": 44,
                    "replies": [
                      {
                        "author": "Ibaneztwink",
                        "body": "Great lesson on not blindly trusting bombastic research papers just because the paper says so.",
                        "score": 15,
                        "replies": [
                          {
                            "author": "bwainfweeze",
                            "body": "Great lesson on how departments other than the Psychology Department need oversight for ethics violations in experimental settings.",
                            "score": 19,
                            "replies": [
                              {
                                "author": "yawaramin",
                                "body": "From the above link:\n\n&gt; That investigation is still ongoing but revealed that the Internal Review Board (in charge of research ethics) had determined that the research was not human experimentation and thus did not need further scrutiny.",
                                "score": 9,
                                "replies": [
                                  {
                                    "author": "dahud",
                                    "body": "Finally, definitive proof that OS maintainers are subhuman.",
                                    "score": 4,
                                    "replies": []
                                  },
                                  {
                                    "author": "bwainfweeze",
                                    "body": "Yeah I saw that. That needs a follow-up. Way to double down.",
                                    "score": 2,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "cuddlebish",
                    "body": "Idk about war in as much as that all commits from that universities email are autodenied",
                    "score": 33,
                    "replies": [
                      {
                        "author": "bwainfweeze",
                        "body": "He blackballed an entire college to make his point about just how egregiously unethical their process was. \n\nRed teams have prior consent from the targets. There are ways to compartmentalize so that some responsible individuals are aware and others are not if you're worried about awareness spoiling outcomes.",
                        "score": 16,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "Hilariously the way they tried to inject the vulnerability was similar to what was used to compromise XZ Utils. \n\n\n\n\"oh, OSS projects would catch any hostile contributions so there is no need to check if that is true? Time to see about that.\"\n\n\nI've always wondered how the timelines line up.\n\nEdit: Yeah, its a near match. The Github account that compromised XZ  after the kernel fiasco.\n\nhttps://github.com/JiaT75?tab=overview&amp;from=2021-06-01&amp;to=2021-06-30\n\nStart contributing to open source weeks after the story broke.",
                    "score": 12,
                    "replies": [
                      {
                        "author": "bwainfweeze",
                        "body": "That's sort of the same vibe as that friend of a friend who is an asshole and defends themselves with \"hey I'm just being honest. If you can't handle it that's your problem.\" Nobody knows why your friend likes this person and you all wonder what's wrong with them.\n\nI once had someone point out that I had my shirt on inside out by telling me he needed to ask me a question after a meeting and then after everyone filtered out he said, \"Are you the sort of person who wants someone to point out that their shirt is inside out?\"  Same guy later dabbled in local politics and I think that was not a bad call. Maybe I should convince him to work in security...",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Dorkanov",
            "body": "It's not even those developing competing products many times. I saw a company just the other day that got credentialed to issue CVE numbers that provides expensive paid support and updates for old libraries and frameworks. I would be willing to bet money they go issue a high severity CVE soon for something like a vulnerability that only affects IE knowing that corporate security rules will force fixing it and either upgrading or buying a contract with them even though you've got way more serious issues if your users are running IE \n\nThere are also people out looking for bogus CVEs to pad their resumes since to some people it's very impressive you found an 8 or 9 CVE.",
            "score": 10,
            "replies": []
          }
        ]
      },
      {
        "author": "makonde",
        "body": "Github should really have better community management tools.",
        "score": 50,
        "replies": []
      },
      {
        "author": "gelfin",
        "body": "Although I don’t have any specific reason to suspect this is happening intentionally, I can also see how this trend complicates existing supply chain attack problems. A flood of bogus high-sev CVEs will stochastically reduce attention given to legitimate vulnerabilities across the board.",
        "score": 18,
        "replies": [
          {
            "author": "winky9827",
            "body": "I think the problem lies in that any individual can submit for a CVE without peer review. If there's truly a security issue, it should pass a review by committee. Only then should it be recorded. Committee can mean various things here and doesn't necessarily have to place the onus on any one group, but the path from lazy dev seeking resume material to full blown CVE seems a lot less difficult that perhaps it should be.",
            "score": 17,
            "replies": []
          }
        ]
      },
      {
        "author": "Greenawayer",
        "body": "Stupid shit like this just makes it harder to give people nice things.\n\nIf it's such a big issue then fork it.",
        "score": 73,
        "replies": [
          {
            "author": "0_consequences",
            "body": "But then you can't profit off of the self reliant open source software. You have to invest ACTUAL work into it.",
            "score": 43,
            "replies": []
          },
          {
            "author": "Nisd",
            "body": "Open Source is so thank less",
            "score": 8,
            "replies": []
          }
        ]
      },
      {
        "author": "VeritasEtUltio",
        "body": "Sounds like the severity scoring has become just another leaderboard.",
        "score": 14,
        "replies": []
      },
      {
        "author": "drunkdragon",
        "body": "This made me think. \n\nOpen source software often comes with zero warranty, and the developer cannot be compelled to write an update if they don't want to.\n\nSure, someone else can fork the repo and submit a fix, but what is the best way to distribute that fork?",
        "score": 61,
        "replies": [
          {
            "author": "fojam",
            "body": "You could always PR it into the original repo. Sometimes with dead repos though, I'll look at the forks and try to find one that has the most or best changes on it",
            "score": 33,
            "replies": [
              {
                "author": "bwainfweeze",
                "body": "Half dead is almost worse. I have an open PR from a year ago for a company I don’t even work at anymore. It’s the 3rd of 4th PR I filed and the rest have landed.",
                "score": 9,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "dontyougetsoupedyet",
        "body": "A severe security rating should have always required a working proof of concept exploitation. If you cannot show beyond reasonable doubt that the flaw in some software is a severe vulnerability it should not be marked as such. I've known a lot of researchers, and frankly even many of the ones who are actively showing how things can be exploited are attention seeking personalities, but what they unequivocally were not was: lazy. These days there are a great number of lazy attention seekers, and that's a bad situation for security audits in general.",
        "score": 70,
        "replies": []
      },
      {
        "author": "iamapizza",
        "body": "&gt; Disputing a CVE is no straightforward task either, as a GitHub security team member explained. It requires a project maintainer to chase the CVE Numbering Authorities (CNA) that had originally issued the CVE.\n\nThis is what we need to be addressing, or if the situation keeps going like this, we'll see a lack of trust in the system. Which is already eroding. Maintainers are often not included in the original process, yet it's somehow on _them_ to correct a CNA's work. The CNAs ought to be given reputation strikes for lack of thorough testing and communication.",
        "score": 9,
        "replies": []
      },
      {
        "author": "jaskij",
        "body": "Reading the article, and the comments here, I think we need to more often actually look whether a CVE is even applicable.\n\nThere was an insane shitstorm in the Rust ecosystem sometime back about vulnerabilities in time handling crates which only ever applied if someone set environmental variables in a multithreaded program. Yeah.",
        "score": 16,
        "replies": [
          {
            "author": "serial_crusher",
            "body": "My attitude on that has shifted over the years. The reality is there’s a lot of legitimate vulnerabilities where a naive developer will convince himself it’s not a real issue because he’s not smart enough to connect the dots and see how badly it could be exploited. I’ve heard people say of XSS vulnerabilities, “great you can make it pop up an alert dialog. So what?”\n\nThere was a famous Reddit thread a couple years ago where a guy objected that browsers labeled his login page as insecure for not using https, then in the comments he defended himself by talking about how he had implemented his own authentication system so he was confident it was secure… and people just hacked the hell out of his web site to prove him wrong.  \n\nThe moral of the story is it’s usually better to just change what the alert says rather than worrying about whether it’s necessary.",
            "score": 24,
            "replies": [
              {
                "author": "Booty_Bumping",
                "body": "&gt; There was a famous Reddit thread a couple years ago where a guy objected that browsers labeled his login page as insecure for not using https, then in the comments he defended himself by talking about how he had implemented his own authentication system so he was confident it was secure… and people just hacked the hell out of his web site to prove him wrong. \n\n[This started on Firefox's bug tracker, actually](https://arstechnica.com/information-technology/2017/03/firefox-gets-complaint-for-labeling-unencrypted-login-page-insecure/)",
                "score": 7,
                "replies": []
              },
              {
                "author": "nnomae",
                "body": "The counterpoint however (paraphrasing a Linus Torvalds quote I can't quite remember) is that nearly every bug is a security vulnerability given enough effort. If the standard becomes \"with sufficient effort a skilled attacker could craft a custom exploit\" well that applies nearly anywhere there's a bug.\n\nThe bug mentioned in the article is quite obviously just a plain bug, a function returns the wrong value when passed weird but still technically valid data. Yes, it could lead to other software that relies upon it having a vulnerability but it is not, in and of itself, in any way shape or form, an exploitable vulnerability.",
                "score": 12,
                "replies": [
                  {
                    "author": "alerighi",
                    "body": "Exactly, a function that returns a wrong result if it's feed a wrong input? Basically we would need to assign a CVE on most of the C standard library, and let's not talk about PHP, there are a ton of functions that if they are feed with unexpected input they just behave wrongly. So what? \n\nThis is if we want may not even be a bug, the author could just have updated the documentation saying \"this function assumes that the IP address is provided in the decimal dotted form, other inputs are undefined behavior\".",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Helpful-Pair-2148",
                "body": "Just have to look at everyone in this very thread (and the top comment at the time of me writing this comment) saying that a function that wrongly identifies an IP address as \"public\" is a fail-safe and not an issue... these people have clearly never heard of SSRF, and yet they confidantly comment on a security issue like they know what they are talking about.\n\nMost developers have zero security understanding whatsoever.",
                "score": 7,
                "replies": []
              },
              {
                "author": "Ibaneztwink",
                "body": "&gt;I’ve heard people say of XSS vulnerabilities, “great you can make it pop up an alert dialog. So what?”\n\nThere's literally a guy in one of these issue links saying that a function just returning 'false' instead of 'true' doesn't make a vulnerability. I can't understand how programmers could seriously agree with something so shortsighted.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Xyzzyzzyzzy",
        "body": "I sympathize with the `node-ip` developer. They were saddled with a BS CVE - and all of the annoyance and abuse that comes with it - and had no realistic recourse except to archive the repo.\n\nBut:\n\n&gt; Yet another npm project, micromatch which gets 64 million weekly downloads has had 'high' severity ReDoS vulnerabilities reported against it with its creators being chased by community members inquiring about the issues.\n\n&gt; \"Can you point out at least one library that implements micromatch or braces that is susceptible to the vulnerability so we can see how it's actually a vulnerability in the real world, and not just theoretical?\" asked Jon Schlinkert, reacting to CVE-2024-4067 filed for his project, micromatch.\n\nYou know how you sometimes `npm install` a simple package, and it insanely has transitive dependencies on dozens of other packages, and you investigate and find that it depends on lots of tiny packages like `pad-left` and `has-value` and `sort-desc` and `is-whitespace`? A lot of those are from Schlinkert and [his 1,458 npm packages](https://www.npmjs.com/~jonschlinkert). So he's, let's say, a subject matter expert on people creating large numbers of arguably unnecessary entries into a public registry that others rely on.",
        "score": 18,
        "replies": [
          {
            "author": "lIIllIIlllIIllIIl",
            "body": "Dan Abramov (React Core) wrote about that [a while ago.](https://overreacted.io/npm-audit-broken-by-design/) Almost all \"critical vulnerabilities\" on npm are ReDoS, which can only happen if:\n\n1. You run RegEx queries from unsanitized user input. (Your fault, not the library's fault...)\n2. The attacker already has access to your system and modifies your program to execute a slow RegEx. (Uh... not sure that's what an attacker with full access would do, buddy...)\n\nnpm audit is now useless because people keep filling ReDoS vulnerability on every project and real vulnerabilities are drowned in a sea of false positives.\n\nA lot of projects just started bundling their dependencies, so that they wouldn't be flagged as vulnerable by npm if one of their dependencies or transitive dependencies got falsely flagged.",
            "score": 17,
            "replies": [
              {
                "author": "Xyzzyzzyzzy",
                "body": "That's very true, and I think Abramov is mostly correct here. Though he has much more faith in developers than I do (emphasis his):\n\n&gt; Let’s look at the `webpack-dev-server` &gt; `chokidar` &gt; `glob-parent` dependency chain. Here, `webpack-dev-server` is a **development-only** server that’s used to quickly serve your app **locally**.\n\nCorrection: `webpack-dev-server` *should* be a development-only server that is used locally. It tells you that it's a development-only server. It tells you not to use it for production systems. But it's used in production systems anyways.\n\nI think the argument would go like: there's an \"exploit magnetism\" phenomenon where, if you find one exploitable vulnerability caused by poor development and deployment practices, you're likely to find other exploitable vulnerabilities too. (Named after [crank magnetism](https://rationalwiki.org/wiki/Crank_magnetism), the same idea applied to conspiracy theories.)\n\nSo security professionals should assume that software is likely to be used incorrectly - because the systems most at risk are precisely those that do things incorrectly.\n\nSo:\n\n&gt; it uses glob-parent in order to extract a part of the filesystem path from a filesystem watch pattern. Unfortunately, glob-parent is vulnerable! If an attacker supplies a specially crafted filepath, it could make this function exponentially slow, which would…\n\nIf we wrote a script designed to activate the ReDoS vulnerability if the target is a running `webpack-dev-server` instance that accepts arbitrary incoming connections *and* uses the request's path to map to a path on the local file system to serve *and* never sanitizes the input, I bet we'd find vulnerable systems out there - if the system serves a production app with `webpack-dev-server`, then it's exactly the sort of system that would use unsanitized user input to serve files from the local file system by path.\n\nNote - I don't know if even that would activate this particular vulnerability, it's just an example to justify why \"I'm not exposed to this vulnerability because it's a dev tool\" is not the same as \"this isn't a vulnerability because it's a dev tool\".\n\n-----\n\nAlso:\n\n&gt; Why would they add SVG files into my app, unless you can mine bitcoins with SVG?\n\n[Should we tell him?](https://shkspr.mobi/blog/2018/02/this-svg-always-shows-todays-date/)",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Lachee",
        "body": "Well I'll be taking cve with a grain of salt.\n\nThey turned it into a boy who cried wolf.",
        "score": 9,
        "replies": []
      },
      {
        "author": "scratchisthebest",
        "body": "There are not [one](https://github.com/indutny/node-ip/issues/136) not [two](https://github.com/indutny/node-ip/issues/147) but [three](https://github.com/indutny/node-ip/issues/150) duplicate issues about the questionable CVE in question, either because people turn their brain off and do not do basic things like \"search before reporting an issue\" when CVEs pop up, or because they're intentionally trying to spam the issue tracker \"because it's high severity and I need the fix!\" or something.\n\nOne issue comment responds to a \"To be fair, if `node-ip` is your only line of defense, you have bigger fish to fry\" sentiment with \"Many projects use automated security scanners as a first line of defense and so this issue is [**blocking** a lot of people](https://github.com/indutny/node-ip/issues/128#issuecomment-1940603895)\". First, non-sequitur, and also-- a line in your automated security scanner is *blocking?*\n\n[Issue 112](https://github.com/indutny/node-ip/issues/112) on node-ip is someone running an automated security scanner and reporting ReDoS vulnerabilities against code only in `devDependencies`. node-ip doesn't have any non-dev dependencies. Who's S are you D-ing? What are you gonna do, make your test suite slow?\n\nWhat are we... doing here?",
        "score": 18,
        "replies": []
      },
      {
        "author": "faustoc5",
        "body": "Say NO to doing free labor for multi-million dollar corporations\n\nThey are the ones that decided to use this library because it is free. The library may be free but that doesn't mean that they are entitled to free maintenance and they deciding the priority\n\nThe entitlement of these corporations is absurd.",
        "score": 15,
        "replies": []
      },
      {
        "author": "itsmegoddamnit",
        "body": "We had a severe CVE reported for an old chrome/cypress image that only runs our e2e in an airlocked environment. Took a while to explain why a “severe” CVE doesn’t mean shit to us.",
        "score": 4,
        "replies": []
      },
      {
        "author": "chrisinajar",
        "body": "I don't like that bone or the headlines for this mention that the CVE was bogus, they make it sound like the response isn't just the correct thing to do.",
        "score": 5,
        "replies": []
      },
      {
        "author": "HoratioWobble",
        "body": "I get why it might be an issue, but I can't of the life of me work out how it could be exploited?",
        "score": 5,
        "replies": [
          {
            "author": "Helpful-Pair-2148",
            "body": "Let's say your server accepts an arbitrary url to load some content (eg: thumbnail image, content summary, etc...). You would not want to return internal content by a malicious actor sending a private ip address, so you would use that library to check if the submitted IP is public before fetching the data... but the library incorrectly returns that a private IP is public, so now attackers have a way to request / send data to your internal services. \n\nThat's a classic case of SSRF, and depending on what kind of services you are running internally, it can be trivial to escalate to an RCE from there.\n\nThat being said the given score is still absurdly high for that kind of vulnerability, but it is a vulnerability nonetheless.",
            "score": 8,
            "replies": [
              {
                "author": "ScottContini",
                "body": "You’re exactly right, this is server side request forgery.  Although SSRF is not restricted to accessing private IP addresses, this is the typical abuse.  \n\nThere may be some circumstances where the score makes sense, I.e. a developer is checking that the IP address is private and rejecting it, and the AWS metadata endpoint V1 is exposed via the SSRF vulnerability.  But the extreme rating is conditional.  The typical severity might be much less.  \n\nNot sure what the answer is here.  The problem definitely can lead to a severe vulnerability in some circumstances.  It really should be fixed, but maybe we need to be very explicit on the conditions where the severity is so high.",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "javasyntax",
        "body": "Most here seem to think this is not an issue but this is an issue unless I misunderstood the vulnerability description.\n\nIt is called SSRF and e.g. a GitLab RCE exploit caused by a vulnerability like this was found before. Here is a video showing such an exploit. That exploit in the video also used another exploit to work but this shows that such exploits are valid as the 2nd exploit was only necessary due to redis, there could be another attack target that is not redis which would not need a second exploit. https://www.youtube.com/watch?v=LrLJuyAdoAg",
        "score": 4,
        "replies": []
      },
      {
        "author": "vytah",
        "body": "I'm not a fan of Schlinkert due to how he'd gamed the Node ecosystem, but in this case, I'm fully on his side. That CVE is so dumb that it deserves to be memoryholed.",
        "score": 5,
        "replies": []
      },
      {
        "author": "NewLlama",
        "body": "I had one of these CVE's on one of my OSS projects. The severity was some alarmingly high score and the \"fix\" was just a note in the documentation. I thought about rejecting it but what is the harm? Everyone gets to pat themselves on the back and an undergrad security researcher gets his or her wings.",
        "score": 2,
        "replies": []
      },
      {
        "author": "shif",
        "body": "I opened some of the linked bad cve's and a lot of them are opened by people that work at companies that sell software to detect vulnerabilities, they conviniently mention that they found the vulnerability by using their software without disclosing they work for them, the \"vulnerabilities\" they find are just small optimizations or non issues that could only be exploited if you had full access.\n\nSo it seems like the CVE system is being abused to create shitty ads for these scummy companies.",
        "score": 2,
        "replies": []
      },
      {
        "author": "broknbottle",
        "body": "This is because of the all the SecOps fart sniffers that become SMEs in snakeoil solutions like CrowdStrike Falcon sensor, VMware carbon black, McAfee/Trellix, Trend Micro DSA, etc. These people are like cancer and go around pushing garbage software within their orgs while mostly having surface level knowledge themselves.",
        "score": 5,
        "replies": []
      },
      {
        "author": "warpedgeoid",
        "body": "I see this as a definite bug in the package and a potential vulnerability depending on the circumstances, but not a critical vulnerability.\n\nI think this also highlights a problem with having such spartan standard libraries that developers are forced to rely on single-author modules—often portly written—for key functions.",
        "score": 4,
        "replies": []
      },
      {
        "author": "Ibaneztwink",
        "body": "&gt;\"I asked for examples of how a real-world library would encounter these 'vulnerabilities' and you never responding with an example.\"\n\nI have to err on the side of the cybersecurity professionals as some of these devs don't seem to know the difference between something being vulnerable and something being exploitable. I heavily agree that the ratings on some of these make no sense.",
        "score": 3,
        "replies": []
      },
      {
        "author": "dew_chiggi",
        "body": "This topic pains every library and every application alike. What an absolute waste of time. It's a political agenda in most organizations. Program managers spend hours discuss in and around it to conclude they have to upgrade a 3PP to solve it",
        "score": 2,
        "replies": []
      },
      {
        "author": "izikiell",
        "body": "npm audit is trash, so, anyway ...",
        "score": 2,
        "replies": []
      },
      {
        "author": "CanvasFanatic",
        "body": "lol they CVE’d Fedor Indutny? What were they thinking?",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "Write code that is easy to delete, not easy to extend",
    "body": "",
    "score": 1124,
    "url": "",
    "created_utc": 1730087733.0,
    "author": "stackoverflooooooow",
    "permalink": "/r/programming/comments/1gdtd6q/write_code_that_is_easy_to_delete_not_easy_to/",
    "comments": [
      {
        "author": "Michaeli_Starky",
        "body": "Deleting code is my favorite activity",
        "score": 456,
        "replies": [
          {
            "author": "Sability",
            "body": "I got to delete a bunch of code the other day because I found out a way to achieve its goal in a much nicer way, and on boy is it a good feeling",
            "score": 79,
            "replies": [
              {
                "author": "mawesome4ever",
                "body": "Hey I too restart projects from the ground up! I haven’t released a single thing",
                "score": 7,
                "replies": [
                  {
                    "author": "Sability",
                    "body": "I have never restarted a project from the ground up. Refactoring code that can be improved should be a part of any development cycle.",
                    "score": 7,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "beavedaniels",
            "body": "I always get all giddy when I see a PR that is mostly red!!!",
            "score": 18,
            "replies": []
          },
          {
            "author": "Dr_Legacy",
            "body": "it's a great way to get your code to compile cleanly",
            "score": 4,
            "replies": []
          },
          {
            "author": "binaryck",
            "body": "Some people's job is basically deleting code while watching the reaction of the ones who wrote it.  \nThey're pieces of shift.",
            "score": 1,
            "replies": [
              {
                "author": "Michaeli_Starky",
                "body": "Lmfao... I want the job",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "overlordmouse",
            "body": "Deleting a module is my favourite thing. Deleting a module is my favourite… thing!",
            "score": 1,
            "replies": []
          },
          {
            "author": "mrheosuper",
            "body": "My PM keep delete our code randomly until it stops working, then revert it.",
            "score": 1,
            "replies": [
              {
                "author": "Michaeli_Starky",
                "body": "A man of culture",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "prehensilemullet",
            "body": "I don’t really get the attitude that deleting code is more fun than writing it.  If I didn’t enjoy writing code i wouldn’t be a programmer",
            "score": -8,
            "replies": [
              {
                "author": "wronci",
                "body": "At least in my experience, deleting code usually comes _after_ replacing it with something better that you've written. In that case, it's the final dopamine rush before committing and finding out you've broken the production server.",
                "score": 55,
                "replies": [
                  {
                    "author": "prehensilemullet",
                    "body": "Right haha.  Maybe some people get to delete code for features that get dropped more often than I do.  Usually I have the same amount of feature requirements to maintain, even if I delete code because I try to simplify something - so I don’t often have moments where I feel sure I nixed a whole slew of maintenance burdens",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "musli_mads",
                "body": "Of course it’s fun write code. But at some point you have so much code to maintain that the joy of reducing that maintenance outweighs the joy of writing code",
                "score": 66,
                "replies": [
                  {
                    "author": "prehensilemullet",
                    "body": "I guess that’s true in general, though I’ve been able to mitigate some of the pain by using codemod tools to change large amounts of code when doing it by hand would be painful, which is also satisfying",
                    "score": -22,
                    "replies": [
                      {
                        "author": "evert",
                        "body": "I suspect you're a bit early in your career. The downvotes are a bit aggressive,  but a common mantra for technical leadership is 'Code is a liability'. More code = more liability. If you're using automation to edit code at scale the first word comes to mind is: 'oof'\n\nDoesnt mean you can't have fun writing it though!",
                        "score": 2,
                        "replies": [
                          {
                            "author": "prehensilemullet",
                            "body": "I’ve been working professionally for 13 years and coding for like twice as much.  I totally think more code == more concern… Had plenty of times I replaced code with something better or that I felt reduced liability, I dunno, I just didn’t get the same satisfaction out of deleting the old thing as I did writing the thing to replace it.",
                            "score": 3,
                            "replies": [
                              {
                                "author": "evert",
                                "body": "I'm sorry for jumping to conclusions then!",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "tweiss84",
                "body": "It comes from constantly battling complexity, trying to keep a codebase healthy and remove all the static that confuses other people diving in.  \n  \nI like solving the problems too, but future me (&amp; team) loves that the codebase is now a bit easier to navigate and clutter free.",
                "score": 16,
                "replies": [
                  {
                    "author": "prehensilemullet",
                    "body": "I’m always trying to keep complexity down and deleting things from time to time, but I think I usually enjoy the rewriting I have to do first more than deleting the old, more complex code\n\nI wonder if some people here get to just delete entire features that got dropped in their jobs",
                    "score": 1,
                    "replies": [
                      {
                        "author": "torndar",
                        "body": "Yep",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Michaeli_Starky",
                "body": "To delete something, you need to write something.",
                "score": 3,
                "replies": []
              },
              {
                "author": "moccajoghurt",
                "body": "Cleaning up a mess by deleting it often feels more satisfying than building something new that you can only hope will be good.",
                "score": 1,
                "replies": []
              },
              {
                "author": "Bakoro",
                "body": "You must have never had the pleasure of removing thousands of lines of spaghetti, after writing a coherent solution with less code.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "un5d3c1411z3p",
        "body": "&gt;Write code that is easy to delete, not easy to extend\n\nUpvoted because it sounds cool.\n\nThis feels similar to \"Maximize work not done\".",
        "score": 384,
        "replies": [
          {
            "author": "AbbreviationsOdd7728",
            "body": "- Hey Chris, you should aim to write code that is easy to delete not easy to extend. \n- Hmm yeah, that sounds actually like a good strategy. \n- Oh, no no, it’s not a strategy for us but *you* should definitely do that!",
            "score": 71,
            "replies": []
          }
        ]
      },
      {
        "author": "tav_stuff",
        "body": "One of the few decent articles on this sub",
        "score": 166,
        "replies": [
          {
            "author": "Hnnnnnn",
            "body": "And it's an ancient repost ",
            "score": 40,
            "replies": [
              {
                "author": "TechnicaIDebt",
                "body": "Another smart programmer that moved to bird watching or smt",
                "score": 43,
                "replies": [
                  {
                    "author": "dinosaursrarr",
                    "body": "I met tef years ago. Good at computers but also a bit of a cunt",
                    "score": 13,
                    "replies": [
                      {
                        "author": "plexiglassmass",
                        "body": "Sounds like someone who's good at computers",
                        "score": 43,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "tav_stuff",
                "body": "Absolute hood classic",
                "score": 3,
                "replies": []
              },
              {
                "author": "plexiglassmass",
                "body": "It's like how we have lost all the skilled sculptors and now we get statues like Dywane Wade's ",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "WranglerNo7097",
            "body": "This is the first time I've read this one, and it's really, really great.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "yonderbagel",
        "body": "&gt; repeat yourself to avoid creating dependencies\n\nSo true.\n\nDRY was a mistake. Or to put it more diplomatically, the mistake was treating DRY as a universal principle. It's situational.\n\nAnd yes, I know the rest of their statement was\n\n&gt; but don’t repeat yourself to manage them\n\nBut that doesn't disrupt what I said.",
        "score": 239,
        "replies": [
          {
            "author": "B-Con",
            "body": "A related Go proverb is \"A little copying is better than a little dependency\".",
            "score": 173,
            "replies": [
              {
                "author": "setoid",
                "body": "Nice, although I really hope this wasn't used to justify the lack of generics for so many years",
                "score": 71,
                "replies": [
                  {
                    "author": "LightShadow",
                    "body": "100% it was.",
                    "score": 95,
                    "replies": []
                  },
                  {
                    "author": "B-Con",
                    "body": "I doubt it. This is about dependency, whereas genetics is about repetition and maintainability. Since genetics is built in, your dependency surface doesn't increase when you use it.",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "General-Jaguar-8164",
                "body": "I like this.",
                "score": 5,
                "replies": []
              },
              {
                "author": "myringotomy",
                "body": "How about a lot of copying? Is that better than a little dependency?",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "rom_romeo",
            "body": "One of the worst things I saw was a combo of DRY and microservices architecture. Basically, how to kill an independent deployment 101.",
            "score": 35,
            "replies": []
          },
          {
            "author": "Additional-Bee1379",
            "body": "The nuance is whether there is incidental or intentional duplication. Coupling accidental duplication is a big mistake. The question is whether if one implementation changes the other should as well.",
            "score": 29,
            "replies": []
          },
          {
            "author": "DirtyMami",
            "body": "When in doubt, make it WET\n\nIf they solve different problems, then they aren’t the same, even if they look the same.",
            "score": 35,
            "replies": [
              {
                "author": "Jordan51104",
                "body": "&gt; When in doubt, make it WET\n\nthis applies outside of programming too",
                "score": 29,
                "replies": []
              },
              {
                "author": "DBSmiley",
                "body": "The biggest issue is that a lot of code repetition is coincidental repetition, not intrinsic repetition.\n\nIt's the same concept as a database. You don't want the same intrinsic knowledge in multiple places, but that doesn't mean that any repetition at all is inherently bad.\n\nBut most programmers learn dry before they learn how to tell the difference between those two types of repetition.",
                "score": 6,
                "replies": []
              },
              {
                "author": "billie_parker",
                "body": "Things which look the same solve the same problem.",
                "score": -1,
                "replies": [
                  {
                    "author": "DirtyMami",
                    "body": "How about this?\n\n```\n// Full name validation\nstring currentEmployeeName = \"John Doe\";\n\n// Birthday greeting (code in some other place)\nstring employeeName = \"John Doe\";\n```\n\nDev: Wow, that \"John Doe\" looks like duplicate code, no worries I'll follow DRY and fix it with `GetEmployeeFullName()`\n\nJust a simple example, but I can't think of a really good one.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "billie_parker",
                        "body": "It's an interesting example, I'll admit. The way I respond is that DRY applies more strictly to code versus data. I can agree it's possible for two pieces of data to be incidentally the same: my height is 182cm, my country was founded 182 yrs ago, etc.\n\nHowever, I don't agree that it's possible for two pieces of code to be incidentally the same. For example, an algorithm which takes the end of an array and appends it to the front of the same array. It doesn't matter in what context that is occurring or why - the algorithm is always doing the same thing conceptually, and that should be represented via an abstraction.\n\nI'm not sure if that is really an inconsistency in my viewpoint. My understanding of DRY was always that it applied to algorithms, not data. However, I can see that may appear as inconsistent because in some sense algorithms can be thought of as data. I think the distinction is that algorithms are always general and apply to data indiscriminately, so they exist in an abstract realm. Meanwhile, data can refer to real things which we know may not have a relation to each other. So in that sense, we can know that two pieces of data are unrelated to each other despite being identical. Meanwhile, if two algorithms are identical, then they are implicitly the same.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "theScottyJam",
                            "body": "How about this (in pseudocode):\n\n\n```\nreturn sortBy(users, user =&gt; user.name)\n```\n\n\n```\nreturn sortBy(files, file =&gt; file.name)\n```\n\n\nWe could make it so both a \"user\" and a \"file\" conform to a \"hasName\" interface, and then write a generic sortByName function to DRY it, but what's the point? While the code is technically the same, the context is completely different - you're not gaining any of the benefit of DRY code by combining these unrelated chunks of code.\n\n\nI'll also commonly duplicate code when writing validation logic - both usernames and group names might both follow the same rules today, but we might want to change the validation rules for one of those entity types without touching the other.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "billie_parker",
                                "body": "In many languages, you don't need to define any interface to use generics. \n\nI would say the reason not to do it in that case might be because the line is too short/too small, which is an altogether different issue. \n\n&gt;both usernames and group names might both follow the same rules today, but we might want to change the validation rules for one of those entity types without touching the other.\n\nOr... you might change one and forget to change the other. Re inserting duplication is easy. It's easier to forget that code was duplicated and miss all the duplication instances.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "theScottyJam",
                                    "body": "&gt; I would say the reason not to do it in that case might be because the line is too short/too small, which is an altogether different issue.\n\nWhen talking about two pieces of code that happen to be related, we're usually talking about smaller pieces of code. The more code there is, the less likely the two will happen to be the same.\n\nThat being said, you may still run into larger examples - here's one such possible scenario:\n\n```\nasync function fetchUsers () {\n  const rawUserList = parseXml(await sendGetUsersRequest());\n  return extractListFromParsedXmlField(rawUserList.users);\n}\n\nfunction extractListFromParsedXmlField(parsedField) {\n  if (parsedField === undefined) {\n    return [];\n  } else if (!Array.isArray(parsedField)) {\n    return [parsedField];\n  } else {\n    return parsedField;\n  }\n}\n```\n\nHere we're using an XML parsing utility, not unlike one I've (unfortunetally) used in the past, where under its default configuration, list-like content can come back in one of three different shapes, and you have to do the above dance to convert it into a real list. Because I do this \"dance\" so often, I typically stick this list-extraction logic into it's own helper function as shown above, and then use it any time I need to extract a list from parsed XML data. I wouldn't, however, try and DRY the above list-extraction logic with a function like the one shown below.\n\n```\nasync function getConfiguredPaths () {\n  if (configFile.paths === undefined) {\n    return [];\n  } else if (!Array.isArray(configFile.path)) {\n    return [configFile.path];\n  } else {\n    return configFile.path;\n  }\n}\n```\n\nThe timeline for this hypothetical config file might look something like this:\n* Originally, you could either define a \"path\" property and set it to a string, or you could leave out the \"path\" property entirely.\n* Later, we realized that it would be useful if you could specify multiple paths, so we added support for providing a list of paths as well. The above getConfiguredPaths() function's implementation shows what it looked like at this point in time.\n* In the future, they're toying around with the idea of also letting you set \"path\" to an object that has an \"includes\" and \"excludes\" key, in case you want even finer-grain control, which may require furtehr changes to the above function, and those using the function.\n\nEven though `extractListFromParsedXmlField()` and `getConfiguredPaths()` technically do the exact same thing, the reason why they do those things are very, very different. Because there's no overlap in the reasoning behind the logic, there really no reason to try and make the code overlap (i.e. DRY it).",
                                    "score": 1,
                                    "replies": [
                                      {
                                        "author": "billie_parker",
                                        "body": "&gt;  we're usually talking about smaller pieces of code. The more code there is, the less likely the two will happen to be the same.\n\nThat's not really how DRY works. It's not about searching the code for instances of duplication, and then finding ones that just happen to be the same (\"...less likely...\"). It occurs when you find that you want to re-use a section of code in two different contexts, in which case the length could be anything. Then you have the choice of whether to copy it or apply DRY. You can also apply DRY to code which follows a parallel evolution.\n\nAs for your code, there are some formatting problems, but I was able to extract it from the comment so I could read it. I don't see why this shouldn't be something which could be DRY-ed.\n\n&gt;technically do the exact same thing, the reason why they do those things are very, very different.\n\nThis is the fundamental difference of opinion between you and me. The reasons why they do those things is irrelevant. The function encodes the \"doing.\" It doesn't encode the reason why it is done. This applies to all functions. For example, pretty much all languages provide a \"sort\" function. The reason why you're sorting is irrelevant - the point is that the function does that specific thing.\n\nMy opinion is that you are overly focusing on the context in which a function is used. I think functions should stand on their own. Obviously we can't ignore the context since the function's behavior ultimately serves its context, but I think all functions should be understandable on their own without consideration for their context.\n\n&gt;Because there's no overlap in the reasoning behind the logic\n\nI disagree, in my view the reasoning is the same. You want to take in a variable and process it in some defined way. There's three cases: undefined, array-like and value-like. So your function compresses 3 different possible types of input into one type of output. And that behavior is useful in two different situations, but that is no coincidence. Those two scenarios share the same constraints: they produce situations where there are those 3 possible types of input, and you want to convert it to the more narrowly constrained output.\n\nNow, whether you actually do DRY that code or not relies on practical questions. Specifically, you could consider the code to be too short to DRY. Or perhaps these are in two separate modules and it is difficult to ensure they both have access to the function (how your project is setup). Or any number of other reasons. DRY is not without some cons and I am not in favor of applying DRY to every single thing that it in theory could be. But what I do disagree, and I think we are mostly discussing, is the idea that you shouldn't apply DRY in the case where code is \"coincidentally\" (\"incidentally\") the same. And this is a fundamental disagreement in philosophy. I don't believe that code can be incidentally the same.\n\nI really believe that this idea: \"code can be incidentally the same,\" ends up applying to every function. People have called this hyperbole, but from a logical perspective I don't see why not. Thus you end up with an extreme philosophy of \"always repeat yourself.\" I know there are few people that believe that (although some exist). My point is that there is a cognitive dissonance in the opinion that code can be incidentally the same, but at the same time extracting functions is a valid practice. The reason it's a problem is that it allows people to argue in practice that any particular piece of code should be duplicated because they \"feel\" it is incidental. Stated another way: there is no objective test that can determine if a piece of code is incidental. It's a sort of manufactured feeling that doesn't exist at the logic level.",
                                        "score": 1,
                                        "replies": [
                                          {
                                            "author": "Waffleloord",
                                            "body": "I've been more subscribed to u/theScottyJam's perspective on this but you make a good point. I think, to put it shortly, that it might be wise to avoid DRY if two or more pieces have different *reasons* for change. (I suppose that from the extreme philosophy, you mean two pieces of code always have different reasons for change?). The abstraction to apply DRY today might make sense, but later down the road it might not.",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "gormhornbori",
            "body": "&gt; &gt;   repeat yourself to avoid creating dependencies\n&gt; \n&gt; So true.\n&gt; \n&gt; DRY was a mistake.\n\nEh..   It depends on complexity.\n\nHaving the same logic copy-pasted 5, or 50 times, so you have to hunt around for every place when fixing a bug, or worse having a change/bugfix some places but not all...   That's very very bad.\n\nOn the other hand, don't make an abstraction because you might need it in the future.\n\nAnd if you need to map between config parametres, internal variables, database field names or CSS class.  Don't make that clever macro that works if the names are the same.",
            "score": 9,
            "replies": [
              {
                "author": "myringotomy",
                "body": "The worst part is that when the code does need to be changed it will only be changed in one place. Coders will all assume the rest of the copypasta was slightly different or served a different purpose and won't touch it. \n\nAlso they won't touch it because they won't even know copies exist.\n\nAlso they won't touch it because it wasn't specified in the ticket to touch that part of the code.",
                "score": 4,
                "replies": [
                  {
                    "author": "dominjaniec",
                    "body": "and, it's why I \"hate\"  copied code...",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "yonderbagel",
                "body": "&gt;  It depends on complexity\n\nYeah, that's why the next part of my statement was about how it was situational.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "zanza19",
            "body": "Sandi Metz's duplication is better than the wrong abstraction is one of my favorite pieces of software writing.",
            "score": 7,
            "replies": [
              {
                "author": "billie_parker",
                "body": "And DRY, with the right abstraction, is better than duplication.\n\nThat article is in favor of DRY. They suggest to follow DRY, but reintroduce duplication when necessary.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "shevy-java",
            "body": "Why is DRY wrong though? We avoid duplication via DRY. I don't understand why that would suddenly be wrong.",
            "score": 9,
            "replies": [
              {
                "author": "duckrollin",
                "body": "It sounds like one of those curves from novice to expert.\n\nNovice: Copy pastes everything\n\nAdvanced: Learns DRY, copy pastes nothing\n\nExpert: Sometimes copy pastes to avoid other evils",
                "score": 35,
                "replies": []
              },
              {
                "author": "JarredMack",
                "body": "Because a bad abstraction is worse than duplication. It will often happen that two things look similar, and at first are implemented the same, but in actual fact are different processes. Then down the track you get a new requirement to change one of the code paths, and now you either have to unwind your abstraction or have an if (code path 1) else (code path 2) in there, which becomes a pain to maintain",
                "score": 50,
                "replies": [
                  {
                    "author": "cran",
                    "body": "This makes no fucking sense. Every library you use is an example of DRY. What kind of garbage coding leads to such brain dead arguments that DRY is bad.",
                    "score": -35,
                    "replies": [
                      {
                        "author": "JarredMack",
                        "body": "Nobody said DRY is bad. They said treating it as a universal principle is bad, because it leads to inexperienced developers trying to abstract things that should not be abstracted",
                        "score": 34,
                        "replies": [
                          {
                            "author": "billie_parker",
                            "body": "Being a universal principle is part of DRY. So you are saying DRY is bad.\n\nIt's much more common for inexperienced programmers to have the opposite problem - copying code everywhere. It's rare for them to write unnecessary abstractions. Yes, they write bad abstractions.",
                            "score": 1,
                            "replies": []
                          },
                          {
                            "author": "cran",
                            "body": "You have to learn by doing. Arguing against DRY is just so unbelievably dumb. I can fix a bad abstraction a thousand times easier than I can copy and pasted code that’s all got its own specific additions. I’ve done both. Many times. Over decades. This is pure conjecture and pure nonsense spouted by people with no real sense of the impact of these hive mind rants. Good grief.",
                            "score": -19,
                            "replies": [
                              {
                                "author": "iamapinkelephant",
                                "body": "A jumbo jet could hit you and you'd still miss it. \nThey're saying in a lot of situations the business logic or domain might initially look similar, but if you dive into abstraction and DRY immediately you will often find that in fact the business process or domain was not the same and now you have a shitty abstraction with conditional paths that are hidden away from the logic they belong to. \n\nYou're making this weird argument that all code which looks similar must somehow also always be updated the same way when everyone is trying to point out it's just not the case.\n\nLike if you had two methods that are part of different logic flows that needed to take a number, square it and add one, you might abstract that into a class \"mathifier\". But if one of the methods then needed to multiple by the number-1, your abstraction now needs to have forking logic. \"If method 1 then, else\". \nThis is garbage. It would have been better to recognise that the two initial methods were different in the first place and just repeated yourself a little bit.\nIt would have been easier to read, easier to understand and ultimately better because you didn't create a pointless coupling in your codebase.\n\nNo one has said DRY is always bad, just that it's often bad. And a great deal of people with a great deal more experience than you or I have repeatedly pointed out that early abstraction is a trap to avoid like the plague, how do you avoid it? By ignoring DRY occasionally.",
                                "score": 14,
                                "replies": [
                                  {
                                    "author": "billie_parker",
                                    "body": "&gt;You're making this weird argument that all code which looks similar must somehow also always be updated the same way when everyone is trying to point out it's just not the case.\n\nWhat you fail to understand is that if the code needs to be updated differently, you are welcome to copy the code at that point. Copying the code from the outset is just lazy. You're justifying laziness. Your view is anti DRY. It applies to all duplicated code.\n\n&gt;But if one of the methods then needed to multiple by the number-1, your abstraction now needs to have forking logic.\n\nWrong. One of the methods no longer uses the \"mathify\" logic. So it should no longer use that function. \n\n&gt;It would have been better to recognise that the two initial methods were different in the first place and just repeated yourself a little bit.\n\nThey weren't different. You said yourself they were the same initially. Your view applies to all duplicated code equally. Any duplicated code could in the future deviate from each other. \n\n&gt;And a great deal of people with a great deal more experience\n\nGreat minds think alike - but often so do idiots.",
                                    "score": -5,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "dominjaniec",
                                "body": "I fully agree, and I'm frightened that so many developers are praising duplication and negating DRY.\n\nI'm seeing here so often that weird argument:\n\n&gt; duplicated code is often only similar, or it is the same, but it will diverge in the future, thus don't DRY\n\nI only have one decade of experience, but I fixed many bugs because of somebody's lazy duplication, often emerging as missing non-functional requirements. and when there were some problematic abstractions, or logic that needed to be different other places, there were no problems of doing that - it's for what they are paying me...\n\nhowever, I'm working in a decade old product code base, which is constantly developed and maintained. but I guess, for disposable software, or if one changes projects every season, thus consequences will not reach you, then you can YOLO your code.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "hanoian",
                            "body": "liquid quaint paltry angle smoggy slimy outgoing berserk tap coherent\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
                            "score": -10,
                            "replies": [
                              {
                                "author": "fripletister",
                                "body": "Understanding the nuance of these situations is one of the most important skills you can gain as a developer",
                                "score": 9,
                                "replies": [
                                  {
                                    "author": "hanoian",
                                    "body": "cats makeshift fertile impolite snails rain bored ten six offbeat\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
                                    "score": -8,
                                    "replies": [
                                      {
                                        "author": "fripletister",
                                        "body": "You did, though.",
                                        "score": 5,
                                        "replies": [
                                          {
                                            "author": "hanoian",
                                            "body": "flag homeless sleep long jar governor workable license historical direction\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
                                            "score": -7,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "djnattyp",
                        "body": "Because contrarian statements get upvotes on reddit.\n\nDRY came about because copy paste duplication causes lots of problems. After years of applying DRY some people noticed there were a few cases where it caused problems. A smarter person would have found a different way to fix / address these problems, but instead decided to coin \"WET\" - \"write everything twice\". A few years down the road, people are going to recognize the problems that DRY is supposed to fix and the pendulum will swing again.",
                        "score": 4,
                        "replies": [
                          {
                            "author": "symmetry81",
                            "body": "I don't know.  As a rule of thumb the [rule](https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming\\)) that you refactor to prevent duplication on the third instance seems like the best rule of thumb to have, though particular circumstance might make you do it earlier or later.  And with that you do Write Everything Twice (but not three times).",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "billie_parker",
                        "body": "Welcome to modern programming.",
                        "score": 1,
                        "replies": []
                      },
                      {
                        "author": "EveryQuantityEver",
                        "body": "Maybe if you could read, you'd see what the actual issue is, instead of lashing out like a child.",
                        "score": -1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Aedan91",
                "body": "IT'S NOT ALWAYS WRONG, IT'S SITUATIONAL \n\nWhich means \"it depends\", not all duplication is bad all the time. \n\nI agree with grandparent, every article you read about DRY makes it look like it's an universal principle. Coupling for coupling sake is one the hardest and avoidable issues to solve when maintaining or modifying systems.",
                "score": 27,
                "replies": [
                  {
                    "author": "Full-Spectral",
                    "body": "That's the correct answer to 99% of questions in software, including whether it's the right answer to 99% of questions in software.\n\nThe only question is how much does each decision cost. If it gains more (in something that matters, not things like useless performance gains) than it costs, then you have to consider it. But, it might also cause compromises in adjacent stuff so the cost has to be considered non-locally as well. And the long term debt considerations, that it may gain more than it costs now, but over time will cost more than it gains. Obviously consistency is a goal in general, and sometimes you consensually give up gains to maintain consistency, because that's less long term debt.\n\nWhich is all to say, \"It depends\", which BTW, is the answer to 99% of all software questions, but it kind of depends.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "spareminuteforworms",
                "body": "One area of business logic:\n\ny = x + 1\n\nAnother area:\n\nz = m + 1\n\nHmm why not make a function?\n\ndef f(x): return x+1\n\nBingo!\n\nHey Mate we need that y = x + 1 to be y = x + 2.  ::Deletes function goes back to old way because it was incidental repetition.::",
                "score": 7,
                "replies": [
                  {
                    "author": "billie_parker",
                    "body": "Whenever you hear people argue in favor of this view, they always use meaningless toy examples like you just did. Nobody is applying DRY to remove \"+ 1.\"\n\nBasically just a strawman fallacy",
                    "score": -7,
                    "replies": [
                      {
                        "author": "spareminuteforworms",
                        "body": "Fair enough but the real world scenarios that end up biting you are significantly more convoluted to describe, OP seemed to not understand when DRY could fail you at all.",
                        "score": 6,
                        "replies": [
                          {
                            "author": "billie_parker",
                            "body": "I have gotten into these discussions numerous times and I still do not understand how DRY could \"bite you.\" I'm convinced there's nothing to it besides laziness and incompetence.\n\nThe lack of ability for people to articulate their argument for why DRY might be bad in certain situations is to me a good indication that it's irrational.",
                            "score": -1,
                            "replies": [
                              {
                                "author": "spareminuteforworms",
                                "body": "I think when it goes off the rails its not just because of innappropriate DRY its DRY after you've already mistepped and the DRY step canonizes the mistake and causes that new function/class whatever to blossom into a big mess.  If I gave a specific example you'd easily point out the earlier mistake and say thats not the fault of DRY.  I'm surprised you've never seen premature DRY cause an issue, even a small one.",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "billie_parker",
                                    "body": "Reversing DRY is easy - you just inline the function. However, DRYing code after the fact is challenging. Therefore, it is always better to first DRY and then later reverse if necessary. And in my experience 99% of the time you won't reverse it. And if you need to, it's easy. That's why I don't understand why it would ever bite me, because it's a non-issue even in the event where it was originally a mistake.\n\nThe mistake is not DRY - it's causing your function/class to blossom into a big mess. But that's an entirely different, pretty much unrelated mistake.\n\nThe think about DRY is that it's the heart of all programming. It's the basic concept of a function. Taking this anti-DRY thought process to its limit will cause all code to be written into one huge main function, never re-using anything.\n\nIt sounds absurd to say that, but I truly believe that is the end result of following this mentality. The idea is \"don't prematurely remove duplication because it might be a mistake and you may need to add it back in the future.\" However, I believe that logic applies to all functions.",
                                    "score": 1,
                                    "replies": [
                                      {
                                        "author": "spareminuteforworms",
                                        "body": "Holy shit dude, the whole point is that this is a corner case to be watchful for. If it was trivial you'd have a linter do it on commit. No one is saying always repeat everything, program with NOR gates only!! This isn't \"anti DRY\" it's \"for the most part DRY but be careful\". There's more anti patterns to unwind than a simple function, there's patterns of encapsulation (classes) that can also wind up encumbered by naive DRY.",
                                        "score": 6,
                                        "replies": [
                                          {
                                            "author": "billie_parker",
                                            "body": "My point is that there is no such corner case.\n\nI don't know what you're referring to with regards to linter. The linter would reverse DRY code? I don't get it. \n\n&gt; No one is saying always repeat everything\n\nI know that. I'm saying that's the logical conclusion to the argument.",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "author": "The_Axolot",
                                "body": "I half-agree with you. I think people rely on thought-terminating clichés when arguing their liked/disliked programming paradigms. But I honestly think (hope) it's just a vocal minority of people that think DRY is bad, or not applicable in most scenarios.\n\nBut dude, you can't take the human element out of programming. Sure, you can forgo the abstraction if you find your specific case doesn't quite match, but when you introduce that abstraction in the first place, you're doing the following:\n- You're telling other developers that this is the quintessential abstraction that SHOULD be used. Social pressure, baby!\n- You're digging a hole of technical debt. Ever heard of \"sunk cost\" fallacy? Ignoring a useful abstraction just so you can repeat most of the logic with minor changes is psychogically hard to swallow. Removing the abstraction entirely is even harder. That requires undoing another dev's work.\n- This leaves the option of augmenting the abstraction, which happens more than you think. When people say DRY isn't universal, what they're saying is that it can lead to this Frankenstein abstraction if not properly justified and foreseen.\n\nI hope I explained it better.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "billie_parker",
                                    "body": "I understand what you're saying. It's just that the solution is different from what everyone is proposing as a response to this issue.\n\nThe mistake made in the scenario you're describing has nothing to do with DRY. The mistake is that bad code is written out of fear of modifying another developer's work. Basically, it's a misunderstanding of DRY. In the scenario where a developer needs a bunch of conditionals in order to make a piece of code work in two places DRY wouldn't apply because the code would not have been duplicated had it been inlined.\n\nIn response, people say \"avoid DRY.\" But they aren't even talking about DRY because the code isn't even duplicated. In reality what they're doing is trying to make one function do two separate things that are roughly related.\n\nSo I agree we need to contend with the reality that programmers are humans, but the solution is to help them understand that you can undo DRY if necessary, not to avoid DRY altogether.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Poddster",
                "body": "Here's a full blog written on th concept by a notorious windbag, which he calls [compression-oriented programming](https://caseymuratori.com/blog_0015)",
                "score": 3,
                "replies": []
              },
              {
                "author": "PathOfTheAncients",
                "body": "A lot of times making code reusable requires a high degree of abstraction that adds lots of unnecessary complexity. What people are saying is that DRY is usually good but in those specific circumstances where the reusable code becomes a hinderance just to adhere to DRY it is better to just have the repeated code.",
                "score": 1,
                "replies": []
              },
              {
                "author": "zabby39103",
                "body": "It's not wrong in most cases, I can see the argument that the complexity to DRY *simple* things is bad, and there's DRY inside a project, and DRY for all projects you'll ever make forever.  The latter is a lot harder.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "EveryQuantityEver",
            "body": "Sandi Metz has a great talk about this where she points out that duplication is better than the wrong abstraction.",
            "score": 1,
            "replies": []
          },
          {
            "author": "myringotomy",
            "body": "Why is the code you write not a dependency when the next developer picks up the project?",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "RICHUNCLEPENNYBAGS",
        "body": "This is a big reason to hate inheritance chains.  Whoops, that needs an extra argument.  Well, hope you're ready to change 20 classes instead of 1 because you decided to go with inheritance instead of composing",
        "score": 114,
        "replies": [
          {
            "author": "Markavian",
            "body": "Inheritance should be avoided like the plague because of coupling. Completely agree that composition always produces better, more maintainable, less spaghettified results.\n\nOOP has it's place, but rarely with inheritance does inheritance produce better solutions.",
            "score": 66,
            "replies": [
              {
                "author": "[deleted]",
                "body": "Inheritance is great for abstract base classes. I dint like inheriting from real classes.",
                "score": 10,
                "replies": [
                  {
                    "author": "Markavian",
                    "body": "Yeah agreed, I can think of lots of practical cases for inheritance in libraries with a clearly thought out ontology, but usually for UI concepts which are well established.\n\nEven then, a rewrite using composition is often possible.",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "kimjongun-69",
                    "body": "yea, And Julia has just that instead of regular inheritance",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Additional-Bee1379",
                "body": "Inheritance isn't even a core feature of OOP honestly.",
                "score": 29,
                "replies": [
                  {
                    "author": "Brayneeah",
                    "body": "In the PL space it technically is!\n\nIf a language lacks it, it goes from OO to being \"Object-Based\" - although, this isn't a label used very often.",
                    "score": 12,
                    "replies": []
                  }
                ]
              },
              {
                "author": "ShiitakeTheMushroom",
                "body": "If I ever design a program language that includes classes, classes will be sealed by default.",
                "score": 3,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "So…a sum type? :D",
                    "score": 1,
                    "replies": [
                      {
                        "author": "ShiitakeTheMushroom",
                        "body": "No, not a sum type.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "nicholashairs",
        "body": "I've been wanting to rediscover this article for ages. Actually pretty solid advice.",
        "score": 40,
        "replies": []
      },
      {
        "author": "stomah",
        "body": "i write all my code in a single file so i can delete it easily",
        "score": 16,
        "replies": []
      },
      {
        "author": "EliSka93",
        "body": "&gt;Go and write a mess the first time. Unless you’re psychic you won’t know how to split it up.\n\nYes, BUT do keep in mind that writing a mess incurs tech debt.\n\nIt may be easy after writing a mess to go \"well it's a mess, but it works\" and forgoe the \"splitting it up\" part, but you or your successor may regret that later.",
        "score": 79,
        "replies": [
          {
            "author": "kankyo",
            "body": "A mess that is isolated can be thrown away. A mess that is all over the code base like some tentacled kraken not so much. That is the point.",
            "score": 59,
            "replies": [
              {
                "author": "Manbeardo",
                "body": "OTOH, scratch-written replacements often end up just as messy as the systems they replaced. There's a whole lot less risk involved when you shore up deficiencies you already know about instead of betting big on the replacement having fewer/smaller deficiencies.",
                "score": 15,
                "replies": [
                  {
                    "author": "el_muerte28",
                    "body": "Pretty sure half of the devs at my company are writing code in Scratch with how slow things run.",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "kankyo",
                    "body": "Maybe. But again: if the replacements are isolated they can be reasoned about. If they pollute the entire code base that's much more difficult.\n\nI feel like you're talking about something unrelated to what I am talking about...",
                    "score": 5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 1,
                "replies": [
                  {
                    "author": "kankyo",
                    "body": "And the causal relationship is what? I call bs.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "venuswasaflytrap",
            "body": "I think the wisdom implicit here is that you're gonna have a mess no matter what, because you don't yet know what should look like.\n\nSo it's better to isolate the mess initially, rather than building the mess into the rest of the system.\n\nEither way technical debt is unavoidable.",
            "score": 10,
            "replies": []
          },
          {
            "author": "aint_exactly_plan_a",
            "body": "As programmers, we learn along the way.  As we're doing something, we learn how to do it better.  I rewrote a program 3 times, redesigning it and making it better each time.  The last one is the one I gave to the client.\n \nMost likely, it's the managers pushing them to get it working and skipping the rewrite part so they can get it out the door.  Unfortunately there's not much we can do about that.  Lots of smart people telling managers the right way to do things with very little support because it's also the slower way.",
            "score": 4,
            "replies": []
          },
          {
            "author": "VeryDefinedBehavior",
            "body": "Take a writing class and apply the lessons you learn to programming.",
            "score": -2,
            "replies": [
              {
                "author": "zrvwls",
                "body": "What kind of lessons do you learn from a writing class? I try to implement an iterative approach to my programming, trying to balance momentum and speed to \"doing it the right way the first time\". Doing it perfectly the first time can add a lot of drag to implementing new features, but it has the chance of making things smoother later on -- often times knowing what's fully right isn't known until much later in the process though.\n\nGoing fast, however, requires a lot of discipline to review code written fast and refactoring it, but a bonus is having more knowledge of what I want and where I want to go with said quickly written code that I didn't have at the time. It's very hard forcing myself to touch code that I know is working but is less maintainable, but I know it's important to revisit.",
                "score": 1,
                "replies": [
                  {
                    "author": "VeryDefinedBehavior",
                    "body": "You write lots of rough drafts. The point isn't to get the thing working and passing all test cases. The point is to understand the problem and build domain knowledge. When you know what you're doing it's trivial to do it right the first time, but you have to build up to that.\n\nModern programming practices try to accelerate in the short term, and always wind up stalling long term. They descend from employers having faithless attitudes about their programmers because there's no obvious way to understand what work is being done. There's little respect for the research side of R&amp;D. That's why there's so much ceremony around metrics, which puts us in a gross local minimum where your boss can kinda tell when you're not pulling your weight, but at the cost of making everything a thousand times slower and more expensive than it needs to be. Trying to move faster in that environment is like trying to run in molasses.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "zrvwls",
                        "body": "So focus on a handful of medium quality iterations at some decent pace, while avoiding metrics-based development in favor of better understanding what you're trying to accomplish?",
                        "score": 3,
                        "replies": [
                          {
                            "author": "VeryDefinedBehavior",
                            "body": "Focus on understanding the problem domain. Your rough drafts are just research tools until you know what you're actually trying to build.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "dcoolidge",
        "body": "refactoring done right.",
        "score": 19,
        "replies": []
      },
      {
        "author": "pheonixblade9",
        "body": "I'm quite proud that my LoC deleted is generally higher than my LoC added at most of my jobs. Definitely so if you exclude generated files.",
        "score": 15,
        "replies": []
      },
      {
        "author": "shevy-java",
        "body": "I think the premise is worded incorrectly.\n\nThat is, \"we must write code that is easy to delete\". But is this an objective in software design? Usually code fulfils a purpose, e. g. you add certain funtionality to a given code base, say, authentication of a user's credential upon logging in. Say that took you two days. So two days worth of code that was written with the intent to be easy to be deleted, lateron? Isn't that not a good investment of time?\n\nOf course I understand the underlying rationale: you don't want to be tied down by code that is problematic, has bugs, creates side effects, is complex and complicated, you name it. But none of that was the direct reason as to why code was written in the first place, if it was well written.",
        "score": 6,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "The alternative is to true to write code that predicts the future so it will never be deleted, fails to do so, but we’ve invested so much time, energy, and face in writing it that we can’t let it fail so we just keep bandaging it over and over for years. \n\nSound familiar?",
            "score": 8,
            "replies": []
          }
        ]
      },
      {
        "author": "Rattle22",
        "body": "The title half-implies that Java reflection \"just put this annotation here and the runtime will find it (and if it doesn't you can go cry in a corner)\" is a good thing and I won't stand for it.\n\n(The article doesn't.)",
        "score": 5,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "I never saw much crying in the corner, more than zero, but I have seen and felt a lot of “stare at the code until you notice something you missed”. \n\nConfiguration over code runs into this a lot. As a friend used to say, you can’t set a breakpoint in a [config file]. Imperative is better for tear reduction versus declarative. More discoverable with self directed learning. Which is a critical bottleneck for scaling a system and bus numbers.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "angrybeehive",
        "body": "Just separate different types of logic from each other with modules. Works in every language. I think people have forgotten about why interfaces even exist to begin with.",
        "score": 4,
        "replies": []
      },
      {
        "author": "dudebomb",
        "body": "Best advice. Nearly accidentally's you into domain driven design.",
        "score": 8,
        "replies": [
          {
            "author": "i_andrew",
            "body": "DDD is not a silver bullet. Why people try to push it everywhere?",
            "score": 8,
            "replies": [
              {
                "author": "iseverynicknametaken",
                "body": "because it’s a hot topic, like microservices few years ago - it promises to solve a lot of problems, and devs sometimes doesn’t realize they don’t have these problems and a halfway implementation only causes more harm and even more new problems",
                "score": 2,
                "replies": []
              },
              {
                "author": "dudebomb",
                "body": "It's not a silver bullet, just another tool in the tool belt. Use it when appropriate.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "shenglong",
        "body": "Same mistake as every other virtually every other article I see on a wide range of topics. I don't suppose I can blame them - binary is easier to parse and talk about.\n\nSo take what you can from articles like these, but keep in mind seasoned programmers have a library of tools and techniques they can reach for to tackle various problems. There is no \"one-size fits all\". The problem is you can't really write one article about something like this. It's something that you learn by doing.",
        "score": 11,
        "replies": [
          {
            "author": "rustedleaf",
            "body": "Totally, when I was young and just started programming, I heard phrases like DRY, SOLID, methods should be no more than 4 lines of code and I followed them religiously. Until recently, after 10 years of development using many architectures, patterns, failing a lot of time, I learned that every principle, every rule, has a specific reason and is good and bad depending on the situation. \n\nI still see peers breaking code into general components because \"maybe I will need to do X\" when that components is used only in one place. I still see many doing mistakes, and sometimes it's not possible to explain to them because they are following rules religiously like me before",
            "score": 5,
            "replies": [
              {
                "author": "[deleted]",
                "body": "The more you work on this field the more you realize how bad Robert Martin’s ideas were. I’m not angry with him, though, the main problem is that _every_ computer science school in this planet unapologetically taught his ideas like some sort of dogma. So glad that even classic OOP languages such as Java or C# are trying to provide alternatives to this nonsense.",
                "score": 9,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "m00fster",
        "body": "Is there a catchy acronym to go with it?",
        "score": 2,
        "replies": [
          {
            "author": "Full-Spectral",
            "body": "WCTISETODNETC",
            "score": 0,
            "replies": []
          }
        ]
      },
      {
        "author": "thank_burdell",
        "body": "rm -rf /path/to/code\n\nsimple as.",
        "score": 2,
        "replies": []
      },
      {
        "author": "xhd2015",
        "body": "This sounds like a psycho yelling \"delete me, but do not delete me\", or \"copy me, but do not paste me\".",
        "score": 2,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Next articles that's going to be upvoted:\n\n* Don't write tests. Without tests, coding is simple.\n* Don't write any source-code. Without source-code, life is simple.\n* Don't build software. Life without software is simple.\n* Don't be a software engineer. Try other profession.",
        "score": 6,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "One of my tenets of good test writing is write tests that are easy to delete. Sunk code fallacy in tests is a huge time sink.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "GYN-k4H-Q3z-75B",
        "body": "It's almost like you have to think about what you're doing rather than stupidly apply rules? The rules have value, but no rule is universally applicable. This is an article worth thinking about a little more.",
        "score": 3,
        "replies": []
      },
      {
        "author": "big_jerky-turky",
        "body": "I delete my code all the time … others do too",
        "score": 4,
        "replies": [
          {
            "author": "chucker23n",
            "body": "I’ve also been deleting your code. Feels very satisfying.",
            "score": 10,
            "replies": [
              {
                "author": "oalbrecht",
                "body": "I just have an automated process that reverts their commits after every PR is merged in. That way it’s completely hands off.",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Maybe-monad",
        "body": "bu...but... job security...",
        "score": 5,
        "replies": []
      },
      {
        "author": "zelphirkaltstahl",
        "body": "Oh, I guarantee you, all code I ever wrote is easy to remove ... It's just a few button presses here and there, then it will be all gone.\n\nAnyway, on a more serious level: If you write code so that it is additive, then you can also remove it easily later.",
        "score": 1,
        "replies": []
      },
      {
        "author": "i-make-robots",
        "body": " Requests is a great example of a Facade. I feel like there were more design patterns discussed but not called out by name. ",
        "score": 1,
        "replies": []
      },
      {
        "author": "schumacherfm",
        "body": "We have a quite old code base and I've deleted plenty of code! Even my own code.\n\nWith the code I've deleted from other people, I've always wondered how they come up with such a complicated mess.",
        "score": 1,
        "replies": []
      },
      {
        "author": "iseverynicknametaken",
        "body": "Nice read. I recall Greg Young’s talk from last year about this topic - following this advice gives you more flexibility to adjust your code to new models or ideas, as it might highlight places that could be coupled",
        "score": 1,
        "replies": []
      },
      {
        "author": "Fatalist_m",
        "body": "The article is all over the place, but I agree with the title, I've found that \"deletability\" is a very useful property to consider when thinking about cohesion/coupling.\n\nThere is often a debate about what the Single Responsibility Principle means. \"A class should have only one reason to change\"? Ok, but that's very vague, there are tons of reasons why we make changes in a class. \"Only one reason to delete\" is much more concrete and useful IMO. A good question to ask: how likely is it that a business request to remove some feature from the application would result in the deletion of this whole class?",
        "score": 1,
        "replies": []
      },
      {
        "author": "binaryck",
        "body": "Cool article.  \nI believe most of the times you can \"predict\" if some code will eventually be used in many places, so often I end up writing a function as soon as I need to copy paste some code the first or second time.  \n  \nBut yeah, if the use cases are not well defined then I go for copy paste until it looks retarded.",
        "score": 1,
        "replies": []
      },
      {
        "author": "nblv",
        "body": "If uncle bob had an evil twin",
        "score": 1,
        "replies": []
      },
      {
        "author": "kh0n5hu",
        "body": "&gt; repeat yourself to avoid creating dependencies, but don’t repeat yourself to manage them\n\nThis was for me the moment that Go as a language made click to me. Its package/dependency system that doesn't support the resolution of cyclic dependencies enforces you a lot to think about \"what is needed where\", which eventually leads to more modular code that can be used in an isolated manner from each other.\n\nI still don't agree with a whole lot of choices the language made, but the aspect of automation through conventions is where Go definitely shines at compared to all other languages.",
        "score": 1,
        "replies": []
      },
      {
        "author": "lunchmeat317",
        "body": "Everything points to simple functions that can be plugged in and out, instead of complex coupled classes. We all know this intrinsically. (John Carmack ahares this mentality.) Yet, we're always stuck in classical, enterprisey languages.\n\n\nWe're digging our own graves and complaining about it.",
        "score": 1,
        "replies": []
      },
      {
        "author": "mycolaos",
        "body": "Write an app nobody uses.\n\nYou can delete its code at any time.",
        "score": 1,
        "replies": []
      },
      {
        "author": "gbelloz",
        "body": "I'm an experienced coder, but find that writing totally cryptic.\n\nOne example\n\n&gt; Layering is less about writing code we can delete later, but making the hard to delete code pleasant to use (without contaminating it with business logic).",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "What is even better is starting with hardened images where all unused files are removed from day one. We use images from https://hub.rapidfort.com and we use the RF tools to automatically remove unused components",
        "score": 0,
        "replies": []
      },
      {
        "author": "mungaihaha",
        "body": "I haven't read the article but this sounds like advice a web developer would give",
        "score": -32,
        "replies": [
          {
            "author": "yonderbagel",
            "body": "It's very much *the opposite* of the things I dislike about web dev.\n\nWeb dev is where you'll see the most silly robotic dogma about poorly-understood \"clean code\" principles. This article is practically a counter-culture to all that.",
            "score": 18,
            "replies": [
              {
                "author": "mungaihaha",
                "body": "The point I am trying to make here is that it doesn't matter what you do when making CRUD apps. It is just so trivial to do that all advice is generally useful\n\nThe title of the article could have been 'write code that is easy to extend...' and that would be somewhat good advice",
                "score": -1,
                "replies": [
                  {
                    "author": "kankyo",
                    "body": "That advice goes against YAGNI. I see \"future proof\" code that has never been extended all the time. It's easy to add complexity but hard to remove it. So ho for simple at first.",
                    "score": 4,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "rafgro",
        "body": "Extremely stupid advice",
        "score": -3,
        "replies": []
      }
    ]
  },
  {
    "title": "1 bug, $50,000+ in bounties, how Zendesk intentionally left a backdoor in hundreds of Fortune 500 companies",
    "body": "",
    "score": 1100,
    "url": "",
    "created_utc": 1728807466.0,
    "author": "donutloop",
    "permalink": "/r/programming/comments/1g2kz9g/1_bug_50000_in_bounties_how_zendesk_intentionally/",
    "comments": [
      {
        "author": "[deleted]",
        "body": "I find it ridiculous.They drop it as out of scope, you try to alert their customers, they finally realize the danger of the exploit and give you a $0 bounty because you raised awareness of the threat with their customers",
        "score": 623,
        "replies": [
          {
            "author": "N3RO-",
            "body": "Next time, sell it to malicious actors.\n\nFuck companies who do these bad practices in bug bounty!",
            "score": 224,
            "replies": [
              {
                "author": "destroyer1134",
                "body": "That's what has to happen. The only reason these bug bounty programs exist is so people can use their skills for good and make a living. if they take that away, people will find another way to get paid.",
                "score": 124,
                "replies": [
                  {
                    "author": "double-you",
                    "body": "It sounds like you are implying that people who work on bug bounties would turn to actual crime if the bounties didn't exist. And that bug bounties are just whitewashed blackmail.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "Demiu",
                        "body": "Or they might just turn to your clients' bounty programs, which is completely legal. Might lose you some clients though, clients that pay for you to ensure your shit doesn't hack their shit. Bet they're paying you more than 10k too. So \"fuck you pay me\"",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "otac0n",
                    "body": "When \"what has to happen\" is a crime, you are volunteering other people's bravery.",
                    "score": 24,
                    "replies": []
                  },
                  {
                    "author": "walen",
                    "body": "&gt; The only reason these bug bounty programs exist is so people can use their skills for good and make a living.\n\nNo. The only reason these bug bounty programs exist is so companies can have their security bugs discovered and fixed by \"good\" actors before any \"bad\" actors manage to exploit them.  \nCompanies couldn't care less if people are able to make a living out of it or not.\n\nIf bug bounties didn't exist, the only ones trying to find vulnerabilities in your code would be hackers trying to exploit them for _potential_ gain (sell the exploit itself, sell your data, use it as a means to access other systems, etc.).  \nBy putting out these programs, companies are just incentivizing \"neutral\" hackers to proactively find any holes in their systems, notify the company and then keep their mouths shut until it's fixed, in exchange for _real_ $$$ gain.  \nIn other words, they are outsourcing their Security QA department. Way cheaper to pay 50k once a year to some random guy, than spending 300k/year on a couple of Security Engineers (or whatever the job title is). And, of course, it's way cheaper to pay 10k than to pay 50k, and way way cheaper to pay 0k.\n\nThe people claiming these bounties are not the same people who would sell the exploits on the darknet, and it's dumb to frame it like that. If they take the programs away, that people will just use other companies' programs, or get a more regular job if they don't already have one.",
                    "score": 13,
                    "replies": [
                      {
                        "author": "mallardtheduck",
                        "body": "Which is a long way of saying it's in the best interests of the company to pay decent bounties. More \"eyes\" on their product, cheaper than employing a specialist team.\n\nBut let's not pretend there are _no_ actors who might be tempted to sell an exploit to bad actors if there's no way to legitimately benefit from it (hell, in some cases good actors reporting an issue for _no personal gain_ have been at least threatened with prosecution). The term \"grey hat\" wasn't invented by me (although its precise defintion varies depending on who you ask)...",
                        "score": 3,
                        "replies": []
                      },
                      {
                        "author": "Empty-Win-5381",
                        "body": "And also more efficient than paying a couple 300k security engineers, since you might have an inumerable amount of people working on it and who are very properly incentivized to actually provide something, find a bug",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "&gt; The only reason these bug bounty programs exist is so people can use their skills for good and make a living.\n\nAlso so that companies can exploit you by simply not paying when you do the work. We are living in a world led by welchers who never get their comeuppances.",
                    "score": 9,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 42,
                "replies": [
                  {
                    "author": "hellomistershifty",
                    "body": "Yeah, if they outsourced the bounty program they need to own it themselves when the company they outsourced to fucks up",
                    "score": 10,
                    "replies": [
                      {
                        "author": "Empty-Win-5381",
                        "body": "Yeah, so dumb, as though they'd be overwhelmed by the bounty program. I'm sure they paid more for the horrible outsourcing than they'd pay in bounties",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "RICHUNCLEPENNYBAGS",
                "body": "It sounds like he still managed to collect $50,000 from affected companies, without committing any felonies (well maybe logging into the Slack instances, but it sounds like they paid him for disclosing the issue so it was probably less likely to land him in prison than selling it on the Dark Web)",
                "score": 9,
                "replies": [
                  {
                    "author": "Empty-Win-5381",
                    "body": "Yeah, jail exists",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Uristqwerty",
                "body": "If you understand society at a systems level, you'd see that becoming a black hat hacker in retaliation undermines any influence you could have had. Stopping an individual hacker then counts as a solved problem in its own right, with no need to address whatever underlying issue motivated them.\n\nWant to influence companies to improve? Don't attack customers/users, directly or indirectly. That gives them an excuse to take on the role of defender, protecting customers from the evil hacker. Documenting how hard you tried to work with them to protect users, and showing how *the company* was the one who failed is necessary to make sure all the reputation damage lands on them properly, maximizing the motivation to improve.",
                "score": -26,
                "replies": [
                  {
                    "author": "unkz",
                    "body": "Where in this scheme do I get paid?",
                    "score": 22,
                    "replies": [
                      {
                        "author": "Uristqwerty",
                        "body": "Hopefully from future bounties, from companies who learn from the PR disaster.\n\nIt won't be a PR disaster if you go the black hat route and sell the vulnerability to third parties, though, so other companies won't learn. \"It's a hacker. Nothing we could do; hackers gonna hack.\"\n\nPlus there's the risk of negative money if caught.",
                        "score": -17,
                        "replies": [
                          {
                            "author": "UpstageTravelBoy",
                            "body": "\"Rely on the other parties good behavior\" is pretty bad game theory",
                            "score": 17,
                            "replies": [
                              {
                                "author": "Uristqwerty",
                                "body": "It's not relying on good behaviour, it's recognizing that becoming a bad actor yourself will provoke *worse* behaviour in return, not pressure them to improve.\n\nBefore bug bounty programs became commonplace, the status quo was companies not caring much about security anyway, and using the legal system to punish hackers when they could catch them. If you revert to the old ways, then they'll follow the old ways too.",
                                "score": -6,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "PaintItPurple",
                            "body": "This would require a poor bug bounty program to constitute a \"PR disaster.\" Given that this has never happened in the entire history of the world, that seems pretty fanciful.",
                            "score": 5,
                            "replies": [
                              {
                                "author": "Uristqwerty",
                                "body": "The \"PR disaster\" is what follows a writeup of how shitty the company acted, posted as a blog.\n\nLike the very reddit post that was submitted here. And numerous others over the past decades, that each seriously harmed a company's reputation in the eyes of the security research community.",
                                "score": -1,
                                "replies": [
                                  {
                                    "author": "PaintItPurple",
                                    "body": "A post on r/programming with a 100 comments is not a PR disaster. In three days, nobody is even going to remember this post existed. You'd literally be better off hoping the Ghost of Christmas Past changed their minds.",
                                    "score": 3,
                                    "replies": [
                                      {
                                        "author": "Uristqwerty",
                                        "body": "&gt; A post on r/programming with a 100 comments is not a PR disaster.\n\nCorrect. At least not on its own. The post on reddit is just one of who-knows-how-many social media links, a seed for virality as the story spreads gradually. It's the spread *as a whole*, which becomes a disaster that'll influence the company's behaviour.\n\nAnd even if only a hundred redditors ever see it? Still more impact than selling the exploit on the darkweb would get, where chances are the company silently fixes the issue and the public never even hears of it.",
                                        "score": 0,
                                        "replies": [
                                          {
                                            "author": "PaintItPurple",
                                            "body": "None of what you're fantasizing has ever happened and there's no reason to believe it will magically start happening now. Don't believe me? Watch as this story's \"viral spread\" looks much more like a \"fizzle out,\" just like every article about a shitty bug bounty program before it. Bug bounty programs simply aren't a thing that 99.99999% of people care about.",
                                            "score": 3,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Bekwnn",
                "body": "And screw over every company that happens to use Zendesk and possibly to those companies' customers? Do random harm to ostensibly innocent and uninvolved parties?\n\nWhy the hell is this upvoted?",
                "score": -20,
                "replies": [
                  {
                    "author": "N3RO-",
                    "body": "This is not Red Cross or Our Lady of Mercy. Bug Bounty is a business, just like Zendesk. They played dirty with the researcher, so fuck them.\n\nI managed many H1 bug bounties in the past, and we never did shit like that. Pay your researchers accordingly when the finding is legit.",
                    "score": 23,
                    "replies": [
                      {
                        "author": "Bekwnn",
                        "body": "&gt; This is not Red Cross or Our Lady of Mercy.\n\nAnd selling this doesn't just fuck over Zendesk, it fucks over a lot of other random people who don't have any say in how Zendesk handles their bug bounties.\n\nDon't be a shitty person and sell exploits that would inflict harm to a bunch of different parties because one party slighted you.",
                        "score": -15,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 13,
                            "replies": [
                              {
                                "author": "Bekwnn",
                                "body": "In that regard, I don't find what the user who posted the article did wrong.\n\nPeople suggesting to sell the exploits to criminals, so that the backdoor can be exploited and those companies can randomly get pantsed for using what they thought was a widely used and trusted 3rd party software, are being crappy.\n\nIt's not about being saint. It's about not empowering criminals to randomly commit identity theft, ip theft, and fraud against other random companies whose only apparent *crime* is using Zendesk.\n\nIt's not about being a saint. It's about not selling lock picks to criminals because a company that sells locks slighted you.",
                                "score": 0,
                                "replies": [
                                  {
                                    "author": "IsABot",
                                    "body": "Then by that logic, Zendesk should have just paid out the bug bounty to the guy when first reported and they verified it gave access. They should have done right by their own customers who they owe it to. Instead they used the excuse of \"email spoofing\" doesn't count. You think hackers/criminals don't spoof emails/ips/phone numbers all the time? It should always be in scope if someone can easily fake basic information to get into a system they shouldn't have access to. They reported an issue to them first, responsibly, so they should have been paid, even if only partially due to \"not meeting every requirement exactly\". What they have shown is that honesty is not rewarded.",
                                    "score": 0,
                                    "replies": [
                                      {
                                        "author": "Bekwnn",
                                        "body": "By what logic?\n\nMy whole point is that you shouldn't be causing harm to random Zendesk customers because of what Zendesk did.\n\nYes it would cause harm to Zendesk as well but that doesn't in any way excuse the collateral. Driving a truck into a crowd to hit one person.\n\nI'm not excusing Zendesk at all here, I'm saying that the original comment I replied to is taking a shitty stance, selling exploits to criminals that would catch random people up in harms way.\n\nAnd the fact that people can't see that here, and are even upvoting it and downvoting the sane responses calling it out is insane.\n\nBut this is reddit and no one reads the damn article so let me lay it out for everyone who didn't:\n\n* Zendesk had an exploit, the exploit was proven to compromise the Slack and ticket systems of **every company that uses Zendesk.**\n\n* Zendesk said, \"thank you for bringing it to our attention, but not a bug bounty,\" ostensibly downgrading the severity of the exploit, and quite possibly backlogging it, leaving **Zendesk's customers exposed and at risk.**\n\n* The bug hunter/article author reached out to those companies exposed with the exploit, notifying them and recieving individual bug bounties from those Zendesk customers. Some of those Zendesk customers stopped using Zendesk.\n\n* The article author helped the people Zendesk was putting at risk, and it seemingly caused some blowback as some of them likely stopped being Zendesk customers.\n\n* *Everybody lived happily ever after (except Zendesk).*\n\n**The above comment** I originally replied to wanted to instead screw over other companies using Zendesk for the crime of *using Zendesk.*\n\nThey suggested selling the exploit to criminals to steal and defraud **other** companies **who aren't** Zendesk.\n\nAll for the primary purpose of getting paid by criminals, because Zendesk didn't pay them.\n\nHopefully that makes the moral failing more clear.",
                                        "score": 4,
                                        "replies": [
                                          {
                                            "author": "IsABot",
                                            "body": "The logic of, if you don't want people to turn to criminal methods then take care of them when they were looking out for you and your company/clients first. Instead they swept it under the rug, and thus OP (of the article) went to escalate it to people that would care about it. You don't get to fuck over someone then complain when they fuck you back.",
                                            "score": 0,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "Deranged40",
                            "body": "&gt; And selling this doesn't just fuck over Zendesk, it fucks over a lot of other random people who don't have any say in how Zendesk handles their bug bounties.\n\nMake no mistake, after Zendesk has pulled this stunt, me choosing to sell my new knowledge is not **me** fucking over Zendesk's customers, It's Zendesk fucking over those random people a second time. \n\nThis act that we're talking about--where they pull the bug and then offer $0 after their customers bitched about it--is **Zendesk** fucking over every single one of those random people that have a huge say in who they choose to use for a SaaS provider.",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Tired8281",
                    "body": "Because they are right.  Zendesk had many opportunities to do the right thing, and they repeatedly chose to sacrifice their customers.  If this dude found it, so could have the bad guys.",
                    "score": 9,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Slime0",
            "body": "Im unclear on this: didn't they just say it's out of scope for paying a bug bounty? That doesn't mean they didn't intend to fix it, right?",
            "score": 59,
            "replies": [
              {
                "author": "alexbirsan",
                "body": "They used the \"informative\" status, which translates to:\n\n&gt; The report contains valid information, but the information provided doesn't require action. This state is often used for out-of-scope submissions or submissions against known issues disclosed on the program's security page, but it's also often used to imply accepted risk.\n\nHowever, based on the screenshots in the article, his report was never actually seen by Zendesk staff, and the decision was taken by a middleman (HackerOne) on behalf of Zendesk.\n\nBUT, regardless of who saw the report or what the response was, Zendesk was still technically justified in denying a bounty. The big problem with reporting security bugs through third-party platforms is that you waive your right to share the information in that report with anyone else, even if the report is clearly rejected. It's shitty, but it is what it is.\n\nsource: been on both sides of this kind of interaction",
                "score": 119,
                "replies": [
                  {
                    "author": "PartlyProfessional",
                    "body": "He emailed zendesk and they just denied his appeal. And he obviously wouldn’t receive a bounty from them, so he and decided to milk their contracted companies. Smart kid",
                    "score": 113,
                    "replies": [
                      {
                        "author": "Thirty_Seventh",
                        "body": "The appeal was also rejected by HackerOne staff (\"Patrick | H1 Mediation\"). He didn't manage to get through to Zendesk until after contacting Zendesk clients.",
                        "score": 24,
                        "replies": [
                          {
                            "author": "to11mtm",
                            "body": "So, basically Zendesk started listening when the finder realized the bureaucratic shitshow was on the level of Comcast and decided to do the morally correct thing?\n\nH1+ZD are practicing security theater bolstered by kafkaesque bureaucracy.",
                            "score": 17,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "xTeixeira",
                    "body": "&gt; Zendesk was still technically justified in denying a bounty.\n\nI disagree with this. Sure, they're technically justified within the scope of the third party platform's policy, but that ignores the fact that there is no justification for choosing a third party platform that has terrible policies, nor does it justify their own bad policy of SPF, DKIM and DMARC issues being ineligible for bounties.",
                    "score": 79,
                    "replies": [
                      {
                        "author": "PmMeUrTinyAsianTits",
                        "body": "Seriously. Its gross how much \"well they passed the buck\" is accepted as an excuse for responsibility.",
                        "score": 28,
                        "replies": []
                      },
                      {
                        "author": "Coffee_Ops",
                        "body": "Are we ignoring that this issue has nothing to do with SPF, DKIM, or DMARC?\n\nThe issue is that zendesk itself blindly relies on the to Field to authenticate an attempt to add someone to a ticket, and that to field relies on a guessable, sequential ticket ID.\n\nI have no doubt that the SPF, DKIM, and DMARC records for all the companies involved are impeccable. They had no bearing this issue.",
                        "score": 15,
                        "replies": [
                          {
                            "author": "afranke",
                            "body": "FTA\n&gt; By sending a fake email to support+id{id}@company.com from the requestor’s email address and CCing their own email, Zendesk would think the email was legitimate. \n\nPlease do correct me if I'm wrong I don't consider myself an expert in these areas, but\n\n1) If the \"requestor’s email address\" had SPF properly configured, you shouldn't be able to send a spoofed email from that domain unless you're on the correct IP, right?\n\n2) If DKIM were configured and the spoofed email didn't have the correct key, this exploit would fail as the message would be rejected I think.\n\n3) DMARC just needs to be configured correctly if messages pass the first two, so it seems it wasn't here.\n\nAlso FTA\n&gt; Because my bug relied on email spoofing\n\nAren't those three technologies specifically meant to prevent e-mail spoofing?\n\nAlso, the screenshot in the article makes it clear it was rejected because it was a \"SPF, DKIM, DMARC issue\".\n\nAnd, wouldn't the issue be with the configuration of the customer company, not Zendesk itself?\n\nI guess the bigger issue with the Slack takeover has nothing to do with this, but if they had the others configured would this guy never have found the Slack issue?  He got into Slack by sending a spoofed e-mail from appleid@id.apple.com to support@company.com.  Company.coms email server should just immediately reject that as I know Apple has them all configured correctly.\n\nAnd ultimately isn't the fix they implement yet just another layer of those same things:\n&gt; Suspending an email means putting it aside for further review. It's not necessarily spam. It's just not a ticket in Zendesk Support yet. It remains in limbo until somebody reviews it and decides whether to accept or reject it. We use two spam filters, Cloudmark and Rspamd EAP to help determine suspicious characteristics in messages.",
                            "score": 8,
                            "replies": [
                              {
                                "author": "tsimionescu",
                                "body": "I think what's unclear here is what exactly is the email that Zendesk receives. If Zendesk is receiving the email from the attacker with the spoofed email address, then it's on Zendesk to validate. If the company's email server is the one that is receiving it and forwarding it to Zendesk, then it's on the company. Additionally, if the company doesn't have proper SPF/DKIM/DMARC for it's own emails, and thus they ask Zendesk to disable verifications for their domain, then it's again on the company.\n\nSo, it's possible that this is a problem with the company itself, but it can still be a problem with Zendesk. Not to mention, Zendesk could have thought ahead of time of a policy of rejecting emails at least from known large OAuth providers.",
                                "score": 3,
                                "replies": [
                                  {
                                    "author": "afranke",
                                    "body": "From what I can find, it's up to the customer to handle receiving messages:\n\n&gt; \"For example, if you receive email from your customers at help@acme.com, and you've set up an automatic redirect to forward all email received there to Support, you can authorize Zendesk to send out notifications as if it originated from your own email address (for example: help@acme.com). That way you can preserve your branding throughout the entire process.\"\n\nhttps://support.zendesk.com/hc/en-us/articles/4408832543770-Allowing-Zendesk-to-send-email-on-behalf-of-your-email-domain\n\nAnd to the credit of Zendesk, they do have an article detailing the needed mail server configs, including sections on SPF, DMARC, and DKIM:\n&gt; **Recommendation 3: SPF records**\n&gt; \n&gt; Domains that send emails to Support should have a valid SPF record that authorizes IP addresses to send emails on behalf of the domain.\n&gt; \n&gt; Find below two examples of the correct SPF record for the following situation:\n&gt; \n&gt; *     domain.com\n&gt; *     SMTP servers with address 1.2.3.4\n&gt; *     MX record mail.domain.com pointing on 1.2.3.4.\n&gt; \n&gt; Both examples would enable 1.2.3.4 to send emails on behalf of domain.com.\n&gt; \n&gt; *     domain.com.          3600    IN      TXT     \"v=spf1 mx:domain.com ~all”\n&gt; *     domain.com.          3600    IN      TXT     \"v=spf1 ip4:1.2.3.4 ~all” \n&gt; \n&gt; **Recommendation 4: DMARC and DKIM**\n&gt; \n&gt; To decrease the number of spoofed emails and spam you receive, add an additional layer of security on your inbound emails by enabling Sender Authentication with SPF, DKIM, and DMARC alignment. For more information, see the article: Authenticating incoming email (SPF, DKIM, DMARC).\n\nhttps://support.zendesk.com/hc/en-us/articles/4412991936922-Workflow-Ensuring-email-system-compatibility-with-Zendesk\n\nEDIT: I searched more and found articles detailing email setups, but not sure if I care enough about this Reddit thread to read them:\n\nhttps://support.zendesk.com/hc/en-us/articles/4887918604058-A-complete-guide-to-understanding-email-in-Zendesk-Introduction\n\nhttps://support.zendesk.com/hc/en-us/articles/5612728377754-Understanding-the-default-email-setup-in-Zendesk",
                                    "score": 3,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "Empty-Win-5381",
                                "body": "Would that mean this kid is a liar or something is left out?",
                                "score": 0,
                                "replies": [
                                  {
                                    "author": "afranke",
                                    "body": "No, just not detailed enough.  We need to know how the emails are actually handled to determine where the issue is.  If the companies are self-hosting e-mail (or using a service that isn't Zendesk but are in control of their own DNS for it), then its the fault of the company and they had an insecure configuration that was used against a Zendesk install (and could be abused in any other number of ways).\n\nIf Zendesk is hosting the e-mail service on behalf of the companies, then Zendesk screwed up DNS configs and essentially allowed this to happen.",
                                    "score": 3,
                                    "replies": [
                                      {
                                        "author": "Empty-Win-5381",
                                        "body": "Got it. How would the system prevent spoofing though? Guess I should learn more",
                                        "score": 2,
                                        "replies": [
                                          {
                                            "author": "afranke",
                                            "body": "- SPF stands for Sender Policy Framework, and it's an email authentication method designed to prevent email spoofing. SPF allows the owner of a domain to specify which mail servers are permitted to send emails on behalf of that domain.  If the \"requestor\" e-mail host has it properly configured in their DNS records (such as Google for Gmail, a requestor being a customer creating a support ticket) AND the receiver (Company/Zendesk in this case) properly VERIFY the SPF record it would be rejected if it came from the wrong server.  This is mostly applicable to things like company e-mail addresses, beacuse if the requestor is on Gmail and you are also on Gmail, the spoofed mail is coming from the correct server (assuming Gmail lets you send messages as another gmail user, which I wouldn't think it does).\n\n- DKIM stands for DomainKeys Identified Mail, and it's an email authentication method designed to allow receiving mail servers to verify that an email has not been tampered with during transmission. It does this by attaching a digital signature to the email, which is linked to the sender’s domain, ensuring the integrity and authenticity of the message. Much like above, if the sender (like Gmail) has it properly configured its up to the receiver to verify it.  Also like SPF above, if you're both sending from the same server, you both have the same DKIM key (again, assuming Gmail allows you to spoof at all before it's even sent).\n\n- DMARC stands for Domain-based Message Authentication, Reporting, and Conformance, and it’s an email authentication protocol that builds on SPF (Sender Policy Framework) and DKIM (DomainKeys Identified Mail). DMARC allows domain owners to protect their domain from unauthorized use, such as email spoofing, by defining a policy that tells email receivers how to handle emails that fail SPF or DKIM checks. DMARC also provides reporting, so domain owners can monitor and track the use of their domain in email communications.  And like the above, it's up to the receiver to verify this information, which should be contained in the DNS records of the sending domain.  Here's Googles for example:\n\n&gt; * v=spf1 redirect=_spf.google.com (Google is HUGE, so this is a redirect to 3 other domains which include all of the many netblocks gmail sends from)\n&gt; * v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAntvSKT1hkqhKe0xcaZ0x+QbouDsJuBfby/S82jxsoC/SodmfmVs2D1KAH3mi1AqdMdU12h2VfETeOJkgGYq5ljd996AJ7ud2SyOLQmlhaNHH7Lx+Mdab8/zDN1SdxPARDgcM7AsRECHwQ15R20FaKUABGu4NTbR2fDKnYwiq5jQyBkLWP+LgGOgfUF4T4HZb2PY2bQtEP6QeqOtcW4rrsH24L7XhD+HSZb1hsitrE0VPbhJzxDwI4JF815XMnSVjZgYUXP8CxI1Y0FONlqtQYgsorZ9apoW1KPQe8brSSlRsi9sXB/tu56LmG7tEDNmrZ5XUwQYUUADBOu7t1niwXwIDAQAB\n&gt; * v=DMARC1; p=none; sp=quarantine; rua=mailto:mailauth-reports@google.com\n\nApple:\n&gt; * v=spf1 include:_spf.apple.com include:_spf-txn.apple.com ~all\n&gt; * v=DKIM1; k=rsa; h=sha256; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy4V3QZgjpUK3HSijzU+uGQlfBx8N40Ese/TaM0P8BES/kTKJS7OvtEfmA+ihMYcwh+vpvjK7aBIpV2CT49QnC/lXm8KwXad64VF18pgaCiuOW4rxC2L687Gn2BHEekcbl5FozRa716DLXpo07j5IX5sdvKPi6KylnmyOmjD/NqfvbLZf/lRlTb9pXf1N3fLu+W25vaotR4ZQpbrMQkKIANDafdL4KvPmfFOfYuZYiLpQfHfuJYok0aROsS5as1cEthN9MnkdSBAJHLG/f63+jNLgSC9x77YBWH2gPIDIqEanPVPFPJjs0yNh1zCWJUma9ihNXNwBP9GDclt042thAwIDAQAB\nv=DMARC1; p=quarantine; sp=reject; rua=mailto:d@rua.agari.com; ruf=mailto:d@ruf.agari.com;\n\nSo if my e-mail server receives a message from one of these domains, if I have it configured to, it will first check SPF to make sure the sender IP is an allowed IP, then DKIM to verify the key came from the correct domain, and if those fail it will follow the DMARC instructions to reject/quarantine and report.  You can see this all happening in your e-mail headers, which are usually hidden from view but would look like this (big chunks cut out for relevance) from a message Apple sent to my Gmail:\n\n\n    X-Dkim_Sign_Required: YES\n    ...\n    Authentication-Results: mx.google.com; spf=softfail (google.com: domain of transitioning no_reply@email.apple.com does not designate XXX.XXX.XXX.XXX as permitted sender) smtp.mailfrom=no_reply@email.apple.com; dkim=pass header.i=@email.apple.com header.s=email0517 header.b=QdlN3Fs1\n    ...\n    Dkim-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=email.apple.com; s=email0517; t=1728774388; bh=14zaRXDTfQLxvL04c6WtNG6a8zs6rDMsxSevFa/YN2g=; h=Date:From:To:Message-ID:Subject:Content-Type; b=QdlN3Fs1z695x6DeC5T0BC8AdslN6YXZASKk322PVWjPdh1oJoIp0vyNtMz9O8XqQ kNE6VXc1JbR11WcEOI7qRrlHqmnNmb/E8mlhf0qhQHY+/6vFKEoWwUR3zzRGvFi635 i5cRVPlq3CSeygbnY6aFDEwnmt8uI9NRlsYfOkWITrSfyylWzH0gEiHTNcxXNSr5IK GlyVxMuQZvATqKlrAmbsH2AFTU2okxuE0WLy48AM+RZtqdnwiy95BclGTgiEIDGKQb iPAS1aiaYD5v/ENyWVDTLNlwksDJVeURXzwzYf/p1EhRcmXgMtgl8VdyWUTVkiCSR7 Euq7cfMUmfMTQ==\n    ...\n    Received-Spf: softfail (google.com: domain of transitioning no_reply@email.apple.com does not designate XXX.XXX.XXX.XXX as permitted sender) client-ip=XXX.XXX.XXX.XXX;\n    Received-Spf: pass (mx-inbound19-53.us-east-2b.ess.aws.cudaops.com: domain of no_reply@email.apple.com designates 17.23.6.24 as permitted sender)\n    ...\n    X-Bess-Dmarc: no-action HeaderFrom:email.apple.com Record:\"v=DMARC1; p=reject; rua=mailto:d@rua.agari.com; ruf=mailto:d@ruf.agari.com;\" SPF:Pass(s) DKIM:email.apple.com(s) PCT(no-pct)",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "nemec",
                            "body": "Presumably if the company (not Zendesk) has set up DKIM correctly the spoofed email to add yourself to the ticket is denied by Zendesk.",
                            "score": 4,
                            "replies": [
                              {
                                "author": "Coffee_Ops",
                                "body": "Presumably if that was the case, remediation for the customers he directly contacted would have been as easy as \"fix your records\", not \"disable a zendesk feature.\"",
                                "score": 6,
                                "replies": [
                                  {
                                    "author": "nemec",
                                    "body": "If the company wasn't smart enough to set up SPF/DKIM/DMARC in the first place it's not a surprise they'd tend to overreact and place the blame anywhere but themselves.",
                                    "score": 5,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "SanityInAnarchy",
                    "body": "&gt; The big problem with reporting security bugs through third-party platforms is that you waive your right to share the information in that report with anyone else, even if the report is clearly rejected.\n\nThis part seems *incredibly* shitty, to the point where it'd seem it defeats the purpose of a bug bounty program.\n\nI mean, the purpose of a bounty program is, first, to incentivize security researchers to bring reports to you instead of selling it to malicious actors, and second, to actually make software more secure.\n\nWhen that process is used to sit on a vulnerability instead of acting, obviously it makes everyone less secure, and it also removes any incentive for the researcher not to disclose anyway. After all, if it's going to be $0 bounty either way, there's no reason not to disclose it to third parties or publicly and still get $0. Or, for that matter, sell it to a malicious actor for more than $0.",
                    "score": 13,
                    "replies": []
                  },
                  {
                    "author": "fuseboy",
                    "body": "&gt;The big problem with reporting security bugs through third-party platforms is that you waive your right to share the information in that report with anyone else, even if the report is clearly rejected. It's shitty, but it is what it is.\n\nThat's very interesting. I wasn't aware of that, is that an implication of their [terms and conditions](https://www.hackerone.com/terms) somehow?",
                    "score": 11,
                    "replies": [
                      {
                        "author": "alexbirsan",
                        "body": "For HackerOne specifically, I think they cite their [CoC](https://www.hackerone.com/policies/code-of-conduct), with the caveat that \"vulnerability\" can also refer to disputed, unvalidated, or otherwise invalid vulnerabilities.\n\nThis is standard across the board, for example [Bugcrowd](https://www.bugcrowd.com/resources/hacker-resources/standard-disclosure-terms/#:~:text=ALL%20SUBMISSIONS%20ARE%20CONFIDENTIAL%20INFORMATION,has%20otherwise%20consented%20to%20disclosure.) communicates this better by referring to them as \"submissions\", which encompasses any and all report contents.",
                        "score": 15,
                        "replies": [
                          {
                            "author": "Empty-Win-5381",
                            "body": "Well, then they will sue the kid?",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "jrochkind",
                    "body": "Hm, marking it \"informative\" you still have waived yiour right to share the information with anyone else?\n\nBased on how you describe \"informative\", that seems like a problem to be fixed. It seems to me marking an issue \"informative\" should mean this is not confidential/privileged information, it is information that is already publicly known or can be publicly known with no danger. Once it's been marked informative you should be free to share. \n\nIf they think otherwise, they should be giving you a bounty, right? That's what \"informative\" is for, no?\n\nWhat's the jutification for marking something \"informative\" that is required to be kept confidential for security reasons? What would be a justified case for that?",
                    "score": 15,
                    "replies": [
                      {
                        "author": "fordat1",
                        "body": "&gt;What's the jutification for marking something \"informative\" that is required to be kept confidential for security reasons? What would be a justified case for that?\n\nUse-case clearly seems to be make the bug bounty program cost less money",
                        "score": 19,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "knottheone",
                    "body": "Did they take action on it? If so, it's not informative and they owe a bounty. That is the actual litmus test.\n\nThey did take action on it, they were working on a fix for two months and deployed it after two months. That highlights to me that it was actually being looked at even tagged as informative.",
                    "score": 5,
                    "replies": []
                  },
                  {
                    "author": "Empty-Win-5381",
                    "body": "How did he waive that right? He signed no contract and I think he won't have legal troubles from this",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "Demiu",
                    "body": "Oh damn he broke the agreement he'll have to pay back his $0 from zendesk",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "JaggedMetalOs",
            "body": "I mean, playing devils advocate, Daniel did come up with a much more serious attack than his original report. But Zendesk really should have taken a defense in depth approach and just accepted and fixed the original bug report.",
            "score": 19,
            "replies": [
              {
                "author": "Empty-Win-5381",
                "body": "What do you mean, how did he come with a much more serious attack?",
                "score": 1,
                "replies": [
                  {
                    "author": "JaggedMetalOs",
                    "body": "Leveraged the bug to gain access to private Slack channels via SSO.",
                    "score": 5,
                    "replies": [
                      {
                        "author": "Empty-Win-5381",
                        "body": "How did his inclusion of himself on the CC give him access to the private slack channels?",
                        "score": 1,
                        "replies": [
                          {
                            "author": "JaggedMetalOs",
                            "body": "The method is detailed in the article, basically he was able to use it to verify an AppleID account at support@company.domain and then access Slack as if he had a legit company email address.",
                            "score": 4,
                            "replies": [
                              {
                                "author": "Empty-Win-5381",
                                "body": "I see. So he asked for it",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "tsimionescu",
            "body": "It seems there is more nuance than that. Per the disclosures, the original issue is still considered out of scope and nothing has been done about it: if it's possible to send spoofed emails from a company, then you can still get added to tickets. What they've done is to add more layers to prevent OAuth confirmation emails from automatically opening tickets like this. This is fixing a vulnerability that he never even tried to disclose to Zendesk.\n\nUltimately it's unclear to me what Zendesk's responsibility even is. If the company server is accepting and forwarding spoofed emails to Zendesk, why is it this Zendesk's problem? Why isn't this something the company itself should fix, not relying on Zendesk to add spam filters to protect them from their bad email practices?",
            "score": 0,
            "replies": []
          },
          {
            "author": "ozyx7",
            "body": "The original issue he reported was out of scope per the terms of the bug bounty.  While those terms are unfortunate, the simple fact remains that it was out of scope.\n\nHe then leveraged his issue with *another issue* (Zendesk not blocking automated email from `appleid@id.apple.com`) that he did *not* report to Zendesk. (Arguably it shouldn't be Zendesk's responsibility to block every possible sender email address used by every possible OAuth provider used by arbitrary third-party services such as Slack, but he didn't try to demonstrate this to Zendesk to prove how serious the original issue was.)",
            "score": -9,
            "replies": [
              {
                "author": "Doctor_McKay",
                "body": "It's not the security researcher's job to come up with every possible way a vulnerability can be exploited. The researcher demonstrated information disclosure, and that's enough to prove a vuln exists.\n\nBreaking into Slack via Apple isn't even a Zendesk problem; the root issue is the information disclosure allowing a malicious actor to verify an Apple account under a company's domain, and that's exactly what was reported to Zendesk.",
                "score": 14,
                "replies": [
                  {
                    "author": "ozyx7",
                    "body": "I'm talking specifically about eligibility for the bounty.  I'm not claiming that information disclosure isn't a serious problem.\n\nThe *second* issue maybe would have been eligible had he reported it.",
                    "score": 0,
                    "replies": [
                      {
                        "author": "Doctor_McKay",
                        "body": "That's the thing though, it's the same issue.",
                        "score": 8,
                        "replies": [
                          {
                            "author": "ozyx7",
                            "body": "It's not the same issue.  The first issue is what allows the second issue to exist.  If Zendesk blocked `appleid@id.apple.com` like it blocked `noreply@...` senders, then he wouldn't have been able to do what he did.\n\nAgain, I'm not downplaying the first issue.  Unintended information disclosure should have been treated seriously.  I also don't personally agree with the terms of the bug bounty, but those terms are what they are.",
                            "score": -1,
                            "replies": [
                              {
                                "author": "Doctor_McKay",
                                "body": "The reported information disclosure vuln is the one and only issue. Without ID, it doesn't much matter if they block appleid@id.apple.com or not.",
                                "score": 3,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "rabid_briefcase",
                "body": "&gt; While those terms are unfortunate, the simple fact remains that it was out of scope.\n\nThis is something many executives need to learn.\n\nPay the white hats generously,or you will pay far more when the black hats do the same work. The only way to be notified is to pay for all of them, not to announce an exclusion to not pay out.\n\nIt is now likely with a PR backlash that they will pay out, but it is not before the company has paid with a PR problem and multiple lost contracts described in the article. They saved the money on a bounty in the short term, but are paying far more as a result, and will likely pay again as gray hats won't hesitate to get money from the bad actors after exploits like this are announced.",
                "score": 2,
                "replies": []
              },
              {
                "author": "Demiu",
                "body": "Too bad for zendesk working for free was out of scope per his policy, huh?",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "bobsbitchtitz",
        "body": "This kid is a fucking beast. The fact that ZenDesk fucked up so bad and proably lost &gt; $100k in clients instead of just paying him is wild.",
        "score": 337,
        "replies": [
          {
            "author": "Jugales",
            "body": "If Google can lose all the data of a billion dollar wealth management company, or Cyberstrike can take down millions of corporate computers at once, or the government can have every single person’s SSN stolen, I’m sure Zendesk will be alright. Just gotta pay the PR department a bonus.",
            "score": 123,
            "replies": [
              {
                "author": "Ancient_Ad5270",
                "body": "&gt;Cyberstrike\n\nCrowdstrike",
                "score": 59,
                "replies": [
                  {
                    "author": "Deathisfatal",
                    "body": "Clownstrike",
                    "score": 27,
                    "replies": [
                      {
                        "author": "SanityInAnarchy",
                        "body": "For extra fun, https://clownstrike.lol/\n\nNote the same \"it's not the crime, it's the coverup\" pattern as Zendesk exhibited here. I would never have heard of that website if it hadn't been hit with [a series of fraudulent DMCAs and other false positives](https://clownstrike.lol/crowdmad/) to try to bully it off the Internet.",
                        "score": 15,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Jugales",
                    "body": "I noticed after commenting and wondered how long it would take someone to notice, apparently 3 hours lol",
                    "score": 3,
                    "replies": [
                      {
                        "author": "esperind",
                        "body": "its like when your mom called every game \"nintendo\".",
                        "score": 8,
                        "replies": []
                      },
                      {
                        "author": "qwak",
                        "body": "I'm telling your customers. Pay me",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "bobsbitchtitz",
                "body": "I'm not saying ZenDesk will collapse but if they lose a couple of clients vs just paying the hacker a paltry sum. Even paying $50k is probably nothing comparatively.",
                "score": 28,
                "replies": []
              },
              {
                "author": "Worth_Trust_3825",
                "body": "&gt; Just gotta pay the PR department a bonus.\n\nNot even that. Some companies are just too big to fail.",
                "score": 14,
                "replies": []
              },
              {
                "author": "happyscrappy",
                "body": "I thought Google got all that data back, it just took a while (8 days or something)",
                "score": 3,
                "replies": []
              },
              {
                "author": "KevinCarbonara",
                "body": "Is there any indication crowdstrike is even going to recover?",
                "score": 1,
                "replies": [
                  {
                    "author": "oren0",
                    "body": "CRWD stock has regained about 75% of what it lost in the 2 weeks following the outage.",
                    "score": 4,
                    "replies": []
                  },
                  {
                    "author": "iiiinthecomputer",
                    "body": "Sure. It'll be a blip. They'll reband and move on.\n\nThere are no consequences to gross technical incompetence or massive mismanagement. See: Boeing.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "KevinCarbonara",
                        "body": "Boeing is necessary to the security of this country. Crowdstrike could be eliminated with a single PR from Microsoft.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 0,
                "replies": [
                  {
                    "author": "Jugales",
                    "body": "Hardly. The Google-built admin tool was created with a default account deletion after 1 year, and their engineers were supposed to manually override that insane default. Bad design.",
                    "score": 12,
                    "replies": []
                  },
                  {
                    "author": "[deleted]",
                    "body": "Did you read this somewhere? It's really the exact opposite of what happened.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Snoron",
        "body": "I'd be slightly more impressed with ZenDesk after this if they gave this person their WELL DESERVED bounty to show they really take this stuff seriously, as well as it being an admittance that their own response to the initial reports were not appropriate, as that directly led to the later action.\n\nThey may or may not have broken the guidelines depending on how you interpret things, but regardless, they simply didn't leave other avenues open.\n\nIF ZenDesk is claiming that a) they didn't want to go any further with that issue, and b) they didn't want it sharing with any other companies... THEN my conclusion is that they want to leave a bug unpatched without any of their customers knowing about it.\n\nAlso they are *disincentivizing* responsible disclosure after they turn down an initial report. Imagine the next time someone gets ignored by ZenDesk like this. Might as well sell your exploit if they're not gonna give you any money once you've (*responsibly, given the situation*) told at-risk customers.\n\nReally impressive work, either way.",
        "score": 144,
        "replies": []
      },
      {
        "author": "Leihd",
        "body": "Hmm, sounds a bit like if I discover something huge in Zendesk that opens them up to serious legal trouble, they're the last person I should try reporting it to.\n\nInstead I should contact their biggest clients. Not sure how else I'm meant to take their response to what should've been a quick turnaround time even when they acknowledged it, then telling the reporter to screw off: he's getting nothing.",
        "score": 148,
        "replies": [
          {
            "author": "Empty-Win-5381",
            "body": "Hahaha EXACTLY. You should just contact their biggest clients and Government regulators while you're at it. They're asking to be grinded",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "mathisfakenews",
        "body": "this kid will go far",
        "score": 133,
        "replies": [
          {
            "author": "jherico",
            "body": "Maybe, maybe not.\n\nSometimes well meaning people who point out issues in vulnerable systems get hounded to [death](https://en.wikipedia.org/wiki/Aaron_Swartz).",
            "score": 20,
            "replies": [
              {
                "author": "Kirk_Kerman",
                "body": "He was looking down the barrel of a $1 million fine and 35 years in prison for the crime of downloading and redistributing JSTOR articles. Most research is in at least some part publicly funded, and paywalling it is morally heinous, never mind the very real costs of making future research harder and more expensive.",
                "score": 26,
                "replies": [
                  {
                    "author": "NoveltyAccountHater",
                    "body": "Look, I agree that research papers should be free (especially those funded by gov't grants) and the Open Access movement.  If I'm on a jury, he's an easy case to go for nullification.  He was offered a plea deal of six months in minimum security prison for the downloads for pleading guilty (which his team rejected in favor of a trial).\n\nThat said like many other prodigies/geniuses, he did publicly write about his [severe depression](http://www.aaronsw.com/weblog/verysick) going back to 2007, well before the 2010-11 MIT JSTOR downloads and his 2011 arrest.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "Empty-Win-5381",
                        "body": "Yeah, High IQ and depression go hand in hand. Unless the person manages to mentally aspire to a higher World, they will be in big trouble. They absolutely CANNOT live among average or low IQ folks, lest they just see no point in the game of life and seek to obliterate themselves and others full of rage",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "RationalDialog",
                "body": "Exactly. don't be a hero and if, do it under the protection of a company that actually works in this area vs doing it as a hobby.",
                "score": 2,
                "replies": []
              },
              {
                "author": "throwawaystedaccount",
                "body": "But this young man is a hacker, a tough cookie, and is more likely to be sought after as an ethical hacker due to his history of exploits (as seen on his github profile) and his ability to work with literally Fortune 500 at 15, and make $50,000 off the whole thing. Aaron Swartz was an idealist, equally effective yes, but he wasn't pragmatic / practical in the way this young man is. I don't see a problem for this guy making it big, but I do see him being tested and tempted by money and power in the future. He already knows how to handle some types of serious power (major security bug, responsibly disclosed), so he seems to have a good start in that department.",
                "score": -5,
                "replies": [
                  {
                    "author": "knd775",
                    "body": "You really don't know much about Aaron Swartz, then.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "throwawaystedaccount",
                        "body": "Yes, I think I need to read more about him. I knew only half the things he did.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Prod_Is_For_Testing",
                "body": "He planted an illegal wiretap on campus to suck down data and distributed it for free. He got caught and couldn’t face the consequences. He’s not a saint. He was extremely misguided ",
                "score": -5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "DJTheLQ",
        "body": "Their fix is to use RSpamD score and explicitly block Google and Apple reply-to emails. \n\nBut neither really prevent this attack? Craft an email that passes the spam filter, attack non Google and Apple SSO SaaS services. \n\nOnly something like `support@support.company.com` avoids this.",
        "score": 61,
        "replies": [
          {
            "author": "SanityInAnarchy",
            "body": "Or randomize ticket IDs, so you can't just add yourself to someone else's ticket? That seems like the most obvious fix, and I don't understand why they wouldn't do it.",
            "score": 19,
            "replies": [
              {
                "author": "iiiinthecomputer",
                "body": "You don't have the randomize the ticket ID, just generate an additional ticket specific random token for email references only, and reject mail for which it does not match.\n\nsupport+ticket1242-GzHkkY@...",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "KUUUUUUUUUUUUUUUUUUZ",
            "body": "and im pretty sure that still doesnt prevent an insider attacker from you know, using their own company email to read support tickets.\n\nI.e, join the company as an intern, gain access to data in violation of PoLP policies",
            "score": 8,
            "replies": []
          }
        ]
      },
      {
        "author": "Alborak2",
        "body": "This was written by a 15 year old? I have coworkers who can't write that well let alone jump through the hoops OP did. I hope OP gets a hell of a lot more than 50k from their future employments.",
        "score": 21,
        "replies": []
      },
      {
        "author": "qmunke",
        "body": "IANAL but I would expect a sudden flurry of GDPR-related complaints against Zendesk - knowingly leaving a vulnerability of this severity open after being notified appears to violate Article 32: https://gdpr-info.eu/art-32-gdpr/\n\n&gt; the controller and the processor shall implement appropriate technical and organisational measures to ensure a level of security appropriate to the risk\n\n(although they have now remediated the issue, I'm not sure about the potential for back-dating complaints)",
        "score": 69,
        "replies": [
          {
            "author": "Tiquortoo",
            "body": "GDPR, more broadly, just doesn't actually work how you think it does. There are notifications and remediation periods, etc",
            "score": 26,
            "replies": []
          }
        ]
      },
      {
        "author": "Kok_Nikol",
        "body": "Awesome job!\n\nAnd a very distasteful reply from zendesk in the comments, yuck.",
        "score": 68,
        "replies": [
          {
            "author": "Halkcyon",
            "body": "I refuse to believe a no-pfp, created-today account on GitHub is actually Zendesk.",
            "score": 21,
            "replies": [
              {
                "author": "Kok_Nikol",
                "body": "Fair enough, but it's kind of bizarre that someone would fake that...\n\nIn any case, their official response is equally ugly - https://support.zendesk.com/hc/en-us/articles/8187090244506-Email-user-verification-bug-bounty-report-retrospective",
                "score": 18,
                "replies": [
                  {
                    "author": "Doctor_McKay",
                    "body": "&gt; Although the researcher did initially submit the vulnerability through our established process, they violated key ethical principles by directly contacting third parties about their report prior to remediation.\n\nBullshit. Zendesk outright rejected the report, which means that they washed their hands of whatever he might do with it in the future. After all, it's \"not a vulnerability\", so why should he have to stay quiet about it?",
                    "score": 28,
                    "replies": [
                      {
                        "author": "nemec",
                        "body": "&gt; why should he have to stay quiet about it?\n\nbecause he agreed to that policy when he submitted the report. Anyway, \"out of scope\" doesn't mean \"won't be fixed\".",
                        "score": -14,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Skizm",
        "body": "When zendesk asked him to keep quiet, he should have replied: “sorry, this bug is out of scope”.",
        "score": 52,
        "replies": [
          {
            "author": "[deleted]",
            "body": "That's what I thought. You said I don't have a bug in scope here and I informed, not reported. Then I tell individual companies and now you want to know how I escalated from email spoofing configuration issues, but that is still out of scope. \n\nTell your paying customers the bug they're reporting is out of scope and thank them for notifying.",
            "score": 13,
            "replies": []
          }
        ]
      },
      {
        "author": "victotronics",
        "body": "Very good read. Hunter fully earned his $50k. Impressive.\n\n\"Slack intoduced OAuth login just a few years ago and must have completely forgotten\"\n\nThat's another big company not coming out of this looking particularly good.",
        "score": 21,
        "replies": []
      },
      {
        "author": "amsassarp",
        "body": "man is 15, i’m 10 yrs older and have achieved nothing",
        "score": 60,
        "replies": [
          {
            "author": "Boneraventura",
            "body": "Probably isnt a redditor",
            "score": 45,
            "replies": []
          },
          {
            "author": "throwawaystedaccount",
            "body": "I'm 20 years older than you and I've done nothing of this scale. Some of us are just normies. It's ok. In fact it's good. If everyone were a genius, the world would be a very chaotic place.",
            "score": 9,
            "replies": []
          }
        ]
      },
      {
        "author": "rdtsc",
        "body": "Everyone faulting ZenDesk for rejecting. It reads to me as if HackerOne was the one rejecting it, without any nuance. They even admit that it is a potential high-risk vulnerability and just sat on it? I would seriously rethink funneling all reports through HackerOne.",
        "score": 43,
        "replies": [
          {
            "author": "[deleted]",
            "body": "cooing innate plants safe shrill screw chunky sand lavish lip\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
            "score": 46,
            "replies": [
              {
                "author": "nemec",
                "body": "&gt; guy escalated to ZenDesk staff\n\nHe escalated to a HackerOne mediator, who rejected it.",
                "score": 13,
                "replies": []
              }
            ]
          },
          {
            "author": "SanityInAnarchy",
            "body": "No, this is 100% on Zendesk.\n\nFirst: Maybe H1 should've forwarded it, but they were acting on Zendesk's behalf. You can't absolve responsibility by contracting out to a third party and then blaming the third party.\n\nSecond: [Here's Zendesk's explanation of why they ultimately paid out $0](https://support.zendesk.com/hc/en-us/articles/8187090244506-Email-user-verification-bug-bounty-report-retrospective):\n\n&gt; Although the researcher did initially submit the vulnerability through our established process, they violated key ethical principles by directly contacting third parties about their report prior to remediation.\n\nThis is disingenuous, of course. The issue had been clearly marked \"out of scope\" and demoted to \"informational\". IMO that should be fair game to discuss *publicly* at that point, yet the researcher only contacted other companies impacted -- companies that were evidently more cooperative, as he ended up earning $50k from Zendesk *customers.*\n\nAt that point, the right move would be, first, for Zendesk to apologize and pay out an appropriate bounty. And second, if they wanted to distance themselves from H1, that was their opportunity -- instead, they essentially doubled down on H1's absurd policy of allowing companies to reject reports, but sit on them anyway.",
            "score": 10,
            "replies": []
          },
          {
            "author": "klo8",
            "body": "Yes, it's a HackerOne person replying to him, not ZenDesk. I imagine they have a policy against SPF/DKIM/DMARC issues because of [beg bounties](https://blog.redsift.com/email/dmarc/what-is-a-beg-bounty-how-to-avoid-paying-out-for-dmarc-vulnerability/) which lead to a lot of noise. Unfortunately it also caught a legitimate vulnerability here. This part I'd say is not on ZenDesk, that's just kinda unfortunate.",
            "score": 15,
            "replies": [
              {
                "author": "Nowaker",
                "body": "It wasn't on Zendesk until Zendesk learned about it, and decided to double down on HackerOne's view on this. https://support.zendesk.com/hc/en-us/articles/8187090244506-Email-user-verification-bug-bounty-report-retrospective\n\n&gt; Although the researcher did initially submit the vulnerability through our established process, **they violated key ethical principles by directly contacting third parties about their report prior to remediation**. This was in violation of bug bounty terms of service, which are industry standard and intended to protect the white hat community while also supporting responsible disclosure.\n\nIn reality, if you outsource certain responsibilities to a third party, you cannot claim \"it's on the third party\". It's like claiming frivolous actions of Delta gate agent or flight attendants aren't on Delta. Sure they are. They act as an agent of the business, and are collectively responsible for the outcomes of their actions. \n\n\n&gt; This breach of trust resulted in the forfeiture of their reward, as we maintain strict standards for responsible disclosure.\n\nYeah, and this lack of care for security resulted in multiple Zendesk customers leaving, as they maintain strict standards for responsible disclosure.\n\nWhile beg bounties are clearly out of scope, this wasn't one. Thread forwarding is at the core of Zendesk's business. Zendesk &amp; HackerOne fucked up.",
                "score": 32,
                "replies": [
                  {
                    "author": "RadicalDog",
                    "body": "Grim. It's frustrating because the loss of business was cost by HackerOne, not the teenager. Zendesk are a big enough company that they should pay the bounty and promise to discuss appropriate escalation with HackerOne. Would be cheaper than losing another couple clients, which this could easily do.",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "klo8",
                    "body": "Yes, agreed",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "ToughAd4902",
                    "body": "I can't believe this is getting upvoted, it is so blatantly wrong.\n\nThey outsource the bug bounty program to HackerOne, and say we only want these specific things to be checked. There are a ton of reasons for this, from preventing people from spamming production servers, causing glitches, etc. You set a parameter list of what you want to be researched and exploited, and that's the only thing you want people to be looking at. This exploit should not have been tested from a white hack perspective, full stop, the author is in the wrong, regardless of how big or small of a vulnerability this was. This was not in the defined list, and people like this is why so many have continually limited what you can look at and going after those who can't, because you can't stay within the tape. This isn't even about sending out to the customers which was also VERY wrong as those customers can now literally use that to go and attack their competitors.\n\nAs he did find it, breaking the entire point of HackerOne, and he did want to report, he needed to escalate it to zendesk's internal team, NOT through HackerOne, and DEFINITELY not through customers.\n\nHackerone isn't in the wrong, zendesk isn't in the wrong, the author is 100% in the wrong. He broke every single rule imaginable. Now, it's great that he found it and he did need to forward it to ZenDesk, and if he had simply done that I'm sure he would have gotten compensation, but now he caused damage to EVERYONE involved.\n\nI don't care this is going to get downvoted this is actual insanity. HackerOne did it's job correctly, ZenDesk didn't like that the exploit was leaked to people who COULD then abuse it. This is so wrong on every level",
                    "score": -1,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Tired8281",
        "body": "Sorry, stiffing me on the bug means that confidentiality is now out of scope.  TYVM.",
        "score": 4,
        "replies": []
      },
      {
        "author": "mikkolukas",
        "body": "Nice job. He will get far. I'm rooting for him! :)",
        "score": 4,
        "replies": []
      },
      {
        "author": "golgol12",
        "body": "Is that really a 15 year old?  Outside the the headings, it's like GTP wrote it.",
        "score": 3,
        "replies": [
          {
            "author": "RICHUNCLEPENNYBAGS",
            "body": "I don't think writing this text is beyond the capabilities of a smart high schooler.",
            "score": 0,
            "replies": [
              {
                "author": "golgol12",
                "body": "I'll reverse my position.  I read it further.  Later in the article the grammar and punctuation began to matched what was in the headers. The punctuation and grammar of the first couple paragraphs threw me.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "SpaceMonkeyAttack",
        "body": "What have they got against SPF and DKIM? Do they want spoofed emails?",
        "score": 2,
        "replies": [
          {
            "author": "nemec",
            "body": "Zendesk isn't responsible for `company.com` SPF and DKIM",
            "score": 3,
            "replies": [
              {
                "author": "SpaceMonkeyAttack",
                "body": "But they also don't have to accept emails that didn't pass.",
                "score": 0,
                "replies": [
                  {
                    "author": "nemec",
                    "body": "But they did pass. that's why the fix is to properly enable SPF/DKIM/DMARC, so that mail doesn't pass. There are \"allow all\" settings that would let spoofed mail pass or various other ways a company could ignorantly allow spoofed mail.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "m00nh34d",
        "body": "As per https://support.zendesk.com/hc/en-us/articles/8187090244506-Email-user-verification-bug-bounty-report-retrospective\n\n&gt; Although the researcher did initially submit the vulnerability through our established process, they violated key ethical principles by directly contacting third parties about their report prior to remediation. This was in violation of bug bounty terms of service, which are industry standard and intended to protect the white hat community while also supporting responsible disclosure. This breach of trust resulted in the forfeiture of their reward, as we maintain strict standards for responsible disclosure.\n\nThat isn't what happened at all. Researcher disclosed it, and it was responded to as informational. That's done then, ZenDesk have decided it's not important now.\n\nThe next thing the researcher did was discover a full supply chain attack, which utilises this bug. The original bug hadn't changed at this stage, there was nothing new to disclose. What had changed was specific companies' implementation of different software suites leaving them vulnerable. It would be immoral at this stage not to disclose that vulnerability to those companies.\n\nMaybe ZenDesk are right in their mind that this bug wasn't a big deal (they're not). But there was also an exploit with Slack OAuth here as well, which also got off scot-free. Both of those on their own might be insignificant to vendors, but when combined and presented to a company using both platforms, it does become a big risk for them.",
        "score": 2,
        "replies": [
          {
            "author": "Buo-renLin",
            "body": "Technically the researcher can still attempt to escalate this issue via in-band methods(HackerOne), before actually disclose to the search party.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "harambetidepod",
        "body": "That was a good read. \nFvck Zendesk lol",
        "score": 0,
        "replies": []
      },
      {
        "author": "ML_DL_RL",
        "body": "This is crazy since Zendesk is a publicly traded company. Unfortunately, this is not the first time that I see this sort of thing. A lot of this larger companies with old outdated infrastructure, need to get their act together. With the whole AI revolution, it's the perfect time to disrupt some  of the dinosaurs out there.",
        "score": 0,
        "replies": []
      },
      {
        "author": "vegiimite",
        "body": "If all that comes out of this a $0 bounty he should consider himself lucky.  Writing a script to commit Felony Unauthorized Access is not something I would do.\n\n\n&gt; The wording of the CFAA is so vague that prosecutors have been able to successfully abuse the law to convict a wide array of offenders. Under federal law, the penalty for hacking includes high fines and sentences of up to 10 years of prison time.",
        "score": -49,
        "replies": [
          {
            "author": "Sokaron",
            "body": "Then white-hat is probably not a career for you.",
            "score": 9,
            "replies": [
              {
                "author": "vegiimite",
                "body": "I think you are naive about what the law is and how little good intentions matter to a US attorney general.  I think people on Reddit should remember what happened to Aaron Swartz.\n\nIn the US if you don't have consent to log into someone else's computer system that is a violation of the CFAA.  Which is what using an exploit to logon to a Zendesk's client's Slack without permission is.  \n\nDoesn't matter if you are hunting bug bounties, or even if someone emailed you a user name or password by mistake.  If you do not have permission to connect to someone else's system that is illegal.  Zendesk's clients are not participating in the bounty so that certainly doesn't qualify as white hat hacking anyway.\n\nHonestly, I kind of expected better from r/programming.",
                "score": 4,
                "replies": []
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Stack Overflow Survey: 80% of developers are unhappy",
    "body": "",
    "score": 1078,
    "url": "",
    "created_utc": 1726873422.0,
    "author": "fagnerbrack",
    "permalink": "/r/programming/comments/1flp3xt/stack_overflow_survey_80_of_developers_are_unhappy/",
    "comments": [
      {
        "author": "herbertdeathrump",
        "body": "For me it's the tech debt that's really bringing me down. We also have so many services and getting them up and running is such an annoying experience. So many things can go wrong and it can take hours of debugging just to get the service up before I can actually start doing work. It's painful and exhausting. I also think we are expected to do so much more and our responsibilities have increased from 4 years ago.",
        "score": 550,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 145,
            "replies": [
              {
                "author": "evert",
                "body": "Microservices need to die. 99% of the time it's the wrong architecture.",
                "score": 165,
                "replies": [
                  {
                    "author": "KevinCarbonara",
                    "body": "Fortunately 99% of the time it also isn't even micro services. It's just regular old services but someone threw the word 'micro' in front because it sounds cool",
                    "score": 121,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 118,
                        "replies": [
                          {
                            "author": "psayre23",
                            "body": "Don’t forget to serialize and parse the JSON!",
                            "score": 30,
                            "replies": [
                              {
                                "author": "[deleted]",
                                "body": "...that is in a different micro service",
                                "score": 22,
                                "replies": [
                                  {
                                    "author": "meltbox",
                                    "body": "https://youtu.be/y8OnoxKotPQ",
                                    "score": 3,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "malln1nja",
                            "body": "We should all be lucky if they were only microseconds.",
                            "score": 13,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "evert",
                        "body": "SOA is a valid architecture style in my opinion, and definitely seen people for some reason stamp them as 'micro'.",
                        "score": 18,
                        "replies": [
                          {
                            "author": "KevinCarbonara",
                            "body": "Yeah, I have no problem with SOA. I don't have a problem with microservices, just the over-application. It's a weird feedback loop where people build an SOA and call it microservices and then the next group thinks they have to do microservices.",
                            "score": 13,
                            "replies": [
                              {
                                "author": "evert",
                                "body": "Doesn't help there's tons of people peddling books and courses and pitting it against monoliths as an either/or proposition =(",
                                "score": 13,
                                "replies": [
                                  {
                                    "author": "elpablo",
                                    "body": "Absolutely this is the issue. We need to coin the term “Appropriately Sized Services”. Unfortunately it’s not a great acronym.",
                                    "score": 16,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "Richeh",
                                "body": "Same with Scrum.\n\n\"Yeah we do scrum.\"\n\n-- six months later --\n\n\"It's been a tough six months of training but we do scrum too now.  How did you get around the inherent differences in values of story points between developers' different disciplines, and planning sprint velocities?\"\n\n\"What?  We just have short update meetings at ten o'clock every morning and use Jira.  What's all that other stuff?\"",
                                "score": 8,
                                "replies": [
                                  {
                                    "author": "meltbox",
                                    "body": "Also 1 point = 1 day, what’s the problem? My scrum master said that’s agile.",
                                    "score": 3,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Groove-Theory",
                    "body": "Microservices are an organizational structure that derives specifically from Domain Driven Design.\n\nSo if your business and organization is a dumpster fire that is way too coupled together where your bounded contexts are not properly scoped in the org, Conway's Law WILL fuck you.\n\nBut absolutely no one gives a shit about this",
                    "score": 33,
                    "replies": [
                      {
                        "author": "RiverOfSand",
                        "body": "I love DDD as a concept, but realistically its a lot easier to implement an anemic monolith and only create reusable abstractions when absolutely necessary. It doesn’t give you the same satisfaction and there’s a lot of duplicated code, but navigating layers and layers of badly named abstractions that are reused everywhere is a lot worse in my opinion.",
                        "score": 13,
                        "replies": []
                      },
                      {
                        "author": "Scavenger53",
                        "body": "my last company, the senior engineers didnt know the phrase domain driven design, when i brought up the books on it. i was not a senior. but i did learn to be very disappointed in what they consider senior. they did \"microservices\": the context was split across 3 services. and they did it over and over again. but i guess if they dont know what a context is, or a domain... \n\nbest defintion ive heard it described is that a microservice should encompass, at its smallest, an entire subdomain within a context. so yea they put the \"notification\" domain concept across 3 different services and they were supposed to work together, it was gross and it wasn't just that one, it was all of them. team of like maybe 15 people, split up 4 ways, managing 60 \"services\". lol was too funny watching them struggle while i got to work on a different and also shitty system they built. that one they put all the domains in the same context, so yea we had a lot of login issues with the domains getting mixed up",
                        "score": 10,
                        "replies": [
                          {
                            "author": "dagopa6696",
                            "body": "Nevertheless, all the whining about microservices is misplaced.\n\nThe real problem is you're being judged on your productivity while being told to maintain code written by someone who got fired for being incompetent. You ask them to let you rewrite it and they say no. Instead, they lay off 50% of the staff because the oligarch in charge is bitter about software engineers earning money, and now everyone has to maintain 20 other people's projects.  How does that make any sense?",
                            "score": 14,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "-grok",
                        "body": "Yep, try working at a retail company to see Conway's law in action.  MBAs as far as the eye can see waging war by carving out micro services as a kingdom, where each micro service duplicates bits of functionality in other micro services that are owned by other MBAs.  Conway's law results in really bad architecture decisions driven by which MBA is currently loved by the head MBA.  Meanwhile engineers just stand there holding the bag listening to some MBA or another is yelling about how the latest set of \"disruptive\" change is turning out to actually just disrupt our business.\n\n&amp;nbsp;\n\nThe ignorance is so thick that no rational discussion can penetrate.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Famous-Street-2003",
                    "body": "Yees! Let make microservices, services again ffs. I still use services:\n- file storage\n- notifications (email+sms)\n- whatever else which can work async\nNever got microservices, at least how \"the book\" advertises them.",
                    "score": 5,
                    "replies": [
                      {
                        "author": "meltbox",
                        "body": "But Amazon makes a lot more money if you have more lambdas. So if you’re a true patriot you’d use pico services to grow the US economy.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "VanillaCandid3466",
                    "body": "So this. I can just tell most of the time some manager wanted to sound all clever and down with the new buzzword...\n\nYou need teams of people and massive scale issues to even remotely justify it.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "meltbox",
                        "body": "If there are a lot of buzzwords being used I automatically assume they’re an idiot",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Fantastic_Credits",
                "body": "I've had to have some interesting arguments with some developers about this. One of the things that's pissed me off more than anything is the desperate hiring of young developers as Architects or Devops engineers. Those are not entry level roles.  Devops is a training and standards role its not even a developer or infrastructure role. In both cases you need to have years of experience before you hold such a position. I have had to argue with so many young developers who just go with whatever buzzword they heard last week its exhausting. I've had architect argue for microservice architectures for small teams that are working on potato's for laptops that aren't even able to support a docker instance or even run multiple instances of an IDE. They have no experience writing proper code because they cant be bothered to read a book on design patterns but they treat anything they read on reddit like its gospel.",
                "score": 9,
                "replies": [
                  {
                    "author": "davy_crockett_slayer",
                    "body": "Devops Engineers m, in my experience, come from either software engineers or traditional Linux admin roles. It isn’t an entry level role. I had to explain to an engineer how DNS and subnetting once worked…",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "matthieum",
                "body": "One of the best design decisions I took was specifically about solving this particular issue when planning the architecture of the start-up I work at.\n\nWe do have a lot of services, and an acyclic DAG of dependencies, and I knew it would be the case, thus central to the design are two key decisions:\n\n 1. Services are discovered via a registry -- nothing outstanding there -- and there is a simple way to bring up a local registry which mirrors the production one. This means local services register to the local registry, but will otherwise subscribe to _production_ services.\n 2. Which would be widely unsafe except for the fact that all services are _multicast_. Subscribing to a service doesn't involve sending one bit of data, and in fact services do NOT poll the connections they serve: they only send. Therefore, no matter who the subscribers are, subscribers cannot interfere with the functionality of the service, and scaling is effortless as all computed packets are simply sent to all subscribers.\n\nAs a result, locally running a service is just a two-steps process:\n\n 1. Launch the local registry, which makes a snapshot of the production one then receives notifications on change.\n 2. Launch the service you're interested in, it'll subscribe to whatever production service it needs.\n\n(The local registry also supports \"local first\" so you can run two local services and have the first one service the second one, useful to test non-local changes)\n\nI feel very lucky that this design worked for our business case, as I plainly realize it doesn't suit any request/respones model...\n\n... it's really such a comfortable design to work with.",
                "score": 2,
                "replies": []
              },
              {
                "author": "mistaekNot",
                "body": "microservices without IaC is regarded. you should be able to spin up whatever you need by running an ansible playbook or two...",
                "score": 1,
                "replies": []
              },
              {
                "author": "Garet_",
                "body": "It’s simple af. I haven’t run a single service instance in 3 years. \n\nFor those who need starting up services for their development I’d recommend docker-compose or custom script that pulls and runs docker image or clones repository, builds it and wrap sources in docker containers. Then you might set up a tunnel from your local machine to staging environment database and start development - v’oila! Downturn is that companies have different network security policies and might not allow you to establish ssh connection with port forwarding to any machine. Another downturn is that you might screw staging database when executing migration scripts. You have to be very cautious.\n\nWhat I prefer is writing “pseudo” integration tests that starts up service with test context (like spring does) and provide stubs for external services calls.  \nThere are libraries like test containers that allow you to setup production-like infrastructure in matter of seconds. You just try to call your services API or emit an event your service is meant to consume and see the results. That’s basically it.\n\nThe foundation of tests are of course unit tests. With approach from above you can ensure yourself that at least your service starts up flawlessly and communicates with services properly using stubs that matches stable service’s API at the moment of development. \n\nThere’s also option to write contract tests.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "uphucwits",
            "body": "Tech debt. Undocumented tribal knowledge and the cognitive exhaustion. At the age of 55 and 30 of which as a developer I’m fucking cooked.",
            "score": 68,
            "replies": [
              {
                "author": "Specialist_Brain841",
                "body": "wait until all your documentation switches from confluence to xwiki",
                "score": 16,
                "replies": [
                  {
                    "author": "Intrepid-Stand-8540",
                    "body": "Everyone I know hates confluence. \n\n\nJust use .md files in the repo it is documenting. \n\n\nMaybe publish those .md files to a static website via CI. \n\n\nBut fuck paying a dime to Atlassian. ",
                    "score": 38,
                    "replies": []
                  },
                  {
                    "author": "uphucwits",
                    "body": "Oh man this hits home. We have three different versions of the wiki now. Wiki, new wiki and then now it is notion. ..",
                    "score": 9,
                    "replies": []
                  }
                ]
              },
              {
                "author": "stereoactivesynth",
                "body": "Caveat that I'm in data science not software engineering...\n\nBut yeah this completely drags me down in my job. We only started working in RAPs using python last year shortly after I joined by giving the org no choice despite our managers kicking and screaming about doing things in the way 'theyve always been done.'\n\nOrg went from dealing with basically two (large) operational delivery streams 10 years ago to 20+ in the last two years, but they didn't hire 20x more people to sort out our data architecture or infrastructure during that. Total dinosaur if an org and I hate that we have to spend every day fighting for something that should just be small innovations. \n\nUnfortunately it's unlikely things will change until the top managers retire or resign, but then those people never do documentation so when they go the institutional knowledge base goes with them. \n\nWe'd essentially need a year-long pause on our operations just to fix the shitshow of data and infrastructure currently happening, and even then it'd be unlikely the org would listen to the people who know what they're doing. Executives would probably hire external consultants to upsell them on a worse solution that *sounds* impressive but is garbage in reality and will be abandoned within 5 years when the contract expires.",
                "score": 8,
                "replies": []
              },
              {
                "author": "alexwh68",
                "body": "Similar numbers to you, 56 and 30+ years dev, I only work on projects where I control pretty much everything now, I found working for companies as an employee there was continuing role narrowing. \n\nI now freelance, do a lot of dev but like being an architect as well, so looking at the big picture for my clients, much more rewarding than being handed maintenance work in projects that have had so many hands in them its spaghetti code.\n\nI choose my tools, languages etc.",
                "score": 8,
                "replies": []
              },
              {
                "author": "shifting_colors",
                "body": "If the problem was accumulation of undocumented tribal knowledge, wouldn't being older be an advantage? You were there when the Deep Magic was written.",
                "score": 5,
                "replies": [
                  {
                    "author": "uphucwits",
                    "body": "This is true for one of the divisions I worked in but recently moved into another division because of the work I did in the previous with respect to turning it around. The one I am in now is a complete nightmare. There are a few times a week where I just sit at my console and ask what the fuck were they thinking, were they thinking… and then I get introspective and remember the days where I did things just to get it across the line.",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "clrbrk",
            "body": "I just got switched from working on a Ruby monolith to a different section of my company that is a patch work of TS services in various frameworks (whichever one was hot when the service was created). \n\nI miss the monolith.",
            "score": 21,
            "replies": [
              {
                "author": "WillCode4Cats",
                "body": "Monoliths are super underrated. I use something called the Vertical Slice Architecture. I fucking love it. It’s like best of mircosevices and best of monoliths combined.",
                "score": 8,
                "replies": [
                  {
                    "author": "mycall",
                    "body": "I do prefer feature slices too even though cross cutting concerns still exist.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "benjimix",
            "body": "In my view the problem is one of power balance. In other industries, the practitioners also manage (lawyers law, civil engineers engineer, and the managers are from the same discipline). Not so much in software engineering.\n\nSoftware engineers are relegated to coding. This is not where the power nor the value lies. That is in product roadmaps, operating models that optimise for delivery (and for keeping the house in order!), etc.\n\nI would argue that the vast majority of software engineers could skill up to do these things. Further, I would argue, is that it’s asymmetric (people who are only skilled in these other things will find it very difficult to skill up in coding).\n\nSo in my view the solution here is the skill up and tilt the power balance. It’s not as hard as it looks and it worked for me.",
            "score": 36,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 19,
                "replies": [
                  {
                    "author": "benjimix",
                    "body": "Interesting! I’ve seen in tech for 20 years. Started coding at age 10 (I’m now 46). I never made any attempt to move into Big Tech because I heard it was all red tape. Not so?",
                    "score": 6,
                    "replies": [
                      {
                        "author": "Schogenbuetze",
                        "body": "It would be naive to expect there are no downsides; but then, if you look at these Big Tech US companies, none of them had no engineer in the top of the food chain at one crucial point or another.\n\nMost of them still have. And as much issues people see with Musk, he once said a very interesting thing: He rejects applications from „MBA parachuters“, I just love that term.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "sgtkang",
                "body": "I agree in general, but I think a lot of the time it's not that experienced developers are \"relegated\" to coding. That's where they want to be. I've seen many developers advance into more management-type positions and most of them don't like it. The code is what they enjoy while their new roles feel like endless meetings. A good number I've seen go back to 'senior developer' roles because that lets them write code while still having some authority/respect.\n\nHow often do we see people on this subreddit complain about having to attend meetings when they could be doing 'real' work? But if you want to go into management and get power within an organisation that's what you have to get good at. Talking to people, presenting things, etc.\n\nI agree that the solution would be for developers to skill up and go into management. I agree that the vast majority of software engineers could skill up to do these things. The problem is that most of the time, they don't want to.",
                "score": 13,
                "replies": [
                  {
                    "author": "benjimix",
                    "body": "Yep, agree 100% with this. Valid observation.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "What you are saying is interesting because I think devs may have a chance to turn the tide.\n\nArmed with knowledge of a product domain, software development experience, and a good command of AI tools, devs are in a position to be real disruptors in the next few years.\n\nThere are so many top heavy bureaucratic organizations out there that are mired in process and meetings and deliberations over trivial matters.\n\nA nimble team of devs with the aforementioned skills and tools could lap much larger organizations very quickly, produce modern MVP’s and gain traction with customers.",
                "score": 4,
                "replies": [
                  {
                    "author": "benjimix",
                    "body": "Exactly. Also, with regard to process, engineers are well-positioned to know what needs to be known by whom and when. I have personally stripped down operating models and streamlined delivery.\n\nYou can not do that if you don’t know what should be being dealt with and in what order.\n\nI can’t emphasise that enough.",
                    "score": 5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Schogenbuetze",
                "body": "True words that cannot be repeated often enough these days.",
                "score": 1,
                "replies": []
              },
              {
                "author": "mycall",
                "body": "Supervisory Developers is where it is at.  You get to do architecture level, deal directly with clients, and thus have a foot in the game.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 21,
            "replies": [
              {
                "author": "herbertdeathrump",
                "body": "I think a lot of companies don't even have QA anymore. That responsibility has been placed on the engineers.",
                "score": 27,
                "replies": [
                  {
                    "author": "theboston",
                    "body": "My company introduced \"shift left\" thinking, wanted devs more in the testing process with the QA engs, and then fired all the QA engs.",
                    "score": 8,
                    "replies": []
                  }
                ]
              },
              {
                "author": "dimitriettr",
                "body": "I usually prefer to do the demo myself, instead of QA.  \n\nIt's cringe to see QA explaining how a feature works.",
                "score": 12,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 4,
                    "replies": [
                      {
                        "author": "dimitriettr",
                        "body": "You leave the company with tech debt just to go fix tech debt at another company.  \nIt's the cycle of life.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Fear not! We will create some stories and tasks around this in the next four hour Agile refinement session!",
            "score": 14,
            "replies": []
          },
          {
            "author": "vexii",
            "body": "my friends call me stupid because i just want to self host everything and always start of with SQLite and only if i absolutly need it go for a \"DB server\".  \n  \nI miss the old days when I could just upload an Access DB file to my ASP host and then hit refresh.  \nI don't need docker (I know how to make shit work on a Linux server) and think that it's insane I don't use GitHub actions... ma dude I'm just making a landing page for my mom (with a small CRUD system)  \n  \nnotepad++ (with the FTP plugin) gang rise up",
            "score": 6,
            "replies": []
          },
          {
            "author": "chiefnoah",
            "body": "The only way I've found to keep tech debt manageable is:\n\n- Have exclusively competent devs\n- Use very few 3rd party dependencies, implement most everything yourself\n- Do reasonably strict code reviews\n- Either plan effectively or use a language that lets you remain 'nimble'\n  - I literally mean use something like Clojure if you can't predict your future requirements\n- Prototype fast and often, but actually throw the prototypes away\n- Actually take some time to beat down accumulated tech debt occasionally",
            "score": 20,
            "replies": [
              {
                "author": "safetytrick",
                "body": "Focus on your actual problems instead of digesting marketing bullshit. \n\nDevelop a strong code review culture.\n\nAttempt to solve problems completely instead of ignoring the root causes.",
                "score": 18,
                "replies": [
                  {
                    "author": "darkapplepolisher",
                    "body": "&gt; Attempt to solve problems completely instead of ignoring the root causes.\n\nThis one's my favorite, although I think it works best when you have different types of people on a team.\n\nOne of my colleagues really does complete all sorts of tasks very quickly in a way that makes management very happy, but boy is he sloppy when it comes to root causing issues.\n\nI'm overly methodical, and I hate to walk past something behaving unexpectedly without understanding why it's doing what it is, because I know it's going to randomly bite us in the ass later. But I know I'm slower than the average dev for it.\n\nIt's good to be part of a team where other people can shore up eachother's weaknesses.",
                    "score": 15,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Thommasc",
                "body": "&gt; Use very few 3rd party dependencies, implement most everything yourself\n\nI couldn't disagree more.\n\nThere is no way you can build a good product without tons of very high quality frameworks and third party tech.\n\nReinventing the wheel always sounds and feels good in the short term and it's always a disaster in the long term because of ownership and maintenance.\n\nIn a startup environment, you just never get enough resource to maintain the source code in a manageable state.",
                "score": 12,
                "replies": [
                  {
                    "author": "Loves_Poetry",
                    "body": "In my experience, you only need a handful of libraries and frameworks to build the core of your software around. So if you're using \"tons\" of third-party tools you are almost certainly using them for situations where you do not need them\n\nMany devs underestimate the extra costs that come with third-party tools. There is a cost to relying on code that you do not control",
                    "score": 5,
                    "replies": []
                  },
                  {
                    "author": "fiah84",
                    "body": "I half agree, I definitely don't want to be inventing the wheel myself if I can avoid it but at the same time I'd consider alternative solutions before adding *another*  library. I mean, if I can solve the problem with the existing (standard) libraries by changing my approach to the problem, then I prefer that",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "chiefnoah",
                    "body": "Every single dependency you add bitrots if you let it sit long enough. Frameworks, doubly so. \"fast moving\" or shiny new frameworks 10x so. The best way to *reduce technical debt* is to not use frameworks and minimize the use of 3rd party libraries by choosing languages with strong standard libraries like Go or Clojure. Moving fast vs sustainable are mostly at odds with each other. You will almost always end up in a better position if you (or really, your team) actually understand all of the code you run. There are some cases where there's a really hard problem where correctness is critical, in that case choosing a library is the right choice. Some off the the top of my head: HTTP parsing, basically everything in numpy, scipy, and scikit, and almost any cryptographic library. Most other things are just... customizing to your particular needs which is either you know your problem or you don't. Most people wildly over-estimate the time savings from *not* implementing stuff yourself and underestimate the maintenance overhead in the long run and the artificial constraints you put on yourself.\n\nTo be clear, I'm not saying you should take this approach, I'm saying this is the approach you *must* take if your goals are to minimize the accumulation of technical debt. Simpler code is almost always better (as long as it still solves the problem), and dependencies add more complexity than *just* the code that make them up.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "_pupil_",
                "body": "I feel Scotty’s advice kicks in here - captains are like little kids, they don’t know what they need, they just want things and they want it now.\n\nSo, don’t lie, but Scotty wasn’t telling Kirk about the absolute hackiest barely defensible solution that might work, he gave him more expansive projections and estimations that accounted for time, maintenance, and overall ship and system health.  \n\nDiving at the main reactor with duct tape is not plan A, management doesn’t hear that compared to a reasonable plan that costs twenty times more. That’s a misleading estimate. Scotty cares for the ship and his whole duties and gives holistic estimates that reflect management.  They get a total cost estimate and judge from there.\n\nSo, no, we’re not gonna loosely discuss sustaining problems that are crippling us.  We’re gonna factor the “fix that shit” cost into our work so we’re more efficient.  If fixing shit is too expensive we stop, we don’t spend our nut pretending.  ",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "safetytrick",
            "body": "Instead of addressing the technical problems you can create another service! /s",
            "score": 4,
            "replies": []
          },
          {
            "author": "michaelochurch",
            "body": "What got me was the accumulation of technical debt, but also what it represents: a business culture that prioritizes pointless milestones and useless features, with an eager willingness to have the people doing the real work suffer, because we don't matter.\n\nTechnical \"debt\" is a bit of a misnomer. It's never going to go away. The exponentially accruing interest is going to be paid in developer suffering, which the ones ruling the roost have an infinite willingness to tolerate because it's not them.",
            "score": 3,
            "replies": []
          },
          {
            "author": "st4rdr0id",
            "body": "&gt; *Technical debt is the number one cause of developer frustration*\n\nTechnical debt is the consequence of not having a proper software development process in place. The agile cult has axed requirement engineering, design/architecture, and conveniently forgets about refactoring (an XP practice). Having to improvise all those activities at the developer desk and being pressured to churn out complete features from the UI to the data layers results in the worst code possible. \"Agile\" has made two generations of developers miserable.",
            "score": 6,
            "replies": []
          },
          {
            "author": "gamahead",
            "body": "If your responsibilities don’t increase over a 4 year period, you’re doing it wrong",
            "score": 2,
            "replies": []
          },
          {
            "author": "Fantastic_Credits",
            "body": "New technologies in software development do not bring about less work but more demand. As technologies progress we are able to implement more features at a higher quality with fewer bugs much more quickly...assuming you've been able to properly maintain an up to date tech stack with relatively little tech debt. But the business doesn't see that. They see what other companies are able to do with an application lifecycle that is not synchronous with yours using technologies that actually make development much quicker and sometimes utilizes good vendor solutions to offload work at a cost. The bottom line is they are comparing apples and oranges and not understanding why they can't make them taste the same. There is a cartoon I keep in my office and every time a project manager argues with me about prioritizing tech debt I point to it and have this conversation. Most of them don't understand it and sometimes they don't have a choice they are just communicating what was already dictated to them and are all to willing to ensure any failures to meet unrealistic expectations fall onto the means of production and not the business. Short-Term gains are embedded into corporate culture and any publicly traded business is going to always improperly prioritize for the long term every single time.",
            "score": 1,
            "replies": []
          },
          {
            "author": "Perfect-Campaign9551",
            "body": "They want Devs to also be QA and DevOps ",
            "score": 1,
            "replies": []
          },
          {
            "author": "Empty_Geologist9645",
            "body": "Yes. When layoff or people quit position is not filled. That’s wats up.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "zoqfotpik",
        "body": "Far out in the uncharted backwaters of the unfashionable end of the Western Spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-eight million miles is an utterly insignificant little blue-green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea. \n\nThis planet has—or rather had—a problem, which was this: most of the people living on it were unhappy for pretty much of the time. Many solutions were suggested for this problem, but most of these were largely concerned with the movements of small green pieces of paper, which is odd because on the whole it wasn’t the small green pieces of paper that were unhappy.\n\nAnd so the problem remained; lots of the people were mean, and most of them were miserable, even the ones with digital watches.\n\n--Douglas Adams",
        "score": 435,
        "replies": [
          {
            "author": "A_Light_Spark",
            "body": "The story so far:  \nIn the beginning the Universe was created.\nThis has made a lot of people very angry and been widely regarded as a bad move.  \n\n--Douglas Adams",
            "score": 138,
            "replies": []
          },
          {
            "author": "ApatheistHeretic",
            "body": "Perfect timing for that passage, lovin' it.",
            "score": 3,
            "replies": []
          },
          {
            "author": "coredweller1785",
            "body": "Hahaah amazing",
            "score": 9,
            "replies": [
              {
                "author": "weaselmaster",
                "body": "It sounds like you may not have read The Hitchhiker’s Guide To The Galaxy.\n\nIf this is the case, stop what you are doing and go to a bookstore.\n\nNow.\n\nI’ll wait.",
                "score": 31,
                "replies": [
                  {
                    "author": "drMrSpaghetti",
                    "body": "This is the one book I highly recommend the audio book over. If you havent listened, go get yourself some Stephan Fry goodness in you rn",
                    "score": 12,
                    "replies": [
                      {
                        "author": "adscott1982",
                        "body": "Did you try listening to the original BBC Radio version from back in the day? It is also on audible pretty sure. \n\nDouglas Adams wrote that radio show before turning it into the book I think. Personally I consider it the best version. Worth listening to it. The cast is amazing.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "gumol",
        "body": "Previous discussion, last time it was submitted\n\nhttps://www.reddit.com/r/programming/comments/1egheo6/why_are_80_of_developers_unhappy_at_work/",
        "score": 149,
        "replies": [
          {
            "author": "Additional-Bee1379",
            "body": "TL;DR The article is simply lying.\n\nThe actual results:\n\nNot Happy at Work 32.1%\n\nComplacent at Work 47.7%\n\nHappy at Work 20.2%",
            "score": 84,
            "replies": [
              {
                "author": "majhenslon",
                "body": "It's not lying, 80% are !happy :D",
                "score": 62,
                "replies": [
                  {
                    "author": "Additional-Bee1379",
                    "body": "And 68% are !Unhappy :D",
                    "score": 20,
                    "replies": [
                      {
                        "author": "majhenslon",
                        "body": "It's the glass 80% empty or 80% full dillema. The author is 80% empty kind of guy :D",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "MeisterKarl",
                    "body": "`unhappy !== !happy`",
                    "score": 6,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Kronikarz",
        "body": "The problem, as usual, is goal alignment. Most developers (probably the 80% mentioned in the article) want to do work they can be proud of. Most of their employers want them to do work with the highest monetary value. These goals are almost never aligned.",
        "score": 55,
        "replies": [
          {
            "author": "Loves_Poetry",
            "body": "Those goals should not be mutually exclusive, but they often are because neither knows what produces monetary value. Most of the time no-one even knows what the users of a product even find valuable\n\nAs a developer I find it awful to work on a product when I have no idea who actually uses it. I want to know who it is that I'm doing this for. It's a shame that so many managers/scrum masters/product owners don't see the need to talk about the people that use the product I create",
            "score": 6,
            "replies": []
          },
          {
            "author": "snappymcpumpernickle",
            "body": "Feeling this right now. Have a parallel go live in a few weeks and we're still developing. I'll be developing for at least 2 more weeks. Way to close for comfort for me. Dead lines should be more flexible",
            "score": 3,
            "replies": []
          },
          {
            "author": "mistaekNot",
            "body": "its not that hard to write good code. its literally when people don't stop for 5 minutes to think things over or roll with the first idea that pops in their head instead of  contemplating a bit that mess gets spawned",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "mcmcc",
        "body": "While at my previous employer, when asked, I used to tell people I love my work, I just don't like my job.",
        "score": 130,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 103,
            "replies": [
              {
                "author": "SnowyLocksmith",
                "body": "Include asshole colleagues who do none of the work, but want all of the credit",
                "score": 29,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "Colleagues send email and schedule zoom... Do none of the actual work\n\nNext standup: YEAH I WORKED WITH BLORB AND ZARP ON THE XYZ THING\n\nworked with? Dude you didn't do anything",
                "score": 22,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 11,
            "replies": [
              {
                "author": "josluivivgar",
                "body": "nah I always answer honestly and fuck their numbers, I know they can identify me, but honestly, there's so many yes men in this industry, it's worth saying no sometimes.\n\n\nit might not do anything, but honestly they also won't fire you, unless you were a sore point already to them.\n\nI can't say it's beneficial to do it, since I didn't see any significant change, but it also didn't stop my promotions at least",
                "score": 26,
                "replies": [
                  {
                    "author": "KronktheKronk",
                    "body": "It got me fired a lot",
                    "score": 2,
                    "replies": [
                      {
                        "author": "josluivivgar",
                        "body": "that's unfortunate and I guess the lesson here is that not all companies are the same and I guess I've been lucky",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Juvenall",
                "body": "&gt; Also, \"anonymous\" employee satisfaction surveys sent by employers are bullshit, especially those with a unique link sent to each separate email address.\n\nHaving sat in on the other side of those from a management perspective at a large 20,000+ person FinTech company, a lot of them really are anonymous. We used a number of different tool and each of them didn't give anyone individual data. Those links were just to avoid stuffing and there wasn't anything we could extract. \n\nHow do I know this? One of the executive leaders was incensed when someone called them out directly and demanded to know who it was. The only thing the team behind it could get was the 200-ish person department the comment came from. \n\nAll that said, you're spot on about the fear aspect. I've had to coach my teams to really, truly be honest on them and that if any of them got in trouble for something they said, I'd quit on the spot.\n\nNow, this part is totally company dependent, but for that gig, those areas of the business with lower \"engagement numbers\" had their managers grilled hard about what was going on and why it took a survey to expose the problem. We were all expected to have a finger on the pulse, so when people complained about pay, working hours, the company direction, not feeling engaged with the team, we took the heat for not bringing it up to senior/executive leadership sooner. So my experience with them is less toxic than others.",
                "score": 9,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "ThirstyWolfSpider",
        "body": "And what percentage of other employees are unhappy?",
        "score": 82,
        "replies": [
          {
            "author": "thinkbee",
            "body": "About half are \"highly satisfied\": [https://www.pewresearch.org/social-trends/2023/03/30/how-americans-view-their-jobs/](https://www.pewresearch.org/social-trends/2023/03/30/how-americans-view-their-jobs/)\n\nSounds a little high tbh but idk",
            "score": 25,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 17,
        "replies": [
          {
            "author": "aBriefBeat",
            "body": "I agree with the interchangeable aspect, but not so much the \"do the work you feel is appropriate for your salary\" stuff.   If you are intentionally under outputting and not challenging yourself during work hours,  I think this would lead to less satisfaction. How could you be proud of yourself and your work? And you won't grow as much\n\n\nAlso why would anyone see you as a programmer worth $X when you only ever output at $X - Y? Becoming a better programmer benefits you first and the company second, because you can take your skills to another company the second they are valued more  elsewhere.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Kronikarz",
            "body": "If you do that, you'll keep getting replaced by developers who got fooled by the corporate bullcrap and tow the company line, regardless of your skills or \"unreplacability\". And every time you get replaced, your position on the job market weakens, until ultimately you'll have to compromise on the salary or have to do work that genuinely upsets you.",
            "score": 2,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 10,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Luke22_36",
        "body": "See this, 80% of developers are unhappy, decide to google what the happiest profession is. It's software developers, apparently.\n\nLife is pain.",
        "score": 52,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 20,
            "replies": [
              {
                "author": "S4L7Y",
                "body": "That sounds amazing tbh, I’ll love for an arrangement like that.  Can never have enough time.",
                "score": 2,
                "replies": []
              },
              {
                "author": "I-Am-Uncreative",
                "body": "Doesn't that make you feel lonely?",
                "score": 3,
                "replies": [
                  {
                    "author": "Wouter10123",
                    "body": "Don't you have friends and hobbies outside of work?",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "rickhora",
            "body": "A man went to the doctor one day\nHe said, \"Doc, I, I don't know what to do\nI don't know who to talk to, I'm completely depressed\nI don't know what to do with my life, it's full of uncertainty\nI wake up every day until\nI just, I can't see a light at the end of the tunnel\"\nAnd the doctor said, \"Well, it's great that you came in today of all days\nBecause the Great Clown Pagliacci is in town\nAnd he has a show tonight and nobody ever goes to his\nHis live performance and doesn't leave\nYou know, completely full of life\"\nAnd the man burst into tears and the doctor said\n\"Well, what's wrong?\" And he said\n\"Doctor, I am the Great Clown Pagliacci\"",
            "score": 19,
            "replies": []
          },
          {
            "author": "drawkbox",
            "body": "&gt; *Remember when you were young, you shone like the sun. Shine on you crazy diamond.*\n\n&gt; *Now there's a look in your eyes, like black holes in the sky. Shine on you crazy diamond.*\n\n&gt; *You were caught on the crossfire of childhood and stardom, Blown on the steel breeze. Come on you target for faraway laughter, Come on you stranger, you legend, you martyr, and shine!*\n\n&gt; *You reached for the secret too soon, you cried for the moon. Shine on you crazy diamond.*\n\n&gt; *Threatened by shadows at night, and exposed in the light. Shine on you crazy diamond.*\n\n&gt; *Well you wore out your welcome with random precision, Rode on the steel breeze.*\n\n&gt; *Come on you raver, you seer of visions, Come on you painter, you piper, you prisoner, and shine!*",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Crying with money meme\n\nDoesnt surprise me that people code outside of work. I used to work in VFX the artists almost always did art outside of work because an \"artist\" in VFX isnt really doing art at work, they're just a technically gifted tool to implement someone else's art. Same sort of thing is probably true of programmers",
        "score": 138,
        "replies": [
          {
            "author": "elite5472",
            "body": "I started to code for fun semi-recently and honestly it's been great for my mental health. I was starting to think I hated programming, and was in a slump because of that.\n\nPicked up typescript, taught myself how to animate and do fancier stuff with CSS, made some NLP stuff, and modded some games made in unity. Just did whatever the hell I wanted, at my own pace, no deadlines, no pressure.\n\nIt's easy to get caught up in the \"programming is work and I don't want to do any of it in my free time\" mentality, and then slowly let your job drain any and all passion you ever had for it.",
            "score": 39,
            "replies": [
              {
                "author": "weaselmaster",
                "body": "Yes. This is why I try not to let any hobbies become my actual job - it would change from an interesting pastime into something I hate, and that someone else is driving the process/schedule/methods.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "Kinglink",
            "body": "&gt; Crying with money meme\n\nHonestly I think it's really 80 percent of people are underpaid. \n\nI was working government contracts, switched the a FAANG.  Went from heavily underpaid (about 160 for Orange County California) to extremely well off. \n\nI'm glad I made the change, but there's a LOT of programming jobs that tried to low ball me in the 170-180 range, for Senior and Staff positions.  Fuck 'em. \n\nBut also REALLY fuck those who are asking under 150k for SENIORS.  I saw one who said the range was 75k- 120k.  I know we just had that big tech layoff, but seriously go fuck yourself.\n\nPS. Third party recruiters who lowball offers also can get fucked.\n\n(And I know \"money doesn't buy happiness\" but man it has solved a few problems already...   And Knowing you're making 30-50 percent less than you should, doesn't help your mood)",
            "score": 4,
            "replies": [
              {
                "author": "ivancea",
                "body": "Underpaid for the sector and position? Maybe. Underpaid compared to the average worker? Hell no. The lowest engineer salaries in my country are around the average, which doubles the minimum wage many workers get",
                "score": 9,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "I like my job but I don’t code outside of work.  Sitting all day in front of a computer. Why would I want to do that when I am off ?",
            "score": 3,
            "replies": [
              {
                "author": "ivancea",
                "body": "Because you like it. You like coding, having intellectual challenges, and you like making products, and selling them, and creating a community, and a startup, and making people happy, and making extra money.\n\nIf you don't like any of those, well...",
                "score": 6,
                "replies": []
              },
              {
                "author": "Veggies-are-okay",
                "body": "I’m in this camp. I have somewhat accepted that my coworkers will always be the ones introducing new things they’ve discovered because I just… don’t really care?\n\nLike don’t get me wrong I enjoy the work I’m doing and am down to struggle through the downsides for the salary I’m being paid. I’m also not going to disengage from the real world for longer than is absolutely needed by my employer.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "DinoChrono",
            "body": "Wow, that was a great point of view!",
            "score": 1,
            "replies": []
          },
          {
            "author": "avid-shrug",
            "body": "I couldn’t have put it better",
            "score": 1,
            "replies": []
          },
          {
            "author": "kierancrown",
            "body": "I code outside of work all the time. At work I just don’t seem to scratch that itch",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "wonderingdev",
        "body": "The funny part is when the product team is asking developers how the product works. It can go as far as asking the developer to write a specification on it. Question: isn't this your fucking job? How come product \"managers\" have become so lazy and useless? Their ticket description are atrocious. We, developers, are expected to write a design doc, get it peer reviewed,  while products just slabs two sentences without even thinking about existing functionality. Because, why not, the developer will figure it out. And how come you are so attracted to shiny things? Shiny new feature and the product is there like flies around shit. Old defects in the product, and they are nowhere to be found. How about opening the product sometimes, testing it out, improving old features? Ever heard of quality? No. Because all you do is for show and nothing else. Fuck you, product \"managers\".\n\nOr engineering \"managers\" that \"manage\" teams, are like politicians. They talk a lot but do shit. It's funny when a manager that doesn't come to dailies or has any idea what you are doing, starts giving you feedback on what to improve, says that the dev does \"easy\" tasks, and then somehow decides our salary increase. When is this shady, snaky, behind-the-back behavior going to stop? Why are many of you so fake to the developers you are \"managing\"? Again, fuck you \"managers\". \n\nAnd guess what, who gets the praise for work done. Of course,  the product team and the engineering managers. They kiss each other's asses in their Slack messages, \"Hey, Bob, Steve, nice job, what a nice feature delivered! Great leadership! Kudos\". Kudos my ass. In reality, the developers delivered it from specification to implementation.\n\nConclusion: fuck you, managers!",
        "score": 11,
        "replies": [
          {
            "author": "[deleted]",
            "body": "Bravo! 🙌",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 24,
        "replies": [
          {
            "author": "[deleted]",
            "body": "Yep - I’ve been a developer for many years I’ve also been a scrum master - after about 3-6 months when the team understand how to be self managing and they ‘get it’ - the scrum master role needs to die but some companies keep it a full time role and you basically sit around bored trying to look busy. It’s a horrible role in a full time position. Lots of pointless meetings that even I was bored at but had to because ‘the scrum guide said’.",
            "score": 5,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "coredweller1785",
        "body": "Could you imagine if we got to all use our genius for good? Imagine the world we could create.\n\nInstead we are all implementing some sort of rent seeking behavior for some wealthy shareholders. We have completely lost the point of the story.",
        "score": 19,
        "replies": [
          {
            "author": "dimitriettr",
            "body": "This is something that I hate about software development.  \nIt's a race between companies for money.  \n\nIf we would join forces to create a \"global\" solution for each problem, the Earth would be a better place. Instead, we have thousands shitty solutions for each problem.  \n\nIt is the same with countries and governments. Each country has its own systems and platforms, when it could've been a global/common one..",
            "score": 7,
            "replies": [
              {
                "author": "7952",
                "body": "Yeah. It is the idea that everything needs to be a competitive advantage to someone or some company.  As if the new ERP system is going to change the world.  When really it will just reimplement the same things your competitors are trying to reimplement.  And any kind of shared knowledge is captured by a few massive suppliers.  \n\nI think a country scale payroll and timesheet system would be brilliant.  Record when people are working, how much they are paid for that work, if it is overtime etc.",
                "score": 2,
                "replies": [
                  {
                    "author": "coredweller1785",
                    "body": "Same. From 2013 to 2023 I worked at multiple payment companies doing the same exact thing. I left the payments industry bc there is 0 innovation. Just trying to undercut the other guys with the same exact integrations, same business plans, same vc money all trying to get pennies on each other.\n\nWhat a pathetic use of time.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Kinglink",
        "body": "80 percent of people who took the survey...   \n\nSo really who knows.  I doubt I'd take that survey.. but I also wouldn't hang around on Stack Overflow, seems like a miserable place... wait a second that might be the problem?",
        "score": 18,
        "replies": [
          {
            "author": "Additional-Bee1379",
            "body": "It's worse than that this article is just outright lying about the results.\n\nThe actual results:\n\nNot Happy at Work 32.1%\n\nComplacent at Work 47.7%\n\nHappy at Work 20.2%",
            "score": 6,
            "replies": [
              {
                "author": "Kinglink",
                "body": "Oh that old \"Negative + middle\"... when literally \"unhappy\" is the negative responses alone.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "balefrost",
        "body": "This was posted before. And like before, the headline is clickbait and unrepresentative of the survey results.\n\nThe survey question that this references had three options:\n\n1. Not Happy At Work\n2. Complacent At Work\n3. Happy At Work\n\nGuess what the percentage for \"not happy at work\" was? Were you thinking it was close to 80%? Were you thinking it was over 50%?\n\nNope. It was about 32% (slightly higher for ICs at 33%).\n\nhttps://survey.stackoverflow.co/2024/professional-developers#3-satisfied-at-current-job\n\nI guess you could try to lump \"not happy\" and \"complacent\" together as \"unhappy\". But I don't think that's fair. The middle option is clearly meant to be a middle ground - neither happy nor unhappy. \"I'm just here for the paycheck.\"",
        "score": 11,
        "replies": [
          {
            "author": "Additional-Bee1379",
            "body": "I am really kinda disappointment by the lack of critical thinking in this sub when articles state what people want to hear.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "ModernRonin",
        "body": "Also 100% of Corporate Executives **give ZERO fucks** if their coders are happy.",
        "score": 21,
        "replies": []
      },
      {
        "author": "wind_dude",
        "body": "toxic managers, managers with next to zero it knowledge, lack of ownership/control, fear of layoffs, and long fucking hours.",
        "score": 15,
        "replies": [
          {
            "author": "[deleted]",
            "body": "Toxic managers - I endured a workplace bully and made my life hell. Management didn’t care and they lost me in the end - it was satisfying when the team performance dropped after I left though. Can have all the perks and salary but a shitty team and management can’t be overcome.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Additional-Bee1379",
        "body": "I am always surprised by the lack of critical thinking about results that people want to hear on this sub.\nThe title \"80% of developers\" is already wrong. It is 80% of Stack Overflow participants who voluntarily decided to fill in a survey.\n\n&gt;According to the Workplace Satisfaction Survey, 80% of professional programmers are unhappy. One in three respondents actively hates their job, while almost half survive in survival mode. This leaves only 20% of those who claim to be somewhat happy. Although programmers are well-paid and often able to work remotely, many are still dissatisfied. Why is that so? \n\nSo actually only 1/3rd actually said they hate their job. 746% are in \"survival mode\" which seems a rather ambiguous term that could mean vastly different things. Ohw wait the survey didn't use that term, they used \"Complacent at Work\", which means something vastly different so the article is just lying. \n\nThe actual results:\n\nNot Happy at Work 32.1%\n\nComplacent at Work 47.7%\n\nHappy at Work 20.2%",
        "score": 4,
        "replies": []
      },
      {
        "author": "ZukowskiHardware",
        "body": "It is actually very easy to make devs happy.  Give them autonomy, deploy quickly and frequently, let them focus on outcomes don't tell them how, ditch the \"sprints\".",
        "score": 10,
        "replies": []
      },
      {
        "author": "JohnnyOmmm",
        "body": "Well I rather be depressed than not being able to afford my childhood an asthma pump inhaler lol",
        "score": 9,
        "replies": []
      },
      {
        "author": "chakan2",
        "body": "Because 80% of my job isn't development any more. It's fixing shit for the dev ops team, then doing the PM's job and writing their stories. Then holding the hands of offshore because of course we're finding the cheapest most desperate developers on the planet to backfill all the people that were just laid off. \n\nThen the meetings talking about the politics of solving an issue, then talking about how to problem solve, then talking about what kind of steps we need to get to the problem solving part, then maybe another meeting to talk about the problem. (I forgot the meeting about finding out who needs to be in these meetings). Cool I'm ready to write some code...oh...the priority changed and we start over. \n\nThe environment is just exhausting. I just want to code.",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "I like programming, but hate the industry. \n\nI was a developer for around 8 years and touched most languages in that time and then moved to management for 5 years (and hated that). Now moving back to a dev again but I find the landscape has slowly changed. SE’s are now expected to be a one stop shop; backend, front end, QA, stakeholder interface, scrum master, BA. it drives me nuts. How can one person possibly play all of these roles?\n\nBurnout ….. it’s rife now. I left for a career break (which I’m now on) and slowly getting passion back for it again but it frustrates me how saturated the market is now and then the expectation to be an IT department.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Deep_Sync",
        "body": "I don’t 100% like the stuff that I build.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Carighan",
        "body": "I'll be honest, I'm unhappy 100% of the time (at work), but I'm only like 80% unhappy all of that time. Does that still count?",
        "score": 2,
        "replies": []
      },
      {
        "author": "NoxinDev",
        "body": "This thread's numerous comments makes me start to realize how \\*I\\* remain happy as a developer. \n\nMost here refer to the word salad that has emerged like a parasite alongside the software development industry - Agile (and its various offshoots), various design systems demanded by people who have never written a line of production code in their lives, as well as tools claimed \"for organization and efficiency\" which really are layers of control that take precious hours from real productivity. \n\nThe bulk of my work looks the same as it would have in the late 90s - C#, sql and vbs/SIMPLE javascript, no chasing the latest language or tool - things are broken down to simple modular tasks that provide real impact to users and I enjoy doing them without external fuss. Modern annoyances such as Jira have entered life, but business analysts are the ones working with it more than I, that really is \\*THEIR\\* job. They don't code, we shouldn't analyst.\n\nI guess I lucked out with my developer's version of Stardew, going back to basics where a programmer can spend their time programming rather than playing the FOMO catch-up game with increasing layers of BS put between you and the code.\n\nOld man (in our industry at least) rant over!",
        "score": 2,
        "replies": []
      },
      {
        "author": "realestLink",
        "body": "I should note that this has been posted several times before on this subreddit",
        "score": 2,
        "replies": [
          {
            "author": "stormdelta",
            "body": "And OP is apparently some kind of bot.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "thelehmanlip",
        "body": "How many people in general say their happy with their job?",
        "score": 3,
        "replies": []
      },
      {
        "author": "dmunro",
        "body": "As a member of the 20% club, I don’t know if there’s a secret.  Maybe anti-depressants?  But really, after almost 20 years I think a few things keep me happy and fulfilled in this line of work:\n\n* Coworkers and leadership who I respect and like working with\n* Working on, and vastly improving, my communication skills over the years\n* My expectations are only for things entirely under my control\n* Accepting when it takes longer than normal to do something, and learning from the experience\n* In fact, never stop learning\n* Be pragmatic.  There’s usually more than one way to do something well\n* Celebrate wins, big and small\n* Stay humble",
        "score": 3,
        "replies": [
          {
            "author": "o_WhiskeyTF_o",
            "body": "&gt; Coworkers and leadership who I respect and like working with\n\nIn my 20 years of experience this is the thing that has that largest negative or positive effect on my level of satisfaction and one that is nearly impossible to control.",
            "score": 5,
            "replies": [
              {
                "author": "bart007345",
                "body": "And also almost impossible to find.",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "ballsohaahd",
        "body": "The other 20% are meh",
        "score": 2,
        "replies": []
      },
      {
        "author": "rickhora",
        "body": "Hey I'm in the 20% of something.",
        "score": 2,
        "replies": []
      },
      {
        "author": "blahyawnblah",
        "body": "People still go to stack overflow?",
        "score": 1,
        "replies": [
          {
            "author": "mugwhyrt",
            "body": "I'm a bigger fan of the broader Stack Exchange extended universe at this point. Those people over in the cooking stack are bonkers.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "KevinCarbonara",
        "body": "Probably because we didn't get raises",
        "score": 2,
        "replies": []
      },
      {
        "author": "needmoresynths",
        "body": "Devs are just incredibly whiny. Go do roofing for a day and then come back and say you're unhappy.",
        "score": -3,
        "replies": [
          {
            "author": "just_a_timetraveller",
            "body": "The problem with devs is other devs. There is so much elitism that exists in the field it is exhausting.",
            "score": 12,
            "replies": []
          },
          {
            "author": "sprcow",
            "body": "Doing a physically taxing, mentally simple job can make you unhappy, and doing a physically simple, mentally taxing job can make you unhappy. Whether or not you find the ability to work autonomously and find satisfaction in accomplishing things isn't really contingent on the specific nature of your work. \n\nI'm not saying physical labor can't be unpleasant too, but Office Space speaks to people for a reason. Dismissing the psychological distress that people find working in this industry is unreasonable.",
            "score": 13,
            "replies": []
          },
          {
            "author": "ck108860",
            "body": "I worked on a farm before becoming a dev, definitely would rather be doing farm work. Just give me dev pay",
            "score": 7,
            "replies": [
              {
                "author": "Goducks91",
                "body": "Yeah, I just want to do something that I can just be done with at the end of the day and not stress about it.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "paldn",
            "body": "Roofing ain't bad, pay is shit though.",
            "score": 2,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 2,
            "replies": [
              {
                "author": "[deleted]",
                "body": "Also the problems with agile/scrum come from their implementation: management has firm control, the team members have no say and just get badly prepared tasks thrown at them.",
                "score": 2,
                "replies": []
              },
              {
                "author": "needmoresynths",
                "body": "&gt;If you do roofing you know what you get. Being a developer you never really know what you get until you start working at a company.\n\n\nThis is exactly what I'm talking about. You absolutely don't know what you're going to get working in construction or a lot of other jobs, not exclusive to dev work at all\n\n\n\n&gt;micromanagement, meetings and stress \n\n\nAgain not at all exclusive to dev work only devs will be far higher compensated than other jobs in which this is daily life",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "b_curious",
        "body": "What’s so surprising about it?",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "It’s because of the toxic sub culture",
        "score": 1,
        "replies": []
      },
      {
        "author": "fire_in_the_theater",
        "body": "we honestly as a society kind of suck at producing and especially maintaining software.\n\nimo it's because we treat programming to much like engineering dealing with endlessly complex and unique situation... and not enough of a math that can be refined to perfection. \n\nunlike real world engineering, software production has this unique problem where you can make arbitrarily complex solutions that can balloon out into arbitrary valueless complexity in ways the real world just isn't capable of.",
        "score": 1,
        "replies": []
      },
      {
        "author": "mojosam",
        "body": "It’s selection bias: happy programmers are less likely to complete surveys on Stack Overflow.",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Who the fuck is happy in this shitty world, regardless of their job lol",
        "score": 1,
        "replies": []
      },
      {
        "author": "causticmango",
        "body": "Over engineering everywhere, abusive project management, stupid tech trends (crypto, AI, “Uber but for X”, etc.), unethical practices (no privacy, data harvesting, systemic racism &amp; sexism, anti DEI), repugnant right wing tech billionaires (Musk, Gates, Thiel, Jobs, Ellison, Altman, etc.), TESCREAL, and so on. \n\nIt’s exhausting. The future sucks. Next go around let’s let the art kids run things.",
        "score": 1,
        "replies": []
      },
      {
        "author": "DollarBillAxeCap",
        "body": "Like many you have people who are used to designing a monolithic architecture program and then shiny new microservices come into the picture and so the project ends up being a monolithic collection of microservices instead of individual microservices that can all operate independently.",
        "score": 1,
        "replies": []
      },
      {
        "author": "blind_disparity",
        "body": "More accurate title: 80% of developers who were on stackoverflow during a specific set of days and who felt strongly enough about the survey to respond, chose one of the negative responses.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Rondaru",
        "body": "No kidding. I've started this profession 25 years ago and watched it changing from \"code engineering\" to \"framework plumbing\". I've chosen to quit before anyone tries turning me into a \"prompt engineer\".",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Programming starts out quite amazingly and you feel like the possibilities are endless. Then you start working for a company and they make you program new buttons, that fall apart every few months",
        "score": 1,
        "replies": []
      },
      {
        "author": "puradawid",
        "body": "Nobody promised job will be satisfactory. It pays bill and that's it. Life is suffering and then death. Lights off.",
        "score": 1,
        "replies": []
      },
      {
        "author": "granoladeer",
        "body": "What about non developers?",
        "score": 1,
        "replies": [
          {
            "author": "adr86",
            "body": "yeah i was gonna come here and say i don't especially like my job\n\nbut i dislike it less than i disliked most other jobs i had so i guess im winning.\n\ntho the article said anecdotally plumbers and farmers hate their jobs less. id believe it, they prolly at least feel more useful doing jobs that actually have to be done by somebody\n\nim skeptical of the \"amount of technical debt\" reason tho, that sounds like just an excuse.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "reheapify",
        "body": "That's tough. I am fortunate to be in the other 20%",
        "score": 1,
        "replies": []
      },
      {
        "author": "tmk0813",
        "body": "I love engineering. I love solving problems. I love writing code. I love being surrounded by people passionate about the same thing. \n\nWhat I don’t love is meetings, consultants, bureaucracy, people in technical roles with no technical backgrounds, PMs who don’t do any work, leadership making decisions that completely conflict with hard, objective data and facts — making everyone else’s lives a nightmare and generally tanking projects that were doing just fine. \n\nI’m ok with daily standup. I’m ok with focused conversations if we set aside time. I’m not a pain in the ass of a person, I just like efficiency that makes sense and respects everyone’s busy schedule. The corporate approach that typically goes against that 9/10 times is what makes me burnt out, unhappy, unable to concentrate, etc. It’s not catered to engineering, it’s catered to middle management that has nothing else better to do than be a helicopter mom all day.\n\nDidn’t realize this would send me into a mini rant. I suppose that inherently makes me unhappy? 😂",
        "score": 1,
        "replies": []
      },
      {
        "author": "mowso",
        "body": "80% of developers are weak-willed idiots",
        "score": 1,
        "replies": []
      },
      {
        "author": "knobbyknee",
        "body": "Should be easy to fix. Only 20% to deal with.",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "CSS finally adds vertical centering in 2024",
    "body": "",
    "score": 1068,
    "url": "",
    "created_utc": 1723989437.0,
    "author": "flat_earth_worm",
    "permalink": "/r/programming/comments/1ev9v7n/css_finally_adds_vertical_centering_in_2024/",
    "comments": [
      {
        "author": "spaceneenja",
        "body": "/r/nottheonion programming headline",
        "score": 590,
        "replies": [
          {
            "author": "Audiomatic_App",
            "body": "Subreddits I wish were real",
            "score": -66,
            "replies": [
              {
                "author": "Pistoolio",
                "body": "but…. It is real",
                "score": 79,
                "replies": [
                  {
                    "author": "Muximori",
                    "body": "Pretty sure they mean a \"not the onion\" sub but just for programming.",
                    "score": 27,
                    "replies": []
                  }
                ]
              },
              {
                "author": "shapethunk",
                "body": "r/didnoteatnottheonion",
                "score": 8,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "_drunkirishman",
        "body": "The title of this post is a bit sensational, and misleading. But, the content is great and the enhancement added to the platform is great to see.\n\nFor those choosing to not read the article:\n\n&gt;In 2024, browsers have [implemented](https://web.dev/blog/align-content-block) `align-content` for *flow layout*.\n\nThe examples demonstrate why this matters. Great post!\n\nCan see more from Rachel Andrews via Chrome's blog: [https://developer.chrome.com/blog/align-content](https://developer.chrome.com/blog/align-content)",
        "score": 260,
        "replies": []
      },
      {
        "author": "RLutz",
        "body": "http://howtocenterincss.com/ in shambles",
        "score": 33,
        "replies": [
          {
            "author": "memtiger",
            "body": "The fact that a website was created for this nonsense is all you need to know about how stupid shit has been for the last two decades. \n\nYou don't see http://howtoboldincss.com do you? It should be as simple.",
            "score": 38,
            "replies": [
              {
                "author": "BlandInqusitor",
                "body": "Don’t bold in CSS. Use the “&lt;b&gt;” tag from HTML.",
                "score": -2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Tiquortoo",
        "body": "Now CSS is finally as good as tables.",
        "score": 21,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 237,
        "replies": [
          {
            "author": "A1oso",
            "body": "Yes, both `flex` and `grid` layout support centered content. The blog post actually shows all the ways in which content can be centered with CSS. But the recently added property works in the `flow` layout (the default), which makes it even simpler.",
            "score": 240,
            "replies": []
          },
          {
            "author": "marinated_pork",
            "body": "Yea, I've been vertically centering shit with `align-items: center` for like 10 years",
            "score": 156,
            "replies": []
          },
          {
            "author": "bloody-albatross",
            "body": "And IIRC before that you could do it with:\n\n    .wrapper {\n        display: table;\n    }\n    \n    .centered {\n        display: table-cell;\n        vertical-align: middle;\n    }\n\nEdit: Ah yeah, they mention it.",
            "score": 43,
            "replies": [
              {
                "author": "chrislomax83",
                "body": "That was always a fun one in the ie6 / 7 days.",
                "score": 24,
                "replies": []
              },
              {
                "author": "Asmor",
                "body": "`position: absolute; top: 50%; transform: translateY(-50%);`",
                "score": 12,
                "replies": [
                  {
                    "author": "bloody-albatross",
                    "body": "That works too, but the table-cell hack predates the existence of the transform property. :D",
                    "score": 14,
                    "replies": []
                  },
                  {
                    "author": "bwainfweeze",
                    "body": "I always preferred negative margins for that but I’m old school.",
                    "score": 6,
                    "replies": []
                  }
                ]
              },
              {
                "author": "shevy-java",
                "body": "Yes so many ways ...\n\nCSS used to be simple!",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "InfiniteMonorail",
            "body": "Nobody read the link. It's literally the second paragraph. Holy shit Reddit sucks. Everyone has a fucking opinion and nobody listens.",
            "score": 76,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 19,
                "replies": [
                  {
                    "author": "wankthisway",
                    "body": "I don't know what there is to even participate in here though. There's like a post a day that actually gains any traction, and the rest of the time it's the same whinging over the same subjects of cloud bad, JS bad, managers / agile bad, clean code bad, etc. This is one of the most boring subs honestly.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 4,
                        "replies": [
                          {
                            "author": "Zardotab",
                            "body": "Experience makes one a curmudgeon, as one observes crap, fads, bloat, and mayhem, and not *just* with Microsoft.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "tnnrk",
                    "body": "Is every sub",
                    "score": 3,
                    "replies": [
                      {
                        "author": "Zardotab",
                        "body": "Humans are merely chatty over-caffeinated apes, whaddya expect? 🐵",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "BandwagonHopOn",
                    "body": "Enforce a rule that top-level comments must include a quote from the article and discuss the quote directly. Not fool-proof but should go a long way.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "myringotomy",
                    "body": "This is what the reddit algorithm is designed to do.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "bwainfweeze",
                    "body": "I blame that on editors. They’ve been breaking the social contract consistently and flagrantly for a decade and these are the consequences.",
                    "score": -6,
                    "replies": [
                      {
                        "author": "PaintItPurple",
                        "body": "I blame that on plumbers. In exactly the same way, plumbers have also been consistently and flagrantly breaking a social contract that I can't specify, and it's caused editors to behave this way for reasons I also can't specify.",
                        "score": 8,
                        "replies": [
                          {
                            "author": "bwainfweeze",
                            "body": "So this is your first time talking about how article writers don’t get to  select their titles?",
                            "score": -5,
                            "replies": [
                              {
                                "author": "PaintItPurple",
                                "body": "Is this your first time encountering the idea of people being responsible for their own actions?",
                                "score": 6,
                                "replies": [
                                  {
                                    "author": "bwainfweeze",
                                    "body": "Summary of very common hacker news conversation: The internet is dead, all titles are lies, editors are the devil, nobody clicks on the lies anymore.",
                                    "score": -3,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "bwainfweeze",
                "body": "Turns out when the title sounds like bullshit, people don’t read the link. \n\nAlso if it’s a Sunday, or the sun is out, or it’s night time…\n\nBut we live in a world where titles are all bullshit and clickbait is everywhere. We’re gonna see if someone else got their heart broken before we click on a link.",
                "score": -4,
                "replies": [
                  {
                    "author": "PaintItPurple",
                    "body": "You can just not click through to the thread if you aren't interested in reading and discussing the article. Nobody's forcing people to show their asses.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "bwainfweeze",
                        "body": "Look man. I’m just telling you the kids are never gonna get off your lawn. \n\nIf you wanna keep screaming at them, that’s your business. But if you’re gonna talk about choice, you also made one, and you also could have walked away.",
                        "score": -1,
                        "replies": [
                          {
                            "author": "PaintItPurple",
                            "body": "You talking out your ass is not me complaining about kids on my lawn.",
                            "score": 3,
                            "replies": [
                              {
                                "author": "bwainfweeze",
                                "body": "Bullshit it isn’t. You’re participating in a conversation about how nobody reads anymore.",
                                "score": 0,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "detroitmatt",
                    "body": "I'm willfully ignorant, here's why it's someone else's fault",
                    "score": 2,
                    "replies": [
                      {
                        "author": "bwainfweeze",
                        "body": "As I said, that’s your business. Enjoy being cranky at the world old man.",
                        "score": 0,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "grady_vuckovic",
                "body": "They could have used a better headline. \"A new CSS property to vertically align content in 2024\", etc.",
                "score": -2,
                "replies": [
                  {
                    "author": "eXtr3m0",
                    "body": "But the property already existed.",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": -7,
                "replies": [
                  {
                    "author": "PaintItPurple",
                    "body": "Because it was just added, as the article explains.",
                    "score": 7,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "maria_la_guerta",
        "body": "&gt; CSS finally adds vertical centering in 2024 \n\nThis is blatantly disrespectful to [vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align), which was introduced in CSS1's spec (1996), and I will not stand for it.",
        "score": 74,
        "replies": [
          {
            "author": "SnareHanger",
            "body": "I don’t know if I’ve ever gotten vertical-align to work properly",
            "score": 77,
            "replies": [
              {
                "author": "highbonsai",
                "body": "It works, but only with inline positioned elements. Basically it works well with text and images if they are inline. Because of the inline nature, the effect will be really small but it comes in handy for certain types of vertical alignment",
                "score": 28,
                "replies": []
              }
            ]
          },
          {
            "author": "LucasRuby",
            "body": "Because vertical-align is for inline elements, clearly not what the articles refers too.",
            "score": 14,
            "replies": []
          },
          {
            "author": "st4rdr0id",
            "body": "It was the simplest solution until now.\nI don't care it was considered legacy, or not semantic. It just worked and was short.\n\nMany other things were so much easier and dimension-independent with tables, until flexbox and css tables, and even then they were on par.",
            "score": 0,
            "replies": [
              {
                "author": "maria_la_guerta",
                "body": "Ehhh. I agree that it is still the right tool for the right job sometimes, and I'm not aware of it being considered \"legacy\" but I would debate that. It's a perfectly valid property that does its job and you should use it when you need it. \n\nI disagree that things like flexbox haven't made things simpler. I wrote CSS fulltime in a time where CSS floats and tables were the norm and I would take flexbox and grid any day of the week.",
                "score": 6,
                "replies": [
                  {
                    "author": "st4rdr0id",
                    "body": "Floats and tables are on the antipodes of reliability: the former are a hack, the latter almost always work consistently and reliably. Flexbox and grid were too verbose and complex when they were introduced. Tables on the other hand can be remembered easily because they are simple.\n\nSimpler is better.",
                    "score": -4,
                    "replies": [
                      {
                        "author": "maria_la_guerta",
                        "body": "Simple is contextual. I have an infinitely simpler time making a grid (a common UX ask) using CSS grid than I do tables.",
                        "score": 6,
                        "replies": [
                          {
                            "author": "st4rdr0id",
                            "body": "There are [18  CSS grid properties](https://developer.mozilla.org/es/docs/Web/CSS/CSS_grid_layout) you need to remember, vs the basic `&lt;table&gt;`, `&lt;tr&gt;` and `&lt;td&gt;` triple plus 7 other tags you will probably never need, Table styling is way simpler, most CSS properties are shared with other elements. I'd say tables are quantitatively simpler (edit: at the cost of being less powerful).\n\nAdditional proof is in my short memory: I never remember grid or flexbox by heart unless I'm frequently working with them during a project, but tables I can recall them at any moment even without being immersed in a web project.",
                            "score": 3,
                            "replies": [
                              {
                                "author": "apf6",
                                "body": "You really don't need to remember all of those to use Grid. Most layout problems can be solved with just the `grid: (rows) / (columns)` shorthand which is pretty easy to remember.\n\nExample, here's a balanced 3 column layout:\n\n    &lt;div style=\"display: grid; grid: auto / 1fr 1fr 1fr;\"&gt;\n        ...\n    &lt;/div&gt;\n\nI feel like that's pretty simple. I use Grid constantly, it's so useful.",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "eXtr3m0",
                        "body": "Maybe you should give them another try.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Michaeli_Starky",
        "body": "One thing I hate about front-end development is CSS.",
        "score": 45,
        "replies": [
          {
            "author": "grimbr",
            "body": "I believe this is a shared pain we all have unfortunately...\n\nCSS has some weird quirks we need to work around sometimes, nowadays it's waaay better with display flex and what not.\n\nthe root issue IMO is that the concept of \"web apps\" wasn't really the goal for when the web started to be a thing years ago, so because of that, they had to \"rush\" to allow the existing technologies to host that possibility.\n \nOne example is why it's so damn hard to make custom components accessible, because we lack a ton of \"complex\" html tags like &lt;modal&gt;, &lt;dropdown-with-search&gt; etc",
            "score": 34,
            "replies": [
              {
                "author": "keturn",
                "body": "it's getting closer\n\nfinally\n\nafter literally an entire generation of web developers",
                "score": 19,
                "replies": []
              },
              {
                "author": "jelly_cake",
                "body": "For modals, there's a \\&lt;dialog\\&gt; tag.",
                "score": 8,
                "replies": []
              },
              {
                "author": "jess-sch",
                "body": "&gt; &lt;dropdown-with-search&gt;\n\nWell, we do have datalist... Fair, it's not a dropdown everywhere (Chrome Android puts it into the autocompletion bar), but it's better than nothing.\n\n&gt;&lt;modal&gt;\n\n`&lt;dialog&gt;`, popover API, top layer and CSS anchor positioning have made stuff significantly better in recent times.",
                "score": 5,
                "replies": []
              },
              {
                "author": "iiiinthecomputer",
                "body": "Right. CSS is actually really rather great for defining how to render content. It's just not an application UI definition language.",
                "score": 7,
                "replies": []
              },
              {
                "author": "Zardotab",
                "body": "&gt;\\[CSS\\] I believe this is a shared pain we all have unfortunately...\n\nThe time devs spend on UI because of the LSD-like DOM/CSS is unacceptable for typical CRUD apps. **WYSIWYG layout grids were KISS and quick.** Use a feature called \"stretch zones\"  or \"stretch columns\" and they can fit diff monitor sizes.\n\nA mobile layout is so different that different template should be used altogether. The best spacing/margin CSS for desktop versus phone are just too different to use as-is. Most internal biz apps don't use mobile anyhow, so it may not be worth paying the \"mobile-tax\": YAGNI. A \"linear\" phone form layout can be auto-generated based on field meta-data (model or data dictionary) as long as intermediate render event handlers can tweak it for custom stuff. Plus, mobile layouts waste screen real-estate to leave spacing for fingers, resulting in more scrolling.\n\nWeb slowed typical CRUD productivity waaaay down. \"Shuddup and learn CSS rocket science\" is not economical. **The industry de-evolved** 🐵, getting distracted by fads and hype.\n\n*We're doing it wrong!*",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "tRfalcore",
            "body": "I haven't had to deal with customer facing css in a bit. When you develop only internal facing stuff you just don't give a shit. Grid the whole thing, it's fine.",
            "score": 7,
            "replies": []
          },
          {
            "author": "warhead71",
            "body": "Boxes relative to other boxes - that are relative to other boxes - that are relative to other boxes….. fuck this - a guy that only do this - must be like a million times faster/better than a normal programmer",
            "score": 0,
            "replies": []
          },
          {
            "author": "spaceneenja",
            "body": "Just use Tailwind for 98% of use cases and your life will improve.",
            "score": -23,
            "replies": [
              {
                "author": "catearcher",
                "body": "That's just using CSS with extra steps.",
                "score": 16,
                "replies": [
                  {
                    "author": "spaceneenja",
                    "body": "Anyone who hates writing css and just wants to declaratively apply styles to dom elements will find tailwind does almost everything they could need without having to maintain your own stylesheet.\n\nIt’s css with less steps.",
                    "score": -3,
                    "replies": [
                      {
                        "author": "jess-sch",
                        "body": "Congrats, now you need to learn an esoteric css dialect that is exclusively written inline instead of standard css.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "spaceneenja",
                            "body": "Lmao",
                            "score": -1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "trevdak2",
        "body": "Great, can't wait for 2034 when I can use it on a website and not have to worry about compatibility",
        "score": 32,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 15,
            "replies": [
              {
                "author": "trevdak2",
                "body": "\"It doesn't look right on BlackBerry\" - one of my testers",
                "score": 28,
                "replies": [
                  {
                    "author": "bwainfweeze",
                    "body": "“Can I see that?”\n\n&lt;one hand hidden behind back&gt;",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "rbobby",
        "body": "There's many many reasons I hate vertical centering. Today I learned a new one:\n\n    &lt;!-- FAIL! --&gt;\n    &lt;div style=\"display: grid; align-content: center;\"&gt;\n      Content with &lt;em&gt;multiple&lt;/em&gt; nodes.\n    &lt;/div&gt;\n\nI'm going back to tables!",
        "score": 23,
        "replies": [
          {
            "author": "Behrooz0",
            "body": "Tables are probably the only thing that haven't failed me when using HTML for printing.  \nA lot of layout functionality doesn't work or works differently across renderers when printing HTML. Table layouts have been consistent across browsers.",
            "score": 7,
            "replies": [
              {
                "author": "bwainfweeze",
                "body": "The number of CSS Zen garden pages that looked like complete garbage when you resized the window or the text was too high. \n\nThen too often when you found one that survived, you found they were setting the display mode of a div to table-cell.",
                "score": 4,
                "replies": [
                  {
                    "author": "rbobby",
                    "body": "&gt; display mode of a div to table-cell\n\nLiterally laughed out loud.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "bwainfweeze",
                        "body": "Lucy and her goddamned football.  How did they center this!  Oh.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "pythonesqueviper",
                "body": "To be fair, that's because printers suck",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "vplatt",
            "body": "&gt; I'm going back to tables!\n\nBoo!",
            "score": 0,
            "replies": []
          }
        ]
      },
      {
        "author": "mizzu704",
        "body": "does this solve the problems in https://tonsky.me/blog/centering/ ?",
        "score": 5,
        "replies": []
      },
      {
        "author": "wildjokers",
        "body": "The fact people think web tech is an appropriate solution for a desktop  app just blows my mind. Desktop GUI toolkits have been able to do things web devs brag about for at least 30 years.\n\nVertical centering is a nice start, now how about a standard split pane component and a standard scrollpane component that resizes when the browser resizes?\n\nWeb layout is still a total abomination as it has been since the mid-90's. CSS Grid and FlexBox improved things slightly, but not near enough.",
        "score": 22,
        "replies": [
          {
            "author": "unsolvedrdmysteries",
            "body": "And yet electron is so ubiquitous.  I mean, designing for a fixed window ratio is easier than having the same code render a good UI for both landscape, portrait and all kinds of weird things in between",
            "score": 13,
            "replies": []
          },
          {
            "author": "iiiinthecomputer",
            "body": "CSS is just peachy for describing how to render content for reading and general display. What it was designed for. It's far from perfect but generally does an impressive job.\n\nIt was designed to explicitly *not* be a pixel level layout, after all. It's about translating semantic markup for display.\n\nBut the web went in a different direction, toward these full apps in the browser. And they have just abused CSS into doing their bidding.",
            "score": 23,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 14,
            "replies": [
              {
                "author": "cake-day-on-feb-29",
                "body": "&gt; To this day, there still isn't no better alternative than something like Electron.\n\nJava Swing/JavaFX.\n\nYet we've settled on using HTML+CSS+JS. Which is somehow even worse, since instead of a single Java runtime installation, each electron app has its own CEF engine.\n\nThere's also GTK and Qt, and some other smaller cross platform toolkits. But I find most of the apps built with them end up being a little wonky. They're still typically faster/leaner than your typical electron shite though.",
                "score": 3,
                "replies": [
                  {
                    "author": "atomic1fire",
                    "body": "Since I'm bored enough to nitpick, CEF and Chromium aren't really the same thing and Electron isn't using CEF.\n\nMost of the problems people have with CEF/Electron/Webview2 using \"So much RAM\" stem from needing to bundle the entirety of Chromium and the library you chose doesn't really make a difference because it will still probably need to use a bunch of memory to render webpages and execute javascript code.\n\nElectron (and NW.JS) interface with chromium directly, while CEF wraps everything chromium into it's own API that host programs have to interface with. CEF is fine if you have a project that uses C/C++ (or are willing to write bindings to the C API for such a project, such as with Python), but electron (and nw.js) is more convenient if you plan on writing everything in JavaScript or typescript. NW.JS also supports chrome platform APIs like what old chrome apps used to have.\n\nSteam uses CEF, as does Spotify.\n\nhttps://www.electronjs.org/blog/electron-internals-building-chromium-as-a-library\n\nI'm personally hoping that rust application development takes off, for the simple reason the vast majority of crates will probably be multiplatform by design, and even libraries like Tauri emphasize using the browser backend that's already in the OS. On windows that's microsoft's version of chromium, but on Mac and Linux it's Webkit.\n\nI think another solid option would be if .net got trendy with something like Avalonia.\n\nedit: Actually I think it would also be interesting if someone took a look at youtube's cobalt library and checked if something could be done with that, as a smaller runtime then Chromium.",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "bwainfweeze",
                    "body": "We “settled” because you can use functionality without installing an app. HTML won long long before app stores existed, and continued to exist after app stores began to suck.",
                    "score": 5,
                    "replies": []
                  },
                  {
                    "author": "FamiliarSoftware",
                    "body": "Those other frameworks may be more performant, but they make writing UIs so much more painful than HTML and CSS.\n\nI don't like HTML, but looking at [GTK samples](https://docs.gtk.org/gtk4/class.Builder.html) makes me want to gouge my eyes out. \n\nAdd to that that Electron is the only one of those on which I've had no problem just running an app on Windows and Linux. It has no licensing issues because it is packaged up as MIT/BSD. I would love to write native apps, but electron based ones are just lightyears ahead in terms of developer accessibility.\n\nHTML is simply the least bad option when you want to get something done quickly.",
                    "score": 7,
                    "replies": [
                      {
                        "author": "bwainfweeze",
                        "body": "Once upon a time someone tried to make a UI framework for desktop that used an HTML like markup. Wish I could remember what it was called.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "CookieOfFortune",
                            "body": "I mean Windows had this with C# and WPF and it was mostly fine for normal apps. Also Flex and Silverlight in that era at the start of the SPA craze.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "bwainfweeze",
                                "body": "I think the important difference is whether it’s platform specific or cross. But yeah.",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "b100dian",
                            "body": "Macromedia MXML, Microsoft XAML based technologies, Java FX are examples of that. Gtk has Glade and/or GtkBuilder (there was even Gtkaml), Qt has QML..",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "MadCervantes",
                    "body": "Gtk uses css.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "wildjokers",
                "body": "&gt; Which toolkits are you thinking about?\n\nSwing, JavaFX, wxWidgets, GTK, and QT.",
                "score": 2,
                "replies": [
                  {
                    "author": "Zardotab",
                    "body": "Amen! We **need a new stateful GUI markup standard**. [DOM/JS keeps failing](https://www.reddit.com/r/CRUDology/comments/10ze9hu/missing_or_defective_gui_idioms_in_htmldom/), and putting lipstick on that pig ain't working, just oinking. 🐽",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "MacHaggis",
            "body": "I am convinced this posts gets upvoted by veteran devs and downvoted by younger devs.",
            "score": 2,
            "replies": [
              {
                "author": "wildjokers",
                "body": "Almost certainly.",
                "score": 2,
                "replies": []
              },
              {
                "author": "MardiFoufs",
                "body": "Lol what? Is that the new circlejerk? For me it's the opposite, newer devs like to upvote \"web bad old crust framework good\". Like the comment you're replying to literally said that javafx is somehow better at building UIs, which is mind boggling to anyone who actually used it back then. JavaFX is a lot of things but it is absolutely more primitive at layouts. Same goes for QT for example. Unless you LOVE working with shitty Qt gridlayouts or the absolute pleasure that is sizing policies in qt. \n\n\nBut when you haven't used those, you think that web dev is just so bad and a horrible experience etc. Where CSS is actually still the least worse option out of all of them.",
                "score": 1,
                "replies": [
                  {
                    "author": "MacHaggis",
                    "body": "I'm a XAML fanboy, never have the asinine sort of problems with trivial stuff as centering an item.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "MardiFoufs",
                        "body": "Mhmmmm to be honest I'm not familiar with XAML... my original comment was more a reaction to seeing the comment OP mentioning that javafx is better (lol) at layouts. \n\n\nHow is XAML for deeply nested layouts/parent child layout rules, etc? Is it still used with WinUI?",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Zardotab",
                    "body": "&gt;JavaFX is a lot of things but it is absolutely more primitive at layouts...Same goes for QT\n\nMaybe you work on e-brochures, e-commerce, and/or social networks. You might have different needs there. \n\nIt could be one-size-does-NOT-fit-all. I don't propose doing away with HTML/CSS, only that we need another standard that's desktop/GUI/biz/state-friendly.  Web has been absolutely crappy for rank and file biz/admin CRUD.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "wasdninja",
            "body": "&gt; Desktop GUI toolkits have been able to do things web devs brag about for at least 30 years.\n\nAre they cross platform, easy to use and have massive community support as well? \n\n&gt; Web layout is still a total abomination as it has been since the mid-90's. CSS Grid and FlexBox improved things slightly, but not near enough.\n\n*Layout* is bad? What are you missing now that grid and flex are widespread?",
            "score": 0,
            "replies": [
              {
                "author": "wildjokers",
                "body": "&gt; Layout is bad? What are you missing now that grid and flex are widespread?\n\nLike my original comment said, split panes and scroll panes (and I mean scroll panes that resize with their container).  \n\nI absolutely despise when I go to a web site that has scroll panes and when I resize my browser the scrollpane doesn't resize with it! That is worthless. And it is also a very common thing to see.\n\n&gt; Are they cross platform, easy to use \n\nYes, except for mobile. Although JavaFX can be used on mobile.",
                "score": 3,
                "replies": []
              },
              {
                "author": "Behrooz0",
                "body": "Yes. I've worked on multiple Projects that compile for Windows, Linux, Mac, iOS and Android from a single source tree without any #ifdef hoops or such. My current project is a Gtk3 (soon 4) project that works perfectly fine on all desktop OSes.  \nThe Gtk 3 layout system is the easiest thing I have ever worked with. The Gtk4 LayoutManager is a bit harder (and is giving me the occasional headache in the migration) but the features are amazing.",
                "score": 5,
                "replies": [
                  {
                    "author": "MardiFoufs",
                    "body": "Gtk is good at creating simple layouts. But just like with QT it's absolutely horrible at anything more complex than grids or simple lists/panes.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Behrooz0",
                        "body": "It's an enterprise software. The layout is actually complex AF. I think we have like 50 custom widgets including completely custom comboboxes, multiple entries, an entry with custom IME, and custom lists with so many features we're afraid of refactoring them. in addition we made some widgets we felt were missing like tag cloud and graph editor.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "MardiFoufs",
                            "body": "That's pretty cool! I've rarely seen enterprise software written in gtk. I agree that most frameworks are fine for creating widgets, and the layout inside those widgets is also not super hard to figure out. In my experience, it's making all of those work together in a decent layout that's pretty hard. For example, in QT (not a lot of gtk experience), without qtquick, it's rather hard to make sure that an item in a list is always consistent regardless of where the list is placed, what the sizing policy of the parent widgets are, etc. Like, it's not impossible. But much harder than with stuff like CSS. \n\nIs it better with gtk? I rarely had to deal with nested layouts there (most of my gtk experience is on open source projects, not my actual day job)",
                            "score": 1,
                            "replies": [
                              {
                                "author": "Behrooz0",
                                "body": "I used Qt only a little bit and made like 3 toy projects. for me gtk is definitely easier to work with. but Qt had a better typing system and standard library. Gtk has none of that. You make your own data structures and it's callback galore.",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "emperor000",
                "body": "&gt; Are they cross platform, easy to use and have massive community support as well? \n\nAre they not?",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Wait a minute, did I hallucinate the flex system? Works flawlessly for me for many years.",
        "score": 2,
        "replies": []
      },
      {
        "author": "SwitchOnTheNiteLite",
        "body": "It's wild that we didn't just create a `vertical-position` and `horizontal-positon` properly with percent as options (to allow for RTL languages) years ago in a way that just does exacty what it says on the tin.",
        "score": 3,
        "replies": [
          {
            "author": "jess-sch",
            "body": "Well, okay, but what *does* it say on the tin?\n\nIs that the position of the top left corner? Or the position of the center of the element?\n\nI'm assuming, given the context, you mean the center point of the element?\n\n```\nvertical-position: 50%;\nhorizontal-position: 50%;\n```\n\ngreat, a perfectly centered element. but wait!\n\n```\nvertical-position: 0%;\nhorizontal-position: 0%;\n```\n\nfuck, now most of the element is outside the viewport and only the bottom right quarter is visible. Did you intend that?\n\nOkay... So maybe top left corner? But wait! That's just the same as\n\n```\nposition: absolute;\ntop: 0;\nleft: 0;\n```\n\nOr we could get really funky and say that the relevant point is the corner or center point that's closest, so 5% 12% is top left, 49% 51% is center, 80% 90% is bottom right, etc. But that seems a little complicated, doesn't it?\n\nAlternative proposal:\n\n```\nvertical-position: 50% center; // or top, bottom\nhorizontal-position: 50% center; // or left, right\n```",
            "score": 2,
            "replies": [
              {
                "author": "SwitchOnTheNiteLite",
                "body": "It's not that complicated if you don't intentionally make it complicated. \n\nAfter all, that's the problem of all the existing layout mechanisms already in CSS. They use abstract concepts that no one outside the CSS creators have seen before. \n\n`vertical-position: 0%; horizontal-position: 0%;` should be top left if your browser is set to the western reading direction, or top right if you are using a RTL language. The position % should limit the placement of the inner element to within the container. If you want to be a freak and place stuff outside the container (no one ever really wants this), you need to use a different rule (like negative margins or absolute positioning).",
                "score": 0,
                "replies": []
              }
            ]
          },
          {
            "author": "w8cycle",
            "body": "It’s strange. CSS is both over engineered and clumsy to use.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "shevy-java",
        "body": "That is, unlike trying to make CSS a programming language, actually a good change. It used to be fairly annoying to try to align vertically. Aligning horizontally was simpler.\n\nHaving said that, CSS really has too many \"more than one way to do something\". Flexbox? How many same or almost-the-same ways exist for that? https://xkcd.com/927/",
        "score": 2,
        "replies": []
      },
      {
        "author": "Lisoph",
        "body": "As an ex web dev, I never thought I would see the day...",
        "score": 2,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 2,
        "replies": [
          {
            "author": "redditrasberry",
            "body": "won't somebody think of the CSS \"frameworks\"?",
            "score": 0,
            "replies": []
          }
        ]
      },
      {
        "author": "Classic-Try2484",
        "body": "I thought margin auto worked as long as you supplied the height. Looks like you had to supply the height here too. It’s a small win. And yet another rule to remember. Tables were frowned on because of semantics but why didn’t we just create a layout tag that behaved as a table but could be ignored as a semantic value.   Clearly other items in html are not semantic. Everyone could figure out table layouts.  Tbh we shot ourself in the foot just so we could say the gun was empty.",
        "score": 1,
        "replies": []
      },
      {
        "author": "AirParticular675",
        "body": "great, now i can fail on multiple axis's",
        "score": 1,
        "replies": []
      },
      {
        "author": "rmyworld",
        "body": "Feels strange to see Edge still get its own spot in the browser support section, when it's literally just Chrome with an MS skin.",
        "score": 1,
        "replies": [
          {
            "author": "memtiger",
            "body": "It incorporated updates at a different cycle than Google though. And I'm sure they have custom flags of their own.",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "Basket72",
        "body": "Just need to wait another decade for it to be in all the browsers :’)",
        "score": 1,
        "replies": [
          {
            "author": "axord",
            "body": "As the article says: \n\n&gt;&gt; Supported since:\n&gt;&gt; Chrome: 123 | Firefox: 125 | Safari: 17.4",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "luscious_lobster",
        "body": "reminder of why I left webdesign behind a decade ago",
        "score": -4,
        "replies": []
      },
      {
        "author": "Desmaad",
        "body": "So, what have people been doing to centre content before this feature was formally adopted?",
        "score": -6,
        "replies": [
          {
            "author": "lukebitts",
            "body": "You are in luck, the article linked actually answers your question. They show all the ways it’s ever been done",
            "score": 25,
            "replies": []
          },
          {
            "author": "dwerg85",
            "body": "All the things.",
            "score": 14,
            "replies": []
          },
          {
            "author": "voyagerfan5761",
            "body": "Going insane while trying different workarounds, that's what.",
            "score": 14,
            "replies": [
              {
                "author": "Desmaad",
                "body": "Couldn't you just get the viewport width, divide it by two, stick it into a variable called \"centre\", and refer to that? Sorry, I really don't know anything about CSS.",
                "score": -7,
                "replies": [
                  {
                    "author": "vplatt",
                    "body": "Ok, now resize the window which changes the size and overall proportion of the viewport.\n\nOh, well, just let me hook up this javascript over here to make that work with events that reposition according to the sizing.  \n\nOk, now try to print your window and realize it's still not right.  \n\n(1 week later).  OK, got that fixed.\n\nOk, now test it with Safari and realize it's completely messed up again.  \n\n(1 week later)  Ok, that's fixed!\n\nOk, now add a new column to your layout that puts your formerly centered content all the way over in the right hand side column.\n\n::shoots self::\n\nI mean... none of it is impossible by itself.  But it's just this maddening continual process of tweaking it, adjusting it, retesting it.  It's awesome if all you do is want to fiddle with CSS all day, but if you want to just complete the work and not have to worry about it down the road... yeah, that's generally not going to happen.",
                    "score": 8,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "guest271314",
        "body": "Doesn't `vh` with `calc()` provide a means to vertically center?",
        "score": -18,
        "replies": [
          {
            "author": "thats_a_nice_toast",
            "body": "`calc()` is the absolute last resort",
            "score": 30,
            "replies": [
              {
                "author": "guest271314",
                "body": "Reasoning? I've used `calc()` with `vh`, `vw`, `top` and `left` for years to  precisely align content.",
                "score": 0,
                "replies": [
                  {
                    "author": "tav_stuff",
                    "body": "Absolute classic webdev-hivemind on display here where you’ll get downvote bombed for saying you use a method that has been proven to work for decades, with no elaboration of how what you’re doing is wrong",
                    "score": 4,
                    "replies": [
                      {
                        "author": "umtala",
                        "body": "Because flexbox exists. It's like using an abacus instead of a calculator. Sure you _can_...\n\ncalc is not even any older than flexbox really so it's quite perplexing.",
                        "score": 13,
                        "replies": [
                          {
                            "author": "tav_stuff",
                            "body": "Ok so flexbox can do it too. Why does that mean that calc is an absolute last resort? I’ve used the calc method before and it works great. It gets the job done in a very easy manner, and everyone who’s actually competent can understand it. It’s just nonsense cargo culting that’s unfortunately super prevalent in the programming space these days.",
                            "score": -3,
                            "replies": [
                              {
                                "author": "umtala",
                                "body": "To use calc() to center things you need to know the height of the element.\n\nYou can't use calc to center most elements because the browser calculates their height from their contents and this calculation is not available inside calc().\n\nCentering an element with a known height was possible since forever using relative positioning or negative margins.\n\nEven then, sometimes an element with a \"known\" height can become one with an unknown height if the text wraps for instance. Even if you're sure that it will never wrap in English, are you sure it won't wrap when localized to another language? So it's good practice to treat all elements as having unknown height.",
                                "score": 5,
                                "replies": [
                                  {
                                    "author": "tav_stuff",
                                    "body": "&gt; To use calc() to center things you need to know the height of the element\n\nOften this is the case, and you know to the height\n\n&gt; Even if you’re sure it won’t wrap in English, it may wrap in other languages\n\nThis is true, but also the vast majority of software and websites are never localized beyond English, so for most people this is not a worry they need to have",
                                    "score": -1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "PaintItPurple",
                        "body": "Good point. Why is a more complicated, less declarative and less readable approach worse? That's a real stumper. Must just be a hive mind at work.",
                        "score": 5,
                        "replies": [
                          {
                            "author": "tav_stuff",
                            "body": "That is not what I asked, and you know it. You’re being intentionally disingenuous",
                            "score": 1,
                            "replies": [
                              {
                                "author": "PaintItPurple",
                                "body": "I think you're being intentionally obtuse to act like there aren't obvious reasons why most devs would flag unnecessary uses of calc() in a review, and consequently why they would downvote a comment blindly declaring it to be preferable.",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "guest271314",
                        "body": "Good thing I don't give a damn about \"up\" or \"down\" votes on social media boards. Especially not in the slums of social media, Reddit.",
                        "score": -5,
                        "replies": [
                          {
                            "author": "Kwantuum",
                            "body": "You're willingly hanging out in the slums my guy.",
                            "score": 12,
                            "replies": [
                              {
                                "author": "guest271314",
                                "body": "I am from the slums, my guy. I AM the slums. I'm pretty sure I can be **far** more grimy than the vast majority of dullards on Reddit.\n\nThese boards are child's play.",
                                "score": -16,
                                "replies": [
                                  {
                                    "author": "mr_jim_lahey",
                                    "body": "You have to love the irony that the people who express the most vocal disdain of their strawman version of redditors are so often themselves the very epitome of that strawman",
                                    "score": 3,
                                    "replies": [
                                      {
                                        "author": "guest271314",
                                        "body": "Reddit is generally garbage. Here and there people actually post helpful articles and answers questions directly.\n\nHowever, like your comment, many are on some would-be satire and comedian bullshit.\n\nIt makes absolutely no sense to cast worthless \"downvotes\" for `calc()` when that has been used for aligning content exactly since CSS introduced `calc()`, `vh`, `vw`.\n\nIf you are looking for sense on Reddit though, you have none.\n\nAin't no strawman here. I'm going to notify you directly your useless \"down\" votes (and \"up\" votes) are worthless.\n\nI didn't get the memo that I was supposed to care about some votes on social media. Or maybe I burned the memo and just don't give a fuck what you think.",
                                        "score": -1,
                                        "replies": [
                                          {
                                            "author": "mr_jim_lahey",
                                            "body": "You are 5% as edgy as you think you are, lol",
                                            "score": 3,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "citrusmunch",
                            "body": "when having neither up nor down makes it vertically centered 👀",
                            "score": 2,
                            "replies": [
                              {
                                "author": "guest271314",
                                "body": "Voting is overrated. \n\nSomebody said in a comment recently something like Redditors are the dumbest creatures on this planet. \n\nI can't contest that observation.",
                                "score": -4,
                                "replies": [
                                  {
                                    "author": "mapsedge",
                                    "body": "I hate posting on developer forums because nobody loves to crow from atop a hill of s*** that you're doing something wrong without ever offering a solution like developers. Given the choice between teaching and tearing down, nine times out of 10 they'll choose to tear down.",
                                    "score": -3,
                                    "replies": [
                                      {
                                        "author": "guest271314",
                                        "body": "\"Up\" and \"down\" votes on these boards has no inherent value.\n\nPeople arbitrarily decide if a \"vote\" count is true and correct, or not, individually. A whole bunch of people still think the late O.J. Simpson was \"guilty\" of the charges the D.A. laid against him. Nevermind a jury acquitted him.\n\nWhy the hell would I care about Reddit's fake ass \"karma\"?\n\nI have been on these boards for decades now and have *never* cast a single \"down\" vote for any post or comment.\n\nI read the content. And decide for myself what works and what doesn't work.\n\nI don't rely on another human to make decisions for me.",
                                        "score": -4,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "author": "guest271314",
                                "body": "If people are looking for truth to correspond with \"up\" or \"down\" votes on social media boards, or in politics in general, those people are fools.\n\nIn 2024 tens of millions of U.S. citizens will \"vote\" for complete strangers to be elected the President of the United States. But guess what? The Framers and Founding Fathers of the United States didn't trust each other and certainly didn't trust a bunch of illiterate European peasants that were indentured laborers who couldn't vote anyway if they didn't own property, so they designed the Electoral College to make sure the herd, the incompetent mob, could never really gain the balance of power. They formed the U.S. as a *representative republic*, decidedly *not* a democracy. Majority does not rule. Might makes right.",
                                "score": -2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "feastofthepriest",
                    "body": "Hard to get right for different screen sizes (the example you showed in another comment chain fails when the screen is too small), and also it doesn't let you center in a container, only in a view",
                    "score": 1,
                    "replies": [
                      {
                        "author": "guest271314",
                        "body": "Well, you have to test on different platforms and devices to get it right. The example I posted I spent a few minutes on. \n\nI don't have an issue with new additions to CSS. At one point in the not too distant past `calc()` was new, so was `vh`, `vw`, and so forth. \n\nDo whatever it takes. Use all of the tools in the toolbox.\n\nI don't roll around on mobile devices all day long, so I'm not that concerned with small screens, unless a client needs that precision for a certain requirement.",
                        "score": 0,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "guest271314",
                "body": "&gt; `calc()` is the absolute last resort\n\nToo funny.",
                "score": -2,
                "replies": []
              }
            ]
          },
          {
            "author": "Matt3k",
            "body": "Are you able to use calc() to vertically center content of arbitrary height inside a container? An obvious solution does not come to mind. I'm curious how you achieve it.",
            "score": 2,
            "replies": [
              {
                "author": "guest271314",
                "body": "Yes, of course. That's one way it has been done since `calc()` was introduced into CSS. Make use of `vh`, `vw`, `left`, `top`, and take into account that browsers' margins and padding is different.\n\nThis was more challenging before there was `calc()`, `vh`, and `vw`.",
                "score": 0,
                "replies": [
                  {
                    "author": "feastofthepriest",
                    "body": "vh and vw let you vertically center in the view, not inside a container",
                    "score": 4,
                    "replies": [
                      {
                        "author": "guest271314",
                        "body": "Depends on the `position`.",
                        "score": 0,
                        "replies": [
                          {
                            "author": "feastofthepriest",
                            "body": "No, vw and vh refer to the entire viewport, no matter what the positioning of the container is",
                            "score": 3,
                            "replies": [
                              {
                                "author": "guest271314",
                                "body": "Well, yes. You calculate where you want the element to be and put it there, by any means. Whether that be `calc()` with `vh`, `vw`, or any other means available. \n\nPer the article:\n\n&gt; CSS mastery takes effort!",
                                "score": 0,
                                "replies": [
                                  {
                                    "author": "schmuelio",
                                    "body": "I think the sentiment people have here is that \"I want to vertically center an element within its parent element\" _shouldn't require mastery_.",
                                    "score": 6,
                                    "replies": [
                                      {
                                        "author": "guest271314",
                                        "body": "&gt; shouldn't require mastery.\n\nWell, what *shouldn't* is different from what is.\n\nYou you confess you are not even attempting to master CSS. Thus, you won't.\n\nOr, you'll get it and get it done with the tools you have.\n\n&gt; I want\n\nOh, join the club.\n\nMake it so Number 1, by any means.\n\nThat's what I did when I was hacking CSS and the CSSOM every day.",
                                        "score": -1,
                                        "replies": [
                                          {
                                            "author": "Matt3k",
                                            "body": "Maybe I'm overlooking something obvious, but I don't see how vw or vh let you vertically center an element inside its parent. The only way I see this working is if the position of everything on the page is determined in advance and layout is fixed. Can you give an example?",
                                            "score": 2,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "guest271314",
                "body": "You mean something like this https://guest271314.github.io/vits-web/?\n\nThat's without really refining and testing. Just an approximation. I could take that a few steps further if I wanted.\n\nI used to be, some years ago, a CSS and CSSOM enthusiast to the Nth degree.",
                "score": 0,
                "replies": [
                  {
                    "author": "dezsiszabi",
                    "body": "Is this supposed to be vertically centered? Because it's not.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "schmuelio",
                        "body": "Not OP, you'd need to change the:\n\n    top: 20vh;\n\nto:\n\n    top: calc(50vh - 20px);\n\nTo fix it, and this type of stuff is why I personally don't like things like `calc`. For it to be \"correct\" it needs information like the current height of the element in `px` so variable height boxes get complicated fast.\n\nAnother annoyance is just blindly relying on `vh` to be correct. I don't think `vh` works when you are styling an element to be vertically centered within its container since `vh` is a measure of the browser's viewport height.\n\nBoth the `50vh` and the `20px` are very fragile, when what you really want is to vertically center the center point of the current element within the height of its parent element.\n\nThat's why `calc` would be considered a \"last resort\".",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Matt3k",
                    "body": "This does not vertically center content of arbitrary height within a parent container. This vertically centers content of a known height within the viewport. Right?",
                    "score": 1,
                    "replies": [
                      {
                        "author": "guest271314",
                        "body": "I did that in a few minutes. For a pre-exiting basic Web page that's about speech synthesis, not CSS. Not for exactly what you describe, but to give you an idea of the capabilities. You have to do some work. Calculate the parent pixel dimensions, and whatever other specific requirments you have. I have not actively hacked CSS in years. I used to every day. It's possible. Look at the calculations I passed to the `calc()` function. They are not arbitrary. Center your element accordingly.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "guest271314",
            "body": "\n\nAll you folks can manage for using CSS `calc()` for rending vertical alignment of content is *14* meaningless \"down\" votes?\n\nI grind \"down\" votes with a mortar and pestle for breakfast. \n\nC'mon now...\n\nNeeds more \"down\" vote...",
            "score": -10,
            "replies": []
          }
        ]
      },
      {
        "author": "redwirelessmouse",
        "body": "Listen.  We've easily been able to vertically center content using flexbox for the past 15 years now.  If you guys are still having trouble with that, then that's on you.",
        "score": -9,
        "replies": [
          {
            "author": "besimhu",
            "body": "I think you should read the article to see what it solves specifically",
            "score": 8,
            "replies": [
              {
                "author": "redwirelessmouse",
                "body": "Yeah my comment wasn't in regards to the article.",
                "score": -8,
                "replies": [
                  {
                    "author": "tnnrk",
                    "body": "Typical",
                    "score": 6,
                    "replies": [
                      {
                        "author": "redwirelessmouse",
                        "body": "Here's a fact.  If you still can't center a div in 2024 you shouldn't be a dev. Does that apply to you?",
                        "score": -4,
                        "replies": [
                          {
                            "author": "tnnrk",
                            "body": "Are you trying to start a fight in a programming sub Reddit?",
                            "score": 4,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Easy-Bad-6919",
        "body": "Haven’t there been ways to achieve the same thing by combining css tags, for many years?\n\nEdit:\nOh look, here is a thread on how to do it from 16 years ago! \n\nhttps://stackoverflow.com/questions/79461/how-can-i-vertically-align-elements-in-a-div",
        "score": -6,
        "replies": []
      }
    ]
  },
  {
    "title": "In a leaked recording, Amazon cloud chief tells employees that most developers could stop coding soon as AI takes over",
    "body": "",
    "score": 1044,
    "url": "",
    "created_utc": 1724277507.0,
    "author": "totemp0le",
    "permalink": "/r/programming/comments/1ey2aai/in_a_leaked_recording_amazon_cloud_chief_tells/",
    "comments": [
      {
        "author": "maxinstuff",
        "body": "Always pay attention to who it is saying this stuff.\n\nNVIDIA, Amazon, Microsoft, all vested interests. They aren't getting rid of their own developers, they need those people to build new AI products -- but they'll tell you to get rid of yours in a completely transparent attempt to cripple your technical capability and make you entirely reliant on their products (which of course happen to run in their cloud infrastructure, managed by... their engineers.)",
        "score": 3091,
        "replies": [
          {
            "author": "xabrol",
            "body": "I have so many clients already with insanely high cloud hosting fees and I look at their traffic.... \"You could run all this on 4 rasberry pis and 1 1g Ethernet trunk....\"\n\nIve seen clients in azure with a 64 thread dedicated windows vm for 20,000 users a month.... \n\nThese people have no idea what they're doing.",
            "score": 930,
            "replies": [
              {
                "author": "AlanBarber",
                "body": "Lol! Do we work at the same place?\n\n Had a previous client come to us paying like 15k just for their SQL Azure bill. Some previous devop cranked them up to some ridiculous 32 vcore level of business critical load balanced cluster shit due to poor performance.\n\n6 weeks of our team cleaning things up to optimize and we we're able to scale them down to 16 vcore general purposes level for around 3k a month!",
                "score": 174,
                "replies": [
                  {
                    "author": "Far_Cat9782",
                    "body": "Did get a bonus for basically saving them a hundred thousand a year?",
                    "score": 106,
                    "replies": [
                      {
                        "author": "Thebandroid",
                        "body": "Lol",
                        "score": 208,
                        "replies": []
                      },
                      {
                        "author": "gimpwiz",
                        "body": "6 weeks of a team of engineers (presumably consultants charging consultant rates) to save $100k a year is not necessarily great ROI, tbh.",
                        "score": 126,
                        "replies": [
                          {
                            "author": "corysama",
                            "body": "And, this is why managers love overpriced, overpowered servers.  As long as it works, it’s cheaper than paying engineers to figure out how to make it work on cheaper machines.\n\nWhich is fine until your service that’s not really that intense stoops working on the most expensive hardware.",
                            "score": 112,
                            "replies": [
                              {
                                "author": "gimpwiz",
                                "body": "Yeah. The benefit of good hardware is not wasting time on trivial shit. The downside is allowing lazy behavior to become habit.",
                                "score": 63,
                                "replies": []
                              },
                              {
                                "author": "meltbox",
                                "body": "Except that it works just as well on a local overpowered setup most of the time.\n\nYes I know cloud has advantages. My thesis is that it’s not materially better in probably most cases.",
                                "score": 11,
                                "replies": [
                                  {
                                    "author": "No_Indication_1238",
                                    "body": "Do you wanna be modern and follow the trends or are we going to discuss how most of AI is not AI :D ",
                                    "score": 15,
                                    "replies": [
                                      {
                                        "author": "chicknfly",
                                        "body": "Listen friend, the marketing department already has its budget set for the rest of the fiscal year. We don’t need you correcting them and forcing them to have to justify their budgets for next year, ok?!",
                                        "score": 10,
                                        "replies": []
                                      }
                                    ]
                                  },
                                  {
                                    "author": "AI-Commander",
                                    "body": "Thermal overhead, few understand how much of our real world performance is throttled by the thermal envelope.\n\nCloud makes sense if you need to scale but otherwise you are 100% correct it’s proven slower on an advertised clock for clock basis.  Often as much as a 30% difference in sustained CPU speed.",
                                    "score": 3,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "steampunkdev",
                            "body": "6 weeks 3 engineers 5 days a week for $800 a day would be about $72000 which is approx the amount they now save per year. So first year zero ROI but pays off after.",
                            "score": 43,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "marcmerrillofficial",
                        "body": "Their CTO did!",
                        "score": 10,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "recycled_ideas",
                    "body": "It's so depressing that we're still in a situation where people are running cloud infrastructure the same stupid way they did on prem.",
                    "score": 22,
                    "replies": [
                      {
                        "author": "AI-Commander",
                        "body": "Cloud providers long ago ran out of enterprises requiring truly scalable solutions to drive growth and started pitching to every firm that has no business on the cloud.  So of course they follow the promise of taking their local setup and just uploading it to the magic cloud that solves all problems with a sprinkling of fairy dust and marketing lies.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Winded_14",
                "body": "Yeeah but what about ScAlAbIlItY (ok, scalability is not a great word to ironicize). \n\n\nBrother you're putting the cart before the horse.",
                "score": 135,
                "replies": [
                  {
                    "author": "ryo0ka",
                    "body": "There are two extreme ends. \n\nI’ve seen a client who hosted his business in his home bedroom, because some random IT guy at a bar said that would be the most “reasonable” option.\n\nThey couldn’t properly handle downtimes due to windows updates, home network issues, wife turning the machine off by accident during housekeeping, etc. \n\nSo yeah, I wouldn’t idealize raspberry pi in business context, and there’s a fine middle ground in cloud hosting.",
                    "score": 92,
                    "replies": [
                      {
                        "author": "unique_nullptr",
                        "body": "How big was the business, and how crucial the services hosted?\n\nI ask because that’s honestly probably reasonable for some very small businesses, especially if they’re just barely starting out. It’s not great, and you can colocate a server cheaply enough, but if it’s just a one-man plumbing operation with very little profit or funds for example, then it’s not *that* unreasonable.",
                        "score": 59,
                        "replies": [
                          {
                            "author": "ryo0ka",
                            "body": "Business not big at all, maybe bigger in the future. Regardless, his Wordpress site needed to be online 24/7. \n\nHe consulted with me (funny because I’m just another IT guy he came across randomly) as he was having aforementioned troubles, losing more money than he was saving with the bedroom server.\n\nI basically just copied his stuff over to a cheap VPS and he was happy with the fraction of additional cost.\n\nHis wife liked the idea that the mysterious untouchable object no longer exists in the bedroom. I think his older kid got the laptop but I don’t think he can play Fortnite with that. \n\nI asked for a minimum maintenance fee because I basically do nothing. I can get a free tattoo at his shop too, but unfortunately I’m not into that.",
                            "score": 45,
                            "replies": [
                              {
                                "author": "unique_nullptr",
                                "body": "That definitely makes sense. If it’s just a Wordpress site, I’m almost willing to bet the saved electricity is worth more than the cost of the VM too, lol.",
                                "score": 10,
                                "replies": []
                              },
                              {
                                "author": "FatPoint",
                                "body": "Run Wordpress on the Pi and use an S3 static site plugin and host the public site from that. Will cost literal pennies to run, highly available and the admin part is fine to run on a Pi and go down whenever since he’ll be its only user.",
                                "score": 10,
                                "replies": [
                                  {
                                    "author": "KallistiTMP",
                                    "body": "null",
                                    "score": 8,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "jigarthanda-paal",
                    "body": "&gt; sCaLaBiLiTy",
                    "score": 27,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "I used to work for a client on an Azure VM, it was development work so it was a pretty powerful one. The project is loooong finished but I still get alerts from their IT telling me to delete the VM if I don't use it anymore. But I don't have any credentials anymore, I always tell the product owner but they don't give a fuck. This VM probably costs a few hundred Euros a month, and I doubt that I am the only one. We are talking med tech company with 100k employees here. It's some crazily sloppy shit.",
                "score": 29,
                "replies": [
                  {
                    "author": "zoddrick",
                    "body": "They can put policies in place for that kind of stuff and then reap all the vms are older than a specific date. Azure has had that for a really long time.",
                    "score": 5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "errantghost",
                "body": "I swear Azure is just a money pit ",
                "score": 108,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "It's actually a great tool and getting a server up and running in a couple of clicks is pretty amazing. But the roi is still way too low to justify the costs.",
                    "score": 59,
                    "replies": [
                      {
                        "author": "Glathull",
                        "body": "Bro, if you are clicking shit to set up a server, you are one of the people who is going to get replaced by AI.",
                        "score": 40,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "I am a developer, it will be a loooong time before AI is anywhere near replcing me.",
                            "score": 12,
                            "replies": [
                              {
                                "author": "[deleted]",
                                "body": "For doing some basic boilerplate it's ok if you already know what the LLM is going to do and you don't like typing much. Everything else is just wasted time. Even asking for documentation is gambling because it may write inexistent stuff...",
                                "score": 9,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "aksdb",
                            "body": "So when you start a fresh project you first setup automations before doing the PoC? Certainly possible, but seems weird.\n\nTypically I first evaluate the options manually, then put some simple business logic as PoC in there, and if it gets greenlit that stuff goes into terraform and gets replicated to all environments.",
                            "score": 24,
                            "replies": []
                          },
                          {
                            "author": "meltbox",
                            "body": "The giant irony is AWS and surrounding tooling companies spend billions to develop UIs while claiming it’s all going to get automated by AIs anyways meaning their billions are being spent idiotically. Or maybe they’re just lying.\n\nOh well. I guess we will never know.",
                            "score": 13,
                            "replies": [
                              {
                                "author": "fforw",
                                "body": "I think they're plainly delusional. My experience with AI coding is that it is hit or miss. Either the AI gets what you want and it is all right or it isn't. In any case changing anything about it, extending it in a specific way is next to impossible.\n\nIt's paint-yourself-into-a-corner in a box.",
                                "score": 13,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "recycled_ideas",
                    "body": "The cloud is fine if you design and architect your app for it. If you run your apps in the cloud the same way you ran them on prem it's going to cost you a fortune. \n\nThere are exceptions, if your app is running at the same load all the time, the cloud is kind of pointless, but generally if you know what you're doing it's not too bad. \n\nYou pay a premium compared to a colocate, but in exchange you don't have to worry about licensing, upgrades, backups, redundancy etc. Pricing is pretty competitive. \n\nUnless you buy a VM you don't need because VMs are the only way you know how to work.",
                    "score": 33,
                    "replies": [
                      {
                        "author": "CaptainCapitol",
                        "body": "we use several apps, where vendor claims its a cloud app, but what they mean, is they can run it on a VM in the cloud... thats not a cloud app. licencing is also bound to the number of CPU's it insane how expensive it is, but management doesnt care, because \"its what weve always used\".. yes, but now its costing you 8 times as much",
                        "score": 3,
                        "replies": [
                          {
                            "author": "recycled_ideas",
                            "body": "Yeah, running always on VMs in the cloud is not particularly cost effective. You have to pay all the maintenance costs associated with the VM and dedicated compute is the most expensive thing in the cloud.\n\nIt can still be worth it if it's an exception and the rest of your infrastructure is properly cloud native, but that's only because setting up a once off colocate or on prem server with everything else in the cloud isn't worth it.\n\nIt's kind of sad though. 99 times out of 100 when someone complains about how expensive the cloud is they've bought some gigantic honking VM to run something that could be an app service that is active three hours a day.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "quentech",
                    "body": "Depends on what you're running and if you set it up decently.\n\nLifting and shifting a ton of VM's doing much ado about nothing is going to suck.\n\nBut for example I run a B2B data service that serves billions of requests and hundreds of terabytes of egress a month. Basic stuff. Steady load. Web apps, SQL, blob storage, Redis, messaging. Roughly $10k/month Azure spend.\n\nWe would save money colocating our own hardware but with a bunch of added risk and administrative technical work. The money saved would be a substantial portion of the total, but in the context of the business's revenue it's hardly an amount to be very concerned about.\n\nRenting managed servers wouldn't even save much money and would come with plenty of admin work as well.",
                    "score": 13,
                    "replies": []
                  },
                  {
                    "author": "jbergens",
                    "body": "Just like AWS and GCP.",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "kooshipuff",
                "body": "I see you've met my previous employer.\n\nThey would stand up an Azure Windows VM, an Azure SQL instance, a blob storage account, and probably a bunch of other infra ... for *each organization*.\n\nTheir cloud tenancy strategy was, to really put a fine point on it, to replicate their *entire* cloud footprint per customer. And like, yeah, it was dumb, and they *knew* it was dumb, and they kept saying how they needed to do something about it, but they wouldn't because the whole org was dysfunctional.\n\nAll the software was developed to run on-premises, and operations (which was totally cut off from engineering except where we found ways to build rapport individually) was given the edict to start running it in Azure, while the skeleton crew on the engineering side had a mile-long feature backlog full of our own edicts to follow.\n\nOne of the last things I did there was write up a 4-phase plan to get the spending under control, each phase of which would cut costs dramatically (the first of which operations could have done entirely on their own, in the UI, and reduced cloud spend by *40%*, which was likely hundreds of thousands a year by that point.)\n\nThey eventually fired pretty much everyone I knew there, but from what I've heard from people who were still there, they never implemented that or any other plan *and* are getting gutted by a private equity firm because they're not profitable enough.",
                "score": 15,
                "replies": [
                  {
                    "author": "dryroast",
                    "body": "My company got bought by private equity and while we do nothing in the cloud (government contracting) man does the rest of the story sound scary similar...",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "aksdb",
                    "body": "There are two advantages in this kind of multi tenancy:\n\n1. You can determine precisly which customer cost you how much (on the ops site).\n\n2. Customer could even own their ressource groups, bringing some legal advantage.\n\nBut downside for 1 is the increased price and for 2 the either complicated or only-via-manual maintenance of customer installations.\n\nIt can certainly be worth it (large enterprise customers or state actors), but it also can be horribly inefficient (small customers).",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Worth_Trust_3825",
                "body": "&gt; \"You could run all this on 4 rasberry pis and 1 1g Ethernet trunk....\"\n\nDo you really think their unoptimized garbage node application that makes 16 circular network requests could run on 4 rpis?",
                "score": 8,
                "replies": [
                  {
                    "author": "xabrol",
                    "body": "It was a joke, but to answer you seriously, no, absolutely not.",
                    "score": 5,
                    "replies": [
                      {
                        "author": "Worth_Trust_3825",
                        "body": "Well, yes, the exaggeration was obvious. Even with the current application that im working I sometimes ponder whether the entire cloud stack could be run on a single box at all.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "meltbox",
                    "body": "I thought Nodes minimum requirements were an Intel atom processor and 64gb of ram or more.\n\nSo I’m thinking 8 pi’s might work in a cluster?",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 4,
                "replies": [
                  {
                    "author": "xabrol",
                    "body": "For these people, yeah.  But I have seen on premise done right that got moved to the cloud because \"CLOUD!!\"",
                    "score": 4,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "NMe84",
            "body": "I'm absolutely not worried I'll lose my job to AI. In order to turn requirements into software with the use of AI, the requirements have to be static and abundantly clear. None of which has _ever_ happened in my professional career of nearly twenty years.",
            "score": 91,
            "replies": [
              {
                "author": "reginalduk",
                "body": "AI is going to kill us all after 3 weeks working with my clients. It'll decide the best solution for project creep is thermonuclear war.",
                "score": 34,
                "replies": [
                  {
                    "author": "NMe84",
                    "body": "Let's be honest, that's probably a totally reasonable response too.",
                    "score": 17,
                    "replies": [
                      {
                        "author": "reginalduk",
                        "body": "It has crossed my mind once or twice, yeh.",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "RockleyBob",
                "body": "&gt;I'm absolutely not worried I'll lose my job to AI\n\nI keep seeing this and even though we ultimately agree that the threat AI poses is overhyped, I think it misses the concern some have.\n\nI am pretty sure AI will not be doing my job anytime soon either. My work requires solutions to novel problems, many of which occur at the interfaces between systems. There is a lot of context to understand and there are no google-able answers. \n\nHowever, just because AI isn't going to be a one-to-one replacement for me does not mean I am safe. Every \"highly skilled\" industry is a pyramid. At the top are the elite few. They're the lawyers arguing before the Supreme Court, the doctors curing cancer, or the developer at Microsoft who notices SSH logins are taking a half second longer and stops a global cyberattack. On the bottom are the people doing more repetitive work. They're not necessarily less intelligent and their work isn't necessarily less important, but for whatever reason they're doing more monotonous tasks that require less creativity. There are many more people at the base of the pyramid than at the top.\n\nIf AI replaces even a small fraction of the workers at the bottom or automates their workload essentially overnight, that will mean a lot of new entrants to the workforce all vying for fewer open positions. That will absolutely put downward pressure on everyone's salaries, whether or not our skills are still in demand. Not to mention that corporate executives are going to turn every department and every problem into a nail once they get hold of an AI hammer. Even if they eventually come to realize that it has limitations, it won't be until after a painful and disruptive period of high unemployment.",
                "score": 35,
                "replies": [
                  {
                    "author": "mdatwood",
                    "body": "The one unknown is will companies replace people with AI or just grow the requirements given the increased productivity. So far at least, every productivity boost for programmers (and increases in developers) has been absorbed by companies wanting to do more. Software is eating the world and still appears endless. \n\nHumans have a knack for using every resource available to get ahead. A company that can plug AI into it's existing workforce and make their product better/faster will do that, and will continue to do so until we reach some steady state in software - if that ever happens.",
                    "score": 8,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "RunninADorito",
            "body": "Matt Garman is a product manager, not an engineer. He literally has no clue about software development.",
            "score": 172,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[removed]",
                "score": 95,
                "replies": [
                  {
                    "author": "RockleyBob",
                    "body": "&gt; he'll likely get replaced by AI first\n\nYup. We have a bunch of eVanGelisTs at our company always posting the latest AI blog spam hype in Teams. Just your everyday, average, overpaid middle manager types desperately clinging to any shred of relevance since our IT departments went 100% remote. \n\nTo me it reeks of “enemy collaborator”. They’re the snakes who rat out the resistance to the invaders and talk about how great things are going to be under the new regime only to be the first against the wall when they’re no longer useful.",
                    "score": 24,
                    "replies": []
                  },
                  {
                    "author": "RunninADorito",
                    "body": "It's ok, Peter DeSantis is the real CEO of AWS. That dude is awesome.",
                    "score": 7,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "BufferUnderpants",
            "body": "And companies will readily rationalize it by saying that it wasn't part of their core business model anyway.",
            "score": 63,
            "replies": []
          },
          {
            "author": "ImOutWanderingAround",
            "body": "Alternative point is that they have hit an AI plateau and want this overblown hype to continue.",
            "score": 66,
            "replies": [
              {
                "author": "meltbox",
                "body": "This is probably what has happened, but seeing as how a good portion of programmers don’t seem to see that, I’m certain this statement comes from a place of astounding stupidity and not strategy.",
                "score": 18,
                "replies": []
              }
            ]
          },
          {
            "author": "Electrical_Ingenuity",
            "body": "I just want to buy 50 computers and say, “ChatGPT,  make me a clone of AWS! I expect 50 installers and a one page sheet describing how to set it up.”",
            "score": 31,
            "replies": [
              {
                "author": "Kinglink",
                "body": "God damn it, get this man a Manager's position s... no, I think he's Vice President material.",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "NuclearVII",
            "body": "/thread",
            "score": 87,
            "replies": []
          },
          {
            "author": "Ginn_and_Juice",
            "body": "Any company that has competent leads outside the ones you mentioned that are worth their salt will not move 100% to AI, AI feeds of code, and code produced with AI is shit, that code goes directly back to the AI through git and it now has a worse codebase to generate, it as good as it is now, and any try to use it will give a dev ten times more work to debug the shitty code that they're generating, not worth it.",
            "score": 31,
            "replies": [
              {
                "author": "errantghost",
                "body": "This is verified too",
                "score": 11,
                "replies": []
              }
            ]
          },
          {
            "author": "moreVCAs",
            "body": "Very well put. What’s more disturbing is that they’re using “leaks” to do this. So fuckin’ slimy",
            "score": 29,
            "replies": []
          },
          {
            "author": "versaceblues",
            "body": "Also pay attention to what the person was actually saying rather than reading the headline.\n\nIt was an informal Q&amp;A where people leadership sat down with engineers. He was proposing a future, where IF AI is sufficsufficientient enough coding become a commodity and coders are working on much higher level problems. No where did he imply that everyone would get fired in favor of fully auto systems.",
            "score": 19,
            "replies": [
              {
                "author": "turbospeedsc",
                "body": "I been part of those you will focus on higher level stuff meetings, usually means people get fired in the following months.\n\n\n\nAs a personal anecdote, long time ago I was part of a big , old entity that had shit loads of information in lots of ways, physical, xls, csv, old databases.\n\n\nThe team i was with got everything in a SQL database.\n\n\n\nWhile we were building the system one of the big wigs came to our department,  asked for some info outside of the normal reports, we did a quick SQL query and gave him the results.\n\n\n\nWe became wizards in 2 minutes, suddenly we were at all the important meetings,  got bonuses,  promotions,  budget, perks and lots of power within the organization.\n\n\n\nWhile we were riding the gravy train, one of the guys on the team hated going to those meetings and made a tool so the big wigs could easily get the info they wanted themselves.\n\n\n\nHis rationale was that we could focus on bigger things if we weren't wasting time on the big wigs meetings.\n\n\nThe day he presented the tool the guys from legal looked at us like wtf are you doing idiots!\n\n\n\n\nIn less than a month no longer went to meetings, bonuses and perks stopped, budget went down and we got downsized in less than 6 months.\n\n\n\nLesson dont automate yourself.",
                "score": 16,
                "replies": [
                  {
                    "author": "meltbox",
                    "body": "Businesses love when you automate away the work, they’re just too fucking stupid to let you keep doing it.\n\nThe big wigs appear to often be the thing that the company is succeeding in spite of, not because of. It’s wild really.",
                    "score": 10,
                    "replies": [
                      {
                        "author": "turbospeedsc",
                        "body": "My personal lesson, is dont automate away your connection to power.\n\n\nBig wigs will always exist( unless AI replaces them), the close you are to the source of power the better conditions you will get.\n\n\nIn our case this guy cut our connection to big wigs, that ironically was allowing us to take bigger problems and have an input in the business decisions.\n\n\nA guy of legal later told me that we fucked up doing that, instead of making ourselves indispensable, we gave up our big boy seat willingly.\n\n\nSince then, whenever i have to automate stuff, i make sure we are kept in the loop somewhere.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "blind_disparity",
            "body": "Yes, exactly. The only people worth listening to are devs actually working with a tool, or scientists publishing papers or research in peer reviewed, reputable journals.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Jocis",
            "body": "Once those developers build their AI, the AI will build the new AI",
            "score": 8,
            "replies": []
          }
        ]
      },
      {
        "author": "CVisionIsMyJam",
        "body": "ai isnt good enough to do your job, but its just good enough to convince your boss it can",
        "score": 705,
        "replies": [
          {
            "author": "mckjerral",
            "body": "I work at a software company. Our CEO has been convinced by his CEO friends that tools like copilot should deliver a 20:1 productivity improvement. \nLots of people close but not close enough to development seem to think similar. Fortunately even our board know that it's nonsense",
            "score": 203,
            "replies": [
              {
                "author": "errantghost",
                "body": "20:1!!  Is he high??",
                "score": 94,
                "replies": [
                  {
                    "author": "b0w3n",
                    "body": "Shit it's not even 1:1.\n\nMight be close to 1:1 or even sometimes 2:1 at producing similar code that you'd get from a whole offshored team in a coding sweatshop out of somewhere like bangalore, kolkata, or hangzhou though.",
                    "score": 86,
                    "replies": [
                      {
                        "author": "HINDBRAIN",
                        "body": "It's useful if you're an absolute beginner at a language and have no guidance. It does bullshit a lot, so it's good to have some generic experience to catch that, but I found it superior to google or stack overflow for basic stuff. Stack overflow often just not answering complicated questions, and google having a lot of chaff.\n\nThat said, if you have any experience it is way worse than reading the docs/source of the problem yourself.",
                        "score": 46,
                        "replies": [
                          {
                            "author": "A_True_Pirate_Prince",
                            "body": "Agreed. My favourite thing about it is just offloading the \"grunt\" work of coding. Once it sees what I'm trying to do it can quickly generate the structure of what I want but fuck up the insides real bad.",
                            "score": 7,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 31,
                        "replies": [
                          {
                            "author": "meltbox",
                            "body": "If wager it’s partially AI tools but also delivery pressure.\n\nI swear every place seems to be both firing and understaffed and has record backlog sizes.\n\nIt makes no sense.",
                            "score": 24,
                            "replies": []
                          },
                          {
                            "author": "mckjerral",
                            "body": "That problem will obviously only get worse as it continues to get trained on the bad code it created itself.",
                            "score": 5,
                            "replies": [
                              {
                                "author": "NineThreeFour1",
                                "body": "It also gets trained on my regular bad code!",
                                "score": 4,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "jimjkelly",
                        "body": "I think it’s 10-15%. Seriously. I equate it with somebody using an IDE really well. \n\nWe are pushing it hard and I’m seeing no substantial difference in people’s productivity.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "meltbox",
                    "body": "Skipped right past the 10x programmer.\n\nIt’s not even a meme at this point.",
                    "score": 10,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "moratnz",
            "body": "There we see the actual industry threatened by AI; the Bullshit As A Service chunk of the consulting industry (operating model; weasel your way into an org, while charging so much that it's politically impossible for the people who brought you in to admit that you suck, as that'd mean they were rubes who got duped).",
            "score": 48,
            "replies": [
              {
                "author": "meltbox",
                "body": "This is precisely how it works and it drives me insane that the people who get duped somehow evade detection as rubes usually indefinitely.\n\nHowever stupid they are their management is truly rebar through the head levels of brain damaged.",
                "score": 16,
                "replies": [
                  {
                    "author": "moratnz",
                    "body": "It's turtles all the way down; the people who appointed the rubes can't come down on them for being idiots for fear of branding themselves as the exec that appoints morons. \n\nWhich means there's a narrow window after anew CEO is appointed where this sort of dumb shit can be dealt with, but that's about it ?and the CEO needs to be aware of the issue while all the rubes are dancing their hearts out to keep the CEO's attention anywhere else.",
                    "score": 14,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "bitspace",
        "body": "And we can stop walking as soon as we grow wings.",
        "score": 175,
        "replies": [
          {
            "author": "SurgioClemente",
            "body": "[If my Grandmother had wheels she would have been a bike](https://www.youtube.com/watch?v=A-RfHC91Ewc)",
            "score": 31,
            "replies": []
          }
        ]
      },
      {
        "author": "visualdescript",
        "body": "The hardest thing about software is not writing it, that's easy, it's about correctly understanding the problem and context around it that you're trying to solve. Often that means understanding the humans involved, what their desires are, what they need.\n\nThis is not an easy thing to solve with AI.",
        "score": 158,
        "replies": [
          {
            "author": "ensoniq2k",
            "body": "My former boss always told me \"coding is more than hacking keys\". The essence of software development isn't putting out code, it's understanding the problem.",
            "score": 24,
            "replies": []
          },
          {
            "author": "Pepito_Pepito",
            "body": "I'm happiest when I'm writing code because it means the hard part is over.",
            "score": 19,
            "replies": []
          },
          {
            "author": "kramsllag",
            "body": "Isn't that what he was saying? That authoring the code is not the important part?",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "AutomateAway",
        "body": "ahahahahahahaha…\n\nsigned,\nevery dev forced to use AI to help them write code today",
        "score": 172,
        "replies": [
          {
            "author": "[deleted]",
            "body": "He doesn’t even realize we are likely already near the top of the S curve with this stuff. I remember when ChatGPT made its public debut almost 2 years ago so many people waving off its problems with the “it’s getting exponentially better!” excuse. 2 years later and it’s a little better, not a lot, and in some cases even sliding backwards. Unless this dude is privy to some sort of super secret AWS advancement we don’t know about I’d say the era of exponential growth, the kind of growth we would need to get where this guy says we will be in 2 years, is over.",
            "score": 92,
            "replies": [
              {
                "author": "Mephiz",
                "body": "AWS is trying to sell us Claude usage currently. If they have anything super secret it’s like the best kept secret ever.",
                "score": 32,
                "replies": [
                  {
                    "author": "ericl666",
                    "body": "Their CodeWhisperer stuff isn't as good as Copilot. And Copilot isn't that good.",
                    "score": 23,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "rco8786",
        "body": "As a 15 year software engineering veteran who constantly tries to use AI to help me with my job...\n\nHe is incorrect.",
        "score": 968,
        "replies": [
          {
            "author": "EliSka93",
            "body": "He is so incorrect that he should lose his job.\n\nNot because it's an awful thing to say, although it is, but because nobody who has this little understanding of technology should be in such a high position in a software company.",
            "score": 470,
            "replies": [
              {
                "author": "ChromaticDragon",
                "body": "This right here.\n\nIt is understandable, yet lamentable, that as you walk up the management chain you often get those who have less and less deep understanding of intricate technical issues.  Furthermore, it's also common that the higher you go the greater folk are so wrapped up in the marketing propaganda that they believe it too much.\n\nBut this would appear to be very disturbing.  To the point, I wouldn't be surprised Amazon's stock takes a hit immediately.\n\nFar too many companies depend upon AWS.  I'd be a tad less comfortable about such dependence given nonsense like this.  It implies that AWS is likely going to degrade in quality as their management chases such fancies.",
                "score": 123,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "AI demos in particular are often custom tuned, if not downright fabricated, to appeal to the audience that doesn’t understand the technology. Makes it look *way* more capable than it actually is.",
                    "score": 65,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "Maybe he could be replaced with AI",
                "score": 19,
                "replies": []
              },
              {
                "author": "absentmindedjwc",
                "body": "He absolutely knows its bullshit.  He's saying it because companies following this advice now suddenly have need for amazon services.",
                "score": 10,
                "replies": []
              },
              {
                "author": "Crafty_Independence",
                "body": "In fact, AI is on a far better trajectory to replace \"jobs\" like his than to replace engineers of any type",
                "score": 12,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 24,
                "replies": []
              },
              {
                "author": "broshrugged",
                "body": "Whatever do you mean?!?! HE \"built\" EC2! Just read his bio.\n\n/s",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "matatat",
            "body": "I've found it helpful on occasion, but for small tasks. Most of the time it gets things entirely wrong or not at all what I was asking for despite being very specific to my needs. Sometimes it makes things that I can rework a little bit to be helpful.\n\nMostly it's been helpful for filling out unit tests (which, for Copilot at least, seems to mostly base on previously written unit tests, which might not be related)",
            "score": 29,
            "replies": [
              {
                "author": "errantghost",
                "body": "I'm such a dork that I love TDD and writing tests.  I know, I know, I'll see myself out",
                "score": 6,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "I find ChatGPT somewhat helpful as a better search engine when my actual googling skills fail me. Usually it's when I'm working in an unfamiliar domain or tech stack. It's pretty good at providing pointers to the truth even if it's not always correct by itself.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "stillusegoto",
            "body": "I have to agree. I’ve actually fallen into a bad habit of spending more time going back and forth with chat gpt trying to get it to correctly write shell scripts for me than I would’ve if I just wrote it myself.",
            "score": 8,
            "replies": []
          },
          {
            "author": "CoreyTheGeek",
            "body": "Exactly this. It only highlights how inept most business leadership is. Just nepotism/cronyism and then they wonder why they're so inefficient and losing money.",
            "score": 4,
            "replies": []
          },
          {
            "author": "sopunny",
            "body": "The title is written ambiguously. It really means \"developers will stop coding (as) soon as AI takes over\", not \"developers will stop coding soon, as AI takes over\". In short, it's a tautology. He elaborates by saying this will happen \"in 24 months, or later\" ie, it'll happen when it happens",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Occam's Razor says they leaked the recording to excite investors and re-instill waning trust that they will develop a competitive AI solution. The sentiment in the headline is absurd, and I find it's inexperienced developers that tend to promulgate it (i.e. the kinds of developers who think the entire field can be distilled down into \"Googling stuff\", which is such a tired joke that when told belies the massive rift between skilled engineers and dime-a-dozen React Andys and GitHub influencers).\n\nSaying AI will replace software engineers is like saying airplanes are going to drive birds extinct because they fly faster.",
        "score": 64,
        "replies": [
          {
            "author": "red75prime",
            "body": "I'm not ready to scavenge for stray seeds though. Really, it's a very strange analogy. Birds were never used for aerial transportation and they do not compete with airplanes.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "skwyckl",
        "body": "Coding is like 10% of a senior dev responsibilities, so even though they stop doing it, it doesn't mean you can run a company on your own with just an LLM prompt.",
        "score": 130,
        "replies": [
          {
            "author": "maria_la_guerta",
            "body": "Although I think this sub generally downplays the affect AI has and will have, I tend to agree with this. I'm a Staff dev, and I haven't finished a PR in weeks.\n\nWriting the code isn't the hard part as you get more senior, especially in a world where hardware is so incredibly cheap and there's increasing diminishing returns on holding back product value just to write hyper efficient code. The real challenge becomes aligning product excellence with technical excellence, which is so contextual that I don't see AI mastering that the same way that it can reliably generate me test suites that are ~60% passable.",
            "score": 51,
            "replies": []
          },
          {
            "author": "Kinglink",
            "body": "Which is exactly what he's saying.  Seriously, did anyone read the damn article?",
            "score": 11,
            "replies": [
              {
                "author": "frozenbobo",
                "body": "Congrats, you are the first other person I've seen who read the article. \n\nYou are correct, he's literally saying that even if developers no longer needed to write code, they would still be needed to translate unclear business requirements to application logic.",
                "score": 11,
                "replies": [
                  {
                    "author": "mckirkus",
                    "body": "But at that point aren't you a business analyst or product manager and not a developer?",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "plartoo",
        "body": "How many lines of code (or serious/production-quality software products) did this guy write (build) in his career for me to take his words seriously? My wager based on what the title says here is probably meager/trivial.",
        "score": 36,
        "replies": [
          {
            "author": "yawaramin",
            "body": "My money is he wrote zero lines of code.",
            "score": 20,
            "replies": [
              {
                "author": "happyscrappy",
                "body": "I'm guessing he wrote a negative number of lines of code of value.\n\nThat is to say, when a hack writes bad code that doesn't work and then you send in a good programmer to \"fix it\" the diff often comes back removing hundreds of lines of code if not more and indeed fixes the problems.\n\nFrequently it feels like the worst programmer isn't one who gets stuck and can't write the code, but someone who just copies and pastes in voluminous lines of code from example code, vendor code or stack overflow.\n\nAnd don't forget, all that example code is what LLMs that are \"going to replace you\" were trained on!",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "PreferenceDowntown37",
            "body": "He's a product manager apparently, so you would be right",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "RagingAnemone",
        "body": "The nice part is if AI can define and execute business processes enough to replace developers, it can also replace almost all of middle management.",
        "score": 57,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "When co-pilot becomes more than a semi-smart autocomplete, I might be concerned. Until then, I think we're good",
        "score": 50,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 9,
            "replies": [
              {
                "author": "[deleted]",
                "body": "&gt; We could end up with fewer juniors \n\nI can imagine the alternate scenario too.  I've heard a few people say they've quit using copilot because they could feel it making them rustier and out of practice.  The work we can expect out of a junior and their average career skill development might actually be diminished.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "bananahead",
            "body": "That would require a different fundamental technology. LLM *is* semi-smart autocomplete technology.",
            "score": 13,
            "replies": []
          },
          {
            "author": "DanishWeddingCookie",
            "body": "Most of the things I use AI for is boilerplate/template code. Sometimes it'll be smart enough to answer a question like, \"why am i getting this error\", but usually it's just a word for word copy from a stack overflow article somewhere.",
            "score": 3,
            "replies": []
          },
          {
            "author": "jjolla888",
            "body": "replacing code with 'description of what you want' is a fool's gold. the latter is also coding. \n\nand in any case, once you try to eliminate ambiguity in your instructions, you'll end up with something closely resembling traditional code. i remember years ago my boss wanted requirements spec'd in pseudocode .. and everytime i tried to be precise i realised what i was writing was high-level Perl.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "Yourdataisunclean",
        "body": "[https://ludic.mataroa.blog/blog/i-will-fucking-piledrive-you-if-you-mention-ai-again/](https://ludic.mataroa.blog/blog/i-will-fucking-piledrive-you-if-you-mention-ai-again/)",
        "score": 147,
        "replies": [
          {
            "author": "oglokipierogi",
            "body": "Lool amazing \"try { thisBullshit(); } you are going to catch (theseHands)\"",
            "score": 43,
            "replies": []
          },
          {
            "author": "ericl666",
            "body": "What a great post. Lol. \"Fix. Your. Shit\".",
            "score": 12,
            "replies": []
          },
          {
            "author": "KrocCamen",
            "body": "This is the \"line goes up\" of AI BS. There's not meaningful response to this in favour of AI that can't be shot down with either \"bigger, more effective problems can be solved more efficiently without AI\" and \"the environmental cost isn't worth it\"",
            "score": 6,
            "replies": []
          },
          {
            "author": "meltbox",
            "body": "This guy is awesome",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "adirac",
        "body": "I'm pretty sure AI will be able to take over the Amazon cloud chief job way before it can take over a developers job.",
        "score": 20,
        "replies": []
      },
      {
        "author": "CASchoeps",
        "body": "I once tried using ChatGPT to program me some smarthome code. \n\nThe first attempt looked promising, but I immediately spotted some problems. I told this to the LLM, and it corrected these. Then I found some logical errors, like \"if time &lt; 05:00 AND time &gt; 11:00 then...\". I told this to the LLM, and it corrected these. This repeated several times until the script worked.\n\nThen I realised that I basically was still programming and debugging myself, just with a secretary who did the typing.",
        "score": 12,
        "replies": []
      },
      {
        "author": "wealthypiglet",
        "body": "Isn’t this title a tautology? It’s basically saying that AI will take over coding when AI takes over coding. ",
        "score": 8,
        "replies": []
      },
      {
        "author": "Spiritual-Matters",
        "body": "AI can’t even say how many Rs in strawberry",
        "score": 9,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[removed]",
        "score": 10,
        "replies": [
          {
            "author": "gelfin",
            "body": "Yeah, this is the hilarious part. People think they’re going to be able to tell AI to build their grand visions when they can’t even explain what they want to human beings. They want AI because they think the human engineers who have no fucking clue what they are being asked to build are the problem in that situation.",
            "score": 9,
            "replies": []
          }
        ]
      },
      {
        "author": "thisFishSmellsAboutD",
        "body": "The day Amazon Q will give me the first even remotely correct or helpful answer... I will keep laughing. Our jobs are safe. Our tools will get smarter but our jobs are safe.",
        "score": 7,
        "replies": []
      },
      {
        "author": "great_escape_fleur",
        "body": "There's going to be hell to pay when this goes bust and companies want their developers back.",
        "score": 9,
        "replies": []
      },
      {
        "author": "Allrrighty_Thenn",
        "body": "Tech industry left real growth to scams and financial hypes to fund their last days before being declares officially mature and no longer the growth companies that they were.",
        "score": 8,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "lol hell will freeze over if I ever trust an Amazon bean counter.",
        "score": 7,
        "replies": []
      },
      {
        "author": "InfiniteMonorail",
        "body": "For twenty years these assholes kept trying to drive down labor costs by saying there was a developer shortage and \"anyone can code\". Now they fire everyone and say AI will take over.",
        "score": 9,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 15,
        "replies": [
          {
            "author": "eracodes",
            "body": "&gt; Coding is just kind of like the language that we talk to computers. It's not necessarily the skill in and of itself. The skill in and of itself is like, how do I innovate?\n\nThis person is a moron.",
            "score": 17,
            "replies": []
          }
        ]
      },
      {
        "author": "rwilcox",
        "body": "I’ve been trying to figure out how to put architectural principles around AI enough to let my team (in a regulated environment) use AI.\n\nI’ve heard that steroid use only takes you one “level” above what you would have naturally: I can take pills all day and never be as good at basketball as Steph Curry, or soccer as Renaldo or whatever. Best I could hope for - with drugs - is maybe a spot on a D4 college team, maayyybbeee. (I was low-average of ability in pretty much every sport)\n\nI’m starting to think LLMs are the steroids of development: throwing non coders at an LLM just gets you a 1/10 rated developer. (And throwing an AI at a 3/10 developer won’t get you a rockstar either, you’ll just get a maaayyyyybbbe less sucky 4/10 developer.)",
        "score": 7,
        "replies": []
      },
      {
        "author": "eliota1",
        "body": "How many years have we had code generators? You still need people to specify, think through, debug and implement systems that work. AI won't eliminate development, it will automate some portions of it, but people will be needed for a long time to come.",
        "score": 7,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "I had an Amazon director ask me to take on the project of building out an ai coding tool to replace programmers, by myself. This was when I was jobless. I asked what compensation I’d get and he said maybe he’d pay me but it’d mostly be a resume booster.\n\nThese people are delusional. The fact that they’re high in Amazon doesn’t mean as much as you’d think.",
        "score": 6,
        "replies": []
      },
      {
        "author": "joshc22",
        "body": "The CEO is a business weenie. He has no engineering or programing skills what-so-ever. In short, he's as smart as Elon Musk.",
        "score": 7,
        "replies": [
          {
            "author": "Great-Use6686",
            "body": "Elon Musk is not a business weenie. He’s a micromanager",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "FullyStacked92",
        "body": "Reminds me of that meme message where the guy is like \"i just used ai to build a website, you are so cooked. Want to see?\" And the programme replies \"sure\". Then op sends him a localhost link. Lol.",
        "score": 6,
        "replies": []
      },
      {
        "author": "Paratwa",
        "body": "Alternative Title : Amazon Cloud Chief found to be braindead but still talking.",
        "score": 6,
        "replies": []
      },
      {
        "author": "rexspook",
        "body": "If AI ever gets good enough to replace developers I’ll have nothing to worry about because it will have already replaced 60% of corporate jobs and the world will be turmoil",
        "score": 6,
        "replies": []
      },
      {
        "author": "Bilboslappin69",
        "body": "&gt;\"Coding is just kind of like the language that we talk to computers. It's not necessarily the skill in and of itself\"\n\nTell me you've never written a single line of code without telling me you've never written a single line of code.",
        "score": 5,
        "replies": [
          {
            "author": "Dean_Roddey",
            "body": "Golfing is just kind of like the language in which we tell the ball to go into the hole, it's not necessarily the skill in and of itself.",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "Global_Shopping5041",
        "body": "amazon cloud chief preparing their team to prioritze selling AWS services to unsuspecting small business clients",
        "score": 4,
        "replies": []
      },
      {
        "author": "calladus",
        "body": "All my AI generated code has extra fingers in it.",
        "score": 5,
        "replies": []
      },
      {
        "author": "Holzkohlen",
        "body": "The developers are gonna laugh and laugh at this. The delusion is real with people who have zero programming experience.",
        "score": 5,
        "replies": []
      },
      {
        "author": "drvd",
        "body": "Most managers could be replaced by a mail box and a copier machine.",
        "score": 5,
        "replies": []
      },
      {
        "author": "kagato87",
        "body": "People have been saying that for at least 30 years.  Probably longer.\n\nThey're technically not wrong.  It's just...  No closer to reality now than it was when automation was in its infancy.\n\nWhat sets humans apart from machines is understanding.  When machines can understand what they're doing, then we can start to worry.",
        "score": 8,
        "replies": []
      },
      {
        "author": "_nobody_else_",
        "body": "A tale as old as time.",
        "score": 4,
        "replies": []
      },
      {
        "author": "Creative-Drawer2565",
        "body": "To use a calculator, you need to know math.\n\nTo use a spreadsheet you need to know math.\n\nTo use AI to write code, you need to be able to write code.",
        "score": 4,
        "replies": []
      },
      {
        "author": "andymaclean19",
        "body": "Oh God!  Time to start looking for another cloud provider then!",
        "score": 4,
        "replies": []
      },
      {
        "author": "guest271314",
        "body": "Notice how executives never say their own job is in jeodardy of becoming obsolete.",
        "score": 4,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Coding with AI is the equivalent of coaching a second rate co-op student who you have to continuously prompt with additional information to get the job done properly while you could have done it yourself twice as fast with 2x the quality.",
        "score": 11,
        "replies": []
      },
      {
        "author": "OnlyTwoThingsCertain",
        "body": "I believe him. Might be 24 months, or 24000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, but hes right.",
        "score": 8,
        "replies": []
      },
      {
        "author": "cdltrukin",
        "body": "This is dumb given that \"AI\" will still need to be coded to be run. Unless they found the magical recipe for those algorithms to predict outputs at a 0 marginal errors. I think these foos just try to scare developers - especially those that stay in their comfort zone of learning.",
        "score": 3,
        "replies": [
          {
            "author": "txmail",
            "body": "You just need to prompt harder my friend and you can get AI to do all the work for you with zero bugs. \n\n/s",
            "score": 7,
            "replies": []
          }
        ]
      },
      {
        "author": "roman_fyseek",
        "body": "Good luck with any future catastrophes!",
        "score": 3,
        "replies": []
      },
      {
        "author": "thinkingperson",
        "body": "Software engineers have a hard time understanding app requirements and when they do understand it, have a hard time designing it. Then SE or programmers have a harder time writing it.\n\nAnd we are to believe that AI can do everything with natural language input?\n\nGood luck doing close-loop n-case testing.",
        "score": 3,
        "replies": []
      },
      {
        "author": "DanishWeddingCookie",
        "body": "I don't think AI will ever replace coders, but I could see an LLM that is trained on just law and court precedent could eventually replace lawyers. :)",
        "score": 3,
        "replies": []
      },
      {
        "author": "wildjokers",
        "body": "\"During Garman's talk, he told employees to find new ways to incorporate AI into their workflow.\"\n\nThat isn't possible because external LLMs are not allowed and the computer they give me to code on isn't powerful enough (mostly because of GPU) to run any good local models.\n\nThere is a on-prem LLM we can use but we aren't allowed to run any of our code through it either.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Roqjndndj3761",
        "body": "🤣",
        "score": 3,
        "replies": []
      },
      {
        "author": "jucestain",
        "body": "Feel like \"AI\" could more easily replace the cloud chief than the developers.",
        "score": 3,
        "replies": []
      },
      {
        "author": "jregovic",
        "body": "Call me when ChatGPT correctly identifies the number of r’s in “strawberry”",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Same MBA arse holes screaming that block chain would disrupt the world and look where that ended up. Granted AI has a greater practical use, but since the hype train started what has it really disrupted.",
        "score": 3,
        "replies": []
      },
      {
        "author": "realultimatepower",
        "body": "I haven't liked coding for a better part of a decade at this point. If there was a single AI tool that even did 10% of my work I would be using it, but there isn't. GPT-4 isn't any more helpful than a Google search and GitHub Copilot is essentially useless: The suggestions are almost always wrong and when they are right, they are so obvious that 3 strokes and intellisense does the same task but quicker.\n\nI'm sure at some point some system will automate coding but we aren't going to get robot software engineers by fine tuning chat bots. That's just a fantasy.",
        "score": 4,
        "replies": []
      },
      {
        "author": "dethb0y",
        "body": "A management lobotomy case saying something nonsensical to people who know he's full of shit? say it ain't so!",
        "score": 5,
        "replies": []
      },
      {
        "author": "bigtdaddy",
        "body": "I think we will potentially see a bigger overlap in programming and business analyst responsibilities. The tough part of coding is obviously not the typing, but the breaking down of a business problem into terms a computer can understand, and all the edge cases that come with it. I think skilled business analyst are well positioned to be able to interface with an AI agent in a way to produce good results.",
        "score": 2,
        "replies": []
      },
      {
        "author": "tryingtolearn_1234",
        "body": "There is always more code to write.  AI may make some of the more tedious bits of coding easier — boiler plate, etc.   If programmers get more productive with these tools then projects will just have more requirements.",
        "score": 2,
        "replies": []
      },
      {
        "author": "joshc22",
        "body": "I haven't seen AI solve a single problem yet. So I'm not going to hold my breath.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Lame_Johnny",
        "body": "I'm 95% less afraid of AI taking my job than I was a year ago.",
        "score": 2,
        "replies": []
      },
      {
        "author": "See_Bee10",
        "body": "My experience with AI is that it is great for mundane tasks but if it gets something wrong, which it often does, it can't figure out how to fix the problem. I think it can speed up development considerably, but I can't think it will replace software devs. Then again, I'm not a neutral party.",
        "score": 2,
        "replies": []
      },
      {
        "author": "nughtshadow",
        "body": "I deal with a lot of ai stuff and if it ever happens it will be along way off.  They are only mocking intelligence not really coming up with unique and most coder assistants or even the agent developers get it wrong 1/2 the time on anything that is not already been written by someone else",
        "score": 2,
        "replies": []
      },
      {
        "author": "mobius4",
        "body": "He is right. I wonder when we'll have an Artificial Intelligence proper, though.",
        "score": 2,
        "replies": []
      },
      {
        "author": "nikonino",
        "body": "Automation is most effective when repetitive tasks are involved. However, codebases vary widely across companies due to different technologies and the evolution of skills. What could be the common pattern to replace these tasks? It’s concerning to hear a cloud chief at such a large tech company making statements like that.",
        "score": 2,
        "replies": []
      },
      {
        "author": "alonjit",
        "body": "lol. good luck.",
        "score": 2,
        "replies": []
      }
    ]
  },
  {
    "title": "Software Engineer Titles Have (Almost) Lost All Their Meaning",
    "body": "",
    "score": 1030,
    "url": "",
    "created_utc": 1729440327.0,
    "author": "[deleted]",
    "permalink": "/r/programming/comments/1g823xn/software_engineer_titles_have_almost_lost_all/",
    "comments": [
      {
        "author": "seriousnotshirley",
        "body": "The problem I see sometimes is that HR sets pay scales for titles and engineering managers know what they have to pay someone to be competitive on the market; so good engineers who aren’t ready for the title but has the technical chops that the manager wants to keep is promoted so the manager can pay them enough to keep them.",
        "score": 830,
        "replies": [
          {
            "author": "crash41301",
            "body": "This is the real problem.  Being on the other side and trying to keep the employee I've found myself running up against Hr paybands that are behind market trends and result in being forced to promo to keep the employee.  \n\n\n Hr takes too long, and seemingly also kinda tends to want to keep salaries low. Meanwhile the business wants to move increasingly faster.  Result is to get the sr eng talent I need at market rate means calling them staff or higher.  I'd much rather just pay them market rates, especially when that title confuses them and they think they are now responsible for more than a sr eng should be. ",
            "score": 402,
            "replies": [
              {
                "author": "jasonjrr",
                "body": "As someone who has been at the staff+ level for a long time, I’ve witnessed this exact thing, or a slight modification where the company is only willing to hire senior engineers due to some perceived speed advantage they would grant. So you find a mid level engineer who is solid AND teachable (most important) and hire them as senior. They burn themselves out trying to live up to the title when all I want to do is teach them and make them better. \n\nOR you get the mid level engineer you thought was solid, give them that senior title and it goes to their head. Suddenly they are trying to lead from a deficit in experience and it’s bad for the whole team’s morale…",
                "score": 171,
                "replies": [
                  {
                    "author": "Balticataz",
                    "body": "I was on the other side of this. Promoted to senior way before I should have been. I remember asking my manager directly what that means and he told me to just keep doing what I'm doing and if anything needs to be changed they would let me know. Having that kinda open feedback went a long way to me not feeling like I had to over preform in the role.",
                    "score": 89,
                    "replies": [
                      {
                        "author": "jasonjrr",
                        "body": "I’ve definitely explain that sort of thing, but because of the title outside expectations don’t align. Then I’m stuck trying to reset expectations externally and internally. It can be a total mess. I’m glad it worked for you though!",
                        "score": 25,
                        "replies": []
                      },
                      {
                        "author": "[deleted]",
                        "body": "Yeah, it doesn't matter. They don't need a justification to prune you (if you live in the USA that is), since it's an At-Will Country.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "puterTDI",
                    "body": "My issue is the title often comes with zero support or authority.  I spend years as a lead where the product owners had more influence over how I did my job than I did (they’ve since fixed this).  The job description had no explanation for responsibilities (and still doesn’t).  So I’d mostly be forced in to a corner by people who have no idea how to do my job or my teams job then blamed for the failure of the very things they forced me to do.\n\nI’m becoming increasingly convinced that the team lead position is just there so they have someone to blame when their decisions cause failure, because they sure as hell don’t listen to us.",
                    "score": 29,
                    "replies": [
                      {
                        "author": "jasonjrr",
                        "body": "I dealt with this several times and it is INFURIATING!!! Eventually, the next time I changed jobs, I demanded the authority as part of my interview process. I told them what I needed to properly lead as a Staff/Principal Engineer, Tech Lead, whatever. \n\nGuess what? Because I set those expectations before being hired, I was (mostly 😅) given the authority I needed! Now whenever I’m put in a place where I don’t agree or think it’s a bad idea, I get it in writing. Then I can point back and say, “look, I didn’t want to do this, you did.” This has changed so much for me. I’m willing to say no, or at least that I can have the team do it, but I disagree and here’s my email saying so, and explaining why (very important to explain why).\n\nLastly, back up everything you say with evidence. Articles, blogs, podcasts, tech docs, well-regarded repos, whatever. This will give your arguments more weight.",
                        "score": 12,
                        "replies": [
                          {
                            "author": "puterTDI",
                            "body": "The main problem I have is people really get impatient with detailed conversations.  It’s like they want to talk about it until that involves listening to your explanations for why you’re saying what you’re saying, but at the same time they dismiss what’s being said because you’ve not explained.\n\nThey’re especially a fan of doing this with things like agile principles.  They’ll make a (false) claim about agile and why you need to just do what they say, then when you try to explain the actual principles behind it they get frustrated and say you’re just stuck on the details and ideals and they don’t want to talk about it.  When it comes to the technical they just say that you can’t talk too technical but at the same time you need to do what they say even though they just told you they don’t understand the topic and don’t want it explained.\n\nBasically, they’re _really_ good at avoiding any discussion that would involve actual justification and explanation.",
                            "score": 13,
                            "replies": [
                              {
                                "author": "jasonjrr",
                                "body": "First, you don’t have to explain the why entirely, send them the articles or whatever else. Paper trails are great when stuff goes sideways because you can point to your message/email history to back you up. If they chose not to read your reasoning, that’s on them. \n\nSecond, it sounds like you have a serious culture problem. Perhaps your engineering leadership and the other stakeholders’ leadership needs to have a sit down and reset on expectations and responsibilities. Nip this garbage in the bud. \n\nIf leadership won’t help and you can make headway on your own, try getting a few more senior people together from the different stakeholder groups that are like minded and approach leadership together. This has worked well in the past and shows a desire for better cross-functional collaboration. Do it even if one group chooses to stay out. \n\nAt one company, product was always going to my engineers (I was the senior manager of mobile engineering) and asking them to do this or that for them. Sometimes these were huge tasks that dramatically affected the code base. I learned of this behavior a few weeks after starting, because the priorities I had set with the team weren’t getting finished. \n\nSo I went to the new VP of Product (she started around the same time as me) and we came up with a process to handle competing priorities. I held a weekly meeting with the product and mobile teams where we set priorities for the coming sprints. If you didn’t attend (or didn’t send someone in your stead), your work didn’t get prioritized. The VP was behind this fully. \n\nGuess what? The product people who showed up were happy and understood when we would get to their work. The ones that didn’t were super pissed that they were “being ignored” and “that there was no way they were going to another meeting”. And when they went to the VP to complain, I be you can guess what she told them.",
                                "score": 5,
                                "replies": [
                                  {
                                    "author": "puterTDI",
                                    "body": "We’ve actually been making headway on the issue and it’s in part because I’ve gotten together with two other leads and we’ve been going to leadership together.\n\nPart of the challenge is I was a lead on my own, then they promoted the other lead but he flat out refused to be a lead (he accepted the title but won’t do the job).  They since promoted one other (and I’m working on a promotion for another whom I’m mentoring and is awesome).  Those two new leads very much are leads (and imo are better than me because they don’t have the years of history) and we’ve been making headway by working together.  There’s been some great progress recently but I’m still struggling with the lingering frustration.",
                                    "score": 4,
                                    "replies": [
                                      {
                                        "author": "jasonjrr",
                                        "body": "That’s great news! Keep at it and expand your circle. The more people (especially from different stakeholders), the better!\n\nIf you had seen no change then you should be annoyed so take heart in the progress and if it continues that frustration will diminish in time.",
                                        "score": 2,
                                        "replies": [
                                          {
                                            "author": "puterTDI",
                                            "body": "Thank you for the advice and encouragement :)",
                                            "score": 2,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 3,
                    "replies": [
                      {
                        "author": "jasonjrr",
                        "body": "Sure, they should, and there was a time when I was much younger that I didn’t care about titles at all. Then I grew in my role and started interacting much more with other people inside the company and sometimes people outside as well. Those people rely on titles to understand who you are and what they can expect from you. And how much influence you may have. \n\nNow, I believe accurate titles are important, because they help set OTHER people’s expectations.",
                        "score": 6,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "ballsohaahd",
                "body": "In theory a company’s pay is always behind market trends, or intended to be kept there, otherwise they’re paying more money than they need.\n\nNot every company can physically pay ‘at or above market’ but literally every single company says that.",
                "score": 8,
                "replies": []
              },
              {
                "author": "LisaDziuba",
                "body": "&gt; Hr paybands that are behind market trends and result in being forced to promo to keep the employee.\n\nThat's why so many engineers would find another job sooner than they could get a promotion from their own company.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Stokealona",
            "body": "Seen this in action myself - I was against it and was told they could \"grow into the role\". In hindsight it was the right decision, keeping good people motivated and paid fairly.",
            "score": 25,
            "replies": []
          },
          {
            "author": "ungoogleable",
            "body": "The companies all subscribe to salary comparison databases where they ignore titles and use standard numbers. Whatever they say your title is, somewhere in their system you are recorded as an Individual Contributor Level 4 or whatever. The levels roughly correspond to job duties but realistically it's just how much money you might get from another company so the company knows if their offer is competitive.",
            "score": 15,
            "replies": [
              {
                "author": "seriousnotshirley",
                "body": "I know companies use these services; and they decide where in the competitive pay scale they want to be. You can pick the types of companies you want to compete with or what percentile of salaries you want to be in. The problem is that HR is disconnected from the requirements of the work. They look at titles like \"Software Engineer\" when in reality there are many different skillsets you might want to hire against. A front end developer is a different pay scale than a backend developer than a full stack developer than a systems software engineer than a K8s software engineer and so on. \n\nIf you're building a really well defined set of software with a limited scope it's not so bad, but if you have a broad technology portfolio then you develop some real problems matching pay to skillsets for the more expensive skill sets; and the companies that have those broad technology scopes are the ones hiring a lot of engineers and those are driving the title inflation.",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "Salamok",
            "body": "Also you have the money chasing grinders who seem to think a few years of intense targeted studying to check off all the boxes makes them a sr full stack developer.",
            "score": 14,
            "replies": [
              {
                "author": "stikko",
                "body": "Just need to go get certified and then they’re good right?",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "nuggins",
            "body": "Exactly this happened to me. I promoted someone earlier than the job description prescribed because it was the only way to retain them, and their contributions were well worth the money. What I was not anticipating was the intrateam competitiveness -- this promotion ended up causing resentment among my team, particularly among those who had this same title, simply because they viewed this person as not being ready for the title. We were all learning, and this person did actually grow into the role, but the resentment never seemed to go away.",
            "score": 13,
            "replies": [
              {
                "author": "MoreRopePlease",
                "body": "When someone on another team (that team works with my team) was promoted to a title they clearly were not performing at, it caused me to lose respect for their manager.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "And the other way around, consultancy places that set rates for people based on their title. The fresh from school people start out at senior so they can ask the customers for more money, the pay scale is as if the title was junior.\n\nTitles were never standardised anyway, or anything close it. There is huge variety in work culture over the whole developed world and job titles are a tiny part of it.",
            "score": 18,
            "replies": []
          },
          {
            "author": "DualActiveBridgeLLC",
            "body": "Yup.  Our team had really low compensation compared to a sister team.  I looked into it and discovered that the other team had higher compensation because they were hiring externally (gotta pay higher to kepp up with the market compared to people who stayed in the position), and to do that they would come in with really high titles to justify their pay.  It was so weird when we had joint projects and I (SWE Level 2) would be telling a SWE Level 4 how to do his job even though we had the same number of years of industry experience.\n\nTo compensate we literally had to hire someone external even though there was a better internal candidate.  But sure enough it worked.  Playing the game is so infuriating.",
            "score": 7,
            "replies": []
          },
          {
            "author": "aksdb",
            "body": "Sometimes (depending on the culture), it also _is_ about titles. The employee needs it to improve their CV and/or feel recognized.",
            "score": 5,
            "replies": []
          },
          {
            "author": "jeenajeena",
            "body": "I agree.\nAlready the fact we are using the term “engineer” instead of “developer” sais it all, I believe.",
            "score": 26,
            "replies": [
              {
                "author": "nemec",
                "body": "We're not PEs and don't pretend to be. I don't see the problem.",
                "score": 12,
                "replies": [
                  {
                    "author": "BIGSTANKDICKDADDY",
                    "body": "&gt;and don't pretend to be\n\nWhat other reason could there be to transition from \"Software Developer\" to \"Software Engineer\" if not to borrow the prestige of an engineering title without the rigor, standards, or discipline?",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Efficient-Poem-4186",
                "body": "This. 'Engineer' should describe education rather than being a job title (full disclosure: developer but not an engineer).",
                "score": 4,
                "replies": []
              },
              {
                "author": "seriousnotshirley",
                "body": "I’ve met a few people I would call software engineers but the vast majority of programmers I’ve met shouldn’t qualify. As a group we (developers) should be advocating for stricter standards in our own industry but we seem to be allergic to collective action (at least in the US). If we had practice closer to actual engineers I think we would have better results. \n\nThere’s a problem that it would accelerate jobs offshoring however we could address this by having different liability standards along with an organization like UL for insuring against those liability claims. That org could set standards that would apply regardless of where the software is developed.",
                "score": 17,
                "replies": []
              },
              {
                "author": "hardware2win",
                "body": "In my country there is an engineering degree in cs (informatics), so for those grads it is ok",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "LeCrushinator",
            "body": "I see this all the time, I have almost 20 years of experience and we just hired someone with 5 years experience into a “lead staff engineer”, which is a higher position than mine, I’m a “senior engineer”. I could program this person under the table, he’s not a bad programmer but he’s just past junior level and got to skip past senior level entirely. They did this because his last job called him a “senior” and they wanted him to accept the role. Not sure why they went this route though, there are plenty of programmers looking for jobs right now.",
            "score": 2,
            "replies": []
          },
          {
            "author": "Lebrewski__",
            "body": "If I want to look for a job as Analyst Programer, it is listed under Software Engineer.   \nThe job description is exactly the same. and so are the salaries. Analyst Programer is getting scrubbed off most job site. If you search for programer, you get CNC operator job.  \n  \nSo now you have SE getting AP pay and nobody can say anything because the market is flooded by the school system who are banking on selling education by promising dream career. On the other end, that dream is used to exploit and underpay the clueless new generation replacing the retiring vet.   \n  \nOh, you want the title and some fancy business card? Sure, those are business expense, but your salary stay the same, Ok? You better be ok because the other guy behind is nodding at me that he's ok with it.",
            "score": 2,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "Within a job title salaries can vary by $100k a year. Titles are meaningless",
            "score": 2,
            "replies": [
              {
                "author": "seriousnotshirley",
                "body": "Often the salary won't extend that much at a single company. Until recently my company had much more narrow pay bands, especially through Senior titles. At the same time going into Senior, Principal or Staff titles the engineers are expected to perform different duties where you're taking on more of a leadership role within your group or within the company. \n\nThese sorts of titles used to have a ton of meaning and took years to attain. A senior took at least 5 years but often 7 or 8; principal titles took 15+ years to attain. Each of those levels required not only technical skill and experience but leadership, mentorship, added design and architecture duties and so on. \n\nNow I have engineers with two or three years experience expecting senior titles simply because they are really good at the job they have but without having developed those extra skills; and they expect it not simply because they are entitled but because they are looking at their peers and their job opportunities and they can go elsewhere and get it. \n\nHell, the number of chiefs we have at our company is out of control; given you'd expect only one.",
                "score": 2,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "I got an email once that was meant for someone else with the same name who was a hiring manager that listen salary ranges for titles and one was like $75k to $175.  And the different  had a huge degree of overlap in salaries .",
                    "score": 3,
                    "replies": [
                      {
                        "author": "seriousnotshirley",
                        "body": "It really depends on the company and their HR philosophy. We recently expanded ours so we don't have to inflate titles and now they have those kinds of ranges but before then they absolutely did not. \n\nSide note: I've heard that companies which operate in jurisdictions which require salary transparency in job postings to have higher ranges. I'm not sure what the logic is there but it's something I've observed.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "jetsonian",
            "body": "This coupled with the culture of no raises. Management or HR thinks employees do one amount/quality of work the entire time they hold a specific title, so they don’t deserve an increase in pay. \n\nI was a professional developer for 2.5 years before I was promoted to SE3. It wasn’t because I was ready, it was because my bosses knew I was gonna go somewhere else if I didn’t get paid more and this was the only way. My promotion made like 3 other good developers leave because I got the only SE3 spot available. So my company lost a lot of talent by holding on to me. It’s cool we’ll go through this again in a couple years when our junior developers reach the wall and leave for more money.",
            "score": 1,
            "replies": []
          },
          {
            "author": "MrOddBawl",
            "body": "This is the exact thing that has happened to me. I am the senior analyst at my company. But I'm also the only one sooo either it's a comment on how old I am or pay band issue.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "IanisVasilev",
        "body": "We used to work with another (larger) company, where half of the people I have interacted with were vice presidents doing run-of-the-mill work.",
        "score": 185,
        "replies": [
          {
            "author": "fridofrido",
            "body": "yeah in finance everybody and their mother is a \"vice president\" lol\n\naccording to wikipedia, a VP (in finance) is:\n\n&gt; junior non-management positions with four to 10 years of experience",
            "score": 113,
            "replies": [
              {
                "author": "redditreader1972",
                "body": "I was told by a vice president (i.e. sr. software engineer) that it's about finance and company rules. You have to be a VP to do &lt;insert long list of mundane stuff here&gt;. Everyone thinks it's stupid, but plays along with it.",
                "score": 31,
                "replies": [
                  {
                    "author": "thabc",
                    "body": "I wish they would inflate my title to VP. I was asked to travel to the India office so I reviewed the travel policy. VP+ can book the lie-flat seats. I'm going to be wasted when I get there after 20 hours in my lowly upright seat.",
                    "score": 18,
                    "replies": [
                      {
                        "author": "jedberg",
                        "body": "The worst companies are the ones that set T&amp;E rules based on title.\n\nMy favorite travel policy:  Anything over 6 hours can be booked as business/1st (cheapest of whichever is available).  If you can take a redeye business/1st and skip a hotel day/not take a travel day, then do that.\n\n\nIt didn't matter what your title was, this applied across the board.",
                        "score": 17,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "pheonixblade9",
            "body": "that's basically any finance company. it's because only VPs can \"act as officers of the company\" to grant loans, sign stuff, etc.\n\nThe *real* movers and shakers are directors, in general.",
            "score": 30,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 9,
            "replies": [
              {
                "author": "vntru",
                "body": "Hey, Paul! 🪓",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "daedalus_structure",
            "body": "This was almost certainly a banking institution, where even the janitors are the \"VP of sanitation\".",
            "score": 11,
            "replies": []
          },
          {
            "author": "OdeeSS",
            "body": "Oh I know which company this is.\n\n\nWe can't even trust half of our \"VP Software Engineers\" to write a unit test.",
            "score": 19,
            "replies": []
          },
          {
            "author": "topherhead",
            "body": "My official title is \"Senior Manager, Software and Engineering, Sr.\"\n\nI am not a manager.",
            "score": 2,
            "replies": [
              {
                "author": "qervem",
                "body": "are you in software and/or engineering?",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "yes_u_suckk",
            "body": "A few years ago there was this bank in Brazil that came with the \"genius\" idea to make everyone in their IT department a CTO...\n\nSo they had CTO of Testing, CTO of web development, CTO junior of iOS development, etc. It was the dumbest thing I have ever seen.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "TA_DR",
        "body": "Title inflation isn't the problem, but the result of a really unhealthy, trend-seeking job market.\n\n\nAt the end of the day ~~its another day over~~ being a senior engineer is the only way to receive a fair compesation for our work. This shouldn't be the case.",
        "score": 274,
        "replies": [
          {
            "author": "DestroyedByLSD25",
            "body": "Adding senior to my current job title on my resume when applying for new jobs made the processes a lot easier (I get less challenging interviews, I guess they assume I know things) and also made it easier to negotiate pay. It's the way it is.",
            "score": 77,
            "replies": [
              {
                "author": "KINGodfather",
                "body": "Dude...this can't be real...\n\nSome of my recent technical interviews have been a nightmare because they make the most obtuse questions about something no one gives a rat's ass for a mid position...\n\nGuess I need to adopt this strategy",
                "score": 34,
                "replies": [
                  {
                    "author": "AlanBarber",
                    "body": "Hate to be that guy, but if you're sitting in an interview they start throwing you stupid pinhead gotcha questions, call them out and ask them to explain the relevance of the question to your expected day to day work for the position. \n\nAre you going to throw the interview, yup, but we as an industry need call out the BS games. \n\nI do a couple technical interviews a month for my company. Every question I ask is relevant to the actual work you will do, no stupid question about how many elephants fit in a bus, no demanding someone whiteboard a qucksort algo, etc",
                    "score": 37,
                    "replies": [
                      {
                        "author": "KINGodfather",
                        "body": "I've actually talked with a colleague about this BS lately and I came to the conclusion that, apart from small exercises that usually takes some days and that show your way of thinking, use of standards, thought process, \"why use this function instead of any other\", etc., I will purposely get a zero as a way of showing how stupid they are. Not a bad grade, but a big fat zero.\n\nHad a situation happen two times before, where the exercises or interviews are leet code shenanigans, some way of achieving the perfect algorithm, almost philosophical even. Had to study to remember less used concepts or specific definitions of things, so I was fully prepared. Then I got the job and the code is so chaotic, so full of pasta, I almost thought I was a cook for an Italian restaurant. So full of no standards, no patterns, no reason to what was done besides \"it needs to work\".",
                        "score": 11,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "cheezballs",
                "body": "Senior Interviews should be much more in depth IMO",
                "score": 9,
                "replies": [
                  {
                    "author": "CodeNCats",
                    "body": "Yes. But not a whiteboard \"dance code monkey dance\" interview. It should be in depth questions about their recent employment experience. How they discuss their previous projects and planning. A senior should be able to do the code. Yet why you are looking for a senior developer is really not because of the code. It's the ability to write good code. Develope and better the standards for good code. Take pull requests seriously. Not just for getting the task done but understanding the full roadmap and making sure that PR is moving towards that path. It takes the ability to speak up in meetings. Creating tasks to delegate to more junior developers. Then knowing the skills of those developers and who would be better at different tasks. \n\nI'm not some super coder. I'd argue that a team of mid engineers could match the result of a team of senior engineers on some one-off coding project. Extend that timeframe over 2 years with an evolving code base and requirements the senior engineers all day.",
                    "score": 16,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Solonotix",
        "body": "I agree with the problem, but I don't think the solution is as easy as \"don't do it\". It's kind of like saying you shouldn't need to lock your doors in a safe neighborhood. Knowing all it takes is for one bad actor to ruin it for everyone inevitably means everyone is going to safeguard against it.\n\nTitle inflation is just that. To stay relevant in the ecosystem, you need to follow the trend, no matter how nonsensical it may become. You may see islands of stability develop, but it'll never return to the simplicity of yesteryear.",
        "score": 36,
        "replies": []
      },
      {
        "author": "shoot_your_eye_out",
        "body": "Don’t get me started. No, someone is not a “senior software developer” two years out of a CS degree. They’re profoundly inexperienced.",
        "score": 225,
        "replies": [
          {
            "author": "daedalus_structure",
            "body": "Senior just means they can leave you alone and they won't return to find you chewing on the power cables.",
            "score": 86,
            "replies": [
              {
                "author": "JonDowd762",
                "body": "I think that's actually a valuable distinction. If you want titles to reflect capabilities then maybe you should differentiate between \"stumbling around like a newborn deer\" and \"somewhat competent\". Maybe there's a better term for the first promotion, but the solution advocated by many title inflation complainers \"Thou shall not be promoteth til thou hath one score years of experience\" is pretty absurd. Reaching the terminal level after two years is silly and so is waiting 10+ years for the first title change.",
                "score": 18,
                "replies": [
                  {
                    "author": "hoopaholik91",
                    "body": "That's why you have a junior level. Juniors chew on power cables, mid-levels should be competent, seniors should lead teams.",
                    "score": 14,
                    "replies": [
                      {
                        "author": "JonDowd762",
                        "body": "Works for me. I think generally the companies people complain about don't have the junior level so senior becomes mid-level.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "drgmaster909",
                "body": "but they taste so yummy and spicyyyy",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "tav_stuff",
            "body": "Likewise you are not a senior developer after 10 years of work. I have worked with far too many ‘seniors’ that had all the work experience but had less skills than the guys I had as classmates in university, and it’s really frustrating to be surrounded by such incompetence.\n\nWe need to start giving these titles based on skill and merit instead of work experience.",
            "score": 121,
            "replies": [
              {
                "author": "jasonjrr",
                "body": "Yeah, years of experience != skill level. This always has been and always will be true. \n\nI remember early in my career being intimidated because I had to interview someone who had more than 20 years of experience. Turned out they knew almost nothing and it totally changed my perspective as an interviewer.",
                "score": 32,
                "replies": []
              },
              {
                "author": "Kaitaan",
                "body": "I think work experience in this field is necessary but not sufficient. There’s so much stuff you can only pick up by seeing and doing.",
                "score": 49,
                "replies": [
                  {
                    "author": "BasicDesignAdvice",
                    "body": "You need to pick up by seeing and doing but each domain can be wildly different, yet everyone has one of two titles, developer or engineer. Ten years of experience between two people can look totally and completely different depending on what they worked on.\n\nWhat I really need is an SRE. My company doesn't even recognize this title so we are hiring \"senior software engineer\" and HR keeps giving me candidates that don't have the experience I need because they think we are all cookie cutters and so the same thing. I write the job description but they go through the applicants and the disconnect is infuriating.",
                    "score": 12,
                    "replies": [
                      {
                        "author": "Kaitaan",
                        "body": "Source your own candidates? You could complain about it, or you could dedicate some time to finding candidates yourself and send them over to your recruiting department and say “here are 5 candidates whose experience is in line with what I’m looking for.”\n\nETA: don’t just write the job description; write a candidate spec. Sir down with recruiting and say “I’m looking for these technologies, or experience solving these kinds of problems.” Make it clear what’s a need, what’s a want, and what’s a nice-to-have, and what the tradeoffs are.",
                        "score": 7,
                        "replies": [
                          {
                            "author": "hoopaholik91",
                            "body": "&gt; Source your own candidates?\n\nSo now we gotta do HR's job for them?",
                            "score": 3,
                            "replies": [
                              {
                                "author": "Kaitaan",
                                "body": "No. Help them get better. Give them examples. Help them understand WHY those are good candidates. Or keep wasting your time and complaining. You do you.",
                                "score": 3,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "billie_parker",
                "body": "Agreed, but then you run into the major issue in the industry: management cannot gauge merit.",
                "score": 7,
                "replies": []
              },
              {
                "author": "absentmindedjwc",
                "body": "IMO, senior means that you can give someone a task and trust that they'll get it done correctly without any kind of supervision or hand-holding.\n\nIt's the one reason I'm incredibly annoyed that someone was given a lead title on my team when he was damn-near fresh out of college, and is *constantly* bugging me for help whenever he hits a snag.  Motherfucker, look it up and figure shit out on your own... if its something super novel, then sure, I don't see an issue with asking for advice... but I'm just asking you to implement simple fucking web functionality.\n\nIts disgusting how high this dude's title is, and how incapable he is to finish even the most basic of tasks before giving up and seeking help after hitting even the tiniest of snags.",
                "score": 4,
                "replies": [
                  {
                    "author": "tav_stuff",
                    "body": "Your first paragraph is getting there, but to me a senior means more than just ‘getting a task done’. To me a senior is someone that actually knows how to program, and by this I mean:\n\n1. When tasked they know how to actually build a system (most modern programmers know how to add on to existing systems they maintain but get completely lost when starting from scratch)\n2. They posses working knowledge of the tools and technologies they use (the senior in my team with 15+ years work experience doesn’t know how to migrate from Python3.9 to 3.10; that is not a senior in my eyes).\n3. They actually understand how to write maintainable and efficient software based on real world experience instead of simply copying whatever bullshit they read on medium.com about ‘clean code’ or ‘DRY’ or whatever. Solving tasks is not as helpful as it could be if your code is hot garbage. (It’s the fault of ‘senior developers’ that most of our systems are spaghetti with 10+ levels of inheritance and other nonsense, because they wrote this shit at the beginning)",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "eikenberry",
                "body": "Skill = experience \\* talent. You need both.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Bakoro",
            "body": "&gt;No, someone is not a “senior software developer” two years out of a CS degree. They’re profoundly inexperienced.    \n     \nThis is garbage nonsense when you consider the wildly diverse labor market.   \nWe've got people who have been developing software since they were 12 years old, who have more experience by time they finish high school than most boot campers and many college grads have. We also have people graduating with degrees who have never actually developed a single thing of merit, because they mostly cheated their way through school.    \nWe've got people who are just wildly talented and hard working, and pick up a dozen new skills in just a few years, where at the same time, people who have been working in the industry for a decade have not gained any meaningful skills because they've never had a reason to push themselves, usually because they are adequate to their position and never had a job which demanded more of them.   \n    \nI think about my personal experience where two years after starting my first software engineering job after graduating with a Computer Engineering degree, I had been put in charge of a whole product line, and had three internal pieces of software to my name. I just happened to be perfectly suited to the work, not just in the software development side, but also to project management. If I had gone to a different company and worked on a different kind of project, then I wouldn't have progressed nearly as fast.     \nJust in terms of results, I did the job of a senior developer, and likely higher than that. Working software was released, revenue was made, clients were happy, and I can guarantee you that you have been personally impacted by my work, however indirectly.   \nIf I had gone to work at Amazon, then I likely would been a middle tier nobody in the same amount of time.    \n     \nThis is the largest problem in hiring across the whole industry: it's somewhere between difficult and impossible to know if a particular person is suitable for a specific position, and it's incredibly difficult to get an accurate assessment of their functional ability.   \nThe amount of years a person has been working often has very limited influence on how good they are. So many people hit a wall in their personal progression, and the job market has been such that they can job hop forward and look like they're more than they are. And again, some people have a heck of a lot of experience outside college/employment which just doesn't get any weight during hiring.    \n      \nSomeone can be perfectly capable in one area, and totally suck on another, but everything gets globbed together under \"software development\".  \nIt's a very difficult issue in hiring.",
            "score": 23,
            "replies": [
              {
                "author": "shoot_your_eye_out",
                "body": "&gt;We've got people who have been developing software since they were 12 years old, who have more experience by time they finish high school than most boot campers and many college grads have.\n\nI am one of those people. I disagree.\n\nIt's a different thing entirely to architect a major backend that scales to tens of thousands of requests per minute, processes petabytes of data, has major compliance or regulatory requirements, requires five nines of uptime, etc. Or to really, truly have to come up with novel solutions to extremely hard problems. Or to understand how best to grapple with \"legacy\" code, or how to safely refactor a codebase, how to release code reliably and safely, and probably a few dozen other skills I think I've picked up over the years.\n\nSomeone a few years out of a CS degree or bootcamp is rarely going to have a solid grasp on any of this.\n\nYou're sort of saying someone who's repaired their lawnmower as a teenager and maybe worked on a few cars is suddenly, obviously qualified to be an aerospace mechanic.\n\n&gt;This is garbage nonsense\n\nIt is not.\n\nI think you make good points and I never said it was a simple issue. But *generally speaking*, no: somebody is not a \"senior\" engineer two years out of college. They generally lack *experience*, even if they're otherwise a strong developer.\n\nedit: I've been a developer professionally for over two decades now. Coding for three. Comp Sci degree, top of my class. Currently a \"senior staff\" engineer, whatever that means.",
                "score": 34,
                "replies": [
                  {
                    "author": "JonDowd762",
                    "body": "Also one of those people and this is spot on. Experience is work experience, not time on keyboard. If your teenage experience is working at an actual company it may count for something. But writing some hobby apps is not the same thing. It may make you a better programmer, but there's much more to a career in software engineering.",
                    "score": 6,
                    "replies": []
                  }
                ]
              },
              {
                "author": "BasicDesignAdvice",
                "body": "&gt; We've got people who have been developing software since they were 12 years old\n\nI've met plenty of these people who are atrocious programmers but since \"they have been doing it since they were 12\" they think they have some special magic. I've known programmers who didn't start until they were 30 become among the best engineers I've ever seen.",
                "score": 32,
                "replies": [
                  {
                    "author": "ICanHazTehCookie",
                    "body": "Seems to me like you're both arguing the same point: it's impossible to assess ability by YoE alone",
                    "score": 24,
                    "replies": []
                  },
                  {
                    "author": "shoot_your_eye_out",
                    "body": "Some of the most lamentable code I've had to deal with is from precisely this type of developer: young, inexperienced developers who are extremely fluent but not very pragmatic.",
                    "score": 7,
                    "replies": []
                  }
                ]
              },
              {
                "author": "BIGSTANKDICKDADDY",
                "body": "I'd add that the issue isn't necessarily whether someone can hit the ground running and build functional or successful software, but whether they have the working experience to lean on in their decision making throughout the process. You don't know what you don't know and with only a few years of experience there is a functional limit to how much you *can* know. A wunderkind junior is still a junior.",
                "score": 3,
                "replies": []
              },
              {
                "author": "cheezballs",
                "body": "Honestly disagree with this. You can do all the dev you want but until you work on a professional work environment with code reviews, various code coverage metrics to hit, design docs to write, etc - you habent experienced what real dev is.",
                "score": 3,
                "replies": []
              },
              {
                "author": "absentmindedjwc",
                "body": "I've been dicking around with programming since I was in school in the 90's.  Had some shitheaded kid start on my team a year or so ago that was for some reason given a senior title fresh out of college acting like he was hot shit, but didn't know how to work with a simple fucking array of data.\n\nI called him out (privately) on his inability to work independently - something that is absolutely a requirement of a senior-level engineer.  I put it in a fairly polite \"mentoring\" email where I gave him advice on ways to improve and things to study up on to help him in his career.... something that is - you know - expected of me as a DE at a very large company... and the fuck-head complained to HR about it.\n\nI fucking hate it... he wasn't the only \"senior\"-level idiot hired on to my team - a decision unilaterally made by an idiot manager that decided to handle all interviews herself, and not have technical interviews conducted.  It really bugs the shit out of me... it took me *fucking years* to get a senior title.. and these guys were just handed one for nothing - and instead of doing everything in their power to at least *try* and look competent... they just quarter-ass their job so that they're going to have fuck-all to show for it when they eventually get shit-canned.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Sarke1",
            "body": "You will use my formal title: Señor Software Developer.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Pharisaeus",
        "body": "While I agree that titles lost the meaning, I also disagree with:\n\n&gt; Consider implementing a system similar to those used by larger tech companies, where levels (like L3, L4, L5) provide a more nuanced view of seniority without resorting to title inflation.\n\nIt changes absolutely nothing. You're just using different labels, nothing more. It's the same as using Principal, Staff, Senior Principal or Senior Staff as titles above a Senior. L3, L4, L5 - they also mean absolutely nothing. They are subject to the same \"inflation\".\n\nNot to mention that none of those are comparable between companies. There are companies where you can be a \"Senior Software Engineer\" with 3 years of experience, while in another company at 3 yoe you move from \"Graduate\" to \"Junior\".",
        "score": 41,
        "replies": []
      },
      {
        "author": "ExternalGrade",
        "body": "This is why levels.fyi or Glassdoor exists and why big name companies is attractive.",
        "score": 17,
        "replies": []
      },
      {
        "author": "ckwalsh",
        "body": "My work lets me set me own title, so long as it's not misleading, and keeps my role as a \"Software Engineer\" separate.\n\nSometimes it causes problems: It was a little awkward to explain why I was the \"Chief Lizard Wrangling Officer\" on my employment verification letter to the mortgage broker",
        "score": 14,
        "replies": []
      },
      {
        "author": "pwndawg27",
        "body": "It’s all fun &amp; games till some sociology major in HR gets involved and tightly couples title to pay. We need a solid mid level tier and those guys need time to grow into their skin, but then some cheap bastard accounting consultant decided not to bump their pay commiserate with the market and rent, forced them to move to HCOL cities for some hair-brained RTO mandate and set up a system that encourages people to inflate their accomplishments to vye for a senior title in order to just stay afloat. \n\nWe also get wrapped around the axel over this idea that a senior is somehow faster at churning stuff out than a junior or mid when the real cause of the slowness is your rushed together codebase because some VC stuck a cattle prod up your ass and told you to go faster despite how we all know that ain’t how it works. In the first 6 months a mid level and a senior are barely distinguishable in terms of productivity.\n\nAlso can we stop saying silly shit like “oh she’s senior so she gets the leetcode hard and he’s mid so we’ll ask two leetcode easies”. Level and experience does not mean you just answer harder leetcode questions. Level and experience means you have more war stories so you should focus on explaining what the engineering org is trying to accomplish and see if they’ve seen that shit before or better yet, led that shit before. If we keep over rotating on algorithms especially for mid+ we’re going to spend a long time being unproductive at best and hire incompetent jackasses who’s only technical skills involve solving puzzles that a theoretical PM has given perfect specifications for.",
        "score": 13,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "That’s how you end up with companies where every promotion announcement is accompanied by a bunch of “I thought you already were a level 3” messages. To keep salaries down they don’t promote anyone who isn’t doing 102% of the next title up.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "creepy_doll",
        "body": "Titles are kinda stupid. One of the famous early software shops (I think it was bell labs?) just had the title “member of technical staff” for everyone. That was pretty cool and avoided these stupid distractions and dick waving.",
        "score": 24,
        "replies": [
          {
            "author": "jedberg",
            "body": "Until you try to change jobs.  Netflix also had this (everyone was just Senior Software Engineer).  Which was great, until you went to get another job\n\nThey made you a Senior (or at best Staff) because \"you can't go from Senior to Principal\" even though most people there were operating at a Principal level already.  It took a long time for the industry to catch on, and then that's why Netflix started getting titles.",
            "score": 17,
            "replies": []
          }
        ]
      },
      {
        "author": "forrestthewoods",
        "body": "&gt; Remember when being a “Senior Software Engineer” actually meant something?\n\nNo, I do not. I’ve been doing this for almost 20 years and “senior” was always a title earned in &lt;5 years. It’s never been all that lofty.",
        "score": 48,
        "replies": [
          {
            "author": "BenOfTomorrow",
            "body": "If you look at his LinkedIn, you can see that the author of the blog post apparently was a Senior Engineer with only 3 years experience.",
            "score": 16,
            "replies": [
              {
                "author": "sysop073",
                "body": "15 seconds into the article I was like \"this screams senior engineer who's mad other people are also senior engineers\"",
                "score": 3,
                "replies": []
              },
              {
                "author": "UpwardFall",
                "body": "That’s actually hilarious and re-contextualizes this article to be the author grappling with younger folk matching up to his skill level and blaming titles.\n\nRealizing there are those with less experience than you who are younger, but are getting paid more and/or are just plain smarter than you is a humbling experience that everyone must grapple with at some point. \n\nAge does not equal skill, but it brings experience which can factor into one aspect of skill.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "captain_kenobi",
            "body": "I got some serious blinders vibes. Author thinks they remember a reality where things were better, but it was never the way they think it was. Reminds me of when people talk about \"a simpler time before everyone stared at a screen and actually talked to people\" but the reality was everyone had their nose in a newspaper.\n\nI think the real title here is \"I realized job titles are arbitrary to the company setting them and I wish we had a universal standard\"",
            "score": 19,
            "replies": [
              {
                "author": "forrestthewoods",
                "body": "TBH I don't actually disagree with the sentiment that \"Senior does not mean particularly experienced\". I've always thought it super weird that someone with 4 years experience would be considered \"senior\". I just don't think senior used to mean more.\n\nWhat has changed is that the amount of experience on teams is waaay larger. I joined the games industry in 2007. Around that time the average time someone spent in games was like 5 years. There were almost no devs in their 40s. People burned out fast and changed fields.\n\nOver the past 20 years the number of software engineers has **exploded**, and people are now staying in the field \"for life\". I feel like the generation ahead of me was the first significant \"lifer\" gen. When I joined my current team I was \\~35 and one of the youngest, least experienced!\n\nSo yeah, things didn't used to be better, but in 2024 \"senior\" is honestly pretty junior.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "KagakuNinja",
            "body": "I concur, and I've been working 35 years. There is nothing special about the words \"senior\" or \"engineer\".",
            "score": 9,
            "replies": []
          },
          {
            "author": "Daishiman",
            "body": "Same here. Likewise services companies billing juniors at higher skill levels than they have has been a thing since forever.",
            "score": 2,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "CraZy_TiGreX",
        "body": "I ignore everyone who pulls their title as if it means being right or something.",
        "score": 15,
        "replies": [
          {
            "author": "sysop073",
            "body": "Favorite place I've worked so far, they decided to print us business cards because we were going to job fairs and needed something to hand out, and everyone had to go look up our job titles to put on the cards because nobody remembered what they were.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "BornAgainBlue",
        "body": "All I know is,  I was a programmer, and suddenly I was called a \"software engineer\". No engineering degree... ",
        "score": 77,
        "replies": [
          {
            "author": "wavefunctionp",
            "body": "Engineering predates engineering degrees. Software engineering is as different from civil engineering is as different from chemical engineering is as different from electrical engineering, etc. \n\nOur discipline is far too recent to have codified standards and the stakes for most software are no where near as high or permanent. \n\nThis website wouldn’t exist if it had to coded to the standards of the space shuttle flight computers. Hell. The web wouldn’t even exist.\n\nThe things that we can codify we already build standards for. You can use a oauth compatible solution for login for instance. Or use an https server for secure communication. Use a database to safely store data. We don’t have a much of a need for degrees when we can write code that encapsulates that expertise.",
            "score": 75,
            "replies": []
          },
          {
            "author": "tommcdo",
            "body": "Canada actually has regulations about this: You can't have a title with \"Engineer\" without an Engineering degree. \n\nI'm a Canadian living near the US border. When I worked in the US, I was a Software Engineer. Now working in Canada (for the same company), I'm a Software Developer.\n\nFrom what I've seen, most software companies in Canada just don't use the title \"Software Engineer\", because although there are some people with Computer Engineering degrees, the more common degree is Computer Science, usually falling under Bachelor of Science or Bachelor of Mathematics.",
            "score": 25,
            "replies": [
              {
                "author": "syklemil",
                "body": "&gt; Canada actually has regulations about this: You can't have a title with \"Engineer\" without an Engineering degree. \n\nThere is something similar in Norway, where [_sivilingeniør_](https://en.wikipedia.org/wiki/Sivilingeni%C3%B8r) is a protected title. Lots of us think it translates as \"civil engineer\" but it really translates as \"certified engineer\". Anyone can call themselves engineer, but to be a sivilingeniør there are education requirements (more or less MSc, or cand. scient. if you're old).\n\nThat said, most people who study IT get a degree in informatics, and then get called a variety of job titles that I suspect nobody really cares about: To people outside IT we just say we work in IT, and to people inside IT we say what we actually work with. The job title is just something that exists in an HR system somewhere and is only relevant for those kinds of discussions.",
                "score": 11,
                "replies": []
              },
              {
                "author": "DustinBrett",
                "body": "Am in Canada at Microsoft and we have many \"Software Engineer\"'s without degrees.",
                "score": 20,
                "replies": [
                  {
                    "author": "VomitC0ffin",
                    "body": "Microsoft (and other large companies) openly violate EGBC's  guidance on this in BC. Given the increasing enforcement of the provisions of the Professional Governance Act (legislation passed several years ago that gives EGBC the mandate to enforce this), I'm interested in seeing if that changes.",
                    "score": 5,
                    "replies": [
                      {
                        "author": "The_GreatSasuke",
                        "body": "My understanding is that EGBC only really cares when local companies do this. Which is why HootSuite had to switch to using the title \"Software Developer\". As to how Mobify and D-Wave have been able to use \"engineer\" without EGBC lowering the boom on them, who knows...",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Plamo",
                "body": "To my knowledge, Canada does not have federal regulations about this. It comes down to provincial regulations. Alberta and Ontario in particular have strong regulations around the protected use of the Engineer title (i.e., you must be a professional engineer to use it). In BC that's not the case (or at least, wasn't until recently. There's recent case law that might change this). In BC the only protected titles are Professional Engineer and Engineer in Training. Engineer itself is not protected.\n\nCurrent BC law on protected engineering titles:\nhttps://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/14_2021#section4\n\nCase law from earlier this year that may protect engineer as a title:\nhttps://www.egbc.ca/News/Articles/Court-Ruling-Confirms-Title-Protection-Over-Engine",
                "score": 6,
                "replies": [
                  {
                    "author": "krum",
                    "body": "According to that law you cite \"Engineer\" is not protected.  Only these 3 are:\n\n(a) \"professional engineer\";\n\n(b) \"professional licensee engineering\";\n\n(c) \"engineer in training\".",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "dnbxna",
                "body": "I believe anyone who creates a runtime, programming language or game engine, for which other software can be built, is worthy of the software engineer title.",
                "score": 3,
                "replies": []
              },
              {
                "author": "Plank_With_A_Nail_In",
                "body": "This is only for certain professions, I can find many photocopier engineer jobs advertised in Canada right now.\n\nLol, no idea why people make up nonsense like this when its so easy to check its bullshit.\n\nhttps://www.glassdoor.ca/Job/software-engineer-jobs-SRCH_KO0,17.htm\n\nLiterally thousands of Software engineer jobs advertised none of them asking for Engineering degrees. \n\n&gt; From what I've seen\n\nLiterally zero research done...jesus reddit.\n\nAs far as I can tell Software engineering at uni is just a CS degree where you have to do a module on project management and version control...that's literally all the difference is lol.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "And a developer, and a consultant, I've even been a researcher. \n\nThe work has always been programming.\n\nSadly I missed out on the era when \"Webmaster\" commanded the respect it should.",
            "score": 7,
            "replies": []
          },
          {
            "author": "Jarmahent",
            "body": "Yep. I feel horrible calling myself an engineer(because it’s my job title) knowing how long people go to school for this, while I did no school.",
            "score": 1,
            "replies": []
          },
          {
            "author": "TistelTech",
            "body": "when I did CS (many moons ago) I had a PhD professor who had worked at Los Alamos. He did nuclear explosion simulations on a Cray super computer (Cray invented what is now called a graphics card). He said programmers should never call themselves \"engineers\" because when an engineer says: \"that bridge is highly unlikely to fall down\" they can be quite confident that it is true because the the ground soil is a known type, the materials of the bridge are tried and true, the concrete type's properties are known and the design has been used before X times etc.\n\nWith large scale software, its so much more complicated and there are so many unknowns and foreign dependencies (FOSS rapid changes, API, DB), stupid \"just get it going quickly\" mentalities etc that you can never be confident it won't fall down. I am still surprised it's as reliable as it is.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Caraes_Naur",
        "body": "Just like version numbers.",
        "score": 13,
        "replies": [
          {
            "author": "ggtsu_00",
            "body": "Just use the year as a version number. Though it might seem backwards from your traditional date based versioning scheme since older dates mean more senior. i.e. \"Software Engineer 2004\" vs \"Software Engineer 2022\".",
            "score": 12,
            "replies": [
              {
                "author": "JonDowd762",
                "body": "Mm Software Engineer 2004 was a good year. You get those subtle notes of Perl and ASP from their formative years, but none of the bubble bursting turbulence and resulting bitterness of something like a '98. Pairs well with a meal from Emeril Live or Martha Stewart Living.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "heavy-minium",
            "body": "Just a fun thing to note: I once worked in a company where they introduced a standard career development path for engineers. Initially they wanted to do something like \"Software Engineer v1\", \"Software Engineer v2\" and \"Software Engineer v3\" before you ever get to be \"Senior Enginer v1\".\n\nAfter my feedback that this would feel like a scam to engineers, they changed this to only \"Software Engineer I\", Software Engineer II\" and \"Senior Software Engineer I\" and so forth...\n\nSo they basically just removed a level and used roman numbers instead of \"versions\" (whoever came up with that, lol). When I pressed on the matter again so that they understood that is still kind of scammy, I was told that they need at least that many levels to properly negotiate salaries...And then they introduced this under the pretext that the engineers have been asking for clearer career paths, and everyone believed that and was happy, thinking that they now have a clear plan for their career development. A few years later (I'm not there anymore), ex-colleagues complain about being stuck at their level and salaries without any opportunities to advance.",
            "score": 2,
            "replies": [
              {
                "author": "Kalium",
                "body": "I've repeatedly seen management and HR fuck up on this one. Having a chain of titles to advance into is a nice first step. Having no clear criteria to get there and management that doesn't consider that a problem will lead to people leaving.",
                "score": 10,
                "replies": []
              },
              {
                "author": "iiiinthecomputer",
                "body": "I've seen that practice work really well - salary banding, levels, etc.\n\nBut it does need to come with regular pay band adjustments for inflation especially in competitive fields, just like anything else.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "dgz01",
        "body": "It is wrong to say titles have lost all meaning; it is more appropriate to state they're treated as royal titles of nobility by clueless HR personnel. Titles do not, and have never meant anything to engineers worth their salt.\n\nI'm sure some of them know we're not going to solve P vs. NP, but the titles are a great influence to clueless HR personnel who think words like `senior` and `principal` mean only those people can do \"this\" job which to them, sounds really challenging, complicated, and mind-bending levels of difficult.\n\nThese are the same people who struggle to open a PDF on their PC.",
        "score": 11,
        "replies": []
      },
      {
        "author": "dnbxna",
        "body": "Every web developer after electron:\n\nIs this software engineering? 💁‍♂️🦋",
        "score": 26,
        "replies": []
      },
      {
        "author": "shevy-java",
        "body": "I disagree - I still call myself **The Ultimate Archduke of All Professions**. People like epic titles. I mean, some democratic countries still have royals after all ...",
        "score": 6,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 4,
        "replies": [
          {
            "author": "backelie",
            "body": "Maybe we all should be.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[removed]",
        "score": 11,
        "replies": [
          {
            "author": "backelie",
            "body": "Same, but today I'd prefer to be a Software Engineer.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "ShenmeNamaeSollich",
        "body": "I was just looking at Staff &amp; Principle engineer job postings with descriptions that sound mid-level at best. Nothing about architectural decisions or crazy scaling/distributed issues or leading teams &amp; projects - just the typical meet w/stakeholders and build the things. 5yrs experience. \n\nJust applied to an “Application Developer” job marked “entry level” that wanted 2+ yrs experience and a *Masters* in CS. They’ve reposted it at least twice now. I work in the same industry &amp; region doing the exact same thing at a mid/senior level &amp; probably won’t even get an interview w/only a BS. \n\nThe idiotic result of HR not knowing wtf they’re talking about plus companies refusing to hire or train Juniors is that everyone gets a flood of new grads through mid-levels applying for *everything* and the pipeline of actual “seniors” is going to dry up.",
        "score": 11,
        "replies": [
          {
            "author": "lazy_londor",
            "body": "Many companies have pay bands for different titles.\n\nI was Senior Software Engineer at a big tech company then got laid off. My new employer needed to make me \"Senior Staff\" in order to match my previous pay. I do a lot less at this company than I did at my previous one.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "Leverkaas2516",
        "body": "The titles never really had much meaning. So many parts of a non-engineering org don't really even understand what we do. My first job was Systems Analyst/Programmer, but I was really an IT guy. I got promoted to System Programmer, which paid more but always seemed like a lesser title to me...not that it mattered.\n\n\nAfter decades as a software \"Engineer\" or \"Developer\" I long ago started calling myself a \"computer programmer\" and the only people who know my title are my boss and HR. The only thing that matters at work is whether I get the job done.",
        "score": 8,
        "replies": []
      },
      {
        "author": "Dunge",
        "body": "After 20 years I still simply sign as \"software developer\". Even though I do *everything*, from project and employee management, high level architecture, backend and frontend code, database administration, cloud and kubernetes deployment, support and documentation. I don't really care about the title, do you?",
        "score": 3,
        "replies": [
          {
            "author": "sokjon",
            "body": "Absolutely this. The only time I compromise is when job seeking because an levelled “engineer” is often filtered out for any senior+ roles.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "LessonStudio",
        "body": "Most companies I've witnessed as a consultant, working for them, or being close to existing employees were very poorly run. \n\nA few rare examples were just that, exemplars of excellence. \n\nThe poorly run ones were all variations on the same bad, and the great ones were also variations on the same greatness.\n\nWhat often kept them in business was various forms of inertia. They captured a regional market, or occupied a market niche. A combination of good marketing and sales (often sleazy) and stupid customers kept them in business despite their poor quality products.\n\nPoor management always made poor products; great management made great products.\n\nWhat was common among poor companies was the usual things people complained about; but they usually boiled down to a pile of examples of authority and responsibility being wildly out of balance. To nobody's shock at all, the great companies had authority and responsibility in near perfect balance.\n\nNearly everything bad had its black mirror opposite in good:\n\n* Micromanagement vs autonomy.\n* Burdensome scrutiny vs trust\n* Control information for power, distribute information for success\n* Seniority was prioritized over merit vs merit over seniority.\n* Zillion layers of hierarchy vs flattened structures.\n* Incentives for being a dick vs incentives for doing your job.\n* Not firing people causing problems vs aggressively firing people who cause problems.\n* HR which was there to protect the company vs not having HR at all.\n* A C-Suite vs no C-Suite.\n* Meetings vs seeing meetings as someone causing trouble and wasting time. (i.e firing people who try to have endless meetings).\n\nThe above rules aren't big companies vs smaller companies. Many of the great companies I've witnessed were fairly large. But, that is an interesting point. What seems to happen is they don't endlessly add people as they grow. Every hire is because there's a problem, not a hint of a problem, or someone making a mountain out of a molehill problem, but a genuine sense of relief when a position gets filled. I would argue that these things like no C-Suite is not something you can scoff at by saying, \"Well little startups can get away with that.\" but that having a C-Suite is a problem where nobody is asking why something is needed. A company not asking why is going to probably keep hiring as many people as their revenue can support. \n\nSo, inherently companies without an HR, a C-Suite, a pile of managers, and not having endless meetings is going to be smaller than the bloated mess which didn't avoid these stupidities. \n\nThen, when you have skipped these things, then other things like endless executives being blowhards about how great their company is, just doesn't happen.\n\nHere's a fun list: Warren Buffett, Ray Dalio, Carl Icahn, Bill Ackman, George Soros, Peter Thiel, Jim Simons. I suspect most people reading this recognize the first 7 names; but the last one is probably a mystery. Warren Buffett as an example endlessly plays himself as a quiet modest guy, but is always making public statements which are gobbled up by a large audience as do most of the rest. That last name, though is the most interesting. \n\n* Warren Buffett: ~20% annualized,\n* Ray Dalio: ~11% annualized,\n* Carl Icahn: ~15% annualized,\n* Bill Ackman: ~16% annualized,\n* George Soros: ~20% annualized,\n* Peter Thiel: Difficult to quantify (venture-based),\n* Cathie Wood: ~35% annualized (ARK Innovation ETF, shorter-term performance),\n* David Tepper: ~25% annualized,\n* Jim Simons: ~66% annualized (Medallion Fund)\n\n66% percent sustained for decades while managing many 10's of billions. Yet, he kept quiet, wasn't a blowhard, and had a tiny staff. \n\n* Warren Buffett (Berkshire Hathaway): ~$950 billion,\n* Ray Dalio (Bridgewater Associates): ~$140 billion,\n* Carl Icahn (Icahn Enterprises): ~$23 billion,\n* Bill Ackman (Pershing Square Capital): ~$18 billion,\n* George Soros (Soros Fund Management): ~$28 billion,\n* Peter Thiel (Founders Fund): ~$11 billion,\n* Cathie Wood (ARK Invest): ~$24 billion,\n* David Tepper (Appaloosa Management): ~$14 billion,\n* Jim Simons (Renaissance Technologies): ~$130 billion\n\n* Warren Buffett (Berkshire Hathaway): ~390,000 employees,\n* Ray Dalio (Bridgewater Associates): ~1,300 employees,\n* Carl Icahn (Icahn Enterprises): ~23 employees,\n* Bill Ackman (Pershing Square Capital): ~40 employees,\n* George Soros (Soros Fund Management): ~600 employees,\n* Peter Thiel (Founders Fund): ~50 employees,\n* Cathie Wood (ARK Invest): ~45 employees,\n* David Tepper (Appaloosa Management): ~30 employees,\n* Jim Simons (Renaissance Technologies): ~300 employees\n\n* Warren Buffett: 410.5 employees per billion\n* Ray Dalio: 9.3 employees per billion\n* Carl Icahn: 1.0 employee per billion\n* Bill Ackman: 2.2 employees per billion\n* George Soros: 21.4 employees per billion\n* Peter Thiel: 4.5 employees per billion\n* Cathie Wood: 1.9 employees per billion\n* David Tepper: 2.1 employees per billion\n* Jim Simons: 2.3 employees per billion\n\nI post these numbers to show that people trying to justify having micromanaging, shitty companies with bloated staffs, lots of manager, meetings, and other BS are somehow a requirement. They aren't. They only serve to make petty people feel better about themselves. But, I love the petty arguments petty people make to support their pathetically existences in  poorly run companies. Success can happen despite a bloated mess of a company, but it is not a requirement. \n\nTo circle back to the original point. Titles, are often part of a bloated mess. The great companies I saw had fairly vague titles which described what people did:\n\n* Programmer\n* Artist\n* Accounting\n* Sales\n* Engineer (doing engineering)\n\nWhat I didn't see in these companies were \"senior\" or even \"head of\" in those titles. Someone might say, \"I run the accounting department\" yet their title was \"Accountant\"; most certainly not CFO.\n\nIn the worst companies they used titles pretty much in lieu of pay. People would get promoted over and over and over and over; yet were mostly doing the same job. They might have a P-number for programmers. So you started as a P1 if you had a crappy degree from a community collage, and a P3 if you were a 4 year graduate. They would \"bless\" their most desired hires with a P4 or P5 and then remind them over and over that they didn't deserve the higher number. A P7 would be someone who had \"been there since the beginning\".\n\nYet, the person who was director of development was hired fairly fresh out of business school and their only qualification was an MBA and some good connections. Yet, this person is paid 3 times as much as a P7. Then there would be product managers, project managers, and in the worst of the worst of the absolute worst, scum masters. Or where satan had the pernicious, iniquitous, and the damned forge a company in the darkest bowels of hell; agile coaches.\n\nThese are the companies where they take a halfwit community college graduate and bless them with the title \"Software Engineer\".",
        "score": 7,
        "replies": []
      },
      {
        "author": "syklemil",
        "body": "&gt; Unable to always match the salaries offered by tech giants, these companies resort to inflating titles as a form of non-monetary compensation. \n\nIs this just the IT variant of paying in exposure? It feels like getting into getting a shiny plastic medal territory. (Except of course when it's a \"we want to pay you a competitive wage but to do that we need to place you in this HR bucket\")",
        "score": 3,
        "replies": [
          {
            "author": "backelie",
            "body": "Reading the comments there seems to be less \n\n&gt; inflating titles as a form of non-monetary compensation  \n\nand more inflating titles because that's dictated by HR rules to be able to compensate them appropriately.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "irosion",
        "body": "It's easier to use existing title frameworks to measure someone's worth than to come up with a better way to assess experience and competence.\n\n\nBack in the day, age alone was enough to command respect, but is age really a good measure of someone's value? \n\nI've met people with over 20 years of programming experience who had no business solving problems or writing code and I've met people with only 2 years of experience who were incredible problem solvers and programmers.\n\n\nSo how do you fairly pay/reward these people? \nHow do you create a system that rewards both talent and endurance in a way that’s truly fair?\"",
        "score": 3,
        "replies": []
      },
      {
        "author": "MySpoonIsTooBig13",
        "body": "Can we just have the humility to say \"Software Engineer\". Yes that means you have to make your own judgement about which \"L\" my skillset is. \n\nMy apologies to managers, but that means you need to know what your people are capable of without someone bestowing a label upon you.",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Yes, and?\n\nThis is what happens when the tech industry (which literally runs our entire world) has absolutely no governance authority, standardization within roles, Unions, etc. \n\nIt's \"throw it at the wall and see what sticks\" mentality. And this is what you get. \n\nYou want clear definitions and formality? Then you need structure. And that means you can't play as fast or loose. Which those in tech scream \"that doesn't work in a fast-paced industry\". Yeah, \"doing due diligence\" and \"playing it safe\" doesn't work...until you have a data breach every other day. \n\nMaybe the best thing right now is to *slow the fuck down*....just a smidge. A tad. A wee bit. You know, to refortify our foundational basics a little bit. Solidify our roles. Because if we keep flailing around as if we're wearing a chicken suit doused in gasoline and lit on fire, then more shit is going to burn the fuck down.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Apart_Technology_841",
        "body": "When I started my career in the wonderful world of software development, the programmer was not yet an official role. My title was system engineer. Now, after more than forty years in the business, I feel that my original title still best describes what I do.",
        "score": 6,
        "replies": [
          {
            "author": "ThisIsMyCouchAccount",
            "body": "I miss the \"Webmaster\" title.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "AlexHimself",
        "body": "I'm an expert in so many random technologies that I have trouble even giving myself a title or explaining what I know when working with new teams. I used to be 1-stack of expertise, but now I'm crossing into so many areas.\n\nWhen I'm asked for my title, I sink a little because whatever I can possibly say won't be accurate.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Prize-Local-9135",
        "body": "I push buttons for a living.",
        "score": 2,
        "replies": []
      },
      {
        "author": "dnbxna",
        "body": "The last paragraph really sums up how I've found consistent work as a freelancer. I had never really received a formal title from anyone, even when working at my first company, I just called myself a full stack web dev. I also had experience leading a small team working on c# and node apis as well as mean/mern around 2 yoe.   \n\nA couple years ago, l had this client that kept saying, \"you're like a cto\", after a year or two of working together, and it kind of hit me since I was architect, engineer and developer of this site builder platform.  I've since added the fractional cto title to that role, which really helped me find similar clients and projects that fit what I was looking for.",
        "score": 2,
        "replies": [
          {
            "author": "azhder",
            "body": "My only interest is what are my obligations and what I will be paid for it. My only presentation to whomever interviews me is what I have done and what I can do.\n\nSo, I don't call myself anything. Well, maybe human. I say I grow software, but I don't identify myself with it. \n\nI do let people attach a title or whatever, since I do sign the contract and agree to abide by the company and whatever title it has for me. But that's about them, how others see me or see a use of me.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "absentmindedjwc",
        "body": "You have no fucking idea how incredibly god damn salty I was when I joined a company at a title I've been working towards for god damn near 20 fucking years.... only to have another dipshit manager come in and offer a close title to someone that was literally fresh out of school.\n\nThe best part are these dumb-fuck developers acting like the title they have is somehow \"deserved\", and will argue with me over implementations... and then be fucking shocked when they realize that I was right and they were wrong.",
        "score": 2,
        "replies": []
      },
      {
        "author": "UniversityEastern542",
        "body": "This is 100% another industry problem that stems from employers, management and hiring practices, not programmers.",
        "score": 2,
        "replies": []
      },
      {
        "author": "KevinCarbonara",
        "body": "I've seen this argument before, the problem is in presuming they *ever* had meaning. They didn't. Some people really don't want to admit that though, people like to believe that when *they* got hired, it really *meant* something.",
        "score": 2,
        "replies": []
      },
      {
        "author": "New_Perspective_5551",
        "body": "I feel the same way about \"architect.\" Most employment notices have \"enterprise architect,\" for example, but from the job description, they want a developer. For \"data architecture,\" they want a DBA. They do not seem to know what a \"solutions architect\" is, either.    Also, some notices are completely ridiculous such as \"email architect\".  It seems that the word \"architect\" is another way of writing \"senior\".",
        "score": 2,
        "replies": []
      },
      {
        "author": "ponton",
        "body": "We already have staff, principal and distinguished software enginners, but we still could have a couple of more, e.g. \n\n* prominent software engineer\n* venerable software engineer\n* magisterial software engineer\n* luminous software engineer\n\nand so on",
        "score": 2,
        "replies": []
      },
      {
        "author": "RedditorsAreMutts",
        "body": "Software engineer titles never had any meaning. Programmers are not engineers; It's a self aggrandizing title that the software industry has adopted for itsself.\n\n99% of \"software engineers\" have literally never done a lick of engineering in their entire lives and simply spend their days cranking out some kind of application code via trial and error until it works/is good enough. Anyone is free to call themselves whatever they want, especially if it's their job title, but don't expect to be shown the same respect as actual engineers when the role requires none of the rigourous design, mathematical analysis, or other principal components of the engineering process.\n\nIf you want titles to have meaning then you first need to stop calling every single programmer/developer an \"Engineer\".",
        "score": 2,
        "replies": []
      },
      {
        "author": "mrbuttsavage",
        "body": "I feel like I've experienced far more senior software engineers who were borderline incompetent that were the product of inertia, they got the title after working in the same role on the exact same thing for a long time. Or were given that title by interviewing well but can't really work outside of leetcode. Or by having a PhD in some specialization but can't code really at all. \n\nAt least a too soon promo probably got there by being technically strong.",
        "score": 2,
        "replies": []
      },
      {
        "author": "balthisar",
        "body": "They kind of stopped having any meaning when the term for most of the folks changed from \"programmer\" to \"engineer.\" Yeah, sure, there are some folks doing real architectural engineering, but most coders are simply doing coding.\n\nBut, hey, customer service engineer, field service engineer, sales engineer – I get it, titles make us feel good.",
        "score": 2,
        "replies": []
      },
      {
        "author": "candelstick24",
        "body": "This is why CVs hardly matter. ChatGPT will do that for you. I’ve found live interviews and coding (where the hands are visible) the only reliable way to hire top talent. It’s shocking how many great CVs belong to useless candiates.",
        "score": 3,
        "replies": [
          {
            "author": "Fenix42",
            "body": "I have done plenty of interviews on both sides. I have found live coding kinda useless. You don't have time to get into a real problem, so people just learn to spit out pre canned answers to known questions.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "FrostWyrm98",
        "body": "I wish there was a substantive difference between programmer and engineer, like you had to pass certification with a board to be an engineer. Maybe it's a formality after your degree but it would give it some meaning imo\n\nMaybe it's a simple process, but if companies had to actually require that cert to post it as an engineer it wouldn't lose its meaning\n\nThat would probably cause a slew of other issues tho lmao\n\nIt's probably more of an issue of the title meaning nothing to me that I wish that in all honesty. What does the degree mean if anyone can call themselves an engineer? I believe it's different in Canada for \"engineers\"(?)",
        "score": 3,
        "replies": [
          {
            "author": "Bl00dsoul",
            "body": "It should come with an ethics board that can strip the title too",
            "score": 2,
            "replies": []
          },
          {
            "author": "PrimeDoorNail",
            "body": "Yes in Canada its a protected title, you cant just slap it on anything you like",
            "score": 4,
            "replies": []
          },
          {
            "author": "SwiftOneSpeaks",
            "body": "&gt;That would probably cause a slew of other issues tho lmao\n\nThis debate has raged for decades.  I remember being incensed in my college days (literally in the 1900s, lol) at the idea that being a programmer would require \"certification\" and how that could slow the continued evolution of the profession.\n\nNow I have a far more nuanced view, and I too think that some level of \"engineer\" distinction like the rest of the world is valuable.  Less about specific programming techniques and more about ethical considerations and general verification techniques. We've seen crypto, NFTs, we've seen LLMs, we've seen deceptive designs and skinner box-based incentives.  We've seen Boeing's MCAS kill people.\n\nEverything makes Therac-25 look like the good old days.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "bwainfweeze",
        "body": "My last job didn’t have a staff engineer title. Basically a junior and senior principal engineer. But that’s a very different skill set and workload. So my about me section doesn’t agree with my recent work history.",
        "score": 1,
        "replies": []
      },
      {
        "author": "garloid64",
        "body": "what meaning",
        "score": 1,
        "replies": []
      },
      {
        "author": "daHaus",
        "body": "If you're an engineer and you're not being used as a mechanical engineer you're doing pretty good. It seems like the only difference in the degrees is how many hats they'll want you to wear.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Liam_M",
        "body": "always have",
        "score": 1,
        "replies": []
      },
      {
        "author": "azhder",
        "body": "Did they have meaning? What was it?",
        "score": 1,
        "replies": []
      },
      {
        "author": "zerothehero0",
        "body": "Someone needs to tell the man that it's always been like this. I've been at a company that has pegged senior engineer to being between 4 and 10 years of experience for over 100 years now. The difference being that for the longest time after this point everyone would be expected to be promoted into management.",
        "score": 1,
        "replies": []
      },
      {
        "author": "RICHUNCLEPENNYBAGS",
        "body": "It's been this way for a long time.  Unless it's a known company (like Microsoft, for example), the titles do not mean very much.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Key-Supermarket54",
        "body": "It's so true—titles like 'Senior' or 'Staff' often feel like they’re based more on salary bands than actual skill or impact. Has anyone here experienced burnout from being promoted too soon? How can companies balance titles with the reality of what engineers can actually deliver?",
        "score": 1,
        "replies": []
      },
      {
        "author": "aaron_dresden",
        "body": "In an industry that historically from my experience hasn’t liked having peak bodies and standardization of what it means to be a developer, let alone the levels, we have someone who outlines a level that seems to have too much responsibility that reminds me of harking back to how companies worked historically where you just had less people and had to shoulder more responsibility - now decrying the evolution of the field.   Feels rich and out of touch.  Having more niche roles in big organizations that have large scale systems and responsibilities is a natural evolution.\nThere are some good points on misused title inflation due to competition and retention and the long term problems but solutions where you go hey try to standardise individually across an industry is just very unrealistic.\n\nIf you want standards you need a supported peak body everyone is a part of.  Otherwise what’s stopping people from doing their own thing and who’s validating that the level means x and not y.",
        "score": 1,
        "replies": []
      },
      {
        "author": "BarfingOnMyFace",
        "body": "I hate that I train people to learn how to do what I’d consider trivial tasks who got hired with a title of sr software engineer 🤦\n\n\nThat or my job is seriously hard",
        "score": 1,
        "replies": []
      },
      {
        "author": "Particular_Camel_631",
        "body": "Job titles have only ever been a rough guide to what someone does. \n\nI have been a sales director of a team of one (me), a general manager, a computer consultant, a development manager, and a solutions manager. \n\nI’ve also been a developer, a senior developer, head of product management, software architect and more. \n\nQuite often I got given the swanky job title because they figured it was cheaper than paying me more. \n\nAll job titles are bs. What matters is what you do, and what they entrust you with.",
        "score": 1,
        "replies": []
      },
      {
        "author": "TarnishedVictory",
        "body": "Did they ever have meaning outside of any organization? Or even inside most? I mean, I suppose they might identify roughly what responsibilities someone might have.",
        "score": 1,
        "replies": []
      },
      {
        "author": "usrlibshare",
        "body": "What, you're telling me that *\"Amazeballs Commander in Chief of AI Vision Evangelism\"* doesn't actually mean anything?\n\nConsider me flabbergasted.",
        "score": 1,
        "replies": []
      },
      {
        "author": "krywen",
        "body": "Title inflation is real, during some economic cycles managers have to give higher titles just to be competitive and this also created bad internal dynamic on the team",
        "score": 1,
        "replies": []
      },
      {
        "author": "ch-dev",
        "body": "I can almost guarantee you that these titles weren’t set by anyone on the engineering side.",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Wdym?\n\nI am and will always be Señor Engineer!",
        "score": 1,
        "replies": []
      },
      {
        "author": "Appropriate-Dream388",
        "body": "There is no uniform definition of a senior. The YoE requirement ranges from 3 to 8 depending on who you ask, and the scope is between IC and team tech lead.\n\nThe effectiveness of people management and system design (Senior+ skills) is subjective enough to remain perpetually undecided, so senior+ can largely be made of bullshitting and politics.\n\nThe only universal agreement is that scope should increase as the title seniority increases, and the lower-level someone's title is, the more direct interaction with code they have, as higher levels focus on guidance, system design, and product direction.\n\nBut how can you expect consistency between companies? Software engineering is the least-rehulated engineering discipline. Joe writing HelloWorld in Python makes him a software engineer. We aren't licensed, regulated, certified, or tested beyond Leetcode. Without consistency in our profession, and no reasonable quantifiability of our skills, titles have been meaningless for a long time.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Zardotab",
        "body": "I once tried to devise a scoring system based on the percent of the day a position spends on various IT tasks as an alternative to titles. It didn't catch on ... yet.",
        "score": 1,
        "replies": []
      },
      {
        "author": "ImTalkingGibberish",
        "body": "There are 4 types of dev:  \nJunior will need everything chewed.  \nSpecialist dev will get shit done as long as they follow a standard they are used to.  \nHacker dev will get anything done and fast.  \nIT department dev is the developer that doesn’t code most of the time, take whatever shit the other devs don’t want to do and is sociable enough to talk to the business in a way they feel good about it. Demos, meetings, unblocking the junior dev, keeping the hacker dev on the important work. Making sure the special dev isn’t isolated on a corner somewhere. The IT department dev spends most of his time dreading his next task, does it thinking he’s an absolute failure but people think he’s keeping things going somehow.",
        "score": 1,
        "replies": []
      },
      {
        "author": "jdub4237",
        "body": "100%. I had this conversation at work not long ago. I used to keep it simple and have SE 1-3, and Software Architect. Then came the need to add Senior SE. Then Associate SE for those who didn’t really fit as SE 1 yet. Then we added Staff and Principal and widened SE 1 and SE 2 and removed Associate, Architect and SE 3. We now can mod Staff and Principal with Senior or Distinguished. It’s really become quite crazy. I don’t really care for it. I like simple.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Forsaken-History-950",
        "body": "In my experience, title inflation is even worse in large corporations. In my team, 'staff engineer' is almost like an entry-level position. It all started when one person was promoted too easily.  \n  \nFrom the manager’s perspective, the team has one promotion quota each cycle. Even if the person might not fully qualify for the promotion, the manager doesn’t want to waste the quota.",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "Around 2013 Google’s source control system was servicing over 25,000 developers a day, all off of a single server tucked under a stairwell",
    "body": "",
    "score": 1021,
    "url": "",
    "created_utc": 1719791449.0,
    "author": "kendumez",
    "permalink": "/r/programming/comments/1dsf4z3/around_2013_googles_source_control_system_was/",
    "comments": [
      {
        "author": "Leverkaas2516",
        "body": "11-12 million repository operations per day.\n\n\n\"At all times, a hot standby was kept running and a team of eight admins kept watch, performing the routine heroics needed to keep Google’s source control server alive.\"",
        "score": 269,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "Always, always remember that there are 3600 seconds in an hour and 86,400 seconds in a day. Assuming most people aren’t burning the midnight oil that’s around 200 requests a second. Which still explains why you have so many cooks in that kitchen. \n\nI worked on an app that got 60 million requests a day. Trust me when I say it’s not as impressive as it sounds and it took an embarrassingly large amount of hardware to it. \n\nThe first big app I worked on did 100 req/s on 3 4-core boxes, and that had a wasteful architecture too.",
            "score": 137,
            "replies": [
              {
                "author": "Wolfy87",
                "body": "I'd argue eight admins keeping 25k devs collaborating and sharing code is amazing value for money for an internal system. Although that makes me wonder, what's the ratio of GitHub employees to daily active users like? Probably way more impressive?",
                "score": 86,
                "replies": [
                  {
                    "author": "DeviousCraker",
                    "body": "Yeah but they probably aren't doing it on a single server tucked under a stairwell :).\n\nBut given how often github goes down / is degraded... maybe it is.",
                    "score": 32,
                    "replies": [
                      {
                        "author": "Wolfy87",
                        "body": "They probably had to downsize to a cupboard with a laptop in it to siphon more money off into stea- training AI.",
                        "score": 16,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "8 people taking care of single server running single app still sounds... weird",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "voidvector",
                "body": "Fairly sure, it is 11 million writes. The reads should be higher given all the CI automation. \n\nThough you are right from traditional stack perspective, 11 million writes is not that notable given all the data are in a tree.",
                "score": 28,
                "replies": []
              },
              {
                "author": "VirtuteECanoscenza",
                "body": "I have worked at a company were they had a system with 2 million concurrent connections (not requests, connections , each connection may have done 0-100 requests per second with high variability) and strict latency requirements. They had only 12 servers to handle this.",
                "score": 4,
                "replies": []
              },
              {
                "author": "mccalli",
                "body": "The whole article is that sometimes there weren’t 3600 seconds in an hour or 86,400 seconds in a day. Sometimes there are 3601 seconds in your hour and 86,401 seconds in the day.",
                "score": 2,
                "replies": []
              },
              {
                "author": "metaltyphoon",
                "body": "Nice! We are currently doing 170M req/day over 40 4 core 16gb VMs barely doing 5% CPU usage",
                "score": 1,
                "replies": [
                  {
                    "author": "bwainfweeze",
                    "body": "Have you tried 20x8? We saw a little boost in response time variability by spreading more requests per box over more cores.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "SweetTeaRex92",
        "body": "they probably slapped a couple of Alien Ware stickers on it and called it a day",
        "score": 318,
        "replies": [
          {
            "author": "Windyvale",
            "body": "It’s worked for Alienware for years.",
            "score": 96,
            "replies": []
          }
        ]
      },
      {
        "author": "CyAScott",
        "body": "That would keep me up at night if I worked there in that time.",
        "score": 108,
        "replies": [
          {
            "author": "HarvestMyOrgans",
            "body": "And never have to visit the bathroom since i'm clenching so hard...   \n   \nNow google only has to defeat the need of food intake, what a waste of the 24/7 awake time!",
            "score": 14,
            "replies": []
          },
          {
            "author": "Franks2000inchTV",
            "body": "Why? if it breaks you get paid the same to fix it.",
            "score": 0,
            "replies": []
          }
        ]
      },
      {
        "author": "LeonTheremin",
        "body": "Man I struggle to serve ten, twenty max dudes a day under the stairwell. Just goes to show how innovative early google was.",
        "score": 126,
        "replies": [
          {
            "author": "workthrowaway12wk",
            "body": "You need to consider your girth to length ratio to pump those numbers",
            "score": 19,
            "replies": [
              {
                "author": "MisinformedGenius",
                "body": "Don't forget about matching D2F. It'll take forever otherwise.",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "spareminuteforworms",
            "body": "$400.05 ?  Which one gave you a nickel?\n\n... every last one of em.",
            "score": 5,
            "replies": [
              {
                "author": "Kok_Nikol",
                "body": "By simple arithmetic...",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "GuidonBoi",
            "body": "Wrong month bro",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "this_knee",
        "body": "&gt;Perforce\n\nNow there’s a name I haven’t heard since …\n\nWow, I pity anybody still managing perforce … if it’s even still in use anywhere big.",
        "score": 192,
        "replies": [
          {
            "author": "Latrinalia",
            "body": "It’s still very popular in the video game industry",
            "score": 133,
            "replies": [
              {
                "author": "Ancillas",
                "body": "I believe that’s because it handles binary files better than something like git, is that right?",
                "score": 83,
                "replies": [
                  {
                    "author": "MoreOfAnOvalJerk",
                    "body": "Not just that, it also lets you easily create client specs which take a specific subset of the repo when you sync. This makes it easy to use as both the source code repo AND the artifact repo. \n\nBecause of this, programmers can set up their spec to only take in the finalized/post-pipeline art output as they dont need or want the source art. Artists can in turn take just the latest game binaries to view their assets in game without building the source code or looking around on a build server for the appropriately versioned one. \n\nAnd if in rare case a programmer needs the art source or an artist needs to build from source, they can by just tweaking their client spec temporarily. \n\nAlso, as you said, the binary handling on perforce, as well as how it handles massive files in general is very good.\n\nI’m using mercurial these days, but my memory of git LFS was that it left a lot to be desired and perforce felt much better. Maybe that’s changed now though.",
                    "score": 129,
                    "replies": [
                      {
                        "author": "Ancillas",
                        "body": "Thanks for that summary.  Git LFS helps but it’s pretty limited in scope.\n\nNow I want to experiment with Perforce a bit.  It seems like it could be interesting to pull the latest build artifacts of dependencies without a lot of extra logic.  I’m not sure if that’s a good idea or if it makes sense but it sounds like an easy enough goal and excuse to learn Perforce.",
                        "score": 14,
                        "replies": [
                          {
                            "author": "MoreOfAnOvalJerk",
                            "body": "I got completely out of game dev many years ago, but perforce used to (and maybe still) has free licenses that accommodate up to 4 or 5 people. \n\nAnytime I’d do an indie game or any kind of hackathon, we’d set up a perforce repo and basically throw everything at it.\n\nIt’s also much more limited (imo which is good) than git and visual centric. That makes it pretty easy to  set up and learn.",
                            "score": 28,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "edgmnt_net",
                        "body": "Did Perforce handle binaries in some outstanding way or has it made more like different choices? I feel that choosing to preserve the entire history of all objects (binary or not) kinda leads to what Git has. That is, not even Git LFS does better, they simply let you discard history. Sure, you can let people download smaller sets of data more easily, but in the end if you want to keep all versions of binary files and, that's going to take a lot of space somewhere.\n\nUnless you find a smarter way to express changes, but I suppose that opens up other issues (can \"semantic\" patching of binary files scale better?). And I guess most VCSes don't really deal with that. (Related question: perhaps uncompressed bitmaps are sometimes easier to handle in version control?)",
                        "score": 1,
                        "replies": [
                          {
                            "author": "MoreOfAnOvalJerk",
                            "body": "From a perforce administration account, you can prune individual file revisions, so you can purge old obsolete binary data. You can also take a full backup of the perforce server image, save that to a slow/huge archive somewhere, and then do the pruning on the live server. \n\nYou can also set up scripts and things to automate this, since server admin functionality is all through CLI (and the ui is just a wrapper for that). \n\nGrain of salt here as it’s been like 10 years since i used perforce.\n\nNote about the semantic patching of binary data. I dont even remember id binaries are stored with some kind of compression scheme like delta compression or if each revision is stored whole.  \n\nThat said, perforce by default only syncs the latest or requested changelist.  This means your sync is much smaller than if you hosted with git (since git clients mirror the server) but working offline means you cant view revision history.  I think there’s a way to go into an “offline mode” where perforce will grab a bunch of revisions so you can see history, but i don’t really remember that part.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "[deleted]",
                        "body": "Git has submidules which can achieve this.\n\n\nP4 has better binary management and file locking - only reason to use it over git.",
                        "score": -11,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 8,
                            "replies": [
                              {
                                "author": "Rakn",
                                "body": "A combination of submodules and git LFS might accomplish something like that? But with poor UX in any case. Definitely not something I'd use by choice without a lot of tooling around it.",
                                "score": 7,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "LugosFergus",
                    "body": "It also allows for fine-grained control of permissions. For example, if you're working on new console hardware, then there might be a select few engineers that should be allowed to access to the platform-specific game engine code.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "frenris",
                "body": "Also ASIC design",
                "score": 6,
                "replies": []
              },
              {
                "author": "Starkboy",
                "body": "in EDA too",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "SubliminalBits",
            "body": "It looks like NVIDIA manages over 600 million files with Perforce.\n\n[https://www.perforce.com/nvidia-versions-over-600-million-files-perforce-helix](https://www.perforce.com/nvidia-versions-over-600-million-files-perforce-helix)",
            "score": 62,
            "replies": [
              {
                "author": "fragbot2",
                "body": "I know of at least two other large places that use it as well.  As much as I hate the user experience (_git_ is difficult to use but is a dream compared to _perforce_), perforce scales well for users on large codebases because it has knowledge about changes (_p4 edit_) and doesn't need to deduce them (the filesystem scan needed to understand what's changed).",
                "score": 47,
                "replies": [
                  {
                    "author": "sionescu",
                    "body": "From experience, I can say that Google's piper is much better than git. It might have (mostly) the same interface as Perforce, but it works better.",
                    "score": 17,
                    "replies": [
                      {
                        "author": "Mrqueue",
                        "body": "I really struggle to believe it works better than git for most people's use case. Maybe for massive repos (tbs) or lots of parallel development (&gt; 100s) it's better but for 99% of teams I'm sure git works better",
                        "score": 3,
                        "replies": [
                          {
                            "author": "sionescu",
                            "body": "&gt; Maybe for massive repos (tbs) or lots of parallel development (&gt; 100s) it's better but for 99% of teams I'm sure git works better\n\nYou've just described most enterprises above ~50 people.",
                            "score": 3,
                            "replies": [
                              {
                                "author": "Mrqueue",
                                "body": "Absolutely not, I worked in a company of 100,000s with 1000s of developers and we used github enterprise. It only matters if you’re going monorepo which is abnormal for enterprise",
                                "score": 4,
                                "replies": [
                                  {
                                    "author": "sionescu",
                                    "body": "I would put it the other way: monorepo is the natural, and by far the best, way to organise code in an enterprise setting, and you're not doing that only because you're using git which is an inadequate VCS.",
                                    "score": 0,
                                    "replies": [
                                      {
                                        "author": "Particular-Fill-7378",
                                        "body": "The inadequacy is usually not in the choice of VCS but in the compatibility of the org’s validation policies with its infra investment.",
                                        "score": 1,
                                        "replies": [
                                          {
                                            "author": "sionescu",
                                            "body": "What does that mean ?",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      },
                                      {
                                        "author": "Mrqueue",
                                        "body": "That’s the dumbest thing I’ve heard in a while",
                                        "score": 1,
                                        "replies": [
                                          {
                                            "author": "sionescu",
                                            "body": "You need to use your little gray cells more, young padawan.",
                                            "score": -1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "MisinformedGenius",
                    "body": "&gt; because it has knowledge about changes (p4 edit)\n\nAlthough this of course can turn into a big downside when a file is changed without p4's knowledge.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "inio",
                        "body": "That would require modifying file permissions directly instead of through p4 so if you hit that case you're already doing something wrong.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "MisinformedGenius",
                            "body": "Well sure... but it still happens. :) Don't get me wrong, I like Perforce, used it for years, but there's some downsides to its blinkered vision.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "sweetno",
                    "body": "This `p4 edit` thing is very inconvenient. Every time you need to change something, anything, you have to locate it in Perforce and add into a changelist. What a nightmare, as if software development wasn't hard already.\n\nI'd much rather figure out what I've changed in `git status` later on. Regarding the \"huge codebase performance\" argument, I do not buy it. Whatever work you do, it's not going to be over huge amount of files and why do you need them on the disk then.",
                    "score": -1,
                    "replies": [
                      {
                        "author": "fragbot2",
                        "body": "I dislike _p4 edit_ as well but it is faster on a monorepo with a huge number of files as it avoids the file tree traversal as well as the checksumming git uses to determine if a file has changed.\n\nBut you don’t need to believe me, just look at the _fsmonitor_ daemon added to git to handle this problem.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "TrumpeterOfSeize",
            "body": "Google still uses Perforce... kinda.\n\nThey rewrote the server component (now called Piper) while keeping the Perforce API, and all engineers still submit code using p4 style changelists",
            "score": 76,
            "replies": [
              {
                "author": "Cidan",
                "body": "This is mostly changing to a mercurial style interface, as many folks use the new hg tooling.",
                "score": 55,
                "replies": [
                  {
                    "author": "TrumpeterOfSeize",
                    "body": "Mercurial (hg) is just a wrapper on top of Piper (Perforce).\n\nWhen you create a cl with hg and send it in for review (hg mail or hg upload and click review in Critique) it actually 1) creates a Piper (Perforce) client, and 2) creates a Piper (Perforce) changelist using that client.\n\nWhen you submit that cl (hg submit or click submit in Critique) it submits the CL through the previously created Piper (Perforce) client.\n\nAFAIK there are no plans to actually migrate off of Piper (Perforce) and use hg as anything other than a wrapper.",
                    "score": 49,
                    "replies": [
                      {
                        "author": "Laugarhraun",
                        "body": ".... All of which explains why hg-on-piper is slow as hell.",
                        "score": 8,
                        "replies": []
                      },
                      {
                        "author": "sviperll",
                        "body": "Right, but you still manage local (workspace-local) mercurial -tree and do commits/merges/rebases, which is a huge improvement over multi-change change-lists.",
                        "score": 9,
                        "replies": []
                      },
                      {
                        "author": "SisyphusAmericanus",
                        "body": "Never thought I’d learn more about submitting CLs on Reddit instead of yaqs",
                        "score": 7,
                        "replies": []
                      },
                      {
                        "author": "Cidan",
                        "body": "Yes, of course, I didn’t mean to imply that Piper was not used in the workflow under the hood — many (most? not sure on usage) use the mercurial interface, which functionally is different (i.e. amend vs commit, etc).",
                        "score": 10,
                        "replies": []
                      },
                      {
                        "author": "defyallodds",
                        "body": "My desire to code died the day git5 was deprecated.",
                        "score": 4,
                        "replies": []
                      },
                      {
                        "author": "DownvoteALot",
                        "body": "Most people create fig workspaces rather than piper workspaces, and those actually work with Mercurial. I don't think piper workspaces are going anywhere but they're not the default option (except if you click edit in code search).",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "sessamekesh",
                    "body": "Oh it is such a weird layer too, I never thought I'd be _happy_ to go back to Gits arcane commands. \n\nBetter than the p4 stuff for any even remotely tricky branching but wow it was weird.",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "this_knee",
                    "body": "Interesting!",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "m0rgoth666",
            "body": "I use perforce every day as its the go to source control for some game engines. Most of the justification for it comes from being able to lock files for a single user so other users cant overwrite your changes while you have the file checked out. Works great for large binary asset files that you are unable to merge. \n\nHaving said that it does suck big time when it comes to managing depots and streams. The workflows are really awful imo and theres a big lack of automation in it unless you are willing to run your own custom tooling.",
            "score": 23,
            "replies": []
          },
          {
            "author": "RogueJello",
            "body": "&gt; Wow, I pity anybody still managing perforce … if it’s even still in use anywhere big.\n\nWhy? Source control is mostly a solved problem, and as long as the system can handle the load, and the it sounds like it can, who cares? \n\nI mean at least it's not Source Safe, with it's tendency to corrupt files.\n\nFWIW, I know it was still in use at Siemens when I worked there for some pretty heavy duty CAD packages they sold to the major auto manufacturers among other things. It was wrapped with a home grown system for the front end, but that was mostly to do with some of the additional requirements necessary to get the enterprise level software to work.\n\nI've used a number of systems over my career, and honestly the worst IMHO is git. I know that will get me a lot of odd looks, but frankly it's too complex, with too many bells and whistles, too many ways to do something stupid, when most people just need something simple. (And no, I'm not interested in explaining why, or hearing why you think I'm wrong about this)",
            "score": 48,
            "replies": [
              {
                "author": "MoreOfAnOvalJerk",
                "body": "I feel EXACTLY the same way about git. The amount of options it gives you is fine for a power user but you dont need 99% of those options most of the time. However, its interface effectively forces everyone to be a power user.",
                "score": 31,
                "replies": []
              },
              {
                "author": "randylush",
                "body": "I actually do think it is fair to say that git is too complex and has too many features. And there are lots of ways to shoot yourself in the foot. I have seen interns almost cry when they nuke their whole repo. \n\nI’ve used perforce, git, mercurial and subversion. I will say perforce is very simple, especially compared to git. You just have different versions of each file, and that’s it.\n\nIt breaks down when you have a ton of different merging together though",
                "score": 22,
                "replies": [
                  {
                    "author": "zacker150",
                    "body": "I think git is a lot better with a good UI like gitkraken.",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "sweetno",
                    "body": "Perforce is simple yet very inconvenient.",
                    "score": 1,
                    "replies": []
                  },
                  {
                    "author": "RogueJello",
                    "body": "&gt; It breaks down when you have a ton of different merging together though\n\nMaybe it was the homebrew interface we had, but it seemed to do branching and merging together quite well, and on a branch level, not file. So I'm not sure why you thought it didn't do branches.",
                    "score": -1,
                    "replies": [
                      {
                        "author": "randylush",
                        "body": "&gt; So I'm not sure why you thought it didn't do branches.\n\nI didn’t say it didn’t do branches. I know perforce supports branches.\n\ngit  allows you to rebase and apply the same changes to future commits. This can be advantageous when you are maintaining a code change outside of the mainline branch. You can rebase your changes on top of new incoming changes on main, or you can merge main into your branch. Note that these have a different meaning and they have different capabilities. Rebasing will carry context about your change from one version to the next. Merging actually destroys context, but this is useful to simplify your tree. \n\nGit gives you the option to either rebase or merge changes, perforce does not. Git also provides a lot of different merge strategies. \n\nIn my experience with git, there have been many instances where rebasing is more effective than merging, especially when dealing with many different branches at the same time, or file renames.\n\n In my experience with perforce, there have been times when I’ve had to review the same merge diff more than once as the branch is updated. \n\nI’ve also only ever had to do 3 way merge conflict resolution with perforce. 3 way merge conflict resolution is pretty rare in git.\n\nAll that said, perforce is just simpler. Git can reduce the complexity of managing your code but it adds the complexity of using the tool. It’s definitely reasonable to prefer the simpler tool.",
                        "score": 5,
                        "replies": [
                          {
                            "author": "RogueJello",
                            "body": "&gt; I didn’t say it didn’t do branches. I know perforce supports branches.\n\nOkay, thanks, I was honestly confused.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "maqcky",
                        "body": "It's not as easy to do branching as it is with git. You can use streams but changing streams is not as seamless as checking out another branch. That's why it works well in the video game industry, as they usually handle very few branches (dev, main and nowadays maybe one or two for future DLCs/seasons...), and everyone directly push their changes to the one they are working on.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "Chemoralora",
                            "body": "You are right about everyone just pushing onto dev. This was hell in one place I worked in, the dev stream spent most of its time because broken, it was extremely unstable. We were slowly transitioning away from this model when I left.",
                            "score": 1,
                            "replies": [
                              {
                                "author": "randylush",
                                "body": "Wait, no code reviews?",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "maqcky",
                                    "body": "I don't know about their particular case, but in general, there are indeed thorough code reviews. You can create them without integrating the changes. There is an official tool, Helix Swarm, and some third party ones, like Collaborator, that hold the changelist until it gets approved, and offer an experience similar to a pull request.\n\nThere is also CI but it's usually too slow (it involves running some parts of the game), so it runs in a loop rather than per changelist. If the build breaks, all changes are put on hold until it gets fixed. Some teams are now learning to use unit testing, but it's a slow transformation.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "glaba3141",
                    "body": "It's really not. It's just that people expect to just be able to use git within a day. Spend some time, read the manual, and other than the most obscure features which are needed maybe once a year, it is quite straightforward",
                    "score": -1,
                    "replies": [
                      {
                        "author": "randylush",
                        "body": "I personally don’t think git is too complex. I happily use it every day. But I do think it’s a valid opinion for someone to say that it’s too complex for them. It does take more than a day to learn and you do have to read a manual- that means it’s complex. Perforce is objectively less complex than git.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "glaba3141",
                            "body": "I guess my point is that expecting one of the most important tools of your job to be so simple you can learn it in a day is an odd expectation which is not the case for almost any other tool you can name. I agree it's less complex but it's also just such a pain in the ass to work with I'd rather not",
                            "score": 1,
                            "replies": [
                              {
                                "author": "randylush",
                                "body": "Yeah I completely agree",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "The-WideningGyre",
                "body": "100%! Git is a powerful tool with an **awful** UX. Unintuitive, inconsistent, complex.\n\nYes, a good UI helps tons.",
                "score": 2,
                "replies": [
                  {
                    "author": "RogueJello",
                    "body": "Unfortunately I've also found the UX options make it even more confusing in some cases. Switching between VS and VSC is annoying because they do different things with the git backend.",
                    "score": 0,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "aznraver2k",
            "body": "Perforce, Subversion, Cleartools. I've seen them all.\n\nEDIT: Guess it's ClearCase, for some reason everyone called it Cleartools where I worked.",
            "score": 9,
            "replies": [
              {
                "author": "this_knee",
                "body": "Subversion I used in my college days. Cleartools, never heard of.",
                "score": 5,
                "replies": [
                  {
                    "author": "aznraver2k",
                    "body": "It's actually called ClearCase. But for some reason everyone at the place I worked called it Cleartools. It's a IBM created monstrosity.",
                    "score": 11,
                    "replies": [
                      {
                        "author": "joshualan",
                        "body": "Worked at IBM a decade ago (ugh) and iirc, Clearcase is the version control product and Cleartools was its cli. I've heard customers use it interchangeably tho, probs depends on the terminology preferred by the company /shrug",
                        "score": 7,
                        "replies": []
                      },
                      {
                        "author": "The-WideningGyre",
                        "body": "It was awful. You needed an admin just to do trivial things. It was also complex, and I don't think it had CLs, only file histories.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "thomas9701",
                "body": "the command line client for clearcase is called cleartool",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "ApplicationPrize5013",
            "body": "We use it at epic games, and it’s still heavily used in the game dev industry. Not sure why it gets all the hate it does",
            "score": 10,
            "replies": []
          },
          {
            "author": "FyreWulff",
            "body": "game companies still use Perforce. Github would just die trying to handle a whole bunch of binary media files, and it's a lot better at file controls, especially locking a file out so you can work on it.",
            "score": 9,
            "replies": [
              {
                "author": "bwainfweeze",
                "body": "Perforce had some tricks that made remote offices a little more bearable back when bandwidth between offices was a joke. \n\nBut client specs make me want to punch things.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "JimroidZeus",
            "body": "I was shocked to see that name. I haven’t seen it in a long long time. \n\nI hated that gui.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Serious-Regular",
            "body": "my large multinational that builds the processors in your machine still uses perforce...",
            "score": 3,
            "replies": []
          },
          {
            "author": "HinaKawaSan",
            "body": "Apple",
            "score": 2,
            "replies": []
          },
          {
            "author": "Kinglink",
            "body": "Perforce isn't bad if you have a singular focus.  Game Industry still uses it, and it works well.   I've seen a few other tech companies who use it. \n\nBut it's more designed for a \"team\" style view.  If everyone is working towards the same final product, that's a way to go. \n\nHowever now everyone is focused on \"cloud systems\", and pushing this idea of microservices... yeah Git is a better way to go.  But to say \"Perforce sucks\"... Nah man, it is just used for different things then you probably work on.  To say it has no benefits is to close your mind to any choice that isn't your own.",
            "score": 2,
            "replies": []
          },
          {
            "author": "pjf_cpp",
            "body": "I would also pity anyone trying to use something like the Google monorepo with git.",
            "score": 1,
            "replies": []
          },
          {
            "author": "ososalsosal",
            "body": "My workplace only migrated to git maybe 6 months ago.\n\nOur auth system's build pipeline is still buggered but mercifully doesn't get many updates so it's tolerable to do manually until one of us gets the time to fix it",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "librik",
        "body": "It's pretty surprising that Google would be scared they'd be sued by Perforce for duplicating the P4 API -- in a tool that's internal to the company.\n\nThey were Google in 2005!  They were rolling in money.  Why didn't they just call up Christopher Seiwald, buy his entire company with their loose pocket change, and improve the Perforce source code?\n\nSpending zillions of dollars to write a clean-room in-house clone of Perforce, no matter how great, seems like a bad case of Not Invented Here syndrome.  The only reason would be if the original had horrible, unimprovable design, but Siewald wrote a whole article in O'Reilly's *Beautiful Code* about the rules they use to keep the P4 source code clean and easy to read.",
        "score": 29,
        "replies": [
          {
            "author": "BadlyCamouflagedKiwi",
            "body": "It's not about code quality, it fundamentally needed a different design to run distributed across multiple machines. That sort of change isn't easy to do incrementally, and they'd probably rather end up with something they're fully familiar with, written using the company's existing libraries &amp; tooling for distributed server applications (which Google obviously had quite a few of).",
            "score": 19,
            "replies": []
          },
          {
            "author": "The-WideningGyre",
            "body": "It didn't scale (enough) and it didn't shard well (allow redundancy). This also caused problems for remote sites (especially Australia) as some tools got really slow.",
            "score": 10,
            "replies": []
          },
          {
            "author": "adrianmonk",
            "body": "According to the article, there were two challenges:\n\n1. Avoiding legal issues by doing a clean room design.\n2. Making it much more scalable with a different design, basically a complete rewrite.\n\nBuying the company would help with challenge \\#1, but that doesn't seem like the one which costs real money. Since you have to start over anyway, you don't lose much by putting people on the project who aren't already ramped up on how the old system works.",
            "score": 4,
            "replies": []
          },
          {
            "author": "WindHawkeye",
            "body": "NIH syndrome is a good thing, not a bad thing. Means you actually have developers that can accomplish things.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "ericswpark",
        "body": "Yer a server Harry",
        "score": 28,
        "replies": []
      },
      {
        "author": "doofthemighty",
        "body": "A company I worked for had a global DNS service running on a potato PC sitting under some guy's desk. I bet stuff like this happens far more often than people realize.",
        "score": 4,
        "replies": []
      },
      {
        "author": "Commercial-Ranger339",
        "body": "And that server...albert einstein",
        "score": 6,
        "replies": []
      },
      {
        "author": "whackylabs",
        "body": "Futher down the article is the classic case of managers being manager\n\n&gt;  Jeff Dean, now Alphabet's chief scientist, personally stopped by the room that day to check in on the progress, helping boost morale, and further emphasizing the critical nature of the project.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Specialist_Brain841",
        "body": "MS SourceSafe",
        "score": 1,
        "replies": []
      },
      {
        "author": "jnoord001",
        "body": "Shows you how little actual developers actually use source control.",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "Company claims 1,000 percent price hike drove it from VMware to open source rival",
    "body": "",
    "score": 1017,
    "url": "",
    "created_utc": 1733228885.0,
    "author": "oweillnet",
    "permalink": "/r/programming/comments/1h5ma46/company_claims_1000_percent_price_hike_drove_it/",
    "comments": [
      {
        "author": "limitless__",
        "body": "In my industry every single contemporary I have (I'm a CTO) has done the same thing. The majority have moved to KVM and Proxmox, some brave souls are on Hyper-V but NO-ONE has stuck with VMWare. It's dead Jim.",
        "score": 678,
        "replies": [
          {
            "author": "jaskij",
            "body": "Nah. They openly stated during the merger that they want to only retain something like 10% of top customers.",
            "score": 261,
            "replies": [
              {
                "author": "BobHogan",
                "body": "I really wonder about their strategy with that. What are they offering these top customers that will make them stay even when paying significantly more than if they switched to other providers?",
                "score": 181,
                "replies": [
                  {
                    "author": "baked_salmon",
                    "body": "They’re offering nothing. It’s that these customers are so large that migrating off VMWare is infeasible, so VMWare can squeeze them for everything they’ve got.",
                    "score": 321,
                    "replies": [
                      {
                        "author": "HCharlesB",
                        "body": "That will work for a while. There's going to be churn even at the largest tier customers. It may not be feasible to switch their existing system but they'll be looking hard at using another vendor for new systems. Any new projects are much less likely to use VMware and some of those will eventually be the big systems that could have profited Broadcom but now will not.\n\nI'm sure they've factored all of this into their business plan.\n\nI see this as a big boost for Proxmox as long as they don't try to do something similar with their licensing. The risk to Proxmox is that large companies will use w/out providing any support. I would hope for a model where commercial entities pay for features they desire and they can be released to the rest of the community.\n\nAre any organizations moving to Virtualbox instead? I wonder if Oracle is seen as a risk in that regard.",
                        "score": 134,
                        "replies": [
                          {
                            "author": "Alan_Shutko",
                            "body": "&gt; That will work for a while. There's going to be churn even at the largest tier customers.\n\nBroadcom will continue to leech off anyone who doesn't move off, because hey, it's free money (they won't do any meaningful development). Once the husk is dry, they'll move onto the next acquisition. It's their whole business model.",
                            "score": 126,
                            "replies": [
                              {
                                "author": "HCharlesB",
                                "body": "100% agree, especially no \"meaningful development.\"",
                                "score": 32,
                                "replies": []
                              },
                              {
                                "author": "darthcoder",
                                "body": "Pay 40b for VMware.  Do nothing, make it back in 5 years.\n\nDo this shit, lose billions...\n\nDafuq.",
                                "score": 8,
                                "replies": [
                                  {
                                    "author": "Niewinnny",
                                    "body": "do this shit and it goes like this:\n\n- pay 40b for VMware\n- squeeze everyone for 10x the price\n- half your clients fuck off, but you still make 5x more money than before\n- make your money back in a year\n- the next year is pure profit, even though half of the remaining clients fucked off\n- find another product to buy and squeeze money off of and leave VMware behind",
                                    "score": 15,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 14,
                            "replies": [
                              {
                                "author": "darthcoder",
                                "body": "Affero GPL is hard to undo.",
                                "score": 7,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "blambear23",
                            "body": "&gt; That will work for a while.\n\nNo one at the top cares about the long term.",
                            "score": 46,
                            "replies": [
                              {
                                "author": "HCharlesB",
                                "body": "I was wondering if you meant at Broadcom or their customers. I suppose that thought is applicable to both.",
                                "score": 13,
                                "replies": [
                                  {
                                    "author": "CrunchyTortilla1234",
                                    "body": "for their customers of VMWare prices the savings *are* short term and long term.\n\nLicenses were expensive, are even more expensive, and with just few dozen servers savings alone will pay for manpower within months",
                                    "score": 10,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "T-rex_with_a_gun",
                            "body": "ding ding ding.\n\nmid-tier exec here. and this has been org wide mandates when we want to kill of a embedded parasite.\n\nwe did this with AWS to GCP(significant cost savings via gke) as an example.\n\nno new projects were allowed to be started on aws ECS. all new had to be on gke.",
                            "score": 11,
                            "replies": []
                          },
                          {
                            "author": "Bakoro",
                            "body": "&gt;That will work for a while. There's going to be churn even at the largest tier customers. It may not be feasible to switch their existing system but they'll be looking hard at using another vendor for new systems. \n\nI seriously wonder what kind of money we're talking about here. It might not be so unfeasible.    \n    \nI used to work for a colocation data center when AWS was taking off, and that industry saw a real beat down, with some companies moving their whole business into the cloud. \nWhat some people might find particularly interesting, is that some very large companies looked at how much they were paying us, looked at the cloud options, and decided \"fuck it, we're going to build our own data center.\"      \n      \nSome of those top companies where paying ~$20 million a year, and they were able to move their whole operation relatively quickly.  \n   \nI know it's a bit of a different situation, I'm just saying that I've seen businesses make relatively high risk moves in the tens of millions of dollars before.  \n    \nIf VMware starts fucking with the money and presents themselves as a risk, corporations *will* go to a more volatile alternative that is at least under their control.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Mognakor",
                        "body": "I know of a company that migrates between Citrix and VMWare every couple of years.",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "BobHogan",
                        "body": "I hate corporate greed. Does nothing but make everything worse T_T",
                        "score": 26,
                        "replies": [
                          {
                            "author": "Venthe",
                            "body": "Is it? VMWare collapse is the single best thing that could happen. Multiple smaller companies are now forced to compete and improve; open source solutions are getting recognition and the big companies are paying the expensive lesson of being vendor locked. I'm unironically seeing this as everything going for the better",
                            "score": 64,
                            "replies": [
                              {
                                "author": "panchosarpadomostaza",
                                "body": "Capitalism. Love it when you see it in action.\n\nThe version when there's a big fat provider and no one pays attention to the smaller ones due to being just right there in the comfort/price border sucks though. Takes something like this to move companies out of that zone.",
                                "score": 15,
                                "replies": []
                              },
                              {
                                "author": "BobHogan",
                                "body": "That's true. This probably is a good thing overall. But my comment was more in general about corporate greed and not this specific situation",
                                "score": 2,
                                "replies": []
                              },
                              {
                                "author": "EveryQuantityEver",
                                "body": "At the same time, this could have happened without corporate greed. We always could have had multiple competitors, each with healthy companies supporting them.",
                                "score": 0,
                                "replies": [
                                  {
                                    "author": "Plank_With_A_Nail_In",
                                    "body": "No it couldn't. If a company make's an almost perfect product and doesn't abuse its customers no one is going to move from it, that's where they were before they were bought.",
                                    "score": 11,
                                    "replies": [
                                      {
                                        "author": "hjd_thd",
                                        "body": "If the product's already perfect, then why would it need competition?",
                                        "score": 3,
                                        "replies": [
                                          {
                                            "author": "ZirePhiinix",
                                            "body": "If it stays perfect then it doesn't need competition, but then someone will come along to try to cash out and then this happens.",
                                            "score": 7,
                                            "replies": []
                                          }
                                        ]
                                      },
                                      {
                                        "author": "EveryQuantityEver",
                                        "body": "Yes, it could. VMWare didn't have to get as dominant as it did.",
                                        "score": 1,
                                        "replies": []
                                      }
                                    ]
                                  },
                                  {
                                    "author": "darthcoder",
                                    "body": "We did. \n\nThen Broadcom went full on r-slur.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "deja-roo",
                            "body": "Moving out of virtualized solutions is not making things worse. It's unwieldy and inefficient, and wastes tons of compute.",
                            "score": -11,
                            "replies": [
                              {
                                "author": "darthcoder",
                                "body": "Lol, what? \n\nThe whole reason we moved to virtualization is that most hardware is idle 90% of the time.",
                                "score": 6,
                                "replies": []
                              },
                              {
                                "author": "ogtfo",
                                "body": "Read the room, nobody is moving away from virtualization.",
                                "score": 3,
                                "replies": []
                              },
                              {
                                "author": "NotUniqueOrSpecial",
                                "body": "What the hell are you even responding to? Certainly isn't anything the person you replied to said.",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "Brak710",
                        "body": "I’m fairly confident I know of a top 10 customer who is already working on migrating away. It’s a very large pharmaceutical company everyone knows. Hard to know if they are in the top 10 for sure, but they believe they are based on their spend.\n\nI do think the blow-back and exodus is larger than people think.",
                        "score": 7,
                        "replies": []
                      },
                      {
                        "author": "spaceneenja",
                        "body": "Large companies are migrating off it as well.",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "urbrainonnuggs",
                        "body": "Nothing is infeasable to save money on a contract increasing 1000%.\n\nYou would be surprised at how easy modern infra is to deploy. Have to at least try or you are a complete issue l idiot",
                        "score": 5,
                        "replies": []
                      },
                      {
                        "author": "ascii",
                        "body": "My employer migrated a few tens of thousands of machines from on prem to the cloud. Took some doing, but we would do it again if someone tried to fleece us like that.",
                        "score": 5,
                        "replies": [
                          {
                            "author": "baked_salmon",
                            "body": "I’m not in IT or system administration — I’m a software engineer. Not sure what goes into a massive migration like this but I’m assuming that Broadcom has done the math and calculated that their biggest customers won’t bother with it. I’m sure it’s possible, but these massive legacy customers that have long forgotten what they even pay VMWare for anymore probably wouldn’t even know where to start.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "radikalkarrot",
                        "body": "Not even the biggest customer will stay with them for long though, any reasonable company will start slowly but surely moving to another much cheaper platform, if it is much cheaper is possible to have both working in parallel until all the kinks have been ironed out, once that’s done it’s over",
                        "score": 4,
                        "replies": []
                      },
                      {
                        "author": "heyheyhey27",
                        "body": "The Oracle model?",
                        "score": 3,
                        "replies": []
                      },
                      {
                        "author": "N3oto",
                        "body": "I worked at a place that that's in exactly that scenario. Broadcom know its impossible for them to move and that they have to pay. They ran all sorts of PoC's to consider other platforms but ultimately the thing that no other vendor was willing to offer was the kind of support agreement that Broadcom/VMware offer for a platform at this scale (10000+ hosts). \n\nFor a lot of the big boy customers with massive platforms what they want is the ability to blame someone else when it goes wrong. Saw it elsewhere in the org. Linux Product manager said hiring a team of inhouse Senior Engineers would be far cheaper than paying for the super duper support contract with Red Hat. Nope. they want the legal safety net of a vendor support contract.",
                        "score": 3,
                        "replies": []
                      },
                      {
                        "author": "PM_ME_UR_COFFEE_CUPS",
                        "body": "I work for a massive company and we are investing in migration as a cost avoidance play",
                        "score": 2,
                        "replies": []
                      },
                      {
                        "author": "CrunchyTortilla1234",
                        "body": "Thing is, it isn't a database that holds your data ransom. It's \"just\" running VM images + some networking (based on open protocols no less).\n\nMigration is just moving storage over, at worst installing storage drivers on the machine for different virtualization. It can be a lot of work but it's mostly safe work that can be done VM by VM\n\nThe biggest ones are the ones with enough cash to migrate",
                        "score": 3,
                        "replies": [
                          {
                            "author": "smcarre",
                            "body": "This is an incredibly narrow view of what infrastrcuture is in reality.\n\nIt's not \"just running VMs + networking\". It's the knowhow and procedures already in place both in the current employees and their documentation on how to maintain, expand, update, troubleshoot and monitor the current  infrastrcuture. It's all of the automations already in place that modify and monitor that infrastructure. It's the way things are architected to use and leverage VMware's tools and suites. It's every third party integration and license that works one way with VMware but in other ways with other vendors. It's the relationship that sysadmins have with VMware's own customer support. It's the state of permissions and governance already in place that works for both humans and bots that interact with the infrastructure.\n\nYou can't just migrate storage and images over and replicate the networking. Are you gonna hire a whole new payroll of people expert in Proxmox or are you gonna expect your employees to learn Proxmox while the migration happens? Will you buy new capacity in order to migrate the current workload to Proxmox or are you gonna reduce your capacity to do the migration? How long will it take your employees to update every documentation and automation to work with Proxmox instead of VMware?\n\nAt one point, paying very overpriced licenses is still worth because the migration cost is actually much bigger. Without even considering the likely issues caused by these kinds of migrations (not only issues that arise during the migration like things configured wrongly when migrated but also issues that arise after like finding new kinds of problems that you are not used to find because they didn't happen in VMware while the problems you were used to maybe don't happen).",
                            "score": 24,
                            "replies": [
                              {
                                "author": "FireCrack",
                                "body": "Not to mention the actual behaviour of applications running on your nodes might be sensitive to the environment.\n\nWe are a small shop that mainly uses AWS and just has some in-office servies on VMware, and yet it still took us 3 months with 3 senior devs to move everything over and ensure it was stable. And this is just a temporary bandaid cluster. Long-term proxmox is the plan, but getting more of the team trained up and familiar with it is a prerequisite for that.",
                                "score": 5,
                                "replies": []
                              },
                              {
                                "author": "CrunchyTortilla1234",
                                "body": "&gt; You can't just migrate storage and images over and replicate the networking. Are you gonna hire a whole new payroll of people expert in Proxmox or are you gonna expect your employees to learn Proxmox while the migration happens? \n\nThing is, for that kind of price hike **you can afford it**, you can afford to re-train whole staff and hire some more and still be better off than staying with VMWare.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "geon",
                        "body": "The larger a customer is, the more feasible it is to spend developer time on it.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "nikanjX",
                    "body": "They are offering the magic of \"by paying the massive bill, you avoid the pain of migrating\". IT departments in huge corporations know the massive bill will easily be absorbed as a cost-of-doing-business, but the manpower needed to migrate would never be approved",
                    "score": 39,
                    "replies": [
                      {
                        "author": "CrunchyTortilla1234",
                        "body": "if bill ups from \"single ops person salary\" to \"five\" it suddenly starts making far more sense",
                        "score": 8,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "francis_pizzaman_iv",
                    "body": "Others are saying that it’s all about lock in, and that’s true to an extent, but also these vendors offer support contracts which allow their customers to avoid hiring staff for managing the product. \n\nVMWare employs teams of experts on their product that can provide better support for cheaper than internal staff could. Even at a 10x price increase those support contracts may still be more cost effective than internal hiring for a big enough company.",
                    "score": 14,
                    "replies": []
                  },
                  {
                    "author": "luckymethod",
                    "body": "That's the strategy. Increase revenue per client, reduce costs, milk the product.",
                    "score": 8,
                    "replies": []
                  },
                  {
                    "author": "jaskij",
                    "body": "From the threads I saw here, it's more that while the competition is decent, they are not at parity right now. So while a lot of the smaller clients can, and will, migrate, many will not because they're missing something.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "BobHogan",
                        "body": "Gotcha. I try to avoid ops in general, and I have very little experience with vmware, so didn't realize they offered features other providers don't",
                        "score": 1,
                        "replies": [
                          {
                            "author": "jaskij",
                            "body": "Ah, I just realized this thread is in r/programming. I tend to also lurk in r/sysadmin and thought we're there until I saw your last comment.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "BobHogan",
                                "body": "No worries lol I learned something new from your comment",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "solid_reign",
                    "body": "I'm not sure what the strategy is to get them, but I can tell you that there are several expensive solutions that mostly only care about Fortune 500 / Fortune 1000 customers.  Many times they are expensive but the best in the market, their investment in POCs and relationships pay off, and normally companies of that size have such a large technological infrastructure that they'll require less support, and they can pay their staff very well. \n\nOf course if a smaller customer arrives they'll service it, but they don't focus their sales effort on them.  Normally, they'll hire someone with a lot of experience in selling and servicing those customers.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "crackanape",
                "body": "If they charge 10x as much and keep the top 10% of customers then they have the same revenue but less other costs.\n\nSo in the short term it's a win for the quarterly returns goons. In the long term it means that the industry moves away from their product which is sad for all the work that's gone into it.",
                "score": 25,
                "replies": [
                  {
                    "author": "gwillen",
                    "body": "The industry was going to move away from their product eventually anyway -- virtualization is an OS feature now, not a product. They did amazing stuff technically, back in the day, but they've been commoditized and the writing is on the wall.",
                    "score": 10,
                    "replies": [
                      {
                        "author": "ungoogleable",
                        "body": "That suggests they are making the correct decision to milk customers who are the most locked in for as much as they can while they can.",
                        "score": 4,
                        "replies": [
                          {
                            "author": "gwillen",
                            "body": "Yeah, I'm being a little bit glib but I feel like that might just be true.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Bobofey",
                "body": "My company will definitely be considered one of their top 10% and we are looking to move. The issue is the scale that is required in order to migrate",
                "score": 10,
                "replies": [
                  {
                    "author": "Norse_By_North_West",
                    "body": "I've got a client that uses it, and we use it at work sometimes. I had no idea about the price hike. I should probably cancel my workstation license, I haven't actually used it in a couple of years.\n\nThe price hike sure explains why the client keeps fucking around dropping us from their horizon login. It's funny too, because they spent years moving a bunch of their employees to virtualized desktops.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "randomdestructn",
                        "body": "good news: workstation is free now!\n\nhttps://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/",
                        "score": 6,
                        "replies": [
                          {
                            "author": "redreinard",
                            "body": "They did this so they no longer have to support the product.\n\nOnly good news for a very short period.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "tchernik",
                "body": "That strategy got Silicon Graphics and others killed. The low end customer or IT guy of today is the CTO of tomorrow.",
                "score": 8,
                "replies": []
              },
              {
                "author": "usrlibshare",
                "body": "Brilliant plan! Those 10% are the ones with the most resources, largest IT departments, and biggest CM infras.\n\nAka. the people who, at the same time, would pay the most from price hike, and are best positioned to transition away to another platform.",
                "score": 2,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "That effectively means no new adoption. This kills the product.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Hulkmaster",
            "body": "feels like move:\n\n\\- i have 100% capacity for x1 money!  \n\\-- you can increase money to x2, if at least 50% will stay - you'll have same money for .5 capacity!\n\nso, theoretically, if they've increased price by x10, and at least 1/10 stayed - they're having same amount of money\n\nif more = more money!\n\nand now imagine giants like microsoft \"suddenly moving\" :)",
            "score": 53,
            "replies": [
              {
                "author": "Unique_Brilliant2243",
                "body": "This is called price elasticity of demand in economics.\n\nhttps://en.m.wikipedia.org/wiki/Price_elasticity_of_demand\n\nAnd indeed, this is also why monopolies are bad, because a monopoly can make exactly that decision and might make a lot more money because people have no alternative.",
                "score": 67,
                "replies": [
                  {
                    "author": "seriousnotshirley",
                    "body": "The pharmaceutical industry has entered the chat. \n\nMy Macro prof railed about them for the semester I had class with him and it was like a year later the news stories started to show up about how they were jacking up prices because \"How much will you spend to stay alive?\"",
                    "score": 39,
                    "replies": [
                      {
                        "author": "Cheeze_It",
                        "body": "&gt; \"How much will you spend to stay alive?\"\n\nWhat people don't understand in those positions is, at a certain point the trucks carrying the completed product will start having some of their goods falling out the back.",
                        "score": 14,
                        "replies": []
                      },
                      {
                        "author": "Soggy-Permission7333",
                        "body": "Will add that:\n\nPharma can be negotiated down. 101 of Capitalism if you have good leverage during negotiations you get better prices. Having bigger purchase volume is one way of gaining leverage.\n\nMedicaid/Medicare aren't socialist ideas. They are Capitalism. Bigger purchase volume -&gt; smaller prices.\n\n(And guess what Pharma does when they want lower prices on base ingredients for their drug production?)",
                        "score": 2,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "&gt; Medicaid/Medicare aren't socialist ideas. They are Capitalism. Bigger purchase volume -&gt; smaller prices.\n\nThey're forbidden by law from negotiating to get discounts for their volume.",
                            "score": 16,
                            "replies": [
                              {
                                "author": "Indifferentchildren",
                                "body": "That was true as Republicans passed Medicare Part-D, but Biden's Inflation Reduction Act changed the law, and Medicare has been negotiating drug prices, leveraging the power of their huge purchase volume: \n\nhttps://www.whitehouse.gov/briefing-room/statements-releases/2024/08/15/fact-sheet-biden-harris-administration-announces-new-lower-prices-for-first-ten-drugs-selected-for-medicare-price-negotiation-to-lower-costs-for-millions-of-americans/",
                                "score": 9,
                                "replies": [
                                  {
                                    "author": "EveryQuantityEver",
                                    "body": "Unfortunately, Trump has signaled that he wants to end that.",
                                    "score": 11,
                                    "replies": []
                                  },
                                  {
                                    "author": "[deleted]",
                                    "body": "That only applies to part D.\n\n\nAll the other parts can't negotiate. They set prices by fiat using RVRBS.",
                                    "score": -1,
                                    "replies": [
                                      {
                                        "author": "Indifferentchildren",
                                        "body": "Part-D is the pharmaceutical benefit, so if you are talking about drug prices, you are talking about Part-D.",
                                        "score": 3,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "seriousnotshirley",
                            "body": "That was actually my econ prof's follow up; we (individuals) don't have any leverage to combat this, insurance companies have some leverage but if we had universal health care the US government would have all the leverage.",
                            "score": 12,
                            "replies": []
                          },
                          {
                            "author": "BobHogan",
                            "body": "They can be negotiated down, but the fragmented nature of healthcare in the US means that all of the negotiations are heavily in favor of the pharma companies instead of actual people who need the medications.",
                            "score": 6,
                            "replies": []
                          },
                          {
                            "author": "Plank_With_A_Nail_In",
                            "body": "My country doesn't even bother negotiating, we talk to industry experts work out how much it must cost to make the drug and offer that plus what would still be a good margin in any other industry and they can either take it or not sell it at all...they all take it.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "Soggy-Permission7333",
                                "body": "That's the same mechanism. \"They take it\" not because that's all they want, but because negotiation leverage is that big. After all your country negotiate on behalf of every citizen. That is by definition the biggest purchase power (\\*) there is.\n\nSmaller pools of buyers would not be able to get the same deal. Bigger -&gt; better.\n\n  \n(\\*) Note: some countries also do charities, if those go through the same negotiations process, purchase power increased even more.",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "Plank_With_A_Nail_In",
                        "body": "My country dictates the prices they are allowed to sell at, they still make a good profit and still happily sell their drugs.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "panchosarpadomostaza",
                    "body": "You're talking about the first type of monopoly.\n\nThere are other types of monopoly where the monopoly extracts from each customer the exact value they're looking for (2nd - discrimination based on groups. 3rd - perfect discrimination). It's not this case unfortunately.\n\n(And yes. There are situations where monopoly price can be lower than with competition. Sounds illogical? [Well, wait until you get to study this book](https://mitpress.mit.edu/9780262200714/the-theory-of-industrial-organization/))",
                    "score": 1,
                    "replies": [
                      {
                        "author": "CrunchyTortilla1234",
                        "body": "&gt; (And yes. There are situations where monopoly price can be lower than with competition. Sounds illogical? Well, wait until you get to study this book)\n\n...until competition dies off, and then it goes back up...",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "immersiveGamer",
                "body": "1,000% would be x10",
                "score": 7,
                "replies": [
                  {
                    "author": "Hulkmaster",
                    "body": "oh my, mother always told me i'm bad at math\n\nwill adjust, thanks!",
                    "score": 0,
                    "replies": []
                  }
                ]
              },
              {
                "author": "SippieCup",
                "body": "Also lower operating costs supporting customers.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "now, let me know whether you know of something to replace oracle's OLAP or exadata with…",
            "score": 3,
            "replies": []
          },
          {
            "author": "Somepotato",
            "body": "Nutanix got a lot out of it too",
            "score": 4,
            "replies": []
          },
          {
            "author": "bwainfweeze",
            "body": "Docker desktop moved off of VMware ages ago, and now they’re charging so people are moving off of them too.",
            "score": 4,
            "replies": []
          },
          {
            "author": "FatFishHunter",
            "body": "Do you know how they run KVM on?",
            "score": 1,
            "replies": [
              {
                "author": "Weird_Cantaloupe2757",
                "body": "Computers, likely Linux ones",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "We didn’t move but only because we’re so engrained and doing so would shut down operations for months. It’s frustrating.",
            "score": 1,
            "replies": [
              {
                "author": "pysouth",
                "body": "Lots of hospital IT still using it for, presumably, the reasons you mentioned. I don’t work for a hospital, but we are a vendor for a lot of them and many use VMWare.",
                "score": 5,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "Makes sense. I work for the government (NASA) and we utilize VMWare for many of our cloud services, and the increase in price really rocked our operations but we can’t pivot because we can’t fund it.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "ekydfejj",
            "body": "Its been a \\~8 years since i've used ProxMox, but even then we preferred it to VMWare, for multiple reasons.",
            "score": 1,
            "replies": []
          },
          {
            "author": "LabRepresentative777",
            "body": "Never understood the hate with hyper v servers.  We’ve used it since 2012 and now n 2025. Full replication from server to server and the cloud. 80 vm servers for 13 years without any crashes.",
            "score": 1,
            "replies": []
          },
          {
            "author": "BoJackHorseMan53",
            "body": "Open source is socialism.\n\nSocialism ftw. Suck it capitalism.",
            "score": -2,
            "replies": [
              {
                "author": "BoJackHorseMan53",
                "body": "People downvoting should follow capitalism and pay for VMWare",
                "score": 0,
                "replies": [
                  {
                    "author": "Unlucky-Frame9964",
                    "body": "You leftist vermin should move to a utopia like venzuela or north korea.\n\n\nDegenerate parasite.",
                    "score": 0,
                    "replies": [
                      {
                        "author": "BoJackHorseMan53",
                        "body": "You craptalists deserve the education and healthcare dystopia that is the United States. I'd rather be in communist China",
                        "score": 1,
                        "replies": [
                          {
                            "author": "Impressive_Ear5939",
                            "body": "Hey check your DMs.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "_predator_",
        "body": "Now support the OSS that you literally run your business on, please.",
        "score": 257,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 76,
            "replies": [
              {
                "author": "arwinda",
                "body": "Instead pop up on GitHub and demand quick fixes for any problems in your infrastructure from unpaid volunteers. Without providing details what the problem is about.\n\nBest made if the request starts with \"hey team\".",
                "score": 35,
                "replies": [
                  {
                    "author": "FistBus2786",
                    "body": "*team*: (noun) colloquial term for that one burnt out and underpaid guy who has been thanklessly maintaining a critical piece of infrastructure which numerous profitable companies depend on",
                    "score": 11,
                    "replies": [
                      {
                        "author": "_predator_",
                        "body": "There is this joke in German that Team stands for \"Toll Ein Anderer Macht's\" (great someone else is doing it), which I think does apply here, too.",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "01JB56YTRN0A6HK6W5XF",
                        "body": "[Insert related xchd]",
                        "score": 1,
                        "replies": [
                          {
                            "author": "ConvenientOcelot",
                            "body": "https://xkcd.com/2347/",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "arwinda",
            "body": "Lol no. The companies just saved money on VMware, let's buy back shares instead!\n\nUnfortunately no /s",
            "score": 103,
            "replies": [
              {
                "author": "Conexion",
                "body": "I know it is taboo in a lot of OSS circles, but I certainly wouldn't mind seeing licenses that requires monetary contributions after exceeding a certain amount of scale. As long as our society is modeled as it is, companies will abuse any place they can get free labor.",
                "score": 10,
                "replies": [
                  {
                    "author": "arwinda",
                    "body": "\"monetary contributions\" come with the expectation of support and bug fixing.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 3,
                        "replies": [
                          {
                            "author": "arwinda",
                            "body": "That is what some companies are doing, but there is no requirement to do that. Some comps understand that they need someone with skills and knowledge, and retain support. Others just post online once they have a problem.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Conexion",
                        "body": "In the current model, yes. I don't think you're entitled to support or bug fixes if the license dictates that you have say, contribute $500 a year to the project if your company makes over $10m in revenue per year while the project is in active development. \n\nSome open source projects do great managing a support-as-a-service model - But not every developer wants to manage a support business, and nobody is entitled to a developer's free work. If a developer wants to freely provide their code, that's great - But I see nothing wrong with requiring people that make money off of the project to contribute some small amount back.\n\nAnd of course, if the business doesn't like it, they can choose another project or gods-forbid, program their own.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "arwinda",
                            "body": "If companies pay money for a license, they can reasonable expect something in return. They will want support for the money.\n\nThe GPL license has this in the preamble: \"the software is free for all its users\".\n\nAnd also: \"You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\"\n\nNote the \"in exchange\". At least GPL and with that a large share of licenses out there are not compatible with the idea of monetary contributions tied to the license.",
                            "score": 3,
                            "replies": [
                              {
                                "author": "36gianni36",
                                "body": "The return is that the company can use the software at that scale.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "arwinda",
                                    "body": "You need to change quite a few popular open source licenses for that. Unlikely to happen.",
                                    "score": 2,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "geon",
                        "body": "How about requiring commits?",
                        "score": 1,
                        "replies": [
                          {
                            "author": "arwinda",
                            "body": "If the project doesn't accept your PRs, what are you going to do about it?",
                            "score": 0,
                            "replies": [
                              {
                                "author": "geon",
                                "body": "Hire better developers?",
                                "score": 0,
                                "replies": [
                                  {
                                    "author": "arwinda",
                                    "body": "Not the point. If the project doesn't like you, or the sole project developer is a dick, how do you proof that you did \"your payment in form of required commits\".\n\nAnd why do you leave out non-code contributions and require only code contributions.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "ungoogleable",
                    "body": "I mean, anybody can come up with a license like that and release their own software under it. It just wouldn't be considered open source. It's commercial software with a free tier and source available.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "Days_End",
                    "body": "It's not really taboo if you pay attention is OSS circles for big critical projects you'll notice half the developers have an @redhat, @microsoft, @google, etc email. The big company basically already fund development of \"critical\" OSS.\n\nHell even just look at the kernel mailing list for emails it's the same story.\n\nThe issue is all in the middle where a project is big enough for a lot of people to use it and want support but not yet big enough or dig in enough for large companies to start dedicating people to it.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "arwinda",
                        "body": "However the companies support this by charging customers a general service contract, and from that money also funding development. Not by sending money directly to projects all the time.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "tistalone",
                    "body": "They'll rather fork it and have their engineers figure it out than to pay someone else to maybe support their use case.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "DowsingSpoon",
            "body": "Yes, I agree. In fact, I think most open source projects make available a pretty detailed document going over the demands they make of anyone who wishes to use their software. Large companies would do well to follow it to the letter!",
            "score": 7,
            "replies": [
              {
                "author": "ProtoJazz",
                "body": "It's worrying enough that a few years ago the government put together a list of critical open source packages.\n\nI guess part of it is for things like attack vectors\n\nBut there's a lot of stuff depending on projects that would trigger pretty big events if they just closed up one day, deleted the project, took their ball and went home.",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "themattman18",
        "body": "My company is currently leaving VMware because of this",
        "score": 44,
        "replies": [
          {
            "author": "InrebCinatas",
            "body": "Same here.",
            "score": 10,
            "replies": []
          }
        ]
      },
      {
        "author": "RheumatoidEpilepsy",
        "body": "Broadcom 🤝 Enshittification",
        "score": 166,
        "replies": []
      },
      {
        "author": "edgmnt_net",
        "body": "Not very surprised. Closed ecosystems throughout the industry boomed uncannily for a while in spite of obvious dangers pretty much because cheap money made them affordable. Then either prices get bumped up to cover tech debt or customer pockets run dry. Or at least that's my take on recent developments.\n\nNow I'm not sure about VMware in particular, it might not apply there. I might be totally off, but I have seen a lot of weird products over the years making me question who in their right mind would buy into them. Especially larger companies who can afford hiring one or two people able to work with more open offerings to solve the harder problems and avoid getting locked into stuff.",
        "score": 47,
        "replies": [
          {
            "author": "darkpaladin",
            "body": "Just wait till cloud providers stop growing through new customers and start squeezing your monthly bill.  I predict we're gonna see saas adoption inverse over the next few years.",
            "score": 36,
            "replies": [
              {
                "author": "edgmnt_net",
                "body": "I believe so too. I've seen SaaS products pile up so much tech debt. Years ago it was rather more straightforward to deal with tech debt when doing ad-hoc work and random features for a customer in the form of websites, ERP customizations and so on. But in the case of SaaS the vendor owns all that complexity, they need to maintain all that stuff and deal with the fallout that haphazard development in exchange for a subscription entails. They may be hoping the work will be useful for other customers, but it's often more complicated than that.",
                "score": 10,
                "replies": []
              },
              {
                "author": "pheonixblade9",
                "body": "it's been happening already. hybrid is not just for legacy companies, plenty of new projects are on-prem.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "KeyboardG",
        "body": "Broadcom knew this and it was publicly their goal. Drop the lower 80% of customers and jack the prices on the whales who are too big to leave.",
        "score": 20,
        "replies": []
      },
      {
        "author": "FarkCookies",
        "body": "Original article [https://www.theregister.com/2024/12/02/beeks\\_group\\_vmware\\_opennebula\\_migration/](https://www.theregister.com/2024/12/02/beeks_group_vmware_opennebula_migration/)\n\n(just want to boost The Register cos I like them)",
        "score": 42,
        "replies": [
          {
            "author": "dagbrown",
            "body": "I have to admit it was really amusing seeing Ars Technica citing The Register. It's a bit like seeing Reuters citing the Daily Mail as a serious source.",
            "score": -17,
            "replies": [
              {
                "author": "FarkCookies",
                "body": "Wait what? Why would you compare Daily Mail with The Register?",
                "score": 23,
                "replies": []
              },
              {
                "author": "FarkCookies",
                "body": "Btw it is not unusual for them [https://arstechnica.com/information-technology/2024/12/company-claims-1000-percent-price-hike-drove-it-from-vmware-to-open-source-rival/#gsc.tab=0&amp;gsc.q=%22the%20register%22&amp;gsc.sort=](https://arstechnica.com/information-technology/2024/12/company-claims-1000-percent-price-hike-drove-it-from-vmware-to-open-source-rival/#gsc.tab=0&amp;gsc.q=%22the%20register%22&amp;gsc.sort=)",
                "score": 4,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Techman-",
        "body": "Yeah, is true. The company I work at has contracts with Broadcom (through acquisitions) for a variety of products/services and they are asking for an 800% price hike in some cases. It is insane.",
        "score": 11,
        "replies": []
      },
      {
        "author": "taspeotis",
        "body": "&gt; Beeks’ head of production management, Matthew Cretney, said that one of the reasons for Beeks' migration was a VMware bill for “10 times the sum it previously paid for software licenses,” per The Register.\n\nSo a 900% increase?",
        "score": 54,
        "replies": [
          {
            "author": "elyusi_kei",
            "body": "If this is in relation to the title, I don't think that's entirely fair. \"1,000% price hike\" is ambiguous as to whether it should be parsed as the price hiking *by* 1000% (what you're correcting), or whether the price hike sits *at* 1000% (relative to the original 100%). It's click-baity yes, but I don't think it's outright wrong.",
            "score": 7,
            "replies": []
          },
          {
            "author": "francis_pizzaman_iv",
            "body": "Are you arguing with the math? 1x = 100%, 10x = 1000%",
            "score": -7,
            "replies": [
              {
                "author": "cecilkorik",
                "body": "Technically OP is right. Keyword is \"increase\". If the price stayed the same (100%, 1x) it would be a 0% **increase**. Because it's the same price. If the price doubled (200%, 2x), it would be a 100% **increase**, because it's 100% of the previous price, **on top** of the previous price, for 200% price total but still only 100% increase. Thus, if you're paying 10x what you originally paid, that's 1000% (10x) of the original price, but only a 900% (9x) increase.\n\nThis is a classic fencepost error when dealing with increases. It depends on whether you're counting the original price as included or only counting the additional price increase.",
                "score": 29,
                "replies": [
                  {
                    "author": "francis_pizzaman_iv",
                    "body": "Yeah that’s fair. “1000 percent price hike” translated in my brain that the new price is 10x the old price. Which is obviously what they meant to say but fumbled the semantics.",
                    "score": 1,
                    "replies": []
                  },
                  {
                    "author": "chucker23n",
                    "body": "I'm frustrated by the amount of benchmark posts on this sub that get this wrong. For example, \"two times higher\" performance means that performance has _tripled_, not doubled.",
                    "score": -3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "deja-roo",
                "body": "Yes. Paying 10x as much for something is an *increase* of 900%. \n\n10 is 10x 1. 10 - 1 = 9. An increase of 9. 9 is 900% of 1.",
                "score": 8,
                "replies": []
              },
              {
                "author": "dakshin_",
                "body": "Yes, the math is wrong. If I was earlier paying $100 and I'm now paying $1,000, the increase is $900 - or 900%.",
                "score": 11,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "flargenhargen",
        "body": "in the end,\n\nthe person responsible for this at VMWare will get a few million dollar bonus, then leave to bankrupt some other company.\n\nwe're also leaving at my company,  as most are.",
        "score": 5,
        "replies": []
      },
      {
        "author": "santaclaws_",
        "body": "Broadcom finally gave VMWare enough rope.\n\nSurprising, really. I thought only private equity could be that mindless, stupid and destructive.",
        "score": 12,
        "replies": [
          {
            "author": "Alan_Shutko",
            "body": "Our company recently went through this dance with CA products (bought by Broadcom). This behavior is their whole business model.",
            "score": 6,
            "replies": []
          },
          {
            "author": "bwainfweeze",
            "body": "Clearly you haven’t been keeping up on Broadcom news. \n\nApple recently reiterated their plans to stop using Broadcom chips. \n\nI would love it so very much if they let TSM sublicense their IP to other people once they manage to get a feature complete solution.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "LessonStudio",
        "body": "5 years ago esxi and vmware workstation were two integral parts of development and deployment for much of what I and many friends were doing.\n\nMost devs I know flirted with AWS for a year or two before dumping it; usually after a surprise massive bill. \n\nNone, have returned to any VMWare product.\n\nIt is the neo novell; just irrelevant.",
        "score": 2,
        "replies": []
      },
      {
        "author": "T1Pimp",
        "body": "Their plan the entire time, according to my friends who used to work there, was ALWAYS to gut the client base to just a few.",
        "score": 2,
        "replies": []
      },
      {
        "author": "ColdPhilosophy",
        "body": "Broadcomm, the new IBM.",
        "score": 2,
        "replies": []
      },
      {
        "author": "RoutineLaw4653",
        "body": "What are you using VMware for? \n\nhttps://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/",
        "score": 3,
        "replies": [
          {
            "author": "CFusion",
            "body": "Workstation pro snapshots.",
            "score": 1,
            "replies": []
          },
          {
            "author": "13steinj",
            "body": "The downloads on Broadcom don't even work for me, or other people. Workstation Pro is also free for personal use now, but I had to manually download it from their update server (which wow, it seems to always have been an unprotected download).",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "IlliterateJedi",
        "body": "This is practically an r/nottheonion headline",
        "score": 2,
        "replies": []
      },
      {
        "author": "Nicolay77",
        "body": "VMware used to be the best on Windows.\n\nGuess what, I installed it last month on a brand new Windows 11, it now sucks, unless I can disable some Hyper-V thing which can't be disabled.\n\nAll the good high performance features are gone with this change.\n\nVMware is still very good on Linux, but who uses Linux as the daily driver? Only about 3% of people.",
        "score": 2,
        "replies": [
          {
            "author": "13steinj",
            "body": "You can disable Hyper-V, but WSL2 and therefore Docker Desktop\\*, are hyper-v based machines, so that may be your issue.\n\n*BEFORE some chucklefuck \"um ackshuallys\" me like they did once before; not containerd, not dockerd, not even the docker engine nor docker CLI, the Docker Desktop architecture (and organizational effort of container runtimes) is generally complicated as fuck. Docker Desktop on Windows is a desktop application + premium (and free) docker cli plugins connecting to a docker daemon  running on a (Hyper-V based) WSL2 VM (checking it, currently, it's Alpine 3.20.0 based) with qemu + binfmt support for alternative platform emulation (however knowing how docker docs suggest doing so, and the fact that they are Fixed-binary flag emulators with interpreters that don't exist in the VM and therefore cant have fancy detectors, it's probably not sophisticated enough to handle special architecture differences on ARM).",
            "score": 5,
            "replies": [
              {
                "author": "Nicolay77",
                "body": "&gt; WSL2 and therefore Docker Desktop\n\nNot using any of that, this a fresh Windows 11 install.\n\nFor docker I don't see the point of using Windows, I normally dual boot with Ubuntu and docker runs better on Ubuntu.",
                "score": 2,
                "replies": [
                  {
                    "author": "WarWizard",
                    "body": "Look into Virtualization Based Security -- it is likely you have something enabled that has turned this on. Open System Info and scroll to the bottom.\n\nThings like Device Guard, Credential Guard, and (most likely in your case) Memory Integrity. (Core Isolation under Settings).",
                    "score": 2,
                    "replies": [
                      {
                        "author": "Nicolay77",
                        "body": "Yes, it was that.\n\nThank you.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "13steinj",
                    "body": "&gt; Not using any of that, this a fresh Windows 11 install.\n\nSomething doesn't track here, on my fresh Windows install I actually had to explicitly enable Hyper-V to install Docker.\n\nAre you thinking of Windows' \"core isolation features\" (which are separate?)\n\nIn either case, you can turn both of those features off. So i have no idea what you're getting at with \"can't be disabled.\"",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Nicolay77",
                        "body": "You probably had to add a client for Hyper-V.\n\nSome services are always present.\n\nRead here: https://www.makeuseof.com/windows-11-disable-hyper-v/\n\nThe culprit in my case is something called \"Windows Device Guard\". Could not remove it.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Nchi",
                "body": "That's all fair, but isn't he still complaining about negating the performance of virtualization software because he... Wants to disable virtualization?",
                "score": 1,
                "replies": [
                  {
                    "author": "13steinj",
                    "body": "Hyper-V is *Microsoft's* virtualization solution, not virtualization features as a whole. I don't understand the details, but [VMWare was unable to launch VMs if Hyper-V was enabled](https://blogs.vmware.com/workstation/2020/05/vmware-workstation-now-supports-hyper-v-mode.html), for ages.\n\nYou can disable Hyper-V, and get full performance from VMWare (or maybe \"could?\" in the sense that maybe they disabled the non-user-mode virtualization to limit the amount of scope they have to work on). Or, as of 15.5 apparently, keep both enabled, and have degraded performance in VMWare.\n\nBut the original commenter incorrectly claims \n\n&gt; unless I can disable some Hyper-V thing which can't be disabled.\n\nWhich is false. It can be disabled. Just not if you use any Hyper-V based machines, including but not limited to WSL, and therefore Docker Desktop on windows.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "Nchi",
                        "body": "Did you get down to this part for the explanation btw?\n\n&gt; VMware Workstation traditionally has used a Virtual Machine Monitor (VMM) which operates in privileged mode requiring direct access to the CPU as well as access to the CPU’s built in virtualization support (Intel’s VT-x and AMD’s AMD-V).  When a Windows host enables Virtualization Based Security (“VBS“) features, Windows adds a hypervisor layer based on Hyper-V between the hardware and Windows.  Any attempt to run VMware’s traditional VMM fails because being inside Hyper-V the VMM no longer has access to the hardware’s virtualization support",
                        "score": 2,
                        "replies": [
                          {
                            "author": "13steinj",
                            "body": "No, but it doesn't change the comment I made-- you can turn off Hyper-V, you can turn off VBS. I don't know if you can turn off the first without the other, or if you need to perform the disabling in a specific order.\n\nIf you specify because I said \"or maybe 'could?'...\"; the article is 4 years old, I haven't checked if VMWare has removed the non-compatibility-layer features from their product.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "Nchi",
                                "body": "Ah sorry, I should have clarified my offer, it's from you saying 'I don't understand the details', so I found them and pasted such, and more meant to ask if you needed 'translation' lol, but I figured it might have been easy enough to digest and half posted each thought\n\nEta: also just realized why I made the mix up... Smh: hyper threading, amd-V. Hyper-v= Intel virtualization then right? Lmao. My memory is so fucked",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "13steinj",
                                    "body": "Np; I meant \"I don't understand the details\" because I don't understand why Hyper-V alone disables access to VT-x / AMD-V; I have seen people running running nested-vms in the past (mostly nested-hyper-v, but still).",
                                    "score": 2,
                                    "replies": [
                                      {
                                        "author": "Nchi",
                                        "body": "That's the first sentence in the quote, basically VMware core (or one part of the core set) they call as 'virtual machine monitor', aka their own hypervisor, needed to be rewritten, as having windows Hyper-v on makes their traditional privileged calls to raw cpu resources invalid, as that's the point of Hyper-v right? So it needed to be rewritten from VMware and parts added to hyper v by ms to support legacy VMware jank",
                                        "score": 1,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "Nchi",
                        "body": "Oh yea that's right I completely mixed that up, vmw randomly wants it off killing all of those, not sure how I managed to misread - ah spine issue reading. I should really stop posting when I can't think straight.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "WarWizard",
                    "body": "Virtualization Based Security - Windows is running some parts of the kernel through a VM -- which causes resource contention, etc.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Nchi",
                        "body": "I posted from the article below, it's that hyper v adds that vbs and VMware doesn't have a fallback when it can't directly talk to cpu, less contention and more direct inability based on design. Close enough to most tho lol",
                        "score": 1,
                        "replies": [
                          {
                            "author": "WarWizard",
                            "body": "Oh, I am well aware of how all of this stuff interacts. I have been fighting it for the better part of 8 months. Due two corporate pushes; one to upgrade to windows 11 and the other to deploy systems with group policies that enables all of the VBS settings. \n\nEven without the Hyper-V role or WSL.... anything, and I do mean ANYTHING, that enables VBS will cause these performance issues because it causes VMWare to use the Hyper-V Hypervisor instead of its own built in one (look at the log of the VM after you start, look for \"monitor mode\" -- ULM is Hyper-V and CPL0 is the built in hypervisor).\n\nHyper-V is one way you can get into this situation; and is the most common I think for anyone outside of a corporate environment where systems are more locked down. However newer builds of W11 are enabling these settings by default so you can see it outside of that security model also. This is also not a W11 only issue. These settings and the same situation can occur on W10 -- it is just that these things are not typically turned on out of the box in W10.\n\nThis whole situation is hell for anyone who relies on Virtualization for their day to day existence.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "WarWizard",
            "body": "&gt; Guess what, I installed it last month on a brand new Windows 11, it now sucks, unless I can disable some Hyper-V thing which can't be disabled.\n\nUnless this is a managed machine and your company prevents disabling the settings you need to look at anything that enables Virtualization based security -- which runs portions of the windows kernel inside a vm sandbox. Things like driver access, which all Hypervisors need to run virtual machines.",
            "score": 2,
            "replies": []
          },
          {
            "author": "darthcoder",
            "body": "VirtualBox is so much better.\n\nIt has actually good usb drive support.",
            "score": 0,
            "replies": [
              {
                "author": "WarWizard",
                "body": "I don't think either is better than the other. Vbox and VMWare have different tradeoffs. Both would be affected by the issues mentioned above.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Cheeze_It",
        "body": "Yep, we all know VMware is going to die.",
        "score": 1,
        "replies": []
      },
      {
        "author": "shizzy0",
        "body": "Wow, I guess you can support lower costs by losing 80% of your customers.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Bob_Spud",
        "body": "HP in the last couple weeks have launched their own hypervisor as VMware replacement, **HPE VM Essentials.**\n\nIts integrated into an existing product that currently is for managing VMware. \n\n[HPE VM Essentials Software is the easy alternative to VMware vSphere](https://www.techzine.eu/news/infrastructure/126395/hpe-vm-essentials-software-is-the-simple-alternative-to-vmware-vsphere/)\n\n[]()[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)\n\n[HPE VM Essentials Software ](https://youtu.be/Ah1IC4tiwxI?si=Rwib_oNoddJWOlkw)(YouTube)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)[](https://www.youtube.com/)",
        "score": 1,
        "replies": []
      },
      {
        "author": "ToaruBaka",
        "body": "VMware pricing model has been criminal for over a decade; surprised it's taken this long.",
        "score": 1,
        "replies": []
      },
      {
        "author": "mOjzilla",
        "body": "So the same guy who destroyed Vm ware destroyed Intel too, must be hard to be this bad.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Dankbeast-Paarl",
        "body": "Man, I hate seeing VMWare drove to the ground in the name of profit. Just how people predicted when the acquisition happened. I interned there in 2020 doing R\\&amp;D; the people and research were so cool.\n\nStarted college in 2016 (computer science). I remember hearing stories about Google and Twitter. They looked like dream job: getting paid and working on awesome technology. Attracting the best engineers from all over the world. Now look at Twitter, also completely gutted...\n\nI'm just sad to see the corporate world completely destroy another historic tech company.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Richandler",
        "body": "And they bought themselves a different type of subscription service.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Divinate_ME",
        "body": "I have a small question: Is Matlab as a language dead? As in, dead dead?",
        "score": 1,
        "replies": []
      },
      {
        "author": "Evilan",
        "body": "GM just finished moving its roughly 65,000 VMs off of VMWare's PCF this past month (it took ~2 years). Broadcom is just trying to squeeze out money while they can",
        "score": 1,
        "replies": []
      },
      {
        "author": "30thnight",
        "body": "Heard this exact story from a CTO last week",
        "score": 1,
        "replies": []
      },
      {
        "author": "Hikalin",
        "body": "PR document...",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "It really wasn’t that big of a deal to begin with. The cost increase isn’t that significant either. There are several products to choose from such as proxmox, Microsoft hyper v, etc, but none that really produce a beautiful product like VMWare.  Proxmox and Linux distros to automate your scalable environment is great, too! But nothing like good ol vmware. Tomatoe tomato\n\nCheers",
        "score": 1,
        "replies": []
      },
      {
        "author": "Low_scratchy",
        "body": "If you don't want to suddenly pay 1px for the same thing, did you really want it in the first place?",
        "score": 1,
        "replies": []
      },
      {
        "author": "Rare-Cut-409",
        "body": "Check out Platform9.  Started in 2013 by 4 very aerly VMW engineers.",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "80% of programmers are not happy",
    "body": "",
    "score": 1019,
    "url": "",
    "created_utc": 1722324174.0,
    "author": "big_dumpling",
    "permalink": "/r/programming/comments/1efn831/80_of_programmers_are_not_happy/",
    "comments": [
      {
        "author": "The_Last_Green_leaf",
        "body": "I woke up to a WhatsApp message the other day from a client adamant that the site wasn't working, and after hours of asking questions he finally admitted he had his VPN on, after I had already asked him this and he denied it multiple times, and on a site he wanted VPN's to not work on.  \n\nthings like this happen weekly and really do lower the enjoyment of my job.",
        "score": 501,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 174,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 185,
                "replies": [
                  {
                    "author": "ShadowWolf_01",
                    "body": "This is actually genius, I love it.",
                    "score": 45,
                    "replies": [
                      {
                        "author": "montibbalt",
                        "body": "Eh in my experience it goes like:  \n\nIT: unplug it and plug it back in  \nUser: I did that  \nNarrator: the user did not do that",
                        "score": 43,
                        "replies": [
                          {
                            "author": "fiah84",
                            "body": "that's why you add some superfluous but important sounding step in between, e.g. \"blow on it to remove dust\"",
                            "score": 28,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "trcrtps",
                    "body": "I always have to give people extra steps when all they need to do is clear cache and cookies because for whatever reason people fucking refuse to do it without feeling like the steps are more complex. \"Oh yeah, I did that...\"\n\nBitch, no you did not, or it'd work.",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "IndecisionToCallYou",
                    "body": "\"Reverse the ethernet cable\"",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "i_am_at_work123",
            "body": "I had a client email me on the weekend \"IMPORTANT\", and said the site \"is not working\", no other info, no error, screenshot.\n\nHe then tried doing a bunch of things himself, broke a bunch of things, now it's a mess.\n\nI'm yet to resolve this, but it appears to have been _nothing_, he just panicked.\n\nSo yea, fml",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "After 10 years, I'm between happy and complacent.\n\n1. I cannot think of a job I'd rather do\n2. Money is good\n3. WFH\n4. Opportunity to do creative work\n5. The sisyphus boulder of shitty code, shitty features, shitty processes and shitty people",
        "score": 935,
        "replies": [
          {
            "author": "LightShadow",
            "body": "We're rapidly approaching that time of year when the last year's poor decisions catch up with us -- I think that's what I dread the most. There's always time to do \"more things\" but never enough time to do less things \"better.\"",
            "score": 232,
            "replies": [
              {
                "author": "loup-vaillant",
                "body": "It's a vicious cycle. You rush a first draft, it goes to production, and when you need to scale or add features it becomes harder and harder, and you have less and less time to do it right.\n\nA simpler design would have been overall cheaper to make, would have fewer bugs, and run faster, but you have to not only start simple, but _maintain_ that simplicity over time. Making the effort is a non-trivial investment. Often you need to design the thing twice or thrice to find that non-obvious (at first) simplicity. Every time you do this you multiply your effort by at least 1.5.\n\nBut you also make your life easier later, sometimes to the point where rushing a new feature in a Big Ball of Mud becomes slower than doing it right in a well designed system. But there will always be the temptation to just wing it. Worse, sometimes the quick &amp; dirty solution is actually the right call.\n\nI don't know how to sell this. Indeed in the short term it's about \"more things\" vs \"less things better\". In the long run though, it's really about \"less things\" vs \"more things better\". _Good, Fast, Cheap: chose all 3 or you'll get none_.",
                "score": 68,
                "replies": [
                  {
                    "author": "Funky247",
                    "body": "It's especially tough to maintain the simplicity when people are scared to change things. When people don't understand how things work, they add more code to obtain the behaviour they want instead of modifying what exists because they can at least understand the code that they added.\n\nIt's not entirely wrong to do that either in the face of tight deadlines and aversion to breaking things (and not enough test coverage to avoid breaking things), but the codebase can only take so much additive change before it's a disgusting ball of spaghetti.",
                    "score": 10,
                    "replies": []
                  },
                  {
                    "author": "Straight_Ship2087",
                    "body": "I’m a hobby programmer right now, and the nicest thing about it is getting to take however long I want on a project. I’m sure it’s less crazy for people with real professional experience, but I usually redesign the ground floor of a program three times. By the third, I’ve usually got literally 1/6th as much code. \n\nI got into the habit of doing that after many, many projects were restarted when I got to a point that I couldn’t track down a program breaking glitch in these overly complex hacky programs I was making. Having that be most of the job sounds rough, I’m honestly kinda dreading entering the field lol.",
                    "score": 7,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Funky247",
                "body": "What time of year is that?",
                "score": 16,
                "replies": [
                  {
                    "author": "Pendarric",
                    "body": "next year. hopefully",
                    "score": 39,
                    "replies": []
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 30,
                    "replies": [
                      {
                        "author": "AnyJamesBookerFans",
                        "body": "Shouldn't we be using `UTCNOW()` to account for time zone issues? I'll create a ticket.",
                        "score": 10,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Grizzly_Corey",
                    "body": "New fiscal year!",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "KaiAusBerlin",
                "body": "It's always \"we added tool X so we could increase our productivity by 10%\" and never \"we added tool X do we could increase our quality by 10% at the same productivity\".",
                "score": 13,
                "replies": [
                  {
                    "author": "bighi",
                    "body": "Unfortunately, this is an industry in which you don’t compete on quality.\n\nEvery software is a mess, and companies are competing on who releases broken shit faster.",
                    "score": 5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "MasterLJ",
                "body": "Last year's bad decisions?  The last decades', imo.\n\nIt's all starting to catch up in IT orgs across the world.  It's never been sustainable, we've always known that to be true, but management and business leaders are really good at not being caught holding the bag.\n\nCrowdStrike was an excellent example of holding the bag for not prioritizing time to safety around new feature/definition/Channel Files in exchange for speed to market.  \n\nI've been in that position, where you are the only one preaching the right approach, but you are made to feel like you're crazy because you won't \"hit the date\".",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "kex",
            "body": "Happiness is unsustainable \n\nContentment is sustainable, so you're in a good place",
            "score": 78,
            "replies": [
              {
                "author": "Cuchullion",
                "body": "And seeking happiness from your job is a fool's errand.\n\nMy first job I was all in- dedicated, loved the code base, loved the team, put in long hours, was always the first to volunteer, etc.\n\nThen I got laid off, and for about three months I was going through a damn grieving process: I felt like something vitally important had been ripped away.\n\nI'm on my third professional job now, and I'm very much in the \"Do the job well and find joy elsewhere\" camp (mostly finding joy in my family life now).\n\nJob's don't care about you at all- caring about them more than a professional desire to do them well will just lead to heartbreak.",
                "score": 68,
                "replies": [
                  {
                    "author": "Akhevan",
                    "body": "&gt; And seeking happiness from your job is a fool's errand.\n\nNah, it's an agenda perpetuated by the corporates to trick you into accepting worse conditions and most importantly worse pay cause of \"fulfillment\" or \"being part of the family\" or some other bullshit. It's extremely prevalent in some industries like game dev.   \n\nI'm doing my job cause it pays my bills. That's really it for 99,99% of people on earth.",
                    "score": 19,
                    "replies": [
                      {
                        "author": "Cuchullion",
                        "body": "Yeah, I aim for 'satisfaction with a job done well', and that's less out of a desire to be a good worker for my job and more an internal sense of \"If you're going to do a thing, do it as best you can.\"",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "GourangaPlusPlus",
                    "body": "Seeking happiness in your job is not what you've written, you went all in\n\nTreating your job like you invest in a partner is a fool's errand, this reads like your first break-up.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "Cuchullion",
                        "body": "I still hold a job shouldn't make you happy.\n\nA job should make you content- it should earn you money to put into the rest of your life. Seeking any level of happiness in a job is akin to developing a parasocial relationship with an entity that can never return it.",
                        "score": 8,
                        "replies": [
                          {
                            "author": "AppearanceHeavy6724",
                            "body": "It is _very_ western way of thinking. You spend 30% of your adult life at work, you cannot be happy, unless you are happy (or at the very least, not unhappy) with your work.",
                            "score": 7,
                            "replies": []
                          },
                          {
                            "author": "GourangaPlusPlus",
                            "body": "No being parasocial with a job is its own issue and what you wrote in the first comment\n\nYou do not need to be parasocial to derive happiness from your skills as a programmer",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "FancyPantsNA",
            "body": "Same here, \n\nI'm the lead frontend at the company I work for and the job is fun enough, it allows me to express some creativity but beyond that, I cannot say that anything other than pay is keeping me there. \n\nI've been contemplating the fact that I might not be a developer for my whole career as It feels repetitive and I'm the type of person that always seeks new things.",
            "score": 41,
            "replies": [
              {
                "author": "bighi",
                "body": "Being paid is the only reason I work. And it’s the only thing I expect from it.\n\nIf money wasn’t a necessity I wouldn’t be working, I would be playing Elden Ring’s DLC instead.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "norbi-wan",
            "body": "Money is good .. in the States!",
            "score": 22,
            "replies": [
              {
                "author": "QuarterFar7877",
                "body": "Whether money is good depends a lot on the cost of living. I earn less then median USA salary but able to save 60% of it on average because I leave in a poor country with low costs (in comparison to my earnings) and work for foreign clients from richer countries.",
                "score": 6,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "I'm from Europe myself. I'd say money in the US is amazing, and good in Europe.\n\nAs a senior you can earn 80K at most companies. Where I'm from that's definitely considered 'good'.",
                "score": 20,
                "replies": [
                  {
                    "author": "norbi-wan",
                    "body": "Germany?",
                    "score": 4,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "Yes",
                        "score": 3,
                        "replies": [
                          {
                            "author": "loup-vaillant",
                            "body": "You'd be lucky to get 60K as a senior in France.",
                            "score": 6,
                            "replies": []
                          },
                          {
                            "author": "norbi-wan",
                            "body": "I'm from Hungary. Earn around 22k at mid level.\n\nIdk what 80k can give in terms of life quality. I just see the big number but since I've never experienced having a lot of money I have no idea how life is different at 80k vs 150k.",
                            "score": 5,
                            "replies": [
                              {
                                "author": "All_Work_All_Play",
                                "body": "At 150k you're living paycheck to paycheck because you're maxing out both retirement accounts and putting two kids in full time daycare.",
                                "score": 12,
                                "replies": [
                                  {
                                    "author": "above_the_weather",
                                    "body": "That is not what paycheck to paycheck means. You don't save for retirement if youre living paycheck to paycheck.",
                                    "score": 29,
                                    "replies": [
                                      {
                                        "author": "choseph",
                                        "body": "I think it was a subtle joke, as people often come on here making fun of those articles of being poor at 200k.",
                                        "score": 11,
                                        "replies": []
                                      },
                                      {
                                        "author": "All_Work_All_Play",
                                        "body": "Yes that's the joke.",
                                        "score": 9,
                                        "replies": []
                                      }
                                    ]
                                  },
                                  {
                                    "author": "norbi-wan",
                                    "body": "Sounds like nightmare.",
                                    "score": 3,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "xmBQWugdxjaA",
                    "body": "I wish I lived in your Europe.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Summed it up exactly. I also no longer code as a hobby and found other hobbies which minimizes the risk of spending time thinking about work during non-work hours.",
            "score": 3,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 4,
            "replies": [
              {
                "author": "spicymato",
                "body": "I have three different coffee bases I regularly work in. One is C++20, one is .NET/C#, and one is a legacy C++ codebase that heavily uses Win32.\n\nUnfortunately, the legacy codebase still needs new features, since it currently underpins other apps. It _should_ be getting retired in a few years, but LTS will likely be 6-10 years before we finally push our enterprise customers off it.",
                "score": 4,
                "replies": []
              },
              {
                "author": "BadMoonRosin",
                "body": "I would gladly trade you my up-to-date Python and Node.js soup.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Long_Ad_7350",
            "body": "As the saying goes:  \n[One must imagine Sisyphus happy.](https://en.wikipedia.org/wiki/The_Myth_of_Sisyphus)",
            "score": 2,
            "replies": []
          },
          {
            "author": "oorza",
            "body": "&gt; The sisyphus boulder of shitty code, shitty features, shitty processes and shitty people\n\nOne must imagine Sisyphus happy.",
            "score": 2,
            "replies": []
          },
          {
            "author": "srona22",
            "body": "Money is borderline good, for most work(not everyone is paid \"Good\")\n\nShitty process and shitty people will eventually drive you crazy(or apathetic).",
            "score": 2,
            "replies": []
          },
          {
            "author": "rco8786",
            "body": "#5 is unavoidable though right? Every job has an endless stream of work, and when you're done with one task, another is waiting. That's just like the nature of working in a career for 10-20-30+ years, I think?",
            "score": 3,
            "replies": [
              {
                "author": "Capeflats2",
                "body": "Maybe, idk. I think the thing referenced is we wish we had time to do things properly rather than just good enough to meet the immediate need (only to inevitably - and we know this is coming which is why it makes us unhappy - have to deal with the consequences more inefficiently and at greater cost in the future)\n\n\nBut I'm not sure who gets the luxury of doing things properly. Artists? Plumbers? Chemical engineers? Surgeons? Maybe",
                "score": 9,
                "replies": [
                  {
                    "author": "rco8786",
                    "body": "Right same sort of comment. I can’t think of any other profession that isn’t always squeezed between standard of the work completed and the company staying in business.\n\nSurgeon is a good one, but I bet if you talked to one they could tell you about outside pressures that cause them to find corners to cut safely. ",
                    "score": 5,
                    "replies": []
                  },
                  {
                    "author": "kisielk",
                    "body": "None of those. At every job you do the best you can given the time and money constraints and then move on to the next task. The difference is the margins for what’s considered good enough. But even surgeons or structural engineers rarely get to do things their idealized or perfect way.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "EuphoricAdvantage",
                "body": "\"One must imagine Sisyphus happy.\"",
                "score": 4,
                "replies": [
                  {
                    "author": "Mechakoopa",
                    "body": "Well yeah, Sisyphus doesn't have product meetings 3 times a week.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "IntoTheMurkyWaters",
        "body": "Jokes on you, I was depressed before I started programming!",
        "score": 180,
        "replies": [
          {
            "author": "alwyn",
            "body": "Give it time...",
            "score": 10,
            "replies": []
          }
        ]
      },
      {
        "author": "ScrimpyCat",
        "body": "So farmers are happier but have a higher rate of suicide.",
        "score": 121,
        "replies": [
          {
            "author": "avida-d3",
            "body": "But suicides usually commited by extremly unhappy people therefore increasing average happiness level.",
            "score": 89,
            "replies": [
              {
                "author": "ScrimpyCat",
                "body": "So to solve this problem we just need to get a suicide cult going. Then programmers will be the happiest.",
                "score": 56,
                "replies": [
                  {
                    "author": "loup-vaillant",
                    "body": "I believe the world of [In Time](https://en.wikipedia.org/wiki/In_Time) has solved poverty in a similar way.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Jaggedmallard26",
            "body": "Most farmers are functionally self employed in a job with literal extreme seasonal variation. \"The banks going to take the family farm\" is a cliche in fiction for a reason. I wouldn't be surprised if they generally enjoy work more but when things go wrong it goes catastrophically wrong leading to them being more likely to take their life. Meanwhile I'm a salaried programmer and worst case I know I have enough savings to keep paying my mortgage and bills until I could find a new job, I might not be as happy most of the time but things won't go as catastrophically wrong.",
            "score": 25,
            "replies": []
          },
          {
            "author": "PurpleYoshiEgg",
            "body": "There's general consensus across multiple fields of research that happiness and suicide rate have no correlation ([here is one example](https://www.psychiatrist.com/jcp/suicide-and-happiness-two-potential-sustainable-development-goal-indicators-for-mental-health/)).\n\nI will say: Depression sucks, can strike anyone (even people who report happy), and too many people lose their battle with it.",
            "score": 8,
            "replies": []
          },
          {
            "author": "Olfasonsonk",
            "body": "I've just switched to farming after ~10 years of software development (primarily enterprise web-based applications). Did startups, big corporate jobs, freelancing...\n\nIt's only been a couple months so far (of full time work, I've been born on a farm otherwise so I am well familiar), but so far I can say I feel so much better. I'm happier, I sleep better. I think a big part of it is exercise, sitting in front of computer for 8+ hours a days sucks long term. Physically and mentally. I did all the things with standing desk, yoga balls, afternoon activites...it helps for sure, but it does not beat simply not having a desk job. I had years long struggles with sleep, motivation and on/off depression and it's all been gone now. Eventhough it's objectively a harder working job, I enjoy it much more. Although I loved programming my whole life and still do, the whole \"office job\" bullshit it tends to come with it is not for me. Luckily cows never heard about \"agile\" milking.\n\nIt's also different in terms of felling reward from your work. Yeah, in programming when you finally fit all pieces of code puzzle together and it suddenly works feels nice, or squashing that annoying bug, but sitting down at table to eat with other people after a day long work in the field getting all the hay inside before the summer storm is...100x better feeling.\n\nI'm pretty sure there is a substantional difference in how human brains are wired in terms of satisfaction from doing physical work in the nature versus some mentally exhausting tasks without tangible results.\n\nI still think software development can be a very nice and good job, it just *really really* depends on your employer/project.\n\nSadly as with everything else the field is absolutely littered with bullshit and getting a good one can be hard (specially recently). And working on a bad project/team is terrible and not worth the money IMO. It just turns into a shitty stressful office job that happens to pay well.",
            "score": 24,
            "replies": []
          },
          {
            "author": "justneurostuff",
            "body": "well they’re more likely to own guns…",
            "score": 10,
            "replies": [
              {
                "author": "PrizeConsistent",
                "body": "This actually sounds like a really big factor :/",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "F1_Legend",
            "body": "Also the Finland paradox. 1 of the happiest and 1 of the highest suicide rates.",
            "score": 4,
            "replies": []
          },
          {
            "author": "xdert",
            "body": "maybe it is survivorship bias because all the unhappy ones kill themselves.",
            "score": 7,
            "replies": []
          },
          {
            "author": "AstronautDifferent19",
            "body": "Farmers have shotguns so they suicide attempts are more successful, while many common workers in the cities do not have shotguns.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "tristanjuricek",
        "body": "I still go back to Dan Pink’a summarization of career happiness being tied to autonomy, purpose, and mastery. And a lot of software engineering jobs can fail to deliver on all 3 points.\n\nReal autonomy is rare. You’re often having to make concessions due to prior decisions you probably weren’t a part of. Or you have to please management who wants something completely vague and ultimately things that aren’t that impactful. \n\nVery few jobs have any kind of feedback loop where you can see the impact of your contributions. So it’s hard to get to a sense of purpose other than “my investors are happy”. Who cares about making a bunch of rich people wealthier?\n\nAnd true mastery is usually fleeting, as you’re often making one guess after another, often wrong. Things do often improve but it gets drowned out by a waterfall of failure reports, more work, etc. Very few places really celebrate wins other than making sales. It takes a strong manager to overcome this culture, and there are very, very few of them that have this skill.\n\nFrom here, there’s a lot of “shallow benefits” that ignore these main areas that just fall flat. No I don’t need an infantile game or ball pit or whatever. And having a “team building session” probably won’t make much of a difference (there are things it can help, but it often doesn’t move the needle much). \n\nMoving jobs every few years ends up being at least a way to keep things fresh.",
        "score": 55,
        "replies": [
          {
            "author": "Hot_Slice",
            "body": "Celebrating wins is something you need to do yourself. Programming is often 2 hours of banging your head against the wall, then 5 minutes of success, then back to banging your head against the wall. This is true whether you are working a corporate job or doing a personal project. If you already know how to do something, then you will knock it out quickly, and then it's back to banging your head on the next problem. So you need to learn to derive joy from this Sisyphean process.",
            "score": 15,
            "replies": []
          }
        ]
      },
      {
        "author": "IAmSwiggle",
        "body": "I enjoy my career, I don’t enjoy employer incompetence and greed. My past several jobs I’ve witnessed their downfall over quick, shortsighted decisions by the CEO or majority owner. In 2024 all but one are closed, and it sucks seeing years of effort and well received products erased from history.",
        "score": 55,
        "replies": []
      },
      {
        "author": "Euphoricus",
        "body": "80% of people are not happy. Why would programmers be different?",
        "score": 361,
        "replies": [
          {
            "author": "CicadaGames",
            "body": "I always take any opportunity to recommend the book Peopleware Productive Projects and Teams whenever I can. It's amazing how people knew all of these problems, had hard data to back it up, and had the solutions since even the early 80s and still corporate America chose low productivity + unhappy employees + overpaid morons at the top for some fucking reason even though the elites could be making even more money with happy employees. Maybe it's just that billionaires are so lacking in empathy that they can't even comprehend the concept.",
            "score": 197,
            "replies": [
              {
                "author": "AndyTheSane",
                "body": "To paraphrase from 1984: How do you really know if you have power over someone?  *By making them suffer.*\n\nIt's a terrible bit of psychology, but it's clear that a lot of people at the top of business are more interested in having power over people than they are in profitability or growth.\n\nIt's also why things such as full employment or unions are regarded with horror, because they actually give the workers some power.",
                "score": 155,
                "replies": [
                  {
                    "author": "Miserygut",
                    "body": "The cruelty is the point.\n\nSee also: Removal of benefits, longer hours, precarious working contracts, return to office mandates.",
                    "score": 75,
                    "replies": []
                  }
                ]
              },
              {
                "author": "milahu2",
                "body": "&gt; I always take any opportunity to recommend the book Peopleware Productive Projects and Teams whenever I can.\n\n[Peopleware: Productive Projects and Teams](https://en.wikipedia.org/wiki/Peopleware%3A_Productive_Projects_and_Teams) ([libgen](https://libgen.rs/search.php?req=Peopleware+Productive+Projects+and+Teams)) is a 1987 book on the social side of software development, specifically managing project teams. It was written by software consultants Tom DeMarco and Tim Lister, from their experience in the world of software development. This book was revised in 1999 and 2016.",
                "score": 29,
                "replies": [
                  {
                    "author": "FistBus2786",
                    "body": "Bless you lovable stranger with helpful links!",
                    "score": 7,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Atophy",
                "body": "My theory on that business is short \"sightedness\". They get big dollars out of miserable, underpaid workers on a time crunch in the short term while happy and productive employees produce a lower but stable profit margin in the long run.",
                "score": 20,
                "replies": [
                  {
                    "author": "re-thc",
                    "body": "Not exactly. At least not for big companies. The executives are. They get hired. Make quick changes. Get the bonuses and leave. It's then someone else's problem.\n\nLots of actual company shareholders are in it for the long term.",
                    "score": 23,
                    "replies": [
                      {
                        "author": "Bert--",
                        "body": "Then why do those shareholders not hire executives that plan for the long term?",
                        "score": 7,
                        "replies": [
                          {
                            "author": "re-thc",
                            "body": "How would you go about it? In the modern world, is that even possible? \n\nIn the past, changing jobs as a high level exec is \"hard\". You could also easily be killed or thrown in jail for poor performance. There are nobles and corruption at play.\n\nNowadays, not so much.\n\nWhat sort of incentive model would you setup? \"Longer\" term bonuses based on milestones are already a thing, but even then that's not good enough.",
                            "score": 4,
                            "replies": [
                              {
                                "author": "Bert--",
                                "body": "I'm sure that it could work, but it would require that the shareholders actually have a clue about the business they are owning and know how to evaluate the work of the execs (which is difficult to do).\n\nI would argue that most of the successful businesses achieve this, typically those that are run by a technical person that is personally invested into the company by owning large chunks of it.\n\nI think that the majority of shareholders are simply happy with the type of execs that come in, squeeze out better quarterly results and then leave.",
                                "score": 3,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Ok_Cancel_7891",
                    "body": "happy productive workers creare higher and stable profit in the long run, imho",
                    "score": 4,
                    "replies": [
                      {
                        "author": "PoolNoodleSamurai",
                        "body": "If only investors rewarded stable profit instead of mega growth and unsustainable returns, the world would look very different. It’s 19th century resource-extraction capitalism, but they’re prying the last metaphorical nugget of value out of a company instead of out of a physical mine. In the end, the mine is worthless and abandoned.\n\nPrivate equity firms have demonstrated that they don’t give a shit if they ruin the company in a couple of years, as long as they can extract every last cent by selling the copper wiring out of the walls. Look at Sears and Kmart for proof. They don’t care about the mine or the miners. There’s always another mine.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Shwayne",
                "body": "&gt;Maybe it's just that billionaires are so lacking in empathy that they can't even comprehend the concept.\n\n  \nIt's mostly that. People with narcissistic personality disorder and in the sociopath, psychopath spectrums are *significantly* more likely to raise to power and wealth. That's just how humans are, sadly.    \n\n  \nThose people dictate the rules for the rest of us. The worst part is that they are *certain* that everyone else is as scummy and abusive as they are, so they create rules for regular people based on how they themselves would behave.",
                "score": 15,
                "replies": []
              },
              {
                "author": "Thormidable",
                "body": "Part of it is that people evaluate how much they have, by comparing against how much other people have. Making other people have less makes them feel they have more.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Lobachevskiy",
            "body": "Within the first minute the video mentions that farmers and plumbers are statistically more happy despite programmers being well paid and having lots of other benefits.",
            "score": 51,
            "replies": [
              {
                "author": "Headpuncher",
                "body": "Yeah the top comment is straight up dismissive. Irks me when I come to a thread to see something like that upvoted and dominating the discussion.   \nPlenty of people are in professions they enjoy, but misery loves company.",
                "score": 28,
                "replies": []
              }
            ]
          },
          {
            "author": "ElGovanni",
            "body": "The question is if similar professions (by salary) are happier.",
            "score": 24,
            "replies": [
              {
                "author": "SpaceMonkeyAttack",
                "body": "And whether or not they are *made* unhappy by their work. \n\nI love writing code. I hate my job.",
                "score": 48,
                "replies": [
                  {
                    "author": "abuqaboom",
                    "body": "Whenever I feel burnt out and crack open a side project, I'm reminded that I ain't sick of programming, I'm just sick of my job",
                    "score": 24,
                    "replies": [
                      {
                        "author": "Envect",
                        "body": "Got back into Factorio recently and had the same epiphany. I don't hate programming - I hate that doing system design in a video game feels more productive than the tasks I'm assigned at work. I've got lots of ideas of how to improve the code, but the business isn't interested in anything they aren't explicitly asking for. They want an obedient ticket closer.",
                        "score": 15,
                        "replies": []
                      },
                      {
                        "author": "zelphirkaltstahl",
                        "body": "Which probably also means, that the job is not allowing you to work at your full potential. A negative for the business usually, leaving skill and talent of employees untapped.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "fucklockjaw",
            "body": "The question isn't \"Are you happy in life\"? The question is [\"How satisfied are you in your current professional developer role?\"](https://survey.stackoverflow.co/2024/professional-developers#3-satisfied-at-current-job) with nearly 70% of developers being either satisfied (synonym for complacent) or even better they are happy. But Fireship has to churn out meme videos for clicks and spin the words around to make a good title and generate a discussion completely different from what the data is trying to say.",
            "score": 7,
            "replies": []
          },
          {
            "author": "Cheating_Cheetah26",
            "body": "Because programming is mentally stimulating and relatively well paid. I would think programmers are happier in life than factory workers piling cardboard boxes for 8 hours a day every week day on minimum wage",
            "score": 24,
            "replies": [
              {
                "author": "Headpuncher",
                "body": "Assuming \"factory workers\" (and that covers a lot of different jobs) are on minimum wage, and that they are comparable to IT people.\n\nBefore I was a programmer I worked jobs that were not \"mentally stimulating\" and there are advantages. F.eks, being able to leave and not think about work until the next day, no constant learning. More time to do what I want, aka work-life balance. Never had to deal with BS like Agile Professional Managers ruining my day and week by dragging out meetings and then cutting estimates due to time constraints created by excessive meetings etc etc.\n\nMy advice to everyone in this thread: don't be an elitist and assume \"normal\" jobs are lesser jobs. People have different motivations for what they do, and they're just as valid as the programmer circle jerk of \"intellectual stimulation\". FWIW: most of you are not as smart as you think you are.",
                "score": 45,
                "replies": []
              },
              {
                "author": "gelfin",
                "body": "Counterpoint: Doing your own programming is mentally stimulating. Doing someone else’s programming means reporting to people who can’t understand the distinction between adding a new REST endpoint to an existing API, inventing an entirely new algorithm for an NP-complete problem the sales guys already sold to your biggest customer, or identifying and squashing the weirdest Heisenbug of your career. There is a big difference between solving hard problems for fun and solving hard problems with a gun to your head (which is absolutely the culture at a lot of places). In some jobs and organizations I dreamed of jobs where I could just move some boxes from A to B all day and then just go home.",
                "score": 24,
                "replies": [
                  {
                    "author": "Cheating_Cheetah26",
                    "body": "I see, tbf I don’t have experience working a shitty programming job with the stuff you’ve mentioned. To dissuade you from moving boxes from A to B, consider this :\n- you’re likely to either start work at 4AM or end at 10PM, if not, you’re working the graveyard shift (you swap each week)\n- air pumps and vents and machines are loud, so you’ll be wearing ear protection for the whole day\n- you’ll be wearing factory issued shoes that don’t quite fit\n- repeating more or less the same 10 second movement for weeks aches physically (back, leg, shoulder pain when you’re not strong to start) and is very boring. Time passes way slower than on a computer.",
                    "score": 7,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "n00lp00dle",
            "body": "is that true? i get the impression that reddit makes people think everyone is chronically depressed but most people actually are happy most of the time in my experience.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "hotboii96",
        "body": "I think sitting most time of the day can contribute to that. ",
        "score": 88,
        "replies": [
          {
            "author": "[deleted]",
            "body": "The problem is I can't think my way out of the business being stupid.\n\n\n\n\nThe Salesforce team refused to let us copy a few gigs of data from Salesforce to our warehouse and listened to a sale pitch about SALESFORCE DATA CLOUD the newest AI powered bullshit factory so now we're going to pull half a petabyte out of our warehouse and copy it into SFDC.\n\n\n\nSure every other time we have used a Salesforce product it has sucked. But this time will be different! And for extra fun the Salesforce team refuses to hire in house devs and uses contractors and consultants for everything. Which is why we're on year 4 of our 18  month project to fix salesforce and less than half way done with it.",
            "score": 45,
            "replies": [
              {
                "author": "lolimouto_enjoyer",
                "body": "I honestly sometimes wonder if some people are doing this intentionally so they don't run out of work.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "rcfox",
            "body": "If the problem were solved by standing desks, we probably would have figured that out by now.",
            "score": 10,
            "replies": [
              {
                "author": "root88",
                "body": "Just standing for a while doesn't cut it. The problem is solved by moving all throughout the day. It's what humans have done for at least hundreds of thousands of years up until now. Being more physically fit is proven to reduce depression. Getting more exercise leads to better sleep which leads to less depression. Being in nature is proven to reduce depression.",
                "score": 9,
                "replies": [
                  {
                    "author": "spazzcat",
                    "body": "I stand all day, having been doing it for about five years now. I also pace when I am in meetings and calls.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "st4rdr0id",
        "body": "\"Agile\" practices have made two entire generations of developers miserable. Almost every dev from the early 2000s onwards has had exposure to the unfair conditions created by these non-methodologies. When you have to work daily under unfair conditions where you get all the blame but at the same time you are not given the time, processes and methods to organise your work in a rational, sane, and mentally-sustainable manner, you get unhappiness and burnout.\n\nThere are few companies with good software development processes in place, but they don't provide enough good jobs for every dev out there. The bulk of the developers is going to encounter bad working conditions.",
        "score": 85,
        "replies": [
          {
            "author": "Noctam",
            "body": "Can you elaborate on that please? \nIn which ways agile practices are bad and what better solutions exist? \nHaving only known the former in my short career, I’m more than interested to read more.",
            "score": 14,
            "replies": [
              {
                "author": "rcfox",
                "body": "In my experience, daily standups can sometimes start to feel like daily \"justify your employment\" meetings, where if you don't have enough bullet points to say about the previous day, people start to wonder if you're actually working.\n\nAlso, there's an idea that every developer should have X number of story points to work on, but then you never schedule story points for meetings, reviews, debugging, etc., so you just constantly miss your targets or you spend time working for free.\n\nYou might think you could just include the extra stuff within the budget of your tickets, but if you do \"poker planning\", then the rest of the team will vote on how long they think the tasks will take and you end up arguing or averaging.\n\nI've found I'm happiest on a small team that can self-organize. Of course, management hates this because they can't try to predict the future.",
                "score": 80,
                "replies": []
              },
              {
                "author": "miyoyo",
                "body": "The problem with agile isn't the concept itself, it's implementations.\n\n\nIf you read the original website with the full manifesto (https://agilemanifesto.org/) it doesn't talk about sprints, story points or even stories, velocity, standups, or any of the commonly upheld \"essential for agile\" bullshit.\n\n\nMost companies that pretend to be Agile™ are almost exactly the opposite of the original manifesto, no wonder nobody likes agile.\n\n\nThere's also been the fallacy of thinking that every single project should and has to be done in an agile way, which just is not realistic for a decent fraction of projects out there.",
                "score": 36,
                "replies": [
                  {
                    "author": "ModernRonin",
                    "body": "You're completely correct. However...\n\nWhen nearly every companies does \"thing X\" completely wrong, and still calls what they're doing \"thing X\"... then the whole situation starts to feel like a https://en.wikipedia.org/wiki/No_true_Scotsman fallacy.\n\nWhen the vast majority of \"Agile\" in the real world is horrible, corrupt, non-Agile crap... it's hard to blame people for hating \"Agile\".",
                    "score": 6,
                    "replies": [
                      {
                        "author": "miyoyo",
                        "body": "Exactly, and I think the biggest fallacy of the original manifesto was to abstract away management and standard contract practice.\n\nIn the optimal agile company, contracts are more subscriptions/consultancy, but at the same time, very high trust, as there is no \"absolute\" insight into the development process, it's only just \"client's not happy, client's somewhat happy, client's happy\".\n\nI've yet to find a single company that truly does it that way, because it's not devs that define how companies operate, it's management (and finance).\n\nEvery single Agile™️procedure out there exists pretty much solely to please management, and give them numbers to chew on.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "jasonjrr",
                    "body": "Well said!",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Schogenbuetze",
                "body": "&gt; Can you elaborate on that please? In which ways agile practices are bad and what better solutions exist?\n\nThe issue is that most mid-tier, averagest of the averagest „managers“ who parachuted into the industry appereantly think that agile is equal to „arbitrariness“.\n\nThrow in any feature request, they've got to do it, it's their job, eventually, right?",
                "score": 22,
                "replies": []
              },
              {
                "author": "loup-vaillant",
                "body": "I have worked under waterfall for a few years, under \"just do the stuff\", and under more formal Agile™ processes.\n\nThe biggest problem with straw-man Waterfall is the stupidly long feedback loops. You design the stuff, you specify it, then you implement it, then you test it and oops you only now find that your design was crap, and it's too late, you must live with it. In my case the specs were delivered from on high by some client, for a _different user_. We delivered some of what was specced 2 years later, and the users kindly informed us that this was not what they needed. Fun times.\n\nThen there's SAFE: a bunch of teams working under SCRUM, and everything has to fit inside a sprint or PI (I don't even know what \"PI\" means, I just know of the \"PI planning\" that happens every couple months or so). You're supposed to have a much tighter feedback loop here, but it's not for the benefit of the dev, it's for the benefit of the managers and other stakeholders. The reason sprints are so short and the \"stories\" so simple is so we can make better estimates over time and have a greater predictability of feature delivery… _after_ those features were already decided and sufficiently designed to be chopped up into small enough stories.\n\nIn this setting, the feedback cycle we actually care about, from work done to seeing results, is not that short. We can implement micro-features and congratulate ourselves for it, but but those few people privileged with actually shaping the project (namely the architects) quickly get out of touch with the code, and their decisions, though most impactful, rarely come back to hurt them soon, and when they do they hurt the devs first, never the architects directly.\n\nMy biggest problem with heavy processes like SCRUM and SAFE (I know, I know, you can adapt it to your needs, otherwise you're doing it wrong or it's not _really_ agile, but in practice those who concentrate on doing it right somehow always end up with heavy processes), is the disconnect between the processes and the actual work. It's one size fits all, applied the same way for all kinds of work, from GUI to embedded system programming. As such it doesn't really help (that I could tell), which means it is probably a net negative.\n\nAlso beware retrospectives that turn into a social game of who's participating more, we acknowledge problems as long as they're nobody's fault, and the important one probably won't be solved anyway.\n\n---\n\nSo what do we do?\n\nI don't know. My bes bet right now is to concentrate on the actual work. Not all work is the same. Not in amount, not in urgency, not in importance, and most of all not in _nature_. And mostly, if you want something enforced, it is probably best to automate the enforcer whenever possible. Have release processes that match your actual needs, don't force all projects into a pull request workflow — and for those who do, perhaps dedicate a maintainer or two per sub-system, instead of having colleagues reviewing each other's code (I suspect it's hard to take meaningful criticism from someone who isn't clearly or officially your senior).\n\nThat is, be _actually_ agile, _actually_ adapt to the problem at hand and the people you have to solve it. Don't automatically reach for SCRUM, SAFE, and Atlassian.",
                "score": 18,
                "replies": [
                  {
                    "author": "Fearless_Imagination",
                    "body": "The \"PI\" in \"PI planning\" stands for \"Program Increment\". \n\nMy experience with PI plannings is we make a plan for what features we're going to implement next quarter and see what dependencies we have.\n\nThen about 1 week later we discover that things aren't quite the way we thought they were and we can throw all the planning we did in the garbage because it doesn't make any sense anymore.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "jasonjrr",
                "body": "Agile processes aren’t really the problem, it’s that it can be easily abused. All it takes is a single person with a bit of influence to completely ruin everything. Yes, just one. \n\nIt could be a single PM, designer, manager, engineer, or someone outside of the loop like a VP or C-level. Anyone whose decisions can affect the team.",
                "score": 7,
                "replies": [
                  {
                    "author": "Noctam",
                    "body": "Then it’s fundamentally flawed no?",
                    "score": 6,
                    "replies": [
                      {
                        "author": "jasonjrr",
                        "body": "Nah, it’s the people that are fundamentally flawed. Following the agile manifesto works. Not following it doesn’t. It’s that simple, but everyone needs to ACTUALLY be on board.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "Noctam",
                            "body": "I see, thanks!",
                            "score": 5,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Livid_Luck",
                        "body": "It's like communism, everytime it fails, people say we did not execute it well enough.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Sensitive_Item_7715",
                "body": "Monsters take bits and pieces of agile or scrum that they like, tack on things that don't make sense, and generally remove any kind of autonomy from technical parties if they themselves are not technical.  Happened in my last 3 roles.",
                "score": 3,
                "replies": []
              },
              {
                "author": "Obsidian743",
                "body": "Please, for the love of god, stop listening to developers complaining about agile and instead read and listen to the [progenitors of agile philosophy](https://www.youtube.com/watch?v=WSflPE_oIRI).\n\nAt this point, 75% of developers have a completely fucked up idea about what \"agile\" is or should be because they don't know what the alternatives are. Their companies have told them what it is. The irony is that they *are* experiencing the alternative...they're just been told it's \"agile\".\n\nLet me be clear: agile (and devops) is a *philosophy*. It has nothing to do with process or project management. So when you hear about someone complaining about \"standups\" and \"retros\" *you know they're lost already*.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "SqueeSr",
            "body": "If I see Agile in a job listing I wouldn't even apply for the job, but I hadn't heard of Scrum or Agile until around 2008 here. But the moment a manager started to discuss it with me, I realized it would not improve my job.  It might work great for some people, but not for me.",
            "score": 3,
            "replies": []
          },
          {
            "author": "throwaway490215",
            "body": "My pet theory on Agile is that its so succesfull because it deals with one of the hardest part of programming teams. \n\nHow to (re)-organize a team to work better and get into a flow. Sometimes that means kicking someone out\n\nThings like that require a level of emotional maturity, introspection, clear communication, and autonomy. \n\nWith agile this becomes less of a problem. Complex issues are easily stalled in meetings, trivial and hard work looks similar from the outside, team cohesion can be outsourced to a disjoint management layer.\n\nIt all just has to look like incremental progress. People without dev skills can't guess how little has been accomplished.",
            "score": 2,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "I don't think I can upvote this enough.\n\nAgile went from something I wanted so badly 15 years ago to a word I basically dread hearing now from anyone but a developer.  Because what they mean by agile is that they never have to settle on anything with the exception of a timeline, that they cannot possibly move under any circumstance (/s) and the developers are about to bend over and take it raw. And when it inevitably goes tits up, they will be blamed even though they warned about it the entire way.\n\nThis is modern agile methodology in my experience.",
            "score": 2,
            "replies": []
          },
          {
            "author": "jasonjrr",
            "body": "Yeah this is the difference between a company of wanting to do “Agile” and a company that is agile. When the latter is done right it is actually amazing how productive and positive a team can be. When a company insists on doing “Agile”, well…",
            "score": 2,
            "replies": [
              {
                "author": "[deleted]",
                "body": "tidy whole paint dolls cover edge shy complete plucky label\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Ser_Drewseph",
        "body": "So I know this might be more of a “me” problem, but one of the thoughts on why programmers are miserable is how far removed we are from our labor. A farmer or electrician or nurse easily have harder jobs and get paid less, but they see the tangible results of their labor right in front of their eyes. For us, we’re pretty far removed. Just like all the excel farms from the 80s/90s. The farther you are from the results, the more the work can feel pointless. \n\nAnother thought is that the work can feel pointless. We all want to solve real or important problems, but a lot of the time we’re stuck working on pointless applications or mindless CRUD app. And then there are the times where we work on something for a long time, just for some MBA to scrap it. It’s why I couldn’t imagine working at Google- working on something for a year or two or three just for a business type to send to the Google Graveyard. It’s happened to me before and while I just got switched to a different project, it hit hard. Like, what did I just spend the last two years of my life for? What was the point? It felt like such a waste of my time and efforts. At least at the end of a project, a contractor can look at the house and know that it provides shelter to a family.",
        "score": 61,
        "replies": [
          {
            "author": "anonanon1313",
            "body": "&gt;Like, what did I just spend the last two years of my life for? \n\nFor me it was 10 years, and I left programming.",
            "score": 16,
            "replies": [
              {
                "author": "MacTheRipper",
                "body": "What did you switch to? How did you determine what else to switch to? I'm so overcome by ennui with programming that I'm finding it hard to even feel inspired by any other ideas, especially since remote work has been a very bad fit for me.",
                "score": 9,
                "replies": []
              }
            ]
          },
          {
            "author": "PurpleYoshiEgg",
            "body": "Marx's theory of alienation becomes more and more convincing to me every day.",
            "score": 17,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 11,
                "replies": [
                  {
                    "author": "Ser_Drewseph",
                    "body": "I’ll be honest, I didn’t know I was referencing it. The idea was conveyed to me by a friend when I was talking to him about this sort of feeling. He also didn’t call the concept by name, but I don’t doubt that he knew it since he minored in philosophy in college. I looked it up after reading PurpleYoshiEgg’s comment though, and it’s definitely the core concept. \n\nJust a guess as to why people often reference it without naming it might be that some people react pretty viscerally any time Marx is mentioned (regardless of the merit of the idea), and they just don’t want to deal with that.",
                    "score": 9,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "sir_types_a_lot",
            "body": "Building sand castles on the beach as the tide comes in. We know there is no permanence to what we do. Find beauty in the fleeting nature of your art and the way it reflects the reality of your existence.",
            "score": 12,
            "replies": []
          },
          {
            "author": "Stimunaut",
            "body": "That hits hard, I'd mulled this over in the past but mostly tried to ignore it. At the end of the day, getting paid to build some feature/app/etc. that ultimately gets sent to the scrap-pile feels completely and utterly void of any sense of meaning or fulfillment. Probably contributes to the all-too-common 'impostor syndrome' in this field of work, as well.",
            "score": 8,
            "replies": []
          },
          {
            "author": "Rabble_Arouser",
            "body": "&gt;Another thought is that the work can feel pointless. We all want to solve real or important problems, but a lot of the time we’re stuck working on pointless applications or mindless CRUD app. \n\nYeah, I felt the same way in my last job. I put so much effort and so much time into it, and not only did I get very little appreciation for my dedication to -- and quality of -- my work, I got nothing but fatter and unhealthier as a result of doing it. And really, what I was working on -- who gives a shit about e-commerce bullshit. I had been working in the education space before that, and that felt like it mattered somewhat. It was way better than helping people get their douches and anal creams on time.\n\nSitting around for long hours without taking the time to exercise is really a death sentence. My last job had me chained to my desk and it was slowly killing me, and straining my marriage. \n\nThe good news is that I moved on and things got better, but from the looks of this thread and the survey mentioned in the video, not everyone is getting so lucky.",
            "score": 4,
            "replies": []
          },
          {
            "author": "kcadstech",
            "body": "Yes, this is me 💯! Literally having an existential crisis about it. ",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "absentmindedjwc",
        "body": "Companies are doing their absolute god-damndest to make people miserable.  I love this field, I love what I do... but I feel like companies recently have been doing everything in their power to treat us like shit.  Its like the pendulum has swung \"too far\" towards our happiness, and companies have forced it to swing *hard* in the other direction.\n\nJust go on something like TeamBlind and just listen to how fucking miserable people are across the entire industry.\n\nMaybe the game devs union has the right idea... not something to do anything around pay, but something to prevent companies from dicking us around.  Something to prevent companies from the routine quarterly lay-offs.  Who knows. /shrug",
        "score": 12,
        "replies": []
      },
      {
        "author": "AssholeR_Programming",
        "body": "I work with programmers all day, what do you think",
        "score": 12,
        "replies": []
      },
      {
        "author": "CandleTiger",
        "body": "Many years ago I looked up a book about AIX development on Amazon and their \"frequently purchased together\" suggestion list included a self-help book for depression.  That stuck with me.",
        "score": 10,
        "replies": []
      },
      {
        "author": "userousnameous",
        "body": "The single largest pain is the amount of crap roles filled by crap people that have glommed on around engineering that make engineering  a painful task. I am talking about you, fucking career scrum master who have never coded, or worked on a team. And you, dipshit 'product' fuktards, who think your job is to hold all decisions and middle man all conversations between users and team, but yet you have never actually run or used the team's application.  And you, thirty levels of upper CT/CI types, who declare you have engineering experience, but it really consists of 20 years ago having maybe 3 months experience running tests or god forbid, you were a database analyst, and now you sit forty levels up making decisions and pitching all the c levels about shit you don't understand, but they are too clueless themselves to realize you are shopping a bunch of garbage.",
        "score": 10,
        "replies": [
          {
            "author": "billie_parker",
            "body": "Yes. The legions of idiots hiring and promoting other idiots is the problem. We're at a critical mass now where any given company has 3 idiot PM/designer/managers for any given developer. \n\nI once had a boss that started to believe that PMs and engineering managers were the same thing. I told him \"you aren't aware of what's going on. You're becoming like a PM, just checking agile and not making any real decisions.\" My boss just said \"basically, yes. My role is not too different from a PM.\"\n\nIn other words, he made a decision to remain complacent in his uselessness, even if it meant damaging the company outlook. Pretty much just because he was stupid and lazy. \n\nI remember the first thing I thought when I heard about the \"product manager\" title was that it was a bit of underhanded semantics. They give the most useless people in the company a title with the word \"manager\" in it. It's intentionally designed to give these people a sense of importance.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "CanvasFanatic",
        "body": "Part of this is probably because it’s literally our job to imagine how systems can fail.\n\nThe other part is that many of us work for companies that seem determined to destroy themselves and we’re powerless to stop it.",
        "score": 6,
        "replies": []
      },
      {
        "author": "ranban2012",
        "body": "The day after hurricane Beryl came through town I was told by a director level manager that I had to come into the office to perform an emergency rollback of a feature I had deployed three weeks prior because a user claimed it wasn't working.\n\nThe director didn't bother following up with the user to discover that it was a user training issue and not actually a problem with the feature until I asked for final approval of the emergency rollback deployment.  \n\nSo I was made to run around after hours the day after a hurricane because of this director's incompetence and I received not so much as a \"my bad\".   Just, \"that's how it goes sometimes\".",
        "score": 6,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "I mean, yeah I'm not happy but I would just literally kill myself if I had to go to the office or do manual labor for quarter the salary so..",
        "score": 19,
        "replies": [
          {
            "author": "rjcarr",
            "body": "Yeah, I get that programming can be stressful, and I’m sure other negative things, but when I hear that programmers are unhappy it makes me feel like they are so entitled. Would they rather be roofers? Or landscapers? Or salesman? I mean, what’s the alternative?",
            "score": 6,
            "replies": [
              {
                "author": "[deleted]",
                "body": "I mentioned one.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Tail_Nom",
        "body": "I got a BS in CS because it seemed like the most viable path available to me with the fewest number of brainlets bothering me with inconsequential, petty bullshit.  Joke's the fuck on me, college is an anomaly, everything is exactly as stupid as high school, but now you have to fight for that A against Bumblefuck von HadToHaveLiedInTheInterview and his middle manager golf buddy who spends a quarter of the day talking about his new bamboo flooring, loudly and right next to your cubicle, while you're trying to figure out why the framework-infested server cluster you inherited from some jackass that skipped town before the obvious scaling problems came to bear shits itself on one specific machine every time you're on a date.\n\nFor a lot of xillennials/early millenials specifically, I think tech was seen as freeing, an obvious choice if you were clever, since the adults around you  thought it was bewildering magic and there was a push in many areas to foster this talent.  Also, \"the computer\" generally and the Internet specifically were places of relative freedom from the day to day stupid of the GW Bush era, so the draw was natural.  With that influx came a... well, there's no right way to say this, but there are people with the same degree as me that I wouldn't trust with a keyboard drawn on a piece of cardboard.\n\nAt the same time, everything was being made \"easier\", more specifically simpler and safer.  Businesses wouldn't force themselves to rely on long-haired kids who didn't want to wear slacks any more and lowering the cleverness threshold for using these technologies meant more workers at less risk, more easily folded in to corporate culture (i.e. made interchangeable).  Shout out to every undergrad whose petty tech grudge from Intro II became another competing language or framework to add to the panoply of bullshit forcing those behind them to go wide rather than deep.\n\nThis isn't... really about whether I'm right or wrong, tempting as that refutation may be.  For my particular circumstances--where, when, and how I grew up--it was a trap and I highly doubt I'm the only one.  While I may have been especially ill-suited to negotiate my way out of it (I should have run for one of the coasts as fast as goddamn possible), that functionally means I just ran off the cliff faster.  Programmers aren't happy because every step in the work process is a struggle to be allowed to get shit done, and when you've finally got hands on keyboard, everyone has an opinion on how you're supposed to accomplish anything.  It's a waste of time and the more you know--the more you *care*--the more frustrated, undervalued, and sometimes explicitly targeted you become.  They turned structural engineers into bricklayers and then gave them half a dozen managers to get in the way.  Terry Gilliam isn't this absurd.\n\n80% feels about right.",
        "score": 15,
        "replies": [
          {
            "author": "[deleted]",
            "body": "cooperative seed library crown zephyr groovy cause aromatic plough tap\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
            "score": 5,
            "replies": [
              {
                "author": "Tail_Nom",
                "body": "I don't like to compare myself to Shakespeare, but I *am* especially proud of \"Bumblefuck von HadToHaveLiedInTheInterview\".",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "xmBQWugdxjaA",
        "body": "I earn less than I did 3 years ago due to the currency crisis in Sweden, even worse if you consider the post-lockdowns inflation too.\n\nAnd almost no-one is hiring right now, it's not a great time in general.\n\nI think it will eventually return to growth though, and hopefully we'll see more investment outside the US and a better balance like pre-2008.",
        "score": 11,
        "replies": [
          {
            "author": "hippydipster",
            "body": "In real terms, I earn now exactly the same that I earned in 1999.  Most of my career I've earned less than these two points.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "pmrsaurus",
        "body": "I blame Agile. Programming is fun. All the Agile chores suck.",
        "score": 15,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "If I had job security right now I’d be happy.\n\nEverything else is a perk assuming your job is secure.",
        "score": 5,
        "replies": []
      },
      {
        "author": "ForeverHall0ween",
        "body": "Nah more like 80% of programmers aren't on the upswing of the hedonic treadmill. Think about the last time you were incredibly happy. How long did that last? As a profession we should be asking for more resources in mental health care instead of gourmet cafeterias and tickets to sports game.",
        "score": 24,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[removed]",
            "score": 28,
            "replies": [
              {
                "author": "WillCode4Cats",
                "body": "I don’t even get free coffee lol.",
                "score": 7,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "michaelochurch",
        "body": "This is all on-point, and the micromanagement bukkake (sprints, Jira tickets for everything) is exasperating. Programmers are individually smart enough to realize that they're part of an exploited proletariat, collectively too stupid to band together and unionize because we often hate each other over minutiae like tabs versus spaces, and usually unable either due to social inability or lack of interest to get into the few jobs, at the executive level, where being part of a business is actually tolerable rather than a soul-shitting grind because there's still bureaucracy but at least you can fly business class wherever you want and call it a work trip.\n\nWe also tended to get into the field because we genuinely wanted to believe a world existed where people can be rewarded according to the quality of their work, rather than their playing of politics, and because we earnestly believed it was still possible, as it was in the 1950s and '60 when there was immense state support for a healthy and growing middle class, to get rich by doing good work. That first programming job or two is when people realize that capitalism is actually capitalism and that evil wins because that's how the system was designed.\n\nThe \"ball pits\" meme is hilarious, because managers actually use the game rooms to decide who needs to get PIP-raped when there's a quota to be hit, since most PIPs occur in the context of disguised layoffs and managers are told from on high that X percent aren't going to make it, and they usually don't know what the people under them are actually doing because managing up and playing politics are already a full-time job. If you're in there at 9:30 at night to blow off steam, you're probably fine, but if you're in there more during work hours more than twice a month, there's a good chance of you getting anally raped for it. You should avoid the nap pods and such as much as possible. Just get your work done and for the love of God, don't become known for anything that isn't work.",
        "score": 63,
        "replies": [
          {
            "author": "mich160",
            "body": "Insert drive through meme here",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "candelstick24",
        "body": "I love this profession. If anything makes it bad it’s toxic or non tech management. Also the Agile hype and SAFE are massive reasons of frustration.",
        "score": 4,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "depression sux",
        "score": 7,
        "replies": []
      },
      {
        "author": "totemo",
        "body": "You guys are getting nap pods and adult ball pits?",
        "score": 6,
        "replies": []
      },
      {
        "author": "TistelTech",
        "body": "I have been writing code (production c/c++, python, go, elixir, JS, TS, SQL) for \\*sigh\\* 23 years.  probably should move into management, but, not a talker. I still get a little jolt of happiness when I get to solve a novel problem and it works. Everything else is pretty boring.  So much of dev now is just slapping together libraries written by others. Current interest is whether the LLM hype boom will pop. My depression started way before CS. Never forget, most people have it much worse in terms of employability and salary.",
        "score": 5,
        "replies": []
      },
      {
        "author": "aeric67",
        "body": "Yet I continue to put all happy thoughts on the quarterly checkins.",
        "score": 3,
        "replies": []
      },
      {
        "author": "MundaneWiley",
        "body": "I am 80%",
        "score": 3,
        "replies": [
          {
            "author": "MundaneWiley",
            "body": "Turn what you love into your career was the worst advice I ever got lol",
            "score": 3,
            "replies": [
              {
                "author": "jimjamjahaa",
                "body": "\"Do something you love for a job and you'll never work a day in your life\" they say... \n\nHow about... corrupt something you love for a job and you'll lose both your love and suffer an existential crisis at age 23.",
                "score": 6,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "campbellm",
        "body": "Oh I'm unhappy with things at my job, I'm just less unhappy at this profession than I would be in probably most others.\n\nThere's a reason they call it \"work\".",
        "score": 3,
        "replies": []
      },
      {
        "author": "PathOfTheAncients",
        "body": "Honestly the thing that makes my job significantly worse is programmer culture. The churn from some devs with a lot of authority to always do everything in some new way is exhausting. If there is in fact a new way to do something that offers tangible benefits I am game but most of the time it's just whatever frame de jour is making people's code esthetic happy and making the early adopters feel smart despite no net gains to the user or team.\n\nIf anything I feel like a lot of the newer ways people in my company are forcing on everyone have slowed down development, introduce more bugs, are slower running, and demand more generic UI. But at least we have once again slightly obfuscated MVVM and dependency injection in a new way for no apparent reason.",
        "score": 3,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "They don’t realize how much the New Way is just like fashion. This design existed when you were too young to remember, with only small modifications that won’t necessarily fix the problems it had then. \n\nWe need to teach history in school. I got a bit in a distributed computing class, and other than that they might teach algorithms in chronological order. But for instance it was misrepresented to me that quicksort is older than mergesort. Von Neumann invented the latter in 1945 (and Vannevar Bush wrote about the Semantic Web the same year).",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "SomniaStellae",
        "body": "I think this is just modern, western society. People don't recognise happiness when they have it. I can be quite a horrible realisation, that in a 'happy' moment, that is all there is to life. This is peak living. Some people embrace it, for others it causes despair.\n\nMy key to being happy is just recognising my feelings and being comfortable with my life. I have my health, I have a lovely family and whilst I still live paycheck to paycheck, I don't worry about having to make my mortgage payment or put food on the table.",
        "score": 15,
        "replies": [
          {
            "author": "LordoftheSynth",
            "body": "That means you're actually doing better than a surprising number of devs.\n\n(cue the brigades coming in to say if you're a dev and aren't more successful than average, clearly you're a bad dev)",
            "score": 12,
            "replies": []
          },
          {
            "author": "CyAScott",
            "body": "I discovered being happy meant not caring about my job. I took up more exercising and started eating healthier, and I feel fantastic.\n\nPilling on more technical debt, requirements that make no sense or break other features, endless meetings, interruptions, and office politics, no longer bother me because I just don’t care what happens between 9-5. If I’m not on call and some attempts to contact me after hours they get ignored until the start of the next business day. So far that has worked for my company, and if it doesn’t then I can leave. Not caring about what happens at work has made my life so much easier.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "PuzzleMeDo",
        "body": "67.9% of programmers are doing just fine, according to that survey.",
        "score": 3,
        "replies": []
      },
      {
        "author": "__methodd__",
        "body": "A lot of companies had layoffs last year, the job market has been tough, and people feel burned out and stuck.\n\nMy workplace was already intense and it's gotten worse. Even Goog introduced more intense perf.\n\nChill companies still exist, but they pay a lot less and may not be satisfying because of a lack of tech focus.",
        "score": 4,
        "replies": []
      },
      {
        "author": "Impossible_Diet_3896",
        "body": "20% are not into depth of programming",
        "score": 8,
        "replies": []
      },
      {
        "author": "paralaxsd",
        "body": "Really fascinated with that wall picture the channel was showing.  \nIt is so unreasonable to build something like that and yet, that's exactly how all the technical debt is created in software programs - by not honoring a previously given structure but forcing an unwieldy, local solution anyways.",
        "score": 2,
        "replies": []
      },
      {
        "author": "iNoles",
        "body": "I heard that AI not going to improve developer productivity when it is full of errors. They all blame developers for something that went wrong, but not shitty managers and processes.",
        "score": 2,
        "replies": []
      },
      {
        "author": "pr1ap15m",
        "body": "so they have joined the rest of the worlds workforce",
        "score": 2,
        "replies": []
      },
      {
        "author": "redalastor",
        "body": "Which dwarf are we then?",
        "score": 2,
        "replies": [
          {
            "author": "Full-Spectral",
            "body": "Grumpy mostly I think.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "dashing-monkey",
        "body": "After 10 years I still enjoy it. I work in a team of 5 or so engineers. The only thing that really gets on my nerve is people who cannot work with others due to bad communication, lack of consideration or just pure incompetence. As the team lead it's super annoying to spend time to have conversations like \"hey maybe you should use Google before you ask me\". I just want to build cool computer features, not deal with idiot people.",
        "score": 2,
        "replies": [
          {
            "author": "redditrasberry",
            "body": "Agree with you but it's much more than \"use Google\" ... the average person / engineer just way under values the skill of self-driven problem solving. They assume if someone else knows how to solve something that it is therefore obvious they should ask that person to help them. It sounds innocent but in fact it drives a deep cultural acceptance of \"helplessness\" and inter-dependence that paralyses progress (\"we can't do project A because only person B knows that system and is working on something else\"). How about the documentation and code are clear enough AND staff actually assume responsibility for learning something themselves every now and then, such that it isn't uniquely dependent on one person?\n\nThere are rare people who just get shit done regardless of what it takes and I see them doing about 80% of the work while the others operate at a fraction of their productivity due to these effects.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "ModernRonin",
        "body": "&gt; 80% of programmers are not happy\n\n100% of Executives **don't give a fuck.**",
        "score": 2,
        "replies": []
      },
      {
        "author": "oxwilder",
        "body": "Getting clout for literally just posting someone's video",
        "score": 2,
        "replies": []
      }
    ]
  },
  {
    "title": "Your company needs Junior devs",
    "body": "",
    "score": 1016,
    "url": "",
    "created_utc": 1725821294.0,
    "author": "Hamza12700",
    "permalink": "/r/programming/comments/1fc52yj/your_company_needs_junior_devs/",
    "comments": [
      {
        "author": "versaceblues",
        "body": "Not only do you need junior devs, but you need to consciously create space for your junior devs to independently learn and grow. \n\nSometimes this means carving out low business risk projects that all the juniors space to fail.",
        "score": 569,
        "replies": [
          {
            "author": "ebinsugewa",
            "body": "The most valuable thing you can do is let people fail.\n\nMore experienced engineers still fail literally all the time, every day. I might try seven different ways to debug something complicated before I actually figure it out. It’s just that no one besides me ever sees that.\n\nYou have to get exposed to that feeling early and often because it never goes away.",
            "score": 265,
            "replies": [
              {
                "author": "versaceblues",
                "body": "&gt; The most valuable thing you can do is let people fail.\n\nYup. I constantly get into arguments with other seniors who are scared of \"throwaway work\". So they will spend months and endless meetings arguing about what it is we are building.  \n\nMy philisophy is that its better to keep moving and experimenting than it is to endlessly aruge about theory. I try to create space for junior engineers on the team to just go and build things in a timeboxed way. Even if the projects fail, there are valuable learning for both the indivduals and for the team, with relatively minimal cost to the company.",
                "score": 87,
                "replies": [
                  {
                    "author": "-grok",
                    "body": "Yeah, but muh Bike Shed!",
                    "score": 12,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Accomplished_Yard_62",
                "body": "I say throw the developers to deep end. Oddly after 20 years of my career, I can see that looking backwards the best time had been when I was challenged as a developer of course with reasonable deadlines. Failures will continue for all devs almost all the time. Problem I see with young developers especially those who joined companies after covid, is the sense of responsibility at work seems to be lower in most which is why many companies had to move WFO as well trust from management is lower.",
                "score": 6,
                "replies": [
                  {
                    "author": "mycostoner",
                    "body": "\"after COVID\" buddy it's still here, just most people are incredibly ignorant + don't protect themselves or others",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "SittingWave",
                "body": "you all seem to ignore the fact that companies, especially american companies, don't care about their employees. All they care is to get a shitload of money. That's it.",
                "score": 5,
                "replies": [
                  {
                    "author": "ebinsugewa",
                    "body": "I mean that’s obviously a given.\n\nBut this is something I personally do regardless, because it makes my team more effective. I will make sure to shield them from any actual serious business consequences that their failures will have.\n\nI only know half of the things I know because I was a dumb kid who had people like me now believe in me then. I am going to pay it forward regardless of if it takes extra time away from my work, or if it’s not selfishly the best thing to do careerwise.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "DigThatData",
                "body": "I'm a Sr. MLE. Not only do I fail all the time, I actively publicize my failures and course corrections to my team. My hope is that it helps cultivate an environment where it's easier to accept that mistakes happen and we learn from them and move forward. Maybe reduce the impostor syndrome among the junior devs a bit by reminding them that the OGs aren't perfect either. I'd much rather learn that someone is struggling with an issue as soon as it becomes a blocker rather than them hiding it for a month because they're ashamed or whatever. \n\nPsychological safety is the strongest promoter of team productivity. Do everything you can to cultivate an environment where people feel safe to make mistakes and seek assistance.",
                "score": 2,
                "replies": [
                  {
                    "author": "ebinsugewa",
                    "body": "100%. I try to make it a point to semi-regularly do a live knowledge transfer or debug with a few junior teammates.\n\nWhen things like you describe happen I make sure to call out where my assumptions or debug path was wrong. And extra importantly, point out when I straight up just don’t know something or don’t know why it’s working in the way that it is. Of course I then follow that up with what I would do to read up on the behavior or how I would search for the relevant commit etc.\n\nI feel this goes a long way towards helping them feel more productive - hopefully by encouraging them and giving them tools in order to ‘stick it out’ a bit more before asking for help. But to also make it clear that asking for help is not a weakness.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "Is trying 7 different ways to debug something actually failure or is that just… you know, the typical process of debugging? \n\nSometimes when I see people say “fail fast” and things like that, their definition of ”failure” is… odd.",
                "score": 2,
                "replies": [
                  {
                    "author": "ebinsugewa",
                    "body": "We only know how debugging typically goes because we’ve been doing it for years. \n\nNot letting juniors fail earlier in low-stakes ways will cause them to want to give up almost immediately and ask for help on every single task. This can stem either from laziness or fear of seeming incompetent. At least one of these you can try to fix by doing this.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "Something being part of a typical process isn't \"failure\" though it's just the process. Failure is when you go through the process and you still don't get the right result, because you did something in the process incorrectly, applied the wrong process, or had an incorrect conception of what the process even was.\n\nedit: lmao why am I being downvoted for this, what I'm saying is correct.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "TheOtherZech",
            "body": "Hell, sometimes it can be as simple as making ride-alongs as easy as possible. It's amazing how much friction there can be around letting someone get eyes-on, let alone hands-on, with things they aren't a regular contributor to.",
            "score": 22,
            "replies": [
              {
                "author": "versaceblues",
                "body": "I think the biggest boost to my career was when I was ranting in a meeting about a new codebase I was put on: \n\n\"Guys this is just spaghetti Jquery code. It will be extremely hard to maintain, we should rebuild it in react\"  \n\nAnd the manager at the time just told me... alright well go do it. Report back at the end of the week an example of what you mean.  \n\nThem allowing me this space to just try something, knowing that I could fail, actually motivated me to go and put in 110% effort and actually enjoy my work while doing it.",
                "score": 35,
                "replies": [
                  {
                    "author": "gex80",
                    "body": "The problem is when people come in day 1 thinking they know better. I had a devops engineer contractor come in and tell us all the ways we can improve things. I told him, you should take the time to know the environment and find out why we did things the way we did first before saying what is and isn't right.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "Yeah you gotta show some respect for other people work! There are often a lot of reason for something looking like it does.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "mortgagepants",
            "body": "not only projects that allow them to fail, but also telling them failure is okay, telling them they're not going to lose their job if they fail.  \n\ni really don't want to take a risk for your company if it means i'll be living in my car in 6 weeks.",
            "score": 19,
            "replies": [
              {
                "author": "versaceblues",
                "body": "Yah that’s what I mean. \n\nThough there is a difference between simply “telling” and actually setting up a legitimate culture were rapid failure and iteration is encouraged.",
                "score": 9,
                "replies": [
                  {
                    "author": "mortgagepants",
                    "body": "indeed.  bosses really be like, \"its okay if you fail, but really its actually not okay.\"",
                    "score": 10,
                    "replies": []
                  }
                ]
              },
              {
                "author": "allllusernamestaken",
                "body": "&gt; not only projects that allow them to fail, but also telling them failure is okay, telling them they're not going to lose their job if they fail. \n\nOur first chat with our incoming interns is exactly this. \"We are not NASA. Failure IS an option.\"",
                "score": 6,
                "replies": [
                  {
                    "author": "civil_peace2022",
                    "body": "Even for NASA, sending anything to Mars is tricky.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "b1e",
            "body": "Lots of comments now so I’ll reply to this one— while I generally agree, the state of software engineering as a career in 2024 has made this more difficult than ever.\n\nDisclaimer: The bulk of my career has been in “big tech” where I joined as a researcher before moving into pure engineering and eventually leadership. I’m currently a director at a public tech company I guess you’d call FAANG-adjacent. So I’ll comment from that perspective.\n\nIt used to be that hiring junior engineers relied on two major pipelines:\n\n1. Undergraduate recruiting from various universities around the country (typically for interns)\n2. Hiring recent graduates with internships or work experience already under their belt.\n\nAt Google there was of course for the longest time no degree requirement so there were exceptions to these sourcing pipelines— you’d also see bright folks from open source and other avenues brought in.\n\nThe interview process was tedious. Whiteboard coding rounds now known as “leetcode style”, and some behavioral questions. Sometimes a lighter weight system design round (but never anything too crazy for junior hires).\n\nThe problem is while at first this did get you a filter which generally produced good junior hires (that were bright and motivated and willing to learn), over the following years the interview prep industry grew considerably and “coaching” culture started prevailing.\n\nSuddenly you had people that could crush (in their terms, “crack”) the interviews but that minimal potential or even sufficient fundamentals to succeed as a junior.\n\nIn the years leading up to COVID this started getting considerably worse. To Google’s credit, its developer tooling is world class and enabled even a bad engineer to ship code. But increasingly junior hires were less and less competent than their predecessors.\n\nFast forward to today. I’m at a different company and it’s clearer than ever that the junior pool is flooded with folks that don’t give af about software engineering and aren’t even qualified for a junior position. And it’s VERY hard to filter down to the good ones. So it’s no surprise that companies aren’t bothering.",
            "score": 11,
            "replies": [
              {
                "author": "qoning",
                "body": "it's the same with SEO, eventually people optimize for what you measure\n\nimo today hiring without referral (with proven prior collaboration) is crazy, but that's hard to implement outside of PhD-level candidates",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "anzu_embroidery",
            "body": "A lot of people frankly don't seem interested in \"independently learning and growing\". I don't know where all these juniors being held back by company culture people are talking about are. I can't get people to google basic questions half the time.",
            "score": 29,
            "replies": [
              {
                "author": "versaceblues",
                "body": "Yah I’ve had those people (and frankly I was one of those people early in my career). \n\nYou need good leaders that know how to motivate these types of people. Usually part of this is not trying to micro them but to give them high level goals and have them work independently to solve em. The key is they need the psychological safety to fail.",
                "score": 12,
                "replies": []
              },
              {
                "author": "epelle9",
                "body": "I think a big part is the micromanagement caused by scrum.\n\nIf a ticket is assigned for 8 hours, and it deals with a concept that might take 3-4 hours to learn independently, you can be sure that they won’t be trying to learn it independently, because it will reflect negatively on them if they learn it in 4 hours and now only have 4 hours to solve the 8 hour ticket.\n\nIt’s much better for metrics to use 1-2 hours of a senior/ leads time to get told about it and given a kinda template and then finish the ticket slightly earlier, there often isn’t a metric for senior time used.\n\nI know that was me in my first company, part of my goals were actually to “not be afraid to ask questions” because the tickets were given hours that would change regardless of who picked it up, so obviously the juniors needed a ton of help.\n\nBeing paid shit obviously didn’t help me be motivated either.",
                "score": 5,
                "replies": [
                  {
                    "author": "Perfect-Campaign9551",
                    "body": "Scrum doesn't use hours, it uses points... If people are treating that as hours then they are wrong",
                    "score": 7,
                    "replies": [
                      {
                        "author": "TangerineSorry8463",
                        "body": "A significant fraction of companies will end up approximapping story points to hours taken.\n\nWe, the anonymous randoms on the Internet can whinge that this is InCoRrEcT ScRuM!!!!1 but at the end of the day they still will do it.",
                        "score": 8,
                        "replies": [
                          {
                            "author": "pitiless",
                            "body": "&gt; A significant fraction of companies will end up approximapping story points to hours taken.\n\nStory points have always been a sham to me - IMO they're simply a bad abstraction for the purpose they exist to serve.\n\nStory points are sold as a method to evaluate the complexity of the ticket/problem. This is fine on paper. But after a few sprints you calculate an expected velocity in terms of story points delivered in a sprint.\n\nBut then, inevitably, you work backwards and figure out that my team has 4 developers, your sprints are 2 weeks long and the team is expected to complete 120 story points in a sprint. So the team does the maths and figures out that a story point is about a half developer day.\n\nSome agile proponents will bleat on about how wrong this is, but that ignores the way people actually operate. Time is _the_ most important resource - both for businesses and individuals. Pretending that it isn't relevant and isn't how people reason about the world isn't helpful and doesn't make it be reality.\n\nAs such in every agile environment there's a generally understood mapping of story points to time, usually with the acknowledgement that the bigger the number the more risk of overrun. I really wish we'd collectively just stop pretending that story points are a useful abstraction as I've never seen them be that. Instead we should be giving estimates and we should know that that bigger numbers result in bigger scopes of uncertainty.\n\nOne thing agile gets very right here is the downward pressure on ticket size - for the above mentioned reasons.",
                            "score": 4,
                            "replies": [
                              {
                                "author": "Perfect-Campaign9551",
                                "body": "Points work because they average out the details over a few sprints. Yes underneath they abstract time but that's the point of doing it. Eventually your team will know how many points they can do in a sprint. Judging a task by complexity using points allows you too make a decent estimate on how much \"time it would take\" in point form, since you know you only have so many points per sprint now you know how much work you are able to, in theory, perform. It's easier to judge a task by complexity than to say \"that will take 5 hours\". ",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "epelle9",
                        "body": "It did in my first company.\n\nJira has a “estimated time” field, and many companies performance metrics rely on that.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "Perfect-Campaign9551",
                            "body": "Hm doesn't sound very morale boosting that's for sure. ",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "Fixed Hours?  What the fuck?  A ticket takes as long as it takes to understand the problem (which includes any time for the assigned engineer to learn, research and collaborate)  and then the time\nto come up with a correct, well formed solution, test it and get it reviewed. That might be 8 minutes or 8 days.   A manager that can’t grok that has never done any real work and doesn’t deserve to be a manager.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "MrMarchMellow",
            "body": "I’m Going around asking about school 42 and this comment seems to apply. Do you know what it is and would you hire someone fresh from school 42? Also, would you value at all if this fresh graduate has 10 years of experience in other field ( marketing sales and product) or do you typically prefer a clean page?",
            "score": 1,
            "replies": []
          },
          {
            "author": "Boring-Test5522",
            "body": "sadly, with these LLMs, this is gone.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Apoplegy",
        "body": "This is actually a really good article.\n\nAlso, not mentioned, the tech world is up for aver bad time in a few years when all the juniors that can not break into the field now won't be able to be the seniors then.",
        "score": 622,
        "replies": [
          {
            "author": "Hamza12700",
            "body": "This is so true. This AI hype is ruining the tech world. The gizillion different videos on YouTube claming that AI is gonna replace programmers in near future, it's all **BS**. This just discourages new students and CS-Grads from entering this amazing field due to this fake AI hype.",
            "score": 349,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 105,
                "replies": [
                  {
                    "author": "scrittyrow",
                    "body": "Best and fastest way to build a project, just hope something is running on their host 😆",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "wrincewind",
                "body": "it's all following the same cycle. 'we made programming easy! now anyone can be a programmer!' \n\nremember COBOL? they made programming easy by inventing a COmmon Business Oriented Language, so any middle manager could write out the code and understand what it was doing.\n\nThen they realised that 'writing code' is a very different skill from 'knowing what code to write, what it should do, how, and why'. and so you got COBOL programmers. \n\nThis cycle repeats every few years, with some magic tech that means that you don't need programmers anymore, followed by the realisation that the tech itself needs programming (or some equivalent - designing, configuring, repairing, debugging, etc), and we're back to square one. \n\nAI's a lot scammier, but even in the best of cases, it's not much different - getting rid of your existing coders in exchange for people that can tell the AI what to do, in increasingly specific ways to fit the precise needs of the business, until they're just programmers again.",
                "score": 113,
                "replies": [
                  {
                    "author": "valarauca14",
                    "body": "what's funny is we're starting to reach that stage. I've already had conversations around topics like:\n\n* We need a syntax linter for prompts (a lot of LLM's \"_like_\" structured data as input).\n* We need a linter to check if \"_concept_\" can be expressed in few tokens (can save a lot money).\n* Could we automate optimizing a prompt?\n* We should standardize certain practices for structures/fields/descriptors\n* We need a $tool to check if `$prompt_a` vs `$prompt_b` is having the desired effect.\n* How do we unit test prompt changes?\n* Should we track prompts in source control?\n\nThe circle is almost complete. Just another few years for \"_standardized tools_\" to become common place and we'll realize it is just programming all over again.",
                    "score": 75,
                    "replies": [
                      {
                        "author": "Reverent",
                        "body": "We've already lived through it, that's what nocode/lowcode was supposed to be. And SQL before that. and COBOL of course.",
                        "score": 16,
                        "replies": []
                      },
                      {
                        "author": "EveryQuantityEver",
                        "body": "Seriously, at what point does doing all that take more effort than just writing the code normally?",
                        "score": 3,
                        "replies": [
                          {
                            "author": "valarauca14",
                            "body": "Oh we're long past that point.\n\nBut it isn't my job to make that decisions and playing along pays a lot better then asking logical questions.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 20,
                    "replies": [
                      {
                        "author": "7952",
                        "body": "And plain English is not easy to write or understand either.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "thecurlyburl",
                    "body": "We all know how lucrative COBOL is now, too 😂 Sadly this is great news for established folks but man...I loathe dealing with MBAs perpetuating these dumbass cycles. The irony being in the long term this would be less expensive but alas the perverse incentives of 1 or 2 quarters above all else ruins everything.",
                    "score": 12,
                    "replies": []
                  },
                  {
                    "author": "vagaris",
                    "body": "That last line. I ended up doing a bunch of stuff with “low code/no code” at my last job toward the end. The only reason I could do what I was doing was because of my experience. There was still plenty of code. And fun things like direct api calls because the widgets were too simple to accomplish things. Yet I was also constantly being chastised for ridiculous things because, “it’s low code, it’s simple, anyone can do it.”",
                    "score": 10,
                    "replies": [
                      {
                        "author": "stahorn",
                        "body": "When I feel down because the things I work on \"should be simple\", I just go to this page, chuckle a bit, and then carry on with my day:\n\nhttps://daniel.haxx.se/blog/2021/05/20/i-could-rewrite-curl/",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "7952",
                    "body": "I think sometimes there is a realisation that some professions/management/leadership have poor tech skills.  And slowly but surely that is threatening their position.  But if you can make it \"easy\" then you kick the can down the road.  And continue believing that technology is something you can always get someone else to do.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "m6dt",
                "body": "More jobs for me :P",
                "score": 129,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 56,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 22,
                        "replies": [
                          {
                            "author": "strbytes",
                            "body": "A lot of companies will do this, but it will drive their customers to want to switch services and create demand for competently run software businesses",
                            "score": 7,
                            "replies": [
                              {
                                "author": "Chii",
                                "body": "only if customers are willing to pay the premium for the competently run businesses. Sometimes it's not possible for a customer to switch either.",
                                "score": 2,
                                "replies": []
                              },
                              {
                                "author": "EveryQuantityEver",
                                "body": "Eh, I'd like to believe that, but nothing over the last 10 years has really given me confidence that will actually happen. Businesses are the ones that decide what software is used, and in general, they could not give a shit if the people actually using it are being frustrated or not.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "Nefari0uss",
                        "body": "Upper management everywhere: nothing a boot camp can't fix.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Gullible_You_3078",
                    "body": "lmao exactly what I thought.",
                    "score": 18,
                    "replies": []
                  },
                  {
                    "author": "epelle9",
                    "body": "Yup, junior level jobs..",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "sprcow",
                "body": "Offshoring too. Both my current job and my previous job essentially have made their senior devs pseudo-tech leads over the work pipeline feeding offshore resources and essentially stopped hiring new local talent. Not sure whether it will come back to bite them personally, but they're seriously contributing to the gutting of our industry when it comes to available expertise.\n\nIt's so wild, too, because a decade ago, all anyone could talk about is how there's a huge demand for more software developers. We wanted to bring in more under-represented demographics. We wanted to help start the training pipeline earlier in school. All these bootcamps were springing up to try and help fill the gap. \n\nThen halfway through the pandemic it was like, oh, minor economic downturn, just kidding, we're going to just stop investing in the future of software development, entirely. We're going to stop hiring local (which is super ironic given the RTO push). We're going to just put all our money at 1/4 price offshore contractors and it'll be great!\n\nI've been working in tech since the 2000s, and this is not the first outsourcing craze I've been through, but combined with garbage-tier chatGPT code it seems like we've created a perfect storm for businesses to just go full slash and burn on their talent pipeline.",
                "score": 66,
                "replies": [
                  {
                    "author": "frobnosticus",
                    "body": "I remember the offshoring madness on wall street back in the 00s.  So many firms spent truckloads of cash to save cash then found out that the nerds weren't lying to save their jobs when they said it was a mistake.\n\nSuch a waste.  But...there will always be some kids that need to touch the stove.",
                    "score": 35,
                    "replies": []
                  },
                  {
                    "author": "engineered_academic",
                    "body": "This is how I know RTO is bullshit. If they can hire a team in India and expect them to be productive, I can sit in my apartment.",
                    "score": 24,
                    "replies": []
                  },
                  {
                    "author": "epelle9",
                    "body": "I mean, (as a nearshore dev in my old company), we were constantly told that we actually performed better than the American devs, we were carrying the company on our shoulders, when I quit I remember my manager’s boss trying to get me to stay and explain what he could do to get the Mexican devs to stop leaving.\n\nBut apparently “paying me more than 1/4- 1/3 what you pay the other employees” wasn’t possible in their mind.\n\nI think they also paid bottom of the barrel wages for US employees, so they got the lazy US devs.\n\nI think that’s a big part why of why offshoring often fails, they want to go for the cheapest workers, and the high quality workers (I got a degree in a US university with 4.0 semesters) get put off from that kind of work).\n\nThe companies that offshore and just pay a slightly lower cost of living adjustment get the best of the best foreign devs, which are often better than the mid tier local ones.",
                    "score": 12,
                    "replies": [
                      {
                        "author": "sprcow",
                        "body": "Yeah I certainly don't mean to disparage the quality of offshore talent. I do think that the wild price differential and the transformative power of tech salaries on certain areas of the world create highly-imbalanced incentives though. \n\nHigh population countries like India have literally millions of workers vying for these jobs and there are whole industries revolving around herding up those workers and selling their labor to US firms. If a company has a bad experience with one dev, they'll happily swap them out over and over until you find someone you like, because they have a virtually limitless pool of potential candidates. Changing devs costs them little, and they don't bear any of the tech debt burden incurred from a revolving door of contract assistance.\n\nI think my complaint is more about the shift to this model where tech firms basically treat offshore labor as supplemental force multipliers to onshore workers, using it (and AI) as an excuse to cut jobs and expect the same or more productivity out of the remaining onshore workers.",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "alchemistcamp",
                        "body": "I think you're right. I've worked in the US and in China and worked with teams based in Chile, India and Singapore also. In all cases, the best devs weren't cheap or didn't stay so for long.\n\nCompanies outsourcing to get the best talent will do great, those that outsource purely for wage arbitrage usually struggle if software is core to their business.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 16,
                    "replies": [
                      {
                        "author": "PeachScary413",
                        "body": "Yeah.. I have talked to a lot of US devs who are in denial (or just straight up don't realize the pay disparity between them and the rest of the world). It would be insane if companies wasn't looking at the biggest expense (payroll) and notice that they could get the same quality of developer for 1/5th the pay.",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "Bitter-Good-2540",
                        "body": "Absolutely agree! The jobs are gone! And more and more jobs will go into cheaper countries.\n\n\nIt's just coping that people think they will come back.\n\n\n\n\nQuality improved massively!",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "josluivivgar",
                    "body": "it's a power move, it's an attempt to make the salaries go down, but it will bite them soon. too bad people will suffer until then",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 2,
                    "replies": [
                      {
                        "author": "sprcow",
                        "body": "Yeah, sad but accurate. I remember getting a lot of hits from bootcamp recruiters in the late 2010s and even then it just felt vaguely predatory and I declined to interview. The IDEA of this sort of programmer trade school made some sense, but in retrospect they were just riding the bubble of high tech demand and selling that promise to job changers.\n\nIt's interesting how business has been on this eternal quest for the holy grail of 'people who can do tech work even though they're not the nerdy sort who is self-motivated to learn how to do hard tech stuff' so they can just churn out workers and commoditize software devs.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "kahi",
                "body": "Dealing with two juniors attempting to submit code through AI and it’s a fucking headache. Place I work is project dependent. Last PR had AI comments they claimed they made still in tact and was using out dated shit. Colleges and boot camps praising AI is part of the problem too. Shit is infuriating learn to walk before you run, and if not, door to leave is over there",
                "score": 6,
                "replies": []
              },
              {
                "author": "particlemanwavegirl",
                "body": "dude this cover photo is AI generated.",
                "score": 17,
                "replies": []
              },
              {
                "author": "Bakoro",
                "body": "Corporate greed is what's ruining the tech world.    \nCorporations have been trying to do whatever they possibly can to do more with less tech labor. AI hype is just the current iteration.   \n   \nI've seen it happen over the course of  20 years now, where the market went from \"we'll hire and train anyone who knows how to compile a \"Hello World\", to \"You need to have five years of experience as a full stack developer to get this junior role\".  \n   \nThe software developer labor pool and the labor market has been hit from all sides.  \nFirst there weren't enough developers to go around, so wages got fairly high, with lots of perks.     \nTons of people wanted in on that and went into CS in hopes of getting a good paying job, because software development is one of the last decent paying jobs there are. Corporations hammered that we need more CS people, because they wanted downward pressure on wages.  \n    \nThe problem is that lots of low quality graduates were good enough to get a degree but simply didn't and don't care about computer science or programming and can't actually do anything practical.    \nAt the same time a bunch of the same kind of people who couldn't go to college for whatever reason went to boot camps and learned enough practical skills to get through an interview, but don't have enough fundamentals to make a decent product.   \n    \nSo businesses get flooded with applications and have no idea how to tell a good developer from a good interviewer. They increasingly refuse to accept risk, and refuse to innovate in the hiring process. They start requiring more and higher degrees, more certifications, and more years of experience. They won't hire people who are new to the field unless they absolutely have to.    \nNearly every business is fighting over the same shrinking pool of developers who have 10+ years of experience, but also aren't \"too old\".",
                "score": 12,
                "replies": []
              },
              {
                "author": "mattl33",
                "body": "If anything this has more and more solidified my focus is code quality tooling. I still use some ai here and there to figure out what others did but maintaining code I feel like it's going to get harder and harder for junior folks. \n\nAI isn't fake, but the idea that programming is dead or dying because of AI sure as hell is.",
                "score": 3,
                "replies": []
              },
              {
                "author": "Gran_Autismo_95",
                "body": "Well my junior engineer clearly lets ChatGPT do all of her work for her, and I'd say her and the senior we hired at the same time are genuinely terrible at their jobs to the point it's making the teams overall work much harder",
                "score": 5,
                "replies": []
              },
              {
                "author": "TangerineSorry8463",
                "body": "On the other hand... It means we get less people who are here for the \"200k$ to change button colors\" jobs, and we get more passionates.",
                "score": 2,
                "replies": []
              },
              {
                "author": "Tall-Midnight-533",
                "body": "That's actually a good thing because right now too many people study CS. There are too many new grads for the number of open positions. According to the statistics the number of jobs never stopped growing but the number of candidates exploded compared to the growth. Add many layoffs to the pile of candidates and we have a job opening disaster for many years to come.",
                "score": 1,
                "replies": []
              },
              {
                "author": "KevinCarbonara",
                "body": "&gt; This is so true. This AI hype is ruining the tech world.\n\nWtf does this have to do with AI???",
                "score": 1,
                "replies": [
                  {
                    "author": "falconfetus8",
                    "body": "There was talk in the article about businesses wanting to replace juniors with AI.  You read the article, right?",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "night0x63",
            "body": "Anyone find it ironic that the article image is AI generated?",
            "score": 22,
            "replies": []
          },
          {
            "author": "teerre",
            "body": "Depends how you look at it. High demand, low supply means better jobs. Less jobs, but better jobs",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Solonotix",
        "body": "This reminds me of all the times I've asked if management would allow for more non-deliverable work time. The idea of allowing employees to venture outside the bounds of KTLO and actually innovate on new ideas. Instead, we've had damn near two years of constant grind mentality to meet the super big contract at the end of the road.\n\nThis may sound like basic complaining, but the irony for me is that this tunnel vision to the big contract has caused every other effort for maintainability, or more robust systems to be sacrificed in the name of delivering on time. This focus has caused every subsequent team to copy the \"template\" projects (as our documentation says to do) and every team has to relearn the same lessons all over, and it is crippling the team that supports the platform from being able to do anything other than put out fires. It also means they aren't able to spend the time to update the templates, which perpetuates the cycle.",
        "score": 65,
        "replies": [
          {
            "author": "Perfect-Campaign9551",
            "body": "Time to just pad those estimates and do what you want behind the scenes to get to where you need to go",
            "score": 13,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Your company *may* need junior devs.\n\nThe *industry* absolutely needs junior devs, because that's what eventually turns into senior devs ... after much time to winnow and refine them.\n\nIt feels like they're getting more junior all the time, though, and less aware of their junior-ness.",
        "score": 53,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 10,
            "replies": [
              {
                "author": "[deleted]",
                "body": "That's why the industry requires junior developers: if, over the long-term, you have no junior developers, you will, eventually, not have any seniors.\n\nBut! any individual company is probably looking at short-term risk when hiring juniors. They're going to be near-term drains on productivity that may not turn into productive members of the development team, or may leave before any of the necessary investment in their training can be paid off.",
                "score": 7,
                "replies": [
                  {
                    "author": "SailNo4571",
                    "body": "This. Schools need to provide more practical training, and governments need to financially incentivize hiring interns/juniors. An efficiently run company benefits more from hiring someone else's junior-turned-senior than to train their own, especially when talent is more available. This makes sense even for the junior-turned-senior since companies typically don't bump salary/title to senior level, immediately after you get that experience. Companies expect that discount after they train you. Companies are not out there to do charity, they are out there to compete and find the most efficient way to achieve positive outcomes with the least investment.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "&gt;  governments need to financially incentivize hiring interns/juniors.\n\nThe current cost of hiring/firing is a huge *dis*incentive to hiring entry level positions. If you're serious about this, looking at making it easier/less costly to *fire* people would actually be a better place to start than having the state provide tax breaks or payments to encourage the hiring of high-risk, low-skill employees.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "SuspiciousSegfault",
            "body": "I think this is just a symptom of getting older. Kids these days has been a mantra through human history.\nI'm sure the greybeards who told me to pipe commands wanted to bury their hands in their palms and mutter 'kids these days' when I didn't know what that meant. Same now but with different things I think.",
            "score": 11,
            "replies": [
              {
                "author": "[deleted]",
                "body": "That is definitely a partial factor. It probably also matters that I attended a school with a relatively intensive CS program, while we seem to be hiring a lot of new devs out of non-traditional programs, like boot camps + associate's degrees.\n\n(I distinctly remember being a nearly-useless, fresh-out-of-college programmer who, nonetheless, thought he knew *everything*, so I tried to choose words carefully.)\n\nI'm not totally convinced that explains everything, though.",
                "score": 6,
                "replies": []
              },
              {
                "author": "benihana",
                "body": "things are objectively getting worse though. the quality of education has declined in the past 30 years, the average ability of people graduating college has tanked, people are objectively more selfish and more rude than they were a generation ago, etc. schools cant retain teachers because nobody wants to teach the kids that are in school today, disrespect and outright violence are common. our society has lowered its expectations of people and we're seeing the result of it. and it's going to get worse.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Unfortunatley junior dev's will bounce soon after they stop being junior even when they are offered more money, because they want a wider range of experience than just one company.\n\nI don't have the budget to act as an academy for other companies, and juniors don't stick around long enough for me to recoup the risk I took investing in them.\n\nSo I no longer hire juniors.",
            "score": 5,
            "replies": [
              {
                "author": "[deleted]",
                "body": "That's basically my point.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "benihana",
            "body": "much better headline",
            "score": 1,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "I got paid a decent sum in my last job because of this. I worked for a fairly decently sized (12ish thousand employee) non tech company that just stopped hiring younger developers for their team. Well the few seniors they would have would dip every few years and had close to no one that understood the tech stack. They had zero pipeline of people to promote and keep developing to keep the machine going. Ended up costing a lot more to get everything updated than it should have",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "I’ve long been an advocate of an apprenticeship model.  You get a junior engineer, they clean the shop, metaphorically.  Then, when they’ve learned enough, they move on and are a journeyman (journeyperson?) and experience a variety of projects, teams, and processes.  After this, and a project led by them that demonstrates their mastery (a literal masterpiece), they’re a senior. The hard part is finding the tasks they can do and then expecting them to leave after they have become productive with your software and processes.",
        "score": 192,
        "replies": [
          {
            "author": "Kurren123",
            "body": "Yeah expecting them to leave when they start to become productive is difficult. They sap the time of senior devs for months and that investment is never realised.",
            "score": 42,
            "replies": [
              {
                "author": "IXISIXI",
                "body": "My experience is that it doesnt take months if you hire people well, which many companies don’t because their hiring is broken. There are tons of talented jrs out there. If you hire someone who needs their hand held that badly, reflect on your hiring practices. I pair with my jrs and give more frequent detailed pr reviews, but if they didnt have grit and the common sense to read docs and solve problems I wouldn’t have hired them.",
                "score": 21,
                "replies": [
                  {
                    "author": "Kurren123",
                    "body": "It’s me that mostly hires (small company). I’d be open to changing hiring practices if it meant better candidates. \n\nWhat seems to take time is:\n\n- Leaning how to program in a commercial environment is very different from university. Source control, automated tests, the codebase itself being much larger and complex etc.\n- Building domain knowledge for the type of software we work with. Seeing things from the users point of view lets you see the bigger picture when programming. But out of university you don’t know much about stock management, credit control, foreign currency revaluations etc. \n- Building knowledge about the particular way we do things as a company. Yes we have internal documentation but this still takes time to get used to.",
                    "score": 24,
                    "replies": [
                      {
                        "author": "IXISIXI",
                        "body": "That all makes sense. I have a pattern of onbording juniors to help them be more productive more quickly by giving them wins in a comfortable domain, start them in a particular section of code until theyre comfortable and sort of take things piece by piece while adding complexity at a manageable rate so that they can contribute more quickly without needing to focus on too many things too quickly. I just finished acclimating a new junior to the backend culminating with a huge task and then this week i’m going to focus more on testing then pairing on frontend which is new to him after a few weeks of part time study. I used to be a teacher so this is probably a strength of mine, so maybe its hard to do what I do.",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "SirCampYourLane",
                        "body": "In my experience, the biggest difference is just not writing everything yourself/from scratch. Learning that sometimes you're gonna spend an entire project debugging and working on/with other people's code to fill in gaps they left before they switched projects or even companies is wildly different than anything in school, it's hard to simulate with a regular group project.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "EveryQuantityEver",
                "body": "That seems to happen anyways, with so many companies not willing to pay them once they're more experienced.",
                "score": 2,
                "replies": []
              },
              {
                "author": "Fenzik",
                "body": "Well, when progression is made edifficult, talent is effectively chased out",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "Bradnon",
            "body": "&gt; The hard part is finding the tasks they can do and then expecting them leave to leave after they have become productive with your software and processes.\n\nI often push for more open source and \"choose boring technologies\" at work. It's better for the industry because people are learning tools they can take elsewhere, but the same argument has the polar opposite effect on managers at any one company, who only think in their immediate context.\n\nMeanwhile, the product sucks because feature teams are understaffed because a bunch of SWEs are inventing their own puppet/prometheus/helm-adjacent tools instead of just using what the industry provides, or god forbid, contributing back to those projects.",
            "score": 66,
            "replies": [
              {
                "author": "TheOneWhoMixes",
                "body": "But see, **we** can't possibly use [insert tool here] because we have special requirements like [insert made up thing that isn't actually useful]!\n\n(cough *also if we build it from scratch everyone will rely on us and I'll get promoted* cough)",
                "score": 16,
                "replies": []
              }
            ]
          },
          {
            "author": "mfizzled",
            "body": "I did an apprenticeship to get into being a dev and it was great. Still quite proud of myself to have gone from absolutely zero qualifications to now working in a tech company in the centre of London's fintech neighbourhood.\n\nI think a good thing about apprenticeships is that you can start with zero preconceptions about anything and get taught how to code properly from the start.",
            "score": 5,
            "replies": []
          },
          {
            "author": "trcrtps",
            "body": "This is exactly how I was brought in. Started as Technical Support Engineer, aka diagnosing bugs, writing reports, escalating issues, and learning the code base. Then I was told I could do whatever I wanted and shopped around to teams by my manager. So far I've done frontend, facilitated backend changes to make frontend features get implemented, and lately devops. I'd like to eventually build integrations for our app in the future. I go to standups for 3 different teams but it's cool at this point in my career.\n\nsad thing is I was the last person hired into that role and the parent company cancelled the program. 1/2 of the seniors in the company came through the program.",
            "score": 4,
            "replies": []
          },
          {
            "author": "Deadible",
            "body": "I was an application support trainee for 18 months nearly a decade ago (learning SQL, doing SSIS/SSRS and supporting a CRM system) and that put me in great stead, stayed with that company for another 6ish years and had great knowledge of the company to go with what I learned, worked out great for them.\n\nMy new workplace has a Data apprentice starting in our data engineering team soon (in the UK, they do a college course alongside this job a day a week and learn some related things while receiving a wage) and I’m excited to see how that works out. Mentoring someone who is willing to learn can be rewarding work too.",
            "score": 5,
            "replies": []
          },
          {
            "author": "qoning",
            "body": "Yeah that doesn't work when the average tenure is under 2 years. Everyone and their mother is ready to jump the moment they get a better offer. Your company won't be the one making good offers if it's spending time and money on training worthless (for the time being) juniors. Every man for himself is not a good social strategy, but obviously those who have made it seldom care.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Naouak",
        "body": "Junior devs can be a really good thing or can be a really bad thing for a team. \n\nThere's a kind of Junior, I \"like\" to call, \"Eternal Junior\". Those are junior that will either change career or stay Junior most of their career. They are not necessarily bad at their job but they can't grow to become more than a junior. They probably have a good set of knowledge but once you get outside that scope they are lost. They will improve each time you teach them how but they will unlearn something else in return.\n\nI got one in my team currently and I honestly I'm out of ideas on how to make them break through the junior bareer. The issue is that after a while, the rest of the team are now getting fed up of working with them because they don't want to deal with high maintenance cost. A ticket that you would expect to take 2 days, would be done in 2 weeks because they never get through the code review. This has become so much of an issue that I had to take all their code reviews when I'm not supposed to do that anymore as an engineering manager.\n\nSo while I agree with the article, I would add a big asterisk to it. Get juniors that will improve over time. It's not always easy to tell during interviews but it's a major thing to make sure they will be a good thing for the team.",
        "score": 54,
        "replies": [
          {
            "author": "Radiant-Platypus-207",
            "body": "We got a 10 year experience junior now who I handed off a project at the start of the year to, there was just a bit of UI stuff to clean up and smooth over on the dashboard, functionality was good, just needed styles. He's still going, and has broken about 20 things that were working. He doesn't want to learn anything new and I'm starting to hate him. He's like a helpless baby, and refuses to ask for help.",
            "score": 26,
            "replies": [
              {
                "author": "Kenny_log_n_s",
                "body": "How did the broken changes make it through code review?",
                "score": 1,
                "replies": [
                  {
                    "author": "Aurora_egg",
                    "body": "Bold to assume there's a code review anymore",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Hangman4358",
            "body": "The last couple of juniors I have had the \"pleasure\" of working with have had zero drive to learn anything and zero ability to do any problem solving. All of them are covid or post covid grads.\n\nThey expect to be given all the steps that need to be done, and if any small hiccup happens, they are completely incapable of thinking through a problem.\n\nSometimes, I feel like they must have someone in their ear telling them to breathe, or else they would just run out of air and fall over dead.\n\nI literally had a junior say out loud in a standup that they were stuck because their changes were not compiling, and they did not understand: java: missing return statement. That same dev then asked me 2 hours later how they should approach their manager about a raise, I shit you not.",
            "score": 10,
            "replies": []
          },
          {
            "author": "Matt3k",
            "body": "I'm curious - Do you have plans to let them go, or are you still hoping they'll grow? By the way that you tell the story, it seems you already know the answer. So I'm interested if something is holding you back.",
            "score": 6,
            "replies": [
              {
                "author": "aaulia",
                "body": "No OP, but I would imagine, \"boxing\" said engineer to some kind of low priority project or assignment to keep their \"impact\" to a minimal. Letting people go is always a touchy subject and not something that can be done easily/lightly.",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "ArkBirdFTW",
            "body": "This is honestly my worst nightmare. What do you think a junior should do to evolve and not become this? Is it simply a skill issue or is there more to it?",
            "score": 5,
            "replies": [
              {
                "author": "MagicalVagina",
                "body": "In my experience, the key is to take initiative. Show that you want to progress and learn, take more tickets by yourself, improve old code etc. If you take initiative, you are already well ahead of most. What is really annoying is seeing a junior not progressing and just waiting for things to happen. There are sadly too many like this.",
                "score": 5,
                "replies": []
              },
              {
                "author": "DawsonJBailey",
                "body": "I was becoming one in my first dev job. I would chalk it up to inexperience but that sort of stemmed from me not having any initiative to gain it. I was assigned simple UI stuff most of the time so I would finish early and fuck around rather than trying to understand the backend or try and upskill myself or do anything that could improve my value as a dev. Another issue was my hesitation to ask for help. If there's something you don't understand please ask a senior because they will help you understand. Oh yeah then of course there's the existential dread of hearing about layoffs and realizing how hard it would be to find another job when you know you haven't gotten any better at anything lol",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "just sounds like a case of performance management? if the person takes 2 weeks for a 2 day ticket in weeks one-six whatever but after that it's definitely performance management time. ",
            "score": 3,
            "replies": [
              {
                "author": "lolimouto_enjoyer",
                "body": "Or just people who have been working on a codebase for years assuming that it should be a 2 day ticket because that's how much it would take them. We can never really know from the outside but I was in this position before where I outright did stuff in two days that even team mates who were on the project for a decent amount of time would spend two weeks. It was because I was there from the start and participated in the arhitectural discussions, knew why each design decision was taken, knew what the requirements were, who the customers were and what standards they would generally expect and wrote a big part of the existing code. And I'm no rockstar, I think a lot of people vastly underestimate how fast you actually become when you have all those variables and answers and don't need to stop every 30m to ask 'wtf? why? do we need this? would this case ever happen?\", the code just flows.",
                "score": 1,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "Or r/overemployed",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "popiazaza",
        "body": "There's a smart junior who stay for a year and leave, and then there's a not so smart junior that nobody want to work with.\n\nUnless you are in a position that could promote people with ease in a rich company, there's no way you can convince someone to promote smart junior up fast enough before they leave.\n\nTo be fair, it's the same problem with hiring senior devs though. Hiring junior have less risk, but usually take more time out of the team.",
        "score": 12,
        "replies": []
      },
      {
        "author": "scruffles360",
        "body": "my company has always hired a lot of junior devs and had always done well with them until the pandemic. We went remote and never figured out how to work well with them in that environment. They all get the experience they need and move on right away. It must be frustrating for them, but I'm not willing to be the one to fix the problem. I'm remote until I retire. They're going to have to find someone else to fix it.",
        "score": 8,
        "replies": []
      },
      {
        "author": "phd_lifter",
        "body": "In my experience, juniors are \\~3x more expensive than seniors, factoring in their lower salaries. And by the time they become productive (which takes 6 months - 2 years), they jump ship, representing a net loss for the company.\n\nOn the other hand, if nobody hired juniors, there wouldn't be any seniors.. But it's a luxury not many companies can afford.",
        "score": 7,
        "replies": [
          {
            "author": "lolimouto_enjoyer",
            "body": "The general corporate strategy is to dump them on a senior and expect the same productivity from as before.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "tristanjuricek",
        "body": "The assembly line metaphor seems apt.\n\nMy problem with the software engineering industry writ large is just that engineers are usually considered “resources” by most managers, especially in the more senior management I’ve met over my 24 year career. \n\nMy current team is very dysfunctional, largely because the team went from 5 fairly experienced engineers to 14, where there were 6 juniors and 1 experienced person added. With no management plan whatsoever. The manager simply thought “the seniors will define the work and the juniors will execute”.\n\nSo, in their mind, seniors are the “work generating cogs” and the juniors are the “grunt cogs”. The result is what you’d probably predict: after 2 years, only a couple of the juniors aren’t struggling, and 4 of them really should be moved elsewhere. But that means these managers “lose resources” so that’ll never happen.\n\nMy hope is that when AI actually starts working, it’ll reduce the need for most mid-level management, not junior engineers. AI already handles summarization really well, and may be able to effectively train ICs on automating a lot of the tasks currently performed by mid-level managers. Until that happens, it’s gonna be rough, and we’re likely going to see a broad decline in overall employee engagement and general software quality.",
        "score": 10,
        "replies": [
          {
            "author": "caks",
            "body": "Yea that's never gonna happen because manager's jobs is not to summarise things. It's to interface with the rest of the company, for example resource allocation. It's a political job, and those are certainly not going away.",
            "score": 3,
            "replies": [
              {
                "author": "-1-8-1-",
                "body": "We currently have chatbots.\n\nHow long will it take until chatbots are capable of politics?",
                "score": 1,
                "replies": [
                  {
                    "author": "caks",
                    "body": "My guess is not in the next 100 years. But what do I know",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "yojimbo_beta",
        "body": "I want to buy into this, I really do, but I can’t. Yes, developing software is primarily about building up knowledge - but do I need junior engineers to do that? Can I use pairing or simply a culture of structured design instead? What makes training juniors the most efficient way to “develop knowledge “?\n\nI have enjoyed working with newbie engineers but - and I’m not showboating here - I can’t think of many times a junior has taught _me_ something. It’s like that adage where teachers say “sometimes it feels like the kids are teaching me!” - it’s not meant literally.\n\n&gt; Junior employees come prepared with that Socratic dialog: to ask dumb questions and seek their answers.\n\nAgain, I would love to agree with this, but it isn’t true in practice. Socratic dialog is a set of open ended questions used to expose the contradictions in someone’s argument. Junior questions are usually just about grasping the basics of the technology. You are not going to think through the holes in your data model by being asked what React key warnings mean\n\nWhat this really boils down to is the unfortunate fact that most developers are not productive until they have a good couple of years of experience. (And I wasn’t either). I’m not sure how the industry should handle that, or even if we should expect it to. (Why aren’t college degrees, with their six figures of debt, not providing this knowledge?). But trying to pretend juniors have some secret superpower is not the way forward",
        "score": 75,
        "replies": [
          {
            "author": "Bolanus_PSU",
            "body": "College (or at least a computer science degree) is about getting an education in science, theory, and some practical components. This idea that students should be completely ready to work after their undergraduate degree is just companies trying to pawn off training costs to colleges. \n\nVery few people go from undergraduate education immediately to practical work in the degree they pursued.",
            "score": 32,
            "replies": []
          },
          {
            "author": "Pure-Huckleberry-484",
            "body": "College degrees can’t handle it because the subject matter changes too rapidly for the class to keep up.\n\nThe questions you grumble about, “key warnings in React” are something that a lot of juniors would have little to no experience with.  They may or may not grasp your data model, but data models are for sure something they’ve learned in school.  Front end frameworks not so much.",
            "score": 36,
            "replies": [
              {
                "author": "mattcrwi",
                "body": "College shouldn't be about job prep. There's also just too much to learn. That's what technical schools are for. College should be about learning the fundamentals that shape the subject to prepare you to learn in your career. It's why you're taught a search algorithm and will never have to make on in your career.",
                "score": 28,
                "replies": [
                  {
                    "author": "lolimouto_enjoyer",
                    "body": "And what is the solution? Should people spend another few years in some other technical school to be ready for the job market after college? The knowledge keeps piling up over the years, are we going to expect people to stay in schools for half their life in the future? This isn't sustainable in the long run.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Prod_Is_For_Testing",
                "body": "&gt; but data models are for sure something they’ve learned in school\n\nMaybe. Maybe not. My school had a single optional database class. If you don’t take that class, you don’t touch anything more complex than a CSV file ",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "OffbeatDrizzle",
            "body": "Our junior devs seem to not be interested in learning, bog you down to no end, then move on after 2-3 years for something else just when they're starting to be productive. Rinse and repeat means I get half as much work done as I should.\n\nI would love competent junior devs that learn and properly contribute (you know, like they're paid to do), but management makes the salary so low that all you end up hiring is crap",
            "score": 28,
            "replies": [
              {
                "author": "Silhouette",
                "body": "&gt;  then move on after 2-3 years for something else just when they're starting to be productive\n\nThis is one of the most fundamental problems in our industry. As the culture evolved towards everyone job hopping rapidly to get pay and title bumps it became a bad investment for employers to spend a lot of time and money training their staff with deep, fundamental knowledge and long-lasting, transferrable skills. It has been irrational to expect those staff to remain for long enough to recoup the investment and you can often hire people who already have those skills - paid for one way or another by their previous employers - for less total spend.\n\nUnfortunately one consequence of this situation is that it's rarely worth hiring juniors at all. This is obviously horribly inefficient at an industry-wide scale and it's obviously storing up problems for the industry in 5 or 10 years when those juniors should be the next generation of seniors. But it's a tragedy of the commons situation until something forces the cycle of rapid job hopping to break.\n\nMaybe the disruption from all the post-COVID layoffs and the tendency for people to stay in relatively safe jobs for longer will help. But now we have an industry flooded with a historically high number of seniors looking for work so it's still bad news for juniors trying to get their careers started.",
                "score": 23,
                "replies": []
              },
              {
                "author": "Envect",
                "body": "&gt;then move on after 2-3 years for something else just when they're starting to be productive.\n\nWhy do they keep leaving?",
                "score": 9,
                "replies": [
                  {
                    "author": "OffbeatDrizzle",
                    "body": "&gt; management makes the salary so low that all you end up hiring is crap",
                    "score": 4,
                    "replies": [
                      {
                        "author": "Envect",
                        "body": "You say they move on after 2-3 years, not that you're unable to hire them in the first place. It seems management has a chronic issue with paying for good talent. Doesn't sound like a problem with the junior engineers.",
                        "score": 9,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "-1-8-1-",
                    "body": "If you can get a 2% raise when staying at your company, or a larger raise when job hopping, what would you do?\n\nMost people, especially with the current inflation, will job hop.",
                    "score": 1,
                    "replies": []
                  },
                  {
                    "author": "Izacus",
                    "body": "Because if you spend your productivity and budget training on juniors, your competitors can use that extra funds to pay more.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Envect",
                        "body": "And you'll have the luxury of paying slightly less to retain the juniors who grow into seniors. Paying a competitive salary doesn't mean paying the top salary. Most people would rather stay in a good job than jump for a small increase.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "Izacus",
                            "body": "Unfortunately that's not what really happens in the industry. But it would be great.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Ranra100374",
                "body": "&gt; Our junior devs seem to not be interested in learning, bog you down to no end, then move on after 2-3 years for something else just when they're starting to be productive. Rinse and repeat means I get half as much work done as I should.\n&gt; \n&gt; \n\nThat sounds like a huge problem in the industry __with not paying enough__. I think it should be obvious why they leave. They leave because they can get a bigger pay increase by job hopping. The industry is just reaping what it's sowed.",
                "score": 13,
                "replies": []
              },
              {
                "author": "ungoogleable",
                "body": "I mean, why haven't *you* moved on?",
                "score": 1,
                "replies": [
                  {
                    "author": "OffbeatDrizzle",
                    "body": "Because I've been given promotions and pay rises every year for, you know, doing a good job",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "caks",
            "body": "If you have not learned a single thing from a junior, you're either a narcissist or you're hiring atrocious juniors. Hell I have a PhD and am a lead in research and development, and I learned something from my 3rd year intern.",
            "score": 3,
            "replies": []
          },
          {
            "author": "wasdninja",
            "body": "&gt; I’m not sure how the industry should handle that, or even if we should expect it to. (Why aren’t college degrees, with their six figures of debt, not providing this knowledge?)\n\nThe only way to get experience producing professional software is to do it. Colleges should not and can not provide it because that's not their purpose. Colleges provide a solid foundation to learn from but it's not nor will it ever be teaching people the craftsmanship of code.",
            "score": 1,
            "replies": []
          },
          {
            "author": "zhemao",
            "body": "College teaches you the fundamental knowledge. It's impossible to get the kind of knowledge that makes junior engineers into senior engineers in an academic setting. Even project-based courses cannot fully emulate the experience of working on an actual product. There are no actual stakeholders or customers, the code is not being widely deployed, and there's no requirement to maintain the code for longer than a semester. The way to develop this sort of experience would be for industry to partner with academia to offer co-ops and apprenticeships.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "buddy5",
        "body": "It has always been cheaper to invest in retaining your own people than hiring new. The time and effort to recruit, interview, offer, and onboard will always be greater than the revenue your existing employee will make if trained up as a better employee.",
        "score": 6,
        "replies": []
      },
      {
        "author": "LessonStudio",
        "body": "This is a game theory problem. What is good for all is not all that good for the individual; Except that it will be individuals making individual choices.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Danteynero9",
        "body": "My company needs to stop taking projects left and right and actually bother teaching us shit.\n\nNo, a 4h course of the framework we use is not enough if that said framework is not only heavily modified, but it's just half of what we use.\n\nNo, hiring more juniors praying that one of them doesn't have a life and decides to learn the whole framework in a week is not a strategy that's going to work for the long term.\n\nNo, just because you can easily do it in flutter, it means that you can replicate it in a custom, very locked down laravel + js framework.\n\nGuess everything would be better if my \"brilliant idea\" client wasn't the CEO himself.",
        "score": 17,
        "replies": []
      },
      {
        "author": "old_bearded_beats",
        "body": "This is SO true. Coming from 20 years of being an educator, I could not agree more. Friends who work in Fintech have told me all kinds of horror stories of disparate international teams who have all the right talk in meetings, but won't admit when they don't know how to deliver.\n\nThe high pay / high expertise culture leads to poor practices as people constantly onbsfucate to hide their own lack of knowledge or understanding. It seems like this can lead to people creating niches to increase their own worth / necessity.",
        "score": 2,
        "replies": []
      },
      {
        "author": "inamestuff",
        "body": "I don’t think articles and LinkedIn posts can reverse this trend, but the usual market forces will eventually fix this.\n\nThe less juniors there are, the smaller the pool of talent will get, pumping salaries up for those who got lucky to reach a senior level before all of this AI hype.\n\nAt some point, companies will want to start hiring juniors again to reduce cost, especially on tasks that don’t require a PhD to be done, and the cycle will continue.\n\n…unless AI will actually get smart enough to replace us programmers, but in that case I would also worry about 90% of all office jobs",
        "score": 2,
        "replies": []
      },
      {
        "author": "Mutericator",
        "body": "The vague references to Orson Scott Card's famous email give me another chance to post it: https://gist.github.com/drawcode/e86fb28d0d58b12f73e9fc8cfd1ffbca",
        "score": 4,
        "replies": []
      },
      {
        "author": "Carpinchon",
        "body": "I actually really like the article, but this bit almost made me do a spit take:\n\n&gt; Nonaka and Takeuchi argue that Japanese companies out innovated Western counterparts in the 80s/90s because of their focus on knowledge\n\nI fondly remember Sony DOS that I ran on my Mitsubishi 286.\n\nThe name Atari might fool you into thinking it didn't come from Sunnyvale.\n\nAnd specifically regarding innovation, Japanese tech is practically famous for just making a better version of an American invention.",
        "score": 2,
        "replies": [
          {
            "author": "fburnaby",
            "body": "Making something better sounds very knowledge-intensive to me.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "UnofficialWorldCEO",
        "body": "Hadn't thought about it that way. Interesting read",
        "score": 3,
        "replies": []
      },
      {
        "author": "axilmar",
        "body": "This is a very bad article.\n\nWhen are we going to learn that bringing new features to a software product and to a company is not a developer's job?\n\nAnalysts exist for that reason. Developers shouldn't have the burden to bring new ideas for features of products.",
        "score": 3,
        "replies": [
          {
            "author": "naeads",
            "body": "Exactly. Well said.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "SoInsightful",
        "body": "The _industry_ definitely needs junior devs, but I'm not convinced that this article has more merit than positive-sounding words on a company-level. When I worked at a company with a bunch of open-minded high-level developers (regardless of years of experience), the productivity was far, _far_ higher than any other job I've been at.",
        "score": 2,
        "replies": []
      },
      {
        "author": "ameddin73",
        "body": "I've been on teams with junior devs that have none of those qualities and teams without juniors that have all of them.\n\n\nI wonder if hiring on a potentially very low-contribution engineer is the best way to go about developing that kind of culture. ",
        "score": 3,
        "replies": []
      },
      {
        "author": "csueiras",
        "body": "Healthy teams have good ratios of senior to juniors.",
        "score": 1,
        "replies": []
      },
      {
        "author": "x021",
        "body": "This is a questionable article.\n\n&gt; Junior Talent forces your team to teach, coach, collaborate\n\nIf your team relies on juniors for it to start teaching, coaching or collaborating you have a much bigger problem.\n\nMuch of the article relies on the argument juniors are necessary and welcome force to stimulate a learning and innovative culture.\n\nIf you need juniors to force your corporate culture in that direction, you should question why the senior level doesn't exhibit those characteristics. Where I work seniors collaborate, teach and question other seniors all the time. \n\nTo me a senior who doesn't teach, coach and collaborate with peers (regardless of experience) is not a senior at all.\n\n*Edit: wow -10 atm, wasn't expecting this to get downvoted so much. Can  anyone explain what upset my comment so much? I'm not against hiring junior devs at all (many junior devs I enjoy working with more than seniors in fact); I just argue against the merit of the article that sees them as a tool to change culture*",
        "score": -5,
        "replies": [
          {
            "author": "Dr_Findro",
            "body": "I feel as if you wrote this comment with the pure intention of being a contrarian ",
            "score": 9,
            "replies": [
              {
                "author": "FullPoet",
                "body": "Oh no he didn't!",
                "score": 7,
                "replies": []
              },
              {
                "author": "x021",
                "body": "No, not really. I honestly feel that way.\n\nTeaching, coaching, collaborating I see as an aspect of any senior developer role. I'd expect a senior dev to keep in touch with latest developments of the technology they're working with too, and be collaborating/teaching almost every day (usually through PR's, but also verbally).\n\nPerhaps a bit of context; I remember working in Java with devs doing the same thing for 10 years; I didn't see them as senior devs (this was with IBM). They were very much set in their ways and had no peer reviews (it was just green-stamping). I don't consider those devs senior. My point is; hiring juniors in such an environment won't fix anything whatsoever, the problem is higher up. Juniors in such an environment are likely to pick up bad habits.",
                "score": 2,
                "replies": [
                  {
                    "author": "Dr_Findro",
                    "body": "Well I’m just here to let you know that your communication style comes across as very “contrarian for the sake of contrarian”\n\nThis post is about “here are some good side effects of hiring junior engineers” and you’re in the comments line “well your company should have good things even without junior engineers!”\n\nNo shit",
                    "score": -1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "daerogami",
                "body": "&gt; pure intention of being a contrarian\n\nDo you doubt they seriously disagree with the content of the essay? I think attacking someones intentions without explanation is worse.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "dimitriettr",
            "body": "Not everyone is good at teaching/mentoring.  \n\nYou should not FORCE it upon someone.",
            "score": 3,
            "replies": [
              {
                "author": "x021",
                "body": "If you're a senior dev and can't teach or mentor; are you truly a senior dev?",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Yes we know, the problem was always convincing management to not be idiots along with gatekeeping toxic devs",
        "score": 1,
        "replies": []
      },
      {
        "author": "wtjones",
        "body": "It’s that balance of juniors to mentors that’s so important. Your intern to Sr pipeline is the lifeblood of good companies.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Imaginary_Willow_245",
        "body": "These generalizations do not make sense. It depends on the work, the stage of the company, how many senior engineers are available to help this junior person…. (I can keep going )\n\nI have helped so many of junior person..  What they can work on widely varies depending on who the person is",
        "score": 1,
        "replies": []
      },
      {
        "author": "VeritasEtUltio",
        "body": "Ok, y'all can have mine.",
        "score": 1,
        "replies": []
      },
      {
        "author": "da_governator",
        "body": "Hey! I hired three newly minted junior devs in the last 6 months and they are great! Given the current job market, I had loads of great candidates fresh out of good colleges and it just made sense to invest in them. Doingmypart.jpg",
        "score": 1,
        "replies": []
      },
      {
        "author": "NotGoodSoftwareMaker",
        "body": "If you want credibility there should be data to support your argument. \n\nJunior devs in my experience are a dime a dozen. Some actually want to be there, the rest came for the salaries. \n\nAn experienced dev at least means they got some years doing stuff so we can skip the part where i try my best to convince them to learn something",
        "score": 1,
        "replies": []
      },
      {
        "author": "jeaanj3443",
        "body": "Totally giving juniors a chance to grow is vital but making sure they get proper guidance and feedback to avoid staying juniors forever is just as important",
        "score": 1,
        "replies": []
      },
      {
        "author": "fondle_my_tendies",
        "body": "its fine if their title is \"jr\".  what has happened now is that everyone is a senior even though they have jr level skills.",
        "score": 1,
        "replies": []
      },
      {
        "author": "ZukowskiHardware",
        "body": "I wish I had any juniors on my team.  There is so much I could teach them and I’m sure I could get a lot of them up to speed in like 3 months.",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "A snake game made entirely in the BIOS without any OS or bootloader",
    "body": "When I made my original snake game some people argued the only reason it was possible, was that the PC already had the BIOS and OS on it so what I call a \"58 bytes snake game\" is not only 58 bytes because the BIOS and OS are each thousands upon thousands of bytes.\n\nWhile it's true that without those wrappers the program wouldn't be that small, I don't think it's a valid argument, but anyways, I made a POC snake game that can work without any BIOS, bootloader, or OS, all the code, including the hardware initialization, fits in 114 bytes (and filler) and runs on QEMU.\n\nI also commented every single line in the code so you can use it to learn about how the BIOS initializes the hardware, although I tried making it very minimal (just like the original snake game), so there is not much to see.\n\n\n\nThe main problem I encountered when making this was the icount. The icount is an optional QEMU argument that allows you to set a certain speed to the emulated machine.\n\nI wanted to use icount=20, however, someone on the QEMU team limited the icount to 10 max although everything works just fine for icount&lt;=30.\n\nI made a PR to the QEMU project to fix it by raising the max of icount to 30 and doing the necessary adjustments to the code to enable it to work with the higher icount.\n\nHowever, one of the devs at QEMU noted that icount is deprecated so I should use the ips plugin. The problem now was that my QEMU version (5.2.0) was incompatible with plugins, I tried changing to 9.1.0 and the plugin worked! But now my BIOS didn't output anything to the screen.\n\nI had a hunch the problem had something to do with the changes made to the VGA protocol of QEMU between those versions, so I did a binary search between the versions and found that my program works perfectly fine up until v9.0.0-rc0.\n\nSo now all I had to do was skim through the changes made between versions 8.2.6 and 9.0.0-rc0 and find something that could lead to the screen staying empty.\n\nI looked at diffs for a whole hour and finally, I found [it](https://github.com/qemu/qemu/blob/v9.0.0-rc0/hw/display/vga.c#L1014), I couldn't believe I missed it all along, someone started to use the byte masking property of the graphics registers.\n\nI quickly added an output of 0xFF08 to port 0x3CE and it indeed fixed the issue and I was able to use ips successfully.",
    "score": 993,
    "url": "",
    "created_utc": 1725840673.0,
    "author": "Perfect-Highlight964",
    "permalink": "/r/programming/comments/1fccbd7/a_snake_game_made_entirely_in_the_bios_without/",
    "comments": [
      {
        "author": "zedkyuu",
        "body": "Waiting for someone to complain that this doesn’t count because it won’t work on real hardware because you don’t have things in there like DDR memory initialization and the Intel/AMD processor initialization blobs and whatnot, heh.",
        "score": 323,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "I mean, if I had real hardware I would make something for it, but I don't,  so I have to stick to the emulators...",
            "score": 110,
            "replies": [
              {
                "author": "Perfect-Highlight964",
                "body": "But I guess you're right...",
                "score": 54,
                "replies": [
                  {
                    "author": "zedkyuu",
                    "body": "Sorry, I’m mocking anyone who would continue to insist that this isn’t “BIOS independent”. I think even the original with its one single mode set call counts as that, too.",
                    "score": 96,
                    "replies": [
                      {
                        "author": "Perfect-Highlight964",
                        "body": "😅",
                        "score": 20,
                        "replies": []
                      },
                      {
                        "author": "[deleted]",
                        "body": "Careful, you’re giving this mad man new ideas",
                        "score": 5,
                        "replies": []
                      },
                      {
                        "author": "sexy-geek",
                        "body": "Well, he IS relying on the hardware clock, soooo. It's not that hardware independent. And also, assuming the standard ports and all..... I'd say this is just a lazy attempt....\n\n\n( As in, I'm daring you to go even deeper just out of spite and make this run on a toaster and earn even more mad respect from a bunch of nerds )",
                        "score": 8,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "WaitForItTheMongols",
                "body": "If you're running the emulator, you must be running it on hardware, so clearly you have hardware available!\n\nI don't care if it's your only laptop and you use it for school, you must run snake on it for my enjoyment! :)",
                "score": 2,
                "replies": [
                  {
                    "author": "Perfect-Highlight964",
                    "body": "My only hardware is my snapdragon CPU phone, so not really an option 😅",
                    "score": 7,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "What?! That’s awesome. I’m trying to figure out the best way to get a coding setup on my iPhone for when I’m away from my computer and have an idea. My best approach so far is running Linux in UTM but it’s not going great… still trying to figure out the best ways to deal with the screen size. What do you use?",
                        "score": 3,
                        "replies": [
                          {
                            "author": "Perfect-Highlight964",
                            "body": "I'm using proot to \"emulate\" a Debian machine on the Termux app (https://github.com/donno2048/Debiandroid)",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "WaitForItTheMongols",
                        "body": "Wait, so you coded this thing on a phone? That makes everything even more impressive.",
                        "score": 4,
                        "replies": [
                          {
                            "author": "Perfect-Highlight964",
                            "body": "Thanks 🤣",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "pjmlp",
                "body": "As inspiration, https://tinytapeout.com/competitions/demoscene/",
                "score": 4,
                "replies": [
                  {
                    "author": "Perfect-Highlight964",
                    "body": "When I said I wanted to test it on real hardware I meant using an actual CPU and not on an ASIC, I guess it could be interesting too but it's almost an entirely different field...",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "GaboureySidibe",
                    "body": "As inspiration for what?",
                    "score": 0,
                    "replies": [
                      {
                        "author": "pjmlp",
                        "body": "Apparently for silly comments.",
                        "score": 0,
                        "replies": [
                          {
                            "author": "GaboureySidibe",
                            "body": "You aren't making sense",
                            "score": 0,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "AgoAndAnon",
            "body": "\"This doesn't run on an abacus so it doesn't count.\"",
            "score": 62,
            "replies": [
              {
                "author": "raskim7",
                "body": "”My brother in christ I couldn’t run this in my sundial, are you even trying?”",
                "score": 45,
                "replies": [
                  {
                    "author": "josluivivgar",
                    "body": "I found a rock, got some jumper cables and a potatoe, I plugged everything together and tried to run your snake game, but it won't even start up",
                    "score": 3,
                    "replies": [
                      {
                        "author": "GheorgheGheorghiuBej",
                        "body": "His joke, but worster",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "fxfighter",
        "body": "This is actually the most powerful/well known form of development, i.e. SDD. Spite Driven Development.",
        "score": 208,
        "replies": [
          {
            "author": "unloud",
            "body": "Ah, yes, the Git, Mozilla, and Signal approach.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "s0ulbrother",
        "body": "I’m literally just like this is some amazingly next level petty shit of “fine you say I could only do this because of this well fuck you I’ll start my own thing, with black jack and hookers”",
        "score": 171,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "Yeah, ig, but it's not really meant to \"prove everyone wrong\", it's more about the fact that I love giving myself challenges and this was an excuse for one 😅",
            "score": 79,
            "replies": [
              {
                "author": "[deleted]",
                "body": "Yeah the best way to show someone up is doing it while acting like you couldn't care less.",
                "score": -9,
                "replies": []
              }
            ]
          },
          {
            "author": "QuestionableEthics42",
            "body": "Are you really a programmer if you don't do that for a sadistic form of \"fun\" though?",
            "score": 14,
            "replies": []
          }
        ]
      },
      {
        "author": "captain_obvious_here",
        "body": "Low level programming is more and more of a lost art. This is extremely impressive!",
        "score": 44,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "It is very saddening that it is, I appreciate the work that the FFMPEG foundation does to promote low-level programming for new programmers, the state of current software and the bloat added to almost every single program is very bad imo... Not to say that the over-minimalistic approach I took is good in production but you get my point.",
            "score": 32,
            "replies": [
              {
                "author": "captain_obvious_here",
                "body": "It's not even about software efficiency (although performance definitely counts!) but about the fact most young developers now have no idea about how a computer works, memory is managed, and such.\n\nI'm very far from having as much knowledge as you seem to have...but I remember a time when a common technical interview question was *\"how would you write your own malloc?\"*. Nowadays I would never hire anyone if my interviews relied on that question :)",
                "score": 16,
                "replies": [
                  {
                    "author": "946789987649",
                    "body": "Why is that a problem? There's multiple abstractions even from how memory is managed, where do you stop?",
                    "score": 7,
                    "replies": [
                      {
                        "author": "FeliusSeptimus",
                        "body": "lol, an intern candidate I interviewed the other day can't even refine ultrapure silicon from beach sand!",
                        "score": 12,
                        "replies": [
                          {
                            "author": "946789987649",
                            "body": "Honestly what is the world coming to? People used to really _know_ what they were working on.",
                            "score": 4,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Perfect-Highlight964",
                        "body": "If in ten years a need for a CPU architecture arises and nobody knows anything about bare-metal the developers would have to gather bits and pieces of information online and reinvent the wheel over and over again...\n\nNot the only problem, but just an actual physical example.\n\n\nAlso, and perhaps more important,  knowing how the memory is structured behind the curtain can help you write more efficient programs.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "946789987649",
                            "body": "That's a wild if lol, I don't think that's an example at all.\n\nNot to mention that yes some people need to retain that knowledge, but not your average CRUD developer (which let's be honest, the vast majority are)",
                            "score": 1,
                            "replies": [
                              {
                                "author": "Perfect-Highlight964",
                                "body": "Yeah, I didn't mean the example is realistic or probable,  I'm just saying that it leads to knowledge lost, and the knowledge can be used...\n\n\nI do get your point that only some people need to know it,  but when years pass by, fewer and fewer people fit into this category.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "captain_obvious_here",
                        "body": "It's a problem when you hire people to work on stuff that need be work in optimal ways. Not every field of IT has gigabytes of RAM, and not every problem has a *\"throw more hardware at it\"* solution.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "946789987649",
                            "body": "Absolutely, but we're talking more in the general sense than specific fields. As I said in another comment, the vast majority of us are doing CRUD apps, it's fine not to know how memory is managed.",
                            "score": 1,
                            "replies": [
                              {
                                "author": "captain_obvious_here",
                                "body": "&gt; we're talking more in the general sense than specific fields\n\nWe're in a thread about a guy who wrote a game that runs in a PC BIOS...",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "946789987649",
                                    "body": "&gt; about the fact most young developers now have no idea about how a computer works, memory is managed, and such.\n\nYes, which brought us on to talking about developers in general",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "scythus",
                    "body": "Ultimately people know and learn what they need to know to do the job. For 99% of development jobs in 2024 doing your own memory management is a terrible idea.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "Perfect-Highlight964",
                        "body": "You don't need to make and use your own malloc to be able to understand how memory is structured and allocated.",
                        "score": 2,
                        "replies": []
                      },
                      {
                        "author": "captain_obvious_here",
                        "body": "&gt; doing your own memory management is a terrible idea.\n\nIt definitely is a terrible idea to DO your own memory management stuff. But understanding how it works makes a world of difference between two developers.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Perfect-Highlight964",
                    "body": "That's a big problem too.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "josluivivgar",
                "body": "it's hard to get started on it, it's hard to find a job that doesn't require years of experience already, so it's basically a very exclusive club, I've been starting to want to get into it, but I can't \"learn on the job\" because every job requires years of experience.\n\nand there's no very obvious paths, I'm slowly learning, but in the meantime I have to feed myself and my family so I have to find an unrelated job until I learn and gain enough experience",
                "score": 1,
                "replies": [
                  {
                    "author": "Perfect-Highlight964",
                    "body": "Makes sense, don't feel bad about it though (I'm currently a secretary basically) and continue learning it, I think it could really help you by expanding the way you think about many things and quite worth it...",
                    "score": 2,
                    "replies": [
                      {
                        "author": "josluivivgar",
                        "body": "for sure, just wonder how they'll get people with 5+ years of experience in that in 10 years where to he people right now that don't already have 5+ years of experience don't really have a chance at all \n\n\nI definitely think it's worth learning even if I never get a job related to it",
                        "score": 1,
                        "replies": [
                          {
                            "author": "Perfect-Highlight964",
                            "body": "Agreed",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "OffbeatDrizzle",
        "body": "nice",
        "score": 39,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "thanks",
            "score": 21,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 23,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "Well, it's not really as complicated as you might think at first, put simply, the CPU communicates with many types of devices by simply outputting data to the i/o ports and DMA (which simply means that the device uses an intermediate chip to use the mainboard RAM/ROM/... instead of its own) and such. One very common way for I/O port communication used for hardware initialization and settings is writing to the I/O port related to a specific register array the index and then the value of the property to be overwritten. \n\n\nI don't know how well it explains it, but I think that's all the background you need to view the code.",
            "score": 20,
            "replies": [
              {
                "author": "DwarfNylon",
                "body": "Bruh, you slept for 4 hours.",
                "score": 31,
                "replies": [
                  {
                    "author": "Perfect-Highlight964",
                    "body": "Yeah, my doctor said I have insomnia,  not sure about the insomnia but I do have some sleep problems...",
                    "score": 10,
                    "replies": [
                      {
                        "author": "DwarfNylon",
                        "body": "Edit: DM'd you, I have massive sleep problems myself.",
                        "score": 7,
                        "replies": [
                          {
                            "author": "Perfect-Highlight964",
                            "body": "k",
                            "score": 8,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Somepotato",
                "body": "Note that io ports on real hardware could do nothing before the bios does some initialization",
                "score": 1,
                "replies": [
                  {
                    "author": "Perfect-Highlight964",
                    "body": "I don't think that's true, maybe just for PCI",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Somepotato",
                        "body": "There is no real standardization there. In fact, iirc, Intel is planning to kill off both real mode and io ports because of that.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "Perfect-Highlight964",
                            "body": "fr? never heard of it",
                            "score": 1,
                            "replies": [
                              {
                                "author": "Somepotato",
                                "body": "Look into x86s. Not sure if it's gone anywhere but the interest is there.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "Perfect-Highlight964",
                                    "body": "Looked on the Intel page for x86s\n\n- Removing ring 1 and 2 (which are unused by modern software) and obsolete segmentation features like gates.\n- Removing 16-bit addressing support.\n- Eliminating support for ring 3 I/O port accesses.\n- Eliminating string port I/O, which supported an obsolete CPU-driven I/O model.\n- Limiting local interrupt controller (APIC) use to X2APIC and remove legacy 8259 support.\n\n\nFirst of all, this is awful imo, but regardless of what I think, it seems as if the I/O port disabling is only applied for ring 3 which does not apply to the BIOS, or am I missing something?",
                                    "score": 2,
                                    "replies": [
                                      {
                                        "author": "Somepotato",
                                        "body": "Well the bios won't exist anymore, it'll just be uefi. There are motherboards that don't support legacy boot and that number will only grow over time. But truth told I thought they were eliminating io ports entirely because they're so legacy and are unstandardized entirely.",
                                        "score": 1,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Perfect-Highlight964",
            "body": "I'm going to sleep, it's 4 am here... 😅\n\nWill answer this tomorrow...",
            "score": 20,
            "replies": []
          },
          {
            "author": "ShinyHappyREM",
            "body": "&gt; what happens when the computer starts up to get the program you want to run\n\nObviously depends on the architecture; on the 6502 the CPU [loads a pointer value stored at the end of the address space](https://www.pagetable.com/?p=410) and jumps to that address. Related:\n\n- https://news.ycombinator.com/item?id=18159675\n- https://superuser.com/questions/988473/why-is-the-first-bios-instruction-located-at-0xfffffff0-top-of-ram\n- https://cs.stackexchange.com/questions/63839/where-does-the-cpu-get-its-first-instructions-from",
            "score": 10,
            "replies": [
              {
                "author": "Perfect-Highlight964",
                "body": "I think that is true for most CPUs",
                "score": 2,
                "replies": [
                  {
                    "author": "ShinyHappyREM",
                    "body": "Apparently early Intel/Zilog started at zero: https://retrocomputing.stackexchange.com/questions/9448/where-does-the-z80-processor-start-executing-from",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Perfect-Highlight964",
                        "body": "I didn't mean all CPUs go to the same address 😅\n\nI meant that almost every CPU has a reset vector...",
                        "score": 3,
                        "replies": []
                      },
                      {
                        "author": "sexual--predditor",
                        "body": "From Speccy coding :)  Yes Z80 starts at $0... and from some MPU4 Fruit Machine hacking I think the 6809 starts from the end, at $fffe.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "ShinyHappyREM",
                            "body": "&gt; the 6809 starts from the end, at $fffe\n\nMakes sense, the both the 6502 and the 6809 were [inspired](https://en.wikipedia.org/wiki/Motorola_6809#History) by the 6800 in that regard.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "haqbar",
            "body": "Just wanted to add Ben Eater on YouTube here, he builds a cpu from scratch on breadboard and does an excellent job of explaining as he goes. Cool series and well made",
            "score": 7,
            "replies": []
          },
          {
            "author": "MarcusOrlyius",
            "body": "When the computer boots up after posting, the bios would look for a Master Boot Record file at the start of the primary storage device which is typically 512 bytes. This would basically contain partition data and at the start of the partition there is a Volume Boot Record. The MBR would basically load the VBR from the active partition which would then start loading files to boot an OS.\n\nDetailed info can be found in the links below:\n\nhttps://en.wikipedia.org/wiki/Master_boot_record  \nhttps://en.wikipedia.org/wiki/Volume_boot_record  \n[Ralf Brown's Interrupt List](https://www.cs.cmu.edu/~ralf/files.html)",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "GauntletWizard",
        "body": "You sir, are awesome.",
        "score": 10,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "Thanks",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "Worth_Trust_3825",
        "body": "I aspire to be as petty as you. But as u/zedkyuu says, your next goal is real hardware.",
        "score": 6,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "I wish! I can't afford real hardware (especially not one that is good for bare-metal debugging...)",
            "score": 5,
            "replies": [
              {
                "author": "[deleted]",
                "body": "Crowdfund it? I’m sure many people that have watched this journey would love to see how far you can take it. You’ve certainly earned the right to some financial support for the project",
                "score": 5,
                "replies": [
                  {
                    "author": "Perfect-Highlight964",
                    "body": "People suggested it before and I always rejected the idea simply because I think not many people are willing to contribute to it",
                    "score": 2,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "I think you’ve put in enough work now that you could definitely get it funded. An exact dollar amount you would need would help. Feels like this is the right ending for the project",
                        "score": 3,
                        "replies": [
                          {
                            "author": "Perfect-Highlight964",
                            "body": "I would need at least:\n- A machine with i486 or below, a 8042 chip and a VGA card, the best option I could find was pocket386 which will cost 212$ without tax and shipping\n- SST 39SF512 to flash the BIOS to, which will cost 16$\n- EPROM programmer with a PLCC32 adapter - 73$\n\nI'm willing to pay taxes and shipping, so overall it's around 300$.\n\nI also need a soldering iron and a soldering rework station but I can buy those myself if they're not very expensive.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "[deleted]",
                                "body": "I’d be willing to throw in $5, only need another 59 people to do the same. You’d need to advertise this yourself but hopefully people in the community see this and are willing to help this project get to its final form! Good luck",
                                "score": 4,
                                "replies": []
                              },
                              {
                                "author": "b0w3n",
                                "body": "At least you're realistic in your goals, there's something people appreciate about that.\n\nI've seen similar projects with lofty like 10k goals never get funded, but the small ones looking for a few hundred to do something neat like this seem to.",
                                "score": 4,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "iafs_",
                "body": "I wonder, what kind of hardware allows you to do bare-metal debugging? Is it some kind of dedicated motherboard-CPU combo?\nBtw, cool project! I'm always impressed by these low-level marvels.",
                "score": 2,
                "replies": [
                  {
                    "author": "Worth_Trust_3825",
                    "body": "Intel has jtags, but i think they're behind a lot of legal paperwork.",
                    "score": 1,
                    "replies": []
                  },
                  {
                    "author": "Perfect-Highlight964",
                    "body": "I thought of a CPU-breadboard adapter, saw someone make them on YouTube,  but I don't have any hardware whatsoever anyways",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Kinglink",
        "body": "\"Yeah but originally it was 58 bytes, and now it's bloated up to 114\"  \n\n(Guys, let's just keep ragging on this dude, until he creates Snake with atoms)",
        "score": 4,
        "replies": []
      },
      {
        "author": "Korlus",
        "body": "This is so cool (like your last project). Kudos!\n\nHave you ever looked at [the demoscene](https://en.wikipedia.org/wiki/Demoscene) before? They focus on trying to make aesthetically pleasing music/sound videos, featuring tiny code sizes (although rarely quite as small as you've aimed for). E.g. the code for [this video](https://www.youtube.com/watch?v=PaNYOzwlVC8) fits in 64kb. While there are different competitions and demoscene standards, Revision is one of the biggest, and it has a [4k competition](https://2024.revision-party.net/competitions/pc/) this year.\n\nMay not be your kind of thing, but the demoscene is so far away from most programming subcultures that it's always fun whenever someone gets close.",
        "score": 3,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "Thanks! I've heard about the demoscene but I don't think I have enough creativity to do something of that sort, the video is amazing though.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "anti-bullsh1t",
        "body": "Damn. I wish I was this smart.",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 4,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "[Félix Cloutier's online x86 references](https://www.felixcloutier.com/x86/) are pretty good for getting knowledge about CPU instructions and their effect. You can read on tutorialspoint about the basics assembly. And although I'm pretty sure it's abandoned [osdever](http://www.osdever.net) has a lot of resources for bare-metal stuff, probably the best ones I've seen.\n\nThose are the only resources I used as far as I can recall because it's pretty hard to find good documentation on those topics and those were excellent, so I highly recommend you check them out if you find the topic interesting. \n\nAlso, I guess the best path is to learn C then x86 then bare-metal, not jump to deep water.",
            "score": 10,
            "replies": []
          },
          {
            "author": "Level-Taste4581",
            "body": "The osdev website has some good resources i think.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "ImAtWorkKillingTime",
        "body": "Well done!",
        "score": 2,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "Thanks!",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "jeaanj3443",
        "body": "waiting for but can it run doompeople always want more",
        "score": 2,
        "replies": []
      },
      {
        "author": "BlauFx",
        "body": "Wow, that's really impressive!",
        "score": 2,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "Thanks!",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Zitronenlolli",
        "body": "SnakeOS incoming",
        "score": 2,
        "replies": []
      },
      {
        "author": "Emergency-Limit-1238",
        "body": "Good stuff mate!",
        "score": 2,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Meanwhile in other threads people are complaining how hard learning git and c# is",
        "score": 2,
        "replies": []
      },
      {
        "author": "RegularUser003",
        "body": "mad lad energy",
        "score": 2,
        "replies": []
      },
      {
        "author": "happyscrappy",
        "body": "That's basically what a DOS program was. At least one that didn't read any files. You used BIOS calls for display and DOS calls to access the file system.\n\nYou could probably turn it into a .COM file and run it under DOS. Especially if it never exits (you don't have the exit INT call in your code).",
        "score": 2,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "Yeah, the point is that it doesn't use BIOS calls though 😅",
            "score": 2,
            "replies": [
              {
                "author": "happyscrappy",
                "body": "That's not what the headline says: \"entirely in the BIOS\".\n\nThere's two ways to do it. You either can make BIOS calls (INT 11h? I forget) or you can just put values directly into the video card (frame buffer, ports). Either is the exact same thing DOS programs do.",
                "score": 1,
                "replies": [
                  {
                    "author": "Perfect-Highlight964",
                    "body": "You do realize `int 11h` in a DOS program is basically pushing IP,  setting CS to [0:0x46], and then setting IP to [0:0x44]? You can't simply do `int 11h` in the BIOS (you can but you need to define it first), so you have to do all the initializations and stuff yourself.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "happyscrappy",
                        "body": "Why are you talking down to me? We both know what an BIOS call is.\n\nYou wrote in your title you run only in BIOS, no DOS needed. I'm telling if you do that you can run also under DOS, just package your code as a .COM file. Might be easier to debug that way.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "Perfect-Highlight964",
                            "body": "First of all, sorry if it felt like I was talking down to you, English isn't my first language, when I wrote \"you do realize that...\" I meant it literally, as if to ask you if you understand that BIOS calls have no inherent meaning when in the context of the BIOS itself other than those defined by the BIOS itself, because I understood you incorrectly.\n\nSecondly, now I get what you're saying (I thought you meant to say that the BIOS I made is equivalent to a COM executable), but there is already a COM file version, that was made as a kind of generalization of sort...",
                            "score": 1,
                            "replies": [
                              {
                                "author": "happyscrappy",
                                "body": "&gt; I meant it literally, as if to ask you if you understand that BIOS calls have no inherent meaning when in the context of the BIOS itself \n\nI think this is more the communications problem.\n\nWhen you say \"run in BIOS\" it's like \"runs in Windows\". It means you  use BIOS. I looked at your code and now I see why you can't make a BIOS call.\n\nWhat you should be saying is \"A snake game made entirely as a BIOS\" or \"A snake game that runs in place of BIOS\" or \"A snake game that runs as a BIOS replacement\".\n\nAgain, probably because English isn't your first language, the confusion is very understandable.\n\nAnd now I see why people say doing it on real hardware will be so much more work. Burning an EPROM or whatever. You might be able to use a machine which has a \"dual boot BIOS\" but it's still going to be difficult and you better be sure the way to switch back is implemented in hardware so you know you can bring it back to booting normally, if only to update your code later.",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "Perfect-Highlight964",
                                    "body": "Thanks for the correction...",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "walking_smoke_cloud",
        "body": "Oh, what does this spell do?",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "&gt; I looked at diffs for a whole hour\n\n\nA git bisect could have found that much easier and in at least half the time.",
        "score": 1,
        "replies": [
          {
            "author": "Perfect-Highlight964",
            "body": "Building qemu takes a whole hour on my machine and has no file-based caching, so to use git bisect I would have to either improve the caching mechanism of qemu (which would take more than an hour) or wait for at least one compilation which also will take one hour.\n\nSo I thought looking at diffs would be the most effective way to find the issue.",
            "score": 8,
            "replies": [
              {
                "author": "[deleted]",
                "body": "I just recently bisected a bad qemu commit on my machine and it took less than a minute to build.\n\n\nMaybe you're compiling a bunch of unnecessary things like other machine types you're not testing, the docs, tests etc? Or maybe your machine is just that slow, not sure. But it certainly isn't the case for everyone.\n\n\nccache also helps a lot with decreasing time between incremental builds.",
                "score": 1,
                "replies": [
                  {
                    "author": "Perfect-Highlight964",
                    "body": "\"My machine\" is a Debian \"container\" I run on the Termux app on my 120$ phone so it might be it 😅😕\n\nMaybe I am also compiling too many unnecessary things.\n\nDoes qemu use ccache by default?",
                    "score": 5,
                    "replies": [
                      {
                        "author": "FeliusSeptimus",
                        "body": "&gt; \"My machine\" is a Debian \"container\" I run on the Termux app on my 120$ phone\n\nlol, this is awesome.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "CrowdStrike IT Outage Explained by a Windows Developer",
    "body": "",
    "score": 990,
    "url": "",
    "created_utc": 1721597991.0,
    "author": "beyphy",
    "permalink": "/r/programming/comments/1e8xdlg/crowdstrike_it_outage_explained_by_a_windows/",
    "comments": [
      {
        "author": "messified",
        "body": "Holy shit, considering the scale, an on-site reboot into safe mode?! To then only remove one file and reboot?! Sad to say, but I'm not surprised. They were probably rolling the dice for awhile.",
        "score": 98,
        "replies": [
          {
            "author": "Chisignal",
            "body": "roof alleged serious cow theory quickest fuzzy birds worm money\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
            "score": 62,
            "replies": [
              {
                "author": "fumar",
                "body": "If you're lucky you can PXE boot the machine. If not, you're in for a bad time",
                "score": 11,
                "replies": []
              }
            ]
          },
          {
            "author": "m1el",
            "body": "They caused outages before, with similar outcomes.\n\n2024-04-19: https://news.ycombinator.com/item?id=41005936\n\n2023-07-18: https://old.reddit.com/r/sysadmin/comments/1594t5s/_/\n\n2023-03-01: https://old.reddit.com/r/sysadmin/comments/11eqit3/_/\n\n2019-10-02: https://old.reddit.com/r/sysadmin/comments/dcbcov/_/",
            "score": 32,
            "replies": [
              {
                "author": "Ashamed-Simple-8303",
                "body": "And just a couple weeks ago, it completely crippled my work laptop like making it so slow it was barley usable to create the IT ticket which I then waited an entire day to be fixed. crowdstrike has cost me more hours of work than in like 1 year than malware has the 30 years before",
                "score": 11,
                "replies": []
              },
              {
                "author": "linuxliaison",
                "body": "Just FYI two of your links (middle two) seem identical",
                "score": 5,
                "replies": [
                  {
                    "author": "m1el",
                    "body": "thanks, fixd",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Ashamed-Simple-8303",
            "body": "&gt; They were probably rolling the dice for awhile.\n\nthey were. same shit happened to the Linux version I think in April. And yeah they also released on a Friday afternoon. This was not really an accident, just the cause of all-round terrible practices.",
            "score": 8,
            "replies": []
          }
        ]
      },
      {
        "author": "pancakeQueue",
        "body": "Great video on what happened; and what Rings, kernel space, and user space are.  Man it would be fun to be taking an Operating Systems class right now.",
        "score": 221,
        "replies": [
          {
            "author": "xaplomian",
            "body": "Here is the course page for my university's OS course. The slides are public but  most of the recordings are private, though if you go through the past 2-3 years different lectures may have public recordings.\nhttps://cgi.cse.unsw.edu.au/~cs3231/lectures.php",
            "score": 51,
            "replies": [
              {
                "author": "Antique-Visual-4705",
                "body": "The good stuff is at the end: “No lecture Wednesday”. Aced that one.",
                "score": 25,
                "replies": []
              }
            ]
          },
          {
            "author": "Michaeli_Starky",
            "body": "I can highly recommend Richter's Advanced Windows",
            "score": 5,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 33,
            "replies": [
              {
                "author": "Chii",
                "body": "just do it as a reply, so everyone has access?",
                "score": 66,
                "replies": [
                  {
                    "author": "marcmerrillofficial",
                    "body": "*No we must keep this knowledge secret...ish.*",
                    "score": 50,
                    "replies": []
                  }
                ]
              },
              {
                "author": "ConvenientOcelot",
                "body": "Sounds fun, can you link it to me?",
                "score": 4,
                "replies": []
              },
              {
                "author": "rwinger3",
                "body": "Is it videos or slides or what format is it?\nWould be cool either way, just wondering about the format.",
                "score": 3,
                "replies": []
              },
              {
                "author": "Kazumadesu76",
                "body": "I’d love the links to them too!",
                "score": 1,
                "replies": []
              },
              {
                "author": "ajujayapal",
                "body": "Me too, please.",
                "score": 1,
                "replies": []
              },
              {
                "author": "31834",
                "body": "Share it please",
                "score": 1,
                "replies": []
              },
              {
                "author": "HydrostaticToad",
                "body": "can has course?",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "TurboGranny",
            "body": "Sounds like it's time for windows to add another ring between kernel and user called \"security\" for the dumb shit that thinks it need kernel privs, but obviously should not be trusted to run at that level.",
            "score": 9,
            "replies": [
              {
                "author": "Fun_Company_7497",
                "body": "I'm not clear on the details, but they apparently tried to and the EU called it anti-competitive.\n\nI agree that there are a couple of problems here:  \n  \n1) that Windows needs add-on security software  \n2) that Windows allows unreviewed code to run in kernel space",
                "score": 2,
                "replies": [
                  {
                    "author": "TurboGranny",
                    "body": "the anticomp thing was that they didn't allow other software to use kernel while windows defender can, so they need to add a security ring and put windows defender there to not be in violation.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "hakan_loob44",
            "body": "Not a dev but I've been supporting Windows clients for 20+ years.  I never knew that a BSOD is intentional not a side effect of some janky code crashing the system.  I also never what an exception really was until I saw this video yesterday.\n\nMaybe I should read those Windows Internals books I have sitting on my self one day.",
            "score": 5,
            "replies": []
          },
          {
            "author": "PCRefurbrAbq",
            "body": "OP video saved for my class session today!",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "dballz12",
        "body": "That was very informative. Crowdstrike has been playing with fire, it sounds like. Seems like only a matter of time and actually it wasn't as bad as it could have been. I'm curious what's going to be done to change their process. Doesn't seem like it's best practices.",
        "score": 196,
        "replies": [
          {
            "author": "wiriux",
            "body": "Well, an emergency open heart surgery had to be postponed so I’d say it was pretty bad.",
            "score": 142,
            "replies": [
              {
                "author": "RodionRaskolnikov__",
                "body": "I think that also speaks of the excessive reliance on flaky systems for extremely important stuff. There are cases where it's pretty clear you need a bullet proof system with proper fallbacks, like machines that are used to keep people alive and monitor their vitals.\n\nOther times we become extremely reliant on entire systems that are built on hopes, prayers and duct tape. And no one bothers to think (or spend the money) to have functioning fallbacks ready to go in case something like this happens again.",
                "score": 34,
                "replies": [
                  {
                    "author": "augustusalpha",
                    "body": "Y2K was too long ago that no hospital seems to be willing to conduct bulletproof tests continuously. \n\nMoney money money .... Is the problem.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "jimmt42",
                        "body": "Hospital software is extremely bad. Often outdated and rarely up to date. It’s why you see older versions of Windows still in production. What is wild is the costs! They charge a lot for what is delivered too. The medical software industry is racket and should be investigated",
                        "score": 10,
                        "replies": [
                          {
                            "author": "augustusalpha",
                            "body": "Not just medical software, EVERYTHING about the medical industry is corruption, from insurance to drugs, education, certification etc.",
                            "score": 5,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "seanamos-1",
                    "body": "This is my stance as well.\n\nYes Crowdstrike obviously has terrible practices, but the companies and institutions managing the critical infrastructure that got knocked offline are guilt of equally poor practices.",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": -7,
                    "replies": [
                      {
                        "author": "BigHandLittleSlap",
                        "body": "“Hurr-durr Windows bad”\n\nMeanwhile the extract same type of issue occurred with their Linux agent recently.\n\nLinux is not magically immune to third party software running as a kernel module.\n\nGrow up.",
                        "score": 43,
                        "replies": [
                          {
                            "author": "IXISIXI",
                            "body": "I’ve annihilated many a linux machine doing “normal” things.",
                            "score": 11,
                            "replies": [
                              {
                                "author": "[deleted]",
                                "body": "[deleted]",
                                "score": 12,
                                "replies": [
                                  {
                                    "author": "assassinator42",
                                    "body": "**Had** something for that. Windows CE is discontinued. I think they really only have full Windows going forward.",
                                    "score": 1,
                                    "replies": []
                                  },
                                  {
                                    "author": "brintoul",
                                    "body": "Finally someone who gets it.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 4,
                            "replies": [
                              {
                                "author": "maqcky",
                                "body": "The problem is having something that can update over the Internet, running in Kernel mode, without your control. The OS is not important.",
                                "score": 12,
                                "replies": [
                                  {
                                    "author": "ForeverHall0ween",
                                    "body": "No the OS is absolutely important. Modern desktop OSes are incredibly complex and can fail in too many ways for them to be safe. This time it's what you described, do you think they're won't be a next time or that next time it won't be something completely different? Mission critical devices should not be running on general consumer software. It's just irresponsible.",
                                    "score": 5,
                                    "replies": []
                                  },
                                  {
                                    "author": "beefcat_",
                                    "body": "That's what GP is saying.\n\nA general purpose OS *should* update over the internet. The computer inside a heart monitor should be running something much more stripped down, like Windows CE or one of the many secure embedded flavors of Linux.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "BigHandLittleSlap",
                                "body": "Windows has the PE edition, Embedded editions, LTSC, Server Core, and Server Nano.\n\nYou can strip it down to the bare essentials about as much as Linux, assuming you want a display device and input controls.\n\nIt's also fairly common to set up kiosks and servers with a boot-from-golden image configuration. I've done this in lots of places with Windows, it's actually fairly straightforward and can be done with tools built into the OS or available free from Microsoft.",
                                "score": 8,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "[deleted]",
                                    "score": 6,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "ThreeLeggedChimp",
                        "body": "Are you another idiot that doesn't know Linux runs all drivers at the kernel level?",
                        "score": 12,
                        "replies": []
                      },
                      {
                        "author": "RodionRaskolnikov__",
                        "body": "I've been using Linux for years as my main workstation OS and I've seen it shit the bed many times. I used to use a first gen Ryzen box that would randomly crash under light loads due to a god awful ACPI driver. It would be happily playing music in the background until it crashed and I'd hear a horrible screeching sound coming from the sound card. It's not a matter of having the best OS ever, it's about having other ways of accessing that important information.\n\nNo heart monitor runs on Windows, or Linux for that matter. We're talking about user workstations here, not highly specialized, real time operating systems.\n\nI would be surprised if a heart monitor ever gets a software update in its useful lifetime. And if it does it's most likely an offline update and you bet there's a very good reason why it's being installed, something that slipped through the extensive validation and testing the whole device went through.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "dballz12",
                "body": "It was bad. I meant just from a technical standpoint, as it doesn't seem bad to fix. But sure - definitely bad from a real-world consequences, standpoint. I didn't know that - i know a lot of medical personnel who used the \"old\" ways to get through the day. Would they really delay the surgery if it were a Life and Death situation, or did it not need to be done right away?",
                "score": 46,
                "replies": [
                  {
                    "author": "fr0st",
                    "body": "If there's information that's not accessable immediately before an operation then postponing it would probably be the safest option. Things like results of a blood test or some other diagnosis critical for the surgery. Or whether or not a patient can tolerate certain anaesthetics.",
                    "score": 45,
                    "replies": [
                      {
                        "author": "dballz12",
                        "body": "That makes sense. Thanks!",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Ashamed-Simple-8303",
                    "body": "&gt; It was bad. I meant just from a technical standpoint, as it doesn't seem bad to fix.\n\nTrue. In an actual attack you can just trash all the hardware becasue who knows where the virus hid itself and how long it had time to do so, like writing itself in the firmware of switches or hard disk controllers.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "wiriux",
                    "body": "Don’t know all the details about that postponed surgery as I saw the article in a recent video made by Paul’s hardware “How one company broke the internet”. \n\nI have no confirmation on whether that’s true or not but I figured it must be. I don’t think he would post a screenshot of an article unless he knew it was legitimate. \n\nEither way, I think in a life or death situation, the surgery would still go through. This particular one was an emergency in that it has to be done as soon as possible but it was not a life or death situation perhaps? I get what you mean about it not being as bad as it could have been from a tech standpoint but we definitely see how dependent we are of technology. Systems down do have the potential of deaths.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 45,
                "replies": [
                  {
                    "author": "sausagefeet",
                    "body": "I don't think it was postponed because the anesthesia machine was running CrowdStrike but rather that some upstream dependency that seemed perfectly innocuous was down which meant the surgery couldn't go forward.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "Jaggedmallard26",
                        "body": "Upstream dependency being a system that contains peoples medical records by the sounds of it. Goes to show how even a seemingly hardened system is entirely dependent on the huge networks of systems dictating how people should use it.",
                        "score": 8,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "atlantic",
                    "body": "That’s a pretty standard disclaimer for almost all software.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "SSoreil",
                        "body": "Yes, and that doesn't mean you can just disregard it while building an x-ray machine or something similar.",
                        "score": 18,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Ashamed-Simple-8303",
                "body": "I think the bigger problem here is needing a working windows pc to do heart surgery and at that one connected to the internet.",
                "score": 3,
                "replies": [
                  {
                    "author": "jsatherreddit",
                    "body": "This took down most imaging systems. If you needed to view a scan prior to the surgery, it was probably unavailable.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "FrankFnRizzo",
                "body": "I work in blood banking and this issue absolutely hammered us. We still aren’t completely back to normal today, Tuesday the 23rd. Blood banking supply requires an ass load of resource management and we are constantly shifting products around the country and sending things off for testing so when the airlines were hit so hard almost everything we had in transit had to be destroyed because products spent too much time out of proper storage. A couple of our client hospitals have had to push or reschedule procedures just because products weren’t available, I know we weren’t the only site who had this problem. We are currently sitting on a lot of blood products that we can’t distribute because testing was so delayed we still don’t know what is safe to send to our customers. It’s been an absolute nightmare. We should be caught up by tomorrow though.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "Huge_Leader_6605",
            "body": "Maybe not rolling out update to fucking everyone at one would be a great start.\n\nAlso some basic testing it would seem would of prevented this as well.",
            "score": 21,
            "replies": [
              {
                "author": "dogfish83",
                "body": "I was off the grid this weekend (half the world's computers crash and a presidential candidate drops out of the race and had no idea) so just coming up to speed, and I follow IT from a safe distance lol but yeah, sounds like there was some laziness/complacency/shortcuts for sure!",
                "score": 6,
                "replies": []
              },
              {
                "author": "Fun_Company_7497",
                "body": "yeah, I'd like to hear the inside story on the test/rollout plan. Apparently there are scheduling preferences (i.e. customer-defined rings) in the product that were just ignored in this case.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Michaeli_Starky",
        "body": "Kind of wild to allow uncertified code to be run on a millions of mission critical PCs world wide. That's one extremely expensive lesson.",
        "score": 34,
        "replies": [
          {
            "author": "jeanleonino",
            "body": "The lesson was expensive, but I doubt things will change. It is very convinient to have a 3rd party that will take on security risks. Companies will prefer to pay for security instead of investing on it properly.",
            "score": 21,
            "replies": [
              {
                "author": "James_Jack_Hoffmann",
                "body": "I was a contractor for a healthcare client that issued their own laptops. I used KeePass as my own password manager and IT *dinged* me for it as it was not an approved application. Then I asked what was an approved password manager, and they said it was LastPass through their business plan. Asked them if I can compile KeePass by myself, and they said no.\n\nDidn't take long for LastPass to have breaches in 2021 and 2022. They sought compensation from LastPass, then ditched it for a no-name password manager that is \"willing to take on security risks\".",
                "score": 20,
                "replies": [
                  {
                    "author": "Jaggedmallard26",
                    "body": "There really should be a reckoning some day for the level of \"not my job\" that you *have* to hold for a corporate IT job. We have these critical systems that rely on things that everyone involved knows is substandard but no one can actually improve due to either byzantine bureaucracy or regulatory capture meaning we have to use the substandard software to check boxes. Everyone (except some slimy sales types maybe) knows the way of doing things is fundamentally broken.",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "RoosterBrewster",
                "body": "And that security will just blindly follow checklists so they can say they did their part.",
                "score": 3,
                "replies": []
              },
              {
                "author": "Michaeli_Starky",
                "body": "I guess... but can you imagine malware with a similar in scale impact?",
                "score": 1,
                "replies": [
                  {
                    "author": "jeanleonino",
                    "body": "Nope, and it is even worse: it gave potential attackers a clear way and proven vector of attack.",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "yawaramin",
                "body": "Yeah...but surely CrowdStrike is going to get sued out of existence for the damage they caused?",
                "score": 1,
                "replies": [
                  {
                    "author": "jeanleonino",
                    "body": "I can't even bet on that lol they are using the incident to upsell services",
                    "score": 1,
                    "replies": [
                      {
                        "author": "yawaramin",
                        "body": "'Buy our services to resolve the issues caused by the services that you\nbought from us!'",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Sarcastinator",
            "body": "Apparently they already made the exact same mistake a few weeks ago on Linux as well. Linux machines would [Kernel panic after a CrowdStrike update](https://www.theregister.com/2024/07/21/crowdstrike_linux_crashes_restoration_tools/). It just didn't have the same far reaching consequences.\n\nSo apparently they just suck, and didn't learn their lesson.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "rollie82",
        "body": "The other side of this is it shows on cloudstrike deployment process side of things, they have no concept of tiered rollout, validation of updates before release, and not even unit tests for their driver that cover the most obvious edge cases. Any company can make a mistake; but this problem shows they have done absolutely nothing right, and should never be trusted by a customer for endpoint security again.",
        "score": 161,
        "replies": [
          {
            "author": "Mas_Zeta",
            "body": "&gt;CS Falcon has a way to control the staging of updates across your environment. businesses who don't want to go out of business have a N-1 or greater staging policy and only test systems get the latest updates immediately. My work for example has a test group at N staging, a small group of noncritical systems at N-1, and the rest of our computers at N-2. This broken update IGNORED our staging policies and went to ALL machine at the same time. CS informed us after our business was brought down that this is by design and some updates bypass policies.\n\nFrom YouTube comments",
            "score": 73,
            "replies": [
              {
                "author": "tolos",
                "body": "God damn. I get the point is to allow a 3rd party to manage these security updates. But if your company signs off on the risk of tiered rollouts, what is even the point if that's ignored?",
                "score": 29,
                "replies": [
                  {
                    "author": "admalledd",
                    "body": "That is why there are likely to be quite a few lawsuits about violating contracts/SLAs etc here. CS has products that are rated for \"safety critical\" machines, and it seems that these updates were pushed to those machines without the required testing/staging/etc. \n\nWhile it is important to push definition updates quickly, there *has* to be allowance for at least few minutes per % staged rollout.",
                    "score": 24,
                    "replies": [
                      {
                        "author": "anengineerandacat",
                        "body": "Yeah, it's all round bad-news for CS; their brand is now most definitely damaged by this and unlikely to ever really recover.\n\nProduction systems are intended to be highly reliable, and security is important but patches and such have to be vetted and your deployment solution needs to be extremely battle-hardened and tested.\n\nIt'll be interesting to see if they do a Postmortem and that honestly will dictate how the market will shift on them, folks will want answers.\n\nWas this \"some new hire pushed the deployment button\" or was it \"we didn't vet our patch internally?\" both bad but one is easier to correct than the other.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "apache_spork",
                "body": "Move fast, break stuff",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Huge_Leader_6605",
            "body": "&gt;even unit tests for their driver that cover the most obvious edge cases\n\nThis does not even sound like an edge case.  It is my understanding that every single machine that got the update got BTODed?",
            "score": 12,
            "replies": [
              {
                "author": "BigHandLittleSlap",
                "body": "Only about 30% from what I saw",
                "score": 9,
                "replies": [
                  {
                    "author": "Huge_Leader_6605",
                    "body": "Could it be 30% of all windows machines, and 100% of all that had crowd strike? Cause few review videos I watched of this bug, made it sound that if you got that update you were 100% fucked",
                    "score": 10,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "GrayStray",
            "body": "Cloudstrike is a sniper rifle from destiny 2.",
            "score": 7,
            "replies": [
              {
                "author": "Torinojon",
                "body": "Neeeerd. Also I had the same thought. Don't. Bunch. Up.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "FlamboyantKoala",
        "body": "My stomach dropped when he said they are potentially running definition files with code in them. Running unsigned code at kernel level is such a bad idea, not only for this case but from a vulnerability to hacks perspective.\n\nGreat job on this video, fantastic breakdown. I feel like Microsoft needs to do a bit more in their verification like not allowing drivers that run dynamic code to be marked as critical and required to start up. ",
        "score": 128,
        "replies": [
          {
            "author": "JohnJaysOnMyFeet",
            "body": "Not only that, but critical updates like the recent one are deployed worldwide without any staggering. If an update did contain malicious code, every machine running their software would be compromised. \n\nFor a cybersecurity company, that seems absolutely insane.",
            "score": 100,
            "replies": [
              {
                "author": "Anbaraen",
                "body": "Even customers who were on N-1 versions were not safe - because these files are so critical, they apparently bypass that process.",
                "score": 19,
                "replies": []
              },
              {
                "author": "xampl9",
                "body": "A friend has Falcon at their job. It apparently will ignore its own whitelist when it decides a network connection (which has been running successfully for 5+ years) is malicious. Which causes an outage for the users.",
                "score": 14,
                "replies": []
              },
              {
                "author": "spaceneenja",
                "body": "What’s more insane is that CI/TOs everywhere just accepted the risk.",
                "score": 30,
                "replies": [
                  {
                    "author": "_zkr",
                    "body": "They probably didn't know it works like that.",
                    "score": 24,
                    "replies": [
                      {
                        "author": "Yamitenshi",
                        "body": "That's arguably worse",
                        "score": 19,
                        "replies": [
                          {
                            "author": "_zkr",
                            "body": "I mean, it's not reasonable to expect from a CTO to be concerned with the intricacies of the drivers on the hardware, is it?",
                            "score": 1,
                            "replies": [
                              {
                                "author": "Yamitenshi",
                                "body": "No, but if they're making the call on which software to go for, being aware of a vendor's update policy (or at least knowing how updates end up on your system on a basic level - can you stagger them, do you have any control over them, etc) and the kind of permissions their program needs is - in my opinion - a must. That's hardly on the same level as being concerned with the intricacies of drivers.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "TH3J4CK4L",
                "body": "Apparently not staggering is intentional.  If you stagger updates like this, then you are exposing vulnerabilities.  Someone clever could figure out the vulnerability that you just patched, and exploit it on the unpatched machines.",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "iiiinthecomputer",
            "body": "Many of these \"endpoint security\" tools are nightmare level quality. I've looked most closely at Vanta and Kaseya, but everything I've looked at was at least a bit scary on Linux.\n\nThey tend to run without any privilege separation. They download and run code, usually unsigned, relying on HTTPS certificate validation alone. From a service running as full root. Which often makes outbound firewall-piercing calls to request command and control instructions from an external server via a completely opaque channel. The same process that does the privileged work tends to be responsible for updating the service, usually by in place overwriting. So they also tend to store executables in all the wrong places, meaning you can't do things like mount their writeable areas noexec.\n\nI've never seen one use a seccomp filter, pivilege separation, no new privileges flag, dropping capabilities, or anything. Every tool I've been forced to use so far has also required me to disable SELinux rather than providing a policy.\n\nThey're obfuscated as hell and deliberately undocumented. Absolute menace.\n\nNothing was learned from SolarWinds or the more recent Kaeya hack. It'll just keep happening.\n\nWhen my org used to use Kaseya I wrote a custom systemd sandbox for it and a SELinux policy. They got hacked 3 months later...",
            "score": 61,
            "replies": [
              {
                "author": "thecapent",
                "body": "Yeap. It follow as such:\n\n1 - Fear sell the idea for not really qualified (non-IT, or careerists) people inside corporations (usually their board) that they should have \"security solutions\" as part of their compliance requirements both for itself and its suppliers.\n\n2- Watch the magic happens as they buy and force smaller companies around it to buy very costly shit snake oil capable to do vastly more damage to their businesses than any attack that these crap solutions are supposed to prevent.\n\n3 - Profit!",
                "score": 13,
                "replies": [
                  {
                    "author": "iiiinthecomputer",
                    "body": "You also get your garbage written into industry compliance specs.\n\nMuch like is now happening with vulnerability scanners. Which are useful tools being perverted into pointless sources of makework and bugs.\n\nBut the thing is that these endpoint security and management tools aren't inherently bad or insecure. The idea isn't all bad. But the implementations seem to be universally awful. I presume the wrong incentives are in play.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "crazyguy5880",
            "body": "Microsoft needs protected ways to do this without relying on dodgy kernel drivers. Linux made an API and MS needs to. Ridiculous were patching kernels with third party shit in 2024.",
            "score": 42,
            "replies": [
              {
                "author": "Mynameismikek",
                "body": "MS tried that during Vistas development.  McAfee &amp; Symantec got all huffy and MS made the APIs opt-in rather than enforced.  A couple of years later McAfee managed to blacklist svchost.exe and shut down half the world.",
                "score": 13,
                "replies": []
              },
              {
                "author": "besois",
                "body": "for the specific functionality, what api in linux are you referring to?",
                "score": 16,
                "replies": [
                  {
                    "author": "ericpruitt",
                    "body": "Not OP, but they may be referring to [eBPF](https://ebpf.io/what-is-ebpf/) which started out as a packet filtering framework that has since been extended to being a general purpose VM that runs in the kernel that has safeguards in place to mitigate the damage it can do.",
                    "score": 42,
                    "replies": [
                      {
                        "author": "METAAAAAAAAAAAAAAAAL",
                        "body": "And here is Crowdstrike nuking Linux machines\nusing their Linux eBPF driver 1 month ago (literally same situation as the Windows one).\n\nhttps://access.redhat.com/solutions/7068083\n\neBPF is not a silver bullet, the issue here is the Crowdstrike driver abysmal content parser.",
                        "score": 60,
                        "replies": [
                          {
                            "author": "iiiinthecomputer",
                            "body": "If you can panic the kernel with eBPF that's a kernel bug.\n\nStill doesn't make this pretty. But it's not the same level of bad either. It's a test matrix issue where their eBPF broke a specific range of kernel versions.",
                            "score": 23,
                            "replies": []
                          },
                          {
                            "author": "cmsj",
                            "body": "And as a result, eBPF got more resilient in a way that anyone can verify. Crowdstrike’s windows kernel driver may see zero resilience improvements and we’ll never know.",
                            "score": 23,
                            "replies": [
                              {
                                "author": "Ravek",
                                "body": "You say that as if someone can’t test this",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "cmsj",
                                    "body": "If you want to disassemble each new version of the falcon driver and reverse engineer their validation and error handling code, please be my guest, I’m sure many people will read your work 👍",
                                    "score": 16,
                                    "replies": [
                                      {
                                        "author": "Ravek",
                                        "body": "You don't need to reverse engineer anything to _test if it still crashes_ if you zero out a file.",
                                        "score": 3,
                                        "replies": [
                                          {
                                            "author": "cmsj",
                                            "body": "I don’t have the sys files in question myself, but from the commentary I’ve seen online, they weren’t actually empty files, but there is speculation that they were badly formatted in some way.\n\nEdit: I do now have the sys files in question and they are not zeroed.",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "Crandom",
                            "body": "OK, the fact hsi happened before sis just pure negligence now.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "besois",
                        "body": "I think if this is the only thing, the issue isn't that the functionality is missing, the issue is that Microsoft allowed this to exist when, if projects such as eBPF had the functionality that CrowdStrike needs, there could have been alternative solutions.\n\n[https://github.com/microsoft/ebpf-for-windows](https://github.com/microsoft/ebpf-for-windows) which prevents JIT compiling as well using [HVCI](https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard)[https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs](https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs)\n\nit's not like these features go unused either, Edge employs VBS via [MDAG](https://learn.microsoft.com/en-us/deployedge/microsoft-edge-security-windows-defender-application-guard) so that tabs can run in their own virtualized sandboxes. Another example: [Isolated User Mode (IUM) Processes](https://learn.microsoft.com/en-us/windows/win32/procthread/isolated-user-mode--ium--processes)\n\nNot sure if either of these for Linux or Windows would prevent every case though, you can have virtualized processes communicate through some kind of pipeline (even sockets, for example), where dynamic code is fed to the virtualized process, but then a static component, like a driver receives feedback from it. The driver technically isn't receiving dynamic code, or being changed in any way at all, but it's still responding as a client or server to the virtualized process and can result in a vulnerability.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Sihsson",
            "body": "&gt;Running unsigned code at kernel level is such a bad idea\n\nTrue. However Crowdstrike might sign their kernel level code with their own certificate. The code could be signed but not by Microsoft. The video does not go into these details, idk what Crowdstike actually does... To me, the real issue is running arbitrary code at kernel level without proper validation &amp; checks (signature is one of the many checks).",
            "score": 9,
            "replies": [
              {
                "author": "NotTooDistantFuture",
                "body": "Wouldn’t a file of 0’s presumably not match the signature? Or did they sign the file of 0’s?",
                "score": 2,
                "replies": [
                  {
                    "author": "Sihsson",
                    "body": "Theoretically a signature only provides integrity and non-repudiation. If they signed a file of 0 then we are sure it came from Crowdstrike and that it was already 0 when it left the update servers. However even if it was signed by Crowdstrike we are not sure the file will work as intended. \n\nHence my comment : signature is only one of the many checks and validation that must be done.",
                    "score": 9,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "swni",
            "body": "&gt; I feel like Microsoft needs to do a bit more in their verification like not allowing drivers that run dynamic code to be marked as critical and required to start up. \n\nI likewise don't understand how this could have passed MS certification. Isn't the whole point to prevent shitty code like this from being run by the kernel? If my understanding is correct, this is as much MS's fault as it is crowdstrike's.",
            "score": 9,
            "replies": []
          },
          {
            "author": "dballz12",
            "body": "I'm now curious - is anyone else doing this? We should probably identify them. Crowdstrike, and any other culprits, should be forced to change this procedure, or at least have a transparent process where the updates go through a third-party and are signed off for safety(I'm sure there's better ideas, just spitballin')",
            "score": 3,
            "replies": []
          },
          {
            "author": "ThreeLeggedChimp",
            "body": "What about the fact that they were able to load a null file at all?\n\nNormally loading a file with a null header would return an exception in any API you try to load it with.",
            "score": 2,
            "replies": []
          },
          {
            "author": "LMGN",
            "body": "To be fair, he says \"unsigned\", but I doubt it's actually unsigned. I would certainly hope that CrowdStrike are doing signature validation on these, it's just that it's not signed by Microsoft",
            "score": 2,
            "replies": []
          },
          {
            "author": "Sndr666",
            "body": "I found out in this thread, many ppl do not share your / our concerns about this design flaw. \n\n\nJust think that this was unintentional. From a state actor perspective how tasty would access to cs update systems be right now? ",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "fagnerbrack",
        "body": "Great example of high risk setting where being agile is worse and having parameter validation is non negotiable. Working directly with drivers when you build a tunnel to execute low level code dynamically is a completely different planet than standard Web dev for example.\n\nI know most business contexts where being agile is essential and parameter validation is overengineering (can be replaced by say efficient testing)\n\nThere's really no silver bullet, use the right tool for the job. No dogmas.",
        "score": 16,
        "replies": [
          {
            "author": "-jayroc-",
            "body": "It’s amazing to me to hear that there was no parameter validation. In this context, with the proverbial stakes being this high, I would consider it a necessary effort, not one of over engineering. Even a junior web dev will know to validate parameters, especially from external sources. With CrowdStrike, they possess the keys to the kingdom. I can’t help but conclude that this was a small case of pure and simple negligence with massive consequences.",
            "score": 11,
            "replies": [
              {
                "author": "fagnerbrack",
                "body": "Completely. In this context you need even some sort of type declaration for the assembly-like language they use. Static testing is sometimes the only kind of testing you can run against the DSL for the dynamic driver code so TDD is impossible.\n\nFunny I see people arguing against TDD and SOLID when working with drivers. Of course, it's a completely different planet. 90% of the good practices in software design don't apply there, other practices do and you will never see that teached in most books, only experience will teach you.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "ilikerwd",
        "body": "Dave’s channel is excellent.",
        "score": 98,
        "replies": [
          {
            "author": "SparkySpider",
            "body": "All his content is great. Except for the fake popup ads and fake reg cleaners he kicked off back in the day. he doesn't talk about that.",
            "score": 74,
            "replies": [
              {
                "author": "BCProgramming",
                "body": "He calls it when he \"went into advertising\" lol. \n\nFor those interested, he left Microsoft in 2003 to run a company called SoftwareOnline LLC. It was effectively a scamware company that distributed scamware, adware, nagware, and also malware and tricked users into paying him money. After countless complaints, his company was sued by [Washington State](https://www.atg.wa.gov/news/news-releases/attorney-general-s-office-sues-settles-washington-based-softwareonlinecom). The fines amounted to around 400,000, but got reduced to 220K, it's not clear how much money he actually made from the venture as it was not disclosed. I'd be surprised if he didn't make out with less than a million from the venture,  pretty much stolen from people.",
                "score": 116,
                "replies": [
                  {
                    "author": "double-you",
                    "body": "That is terrible. I want to take my view back.",
                    "score": 26,
                    "replies": []
                  },
                  {
                    "author": "RockstarArtisan",
                    "body": "He left Microsoft in 2003 and STILL keeps talking about being a former Windows developer in every video? Well, at least that's not selling scamware, just stretching his windows dev credentials very very thin. Just like \"techlead\" who was a former google employee and milked that for years to sell idiotic career advice and crypto scams. Never trust people whose only claim to fame is working somewhere.",
                    "score": 5,
                    "replies": []
                  },
                  {
                    "author": "bluesquare2543",
                    "body": "I knew something was off about him, and I'm not talking about the autism.",
                    "score": 29,
                    "replies": [
                      {
                        "author": "germansnowman",
                        "body": "Same here. There’s a certain “bro” vibe about him that makes me uneasy.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "pointprep",
                    "body": "I liked some of his videos, but what caused me to flip the bozo bit on him was his reaction to physics girl. Saying that talk therapy can cure extremely severe long covid disability is an incredible combination of having no empathy, not understanding what you’re talking about, and talking about it anyway.",
                    "score": 17,
                    "replies": [
                      {
                        "author": "donatj",
                        "body": "I don't know about all that, but I really question that keeping her in bed in a dark room for years has been the best course of action. That's bound to cause a deep depression which has a major impact on the immune system.",
                        "score": 9,
                        "replies": [
                          {
                            "author": "pointprep",
                            "body": "Yes, this is a good example of what I’m talking about. \n\nHere’s how to avoid this:\n\n- you could learn a bit more about what it’s like to have extreme long covid\n\n- you could believe that they are experiencing what they say they’re experiencing and responding in a rational way, instead of giving up their career and becoming a shut in for some other reason. If there is a simple solution that takes someone less than a few seconds to come up with, don’t assume that they haven’t tried it. Try to imagine if you had a life-changing problem for years. How might you react? What would you try to fix it?\n\n- in the absence of those 2 things (nobody will learn about or empathize with everything) no need to chime in with uninformed unempathetic opinions",
                            "score": 14,
                            "replies": [
                              {
                                "author": "MardiFoufs",
                                "body": "I'm not sure you actually apply that same approach either. The usual weasel usage of the word empathy doesn't help your comment either. Fwiw, I think this YouTuber is a cringy boomer scammer. \n\n\n\nBut your reply to a comment that simply said \"staying in the dark for years is probably not a good approach\" has literally nothing to do with your comment at all. It's just pure tone policing and spewing reddit buzzwords. Do you also talk about 'empathy'  whenever someone questions if say, a homeopathic treatment works? And you don't question anyone's treatment choices? Really? Well I guess medical consensus doesn't matter if someone decides to treat himself in a way he prefers. \n\nNow, could you show me any study about long COVID that actually supports what you're saying? You're making the affirmative claim that it's a valid treatment choice.\n\n\n\nIt's such a stereotypical average Redditor response to a random comment too.",
                                "score": 2,
                                "replies": []
                              },
                              {
                                "author": "donatj",
                                "body": "You keep saying empathy but I don't think you really understand what that word means. It's just about understanding, not accepting.\n\n&gt; the ability to understand and share the feelings of another.\n\nWhat it's not is writing off one's action's entirely. You can empathize with someone and still think the way they are handling their situation is suboptimal.\n\nI understand she is having a terrible time. I once spent 6 months of my life struggling to breathe due to an autoimmune response, I have gone through difficult times myself. You can empathize with someone and still think their actions are the wrong thing to do. \n\nAnd I still think they should be getting her out of bed, even if it's uncomfortable for her. There is no science to back being laid up in a dark room helps cure long covid, it's a reaction to her discomfort, and that is a choice on their part.",
                                "score": 3,
                                "replies": [
                                  {
                                    "author": "pointprep",
                                    "body": "It is not that it's uncomfortable, it's that it's not possible. \n\nIf someone came up to you during your 6 months struggling to breathe and suggested you try opening your windows to get some fresh air in, how would that make you feel? Would it have solved your problem?\n\nTo empathize with someone is to see things from their perspective. Assuming without any evidence that they haven't tried extremely basic things to try to fix their situation is the opposite of empathy.\n\nWhy do you think they are handling things the way they are? Do you think they might have good reasons that you're not aware of?",
                                    "score": 4,
                                    "replies": [
                                      {
                                        "author": "donatj",
                                        "body": "&gt; Why do you think they are handling things the way they are? Do you think they might have good reasons that you're not aware of?\n\nWhat I am aware of is human nature. You simply cannot remove the \"human\" from the equation and even call it \"empathy\". You cannot empathize with a person without understanding the human experience.\n\nPeople are exceptionally discomfort adverse. People avoid doing simple things every day that would improve their life because it would cause discomfort. Think going to the gym, cleaning their house, having difficult conversations, leaving dysfunctional relationships. Now consider the avoidance that comes with immense discomfort.\n\nTo blindly assume someone is behaving in a way that goes against human nature, purely in their own self interest, somehow pushing through all discomfort like a superhero is not empathy, it's delusion. People are people. You have to consider people behaving like people, and people are not perfect. People need help and to be pushed sometimes.\n\nThere is nothing impossible here. Her husband could get her into a wheelchair and take her outside. He might need a lift, I'd assume they have one for doctors visits already. It could be immensely uncomfortable for her, and seeing a loved one in agony would almost certainly be devastating for him. \n\nBut getting out of that bedroom regularly is in my opinion the right thing to do. You need the Vitamin D. You need just the change of scenery and experience.\n\nMy situation was quite different, and I am not claiming that I know best because of it. I managed to continue to work, despite struggling to speak and frequent panic attacks. I am by no means saying she could be living a normal life, and I don't want that misconstrued. What I am saying is my situation paled in comparison to hers, and I am not trying to make a comparison.",
                                        "score": -1,
                                        "replies": [
                                          {
                                            "author": "pointprep",
                                            "body": "You're assuming that they're making their lives a living hell because they don't want to be uncomfortable, or do hard things.\n\nI think the main reason why Kyle doesn't take her outside every day is because he dislikes having her crash and have to go to the ER, and doesn't want to torture her or risk her death for no benefit.\n\nI don't think it is empathy if you look at people and make a 5 second snap judgement about them that assumes that they're not responding to their situation in a reasonable way, they're stupid, they're lazy, and they need an uninformed push to do the right thing.\n\nTry to imagine yourself - a reasonable, smart, normal person - and think about what set of circumstances might lead you to act in the way that they are acting.",
                                            "score": 4,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "5thKeetle",
                "body": "I wish he did. I remember using those as a kid. What a waste of time.",
                "score": 9,
                "replies": []
              }
            ]
          },
          {
            "author": "donatj",
            "body": "I find his claims about having single handedly built so many major front facing features of Windows kind of ... questionable. Like sure, maybe it's true, but I have trouble believing the dude built the start menu, task manager, calculator, zip folders more-or-less single handed. I'm sure he worked on all these things but I feel like he downplays others contributions.",
            "score": 12,
            "replies": [
              {
                "author": "invisi1407",
                "body": "He didn't build the start menu, he built parts of it - one thing I read about on his X account was that he changed how the left side logo banner was rendered. It used to be BMP images, localized for each language, but he changed it to be a background image with the text overlaid such that it could be translated as a string.\n\nBack then, you couldn't rotate text but you could rotate the _device context (DC)_ that it was drawn on, making it appear as if it was rotated.\n\nI think the titles of his videos and the way he talks about his work at Microsoft are greatly exaggerated, but he _did_ work on those things in part, it seems.",
                "score": 12,
                "replies": [
                  {
                    "author": "Thotaz",
                    "body": "&gt; one thing I read about on his X account was that he changed how the left side logo banner was rendered. It used to be BMP images, localized for each language, but he changed it to be a background image with the text overlaid such that it could be translated as a string.\n\nAccording to this it's not actually true: https://x.com/WithinRafael/status/1813306774080110823 (look at the replies where he and other people check out the code in various versions of Windows).",
                    "score": 4,
                    "replies": [
                      {
                        "author": "invisi1407",
                        "body": "There's a lot of comments about him lying and removing comments that calls him out. I'd be inclined to agree that it looks like he might be exaggerating his involvement in these things.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "MehYam",
                "body": "He did solely build the first Task Manager and zip folder integration. \n\nHe was basically a successful indie dev when he was hired at MS, continued his own stuff on the side, and had to quit when the side projects became too lucrative. Both taskmgr.exe and the zip stuff were projects he started and authored.\n\nThere's a funny story he tells about how he got a call from another department in MS asking about acquiring the rights to the zip folder project - he said \"sure, what building/office are you\", and the caller got confused, not realizing that Dave was already an employee.",
                "score": 19,
                "replies": [
                  {
                    "author": "MikusR",
                    "body": "&gt; He did solely build the first Task Manager and zip folder integration\n\nThere are sources confirming it? Or just his words?",
                    "score": 1,
                    "replies": [
                      {
                        "author": "MehYam",
                        "body": "Yes, Microsoft is the source. They sent him back his original taskmgr.exe source code with the  clearance to feature it on his channel.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 2,
            "replies": [
              {
                "author": "Maykey",
                "body": "His scam was awesome as well. Too bad state doesn't appreciate \"Failing to obtain a consumer’s explicit consent to purchase a product or a service\"",
                "score": 15,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Hottage",
        "body": "Boy I sure do hope they at least signed their definition files with a Crowdstrike private key otherwise you could (theoretically) just use the Crowdstrike kernal mode driver for malware injection. 🫠",
        "score": 12,
        "replies": [
          {
            "author": "gbeaglez",
            "body": "I would not bet money that the file is signed/verified in anyway... I wonder if it will load and execute any file matching the naming pattern in that directory and execute it...",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "geowarin",
        "body": "TLDW;\n\n- Crowstrike is a kernel driver, meaning that it has access to priviledged information like the OS memory map, etc\n- A crash in a Kernel mode application implies a system crash because the alternative is worse (memory corruption, etc). This is not a windows only behaviour, all modern OS do it.\n- Drivers are usually verfied by microsoft but this process takes days so it's not suitable for crowstrike\n- Crowstrike driver (which is signed) dynamically executes non-signed code downloaded from its servers instead\n- This code was probably not protected against improper behaviour, leading to a null pointer, instead of gracefully failing\n- Normal drivers do not normally cause the OS to crash on boot but Crowstrike is a boot start driver meaning the OS will refuse to load without it.\n- Only recourse is to start in fail safe mode that only loads a limited set of drivers",
        "score": 25,
        "replies": [
          {
            "author": "Colecoman1982",
            "body": "&gt; Drivers are usually verfied by microsoft but this process takes days so it's not suitable for crowstrike\n\nI\"d argue that a more accurate description of this is that Crowdstrike **feel** that this process is not suitable for Crowdstrike...",
            "score": 15,
            "replies": []
          },
          {
            "author": "chengiz",
            "body": "It's Crowd not Crow.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "seraph321",
        "body": "I wonder if we will see Microsoft make some major changes to how kernel drivers are allowed to operate based on this. If not, it seems only a matter of time before a malicious actors (state sponsored or not) utilise an existing approved kernel driver to directly attack major systems by just pushing executable code remotely with no need to attack the system directly.",
        "score": 22,
        "replies": [
          {
            "author": "No_Coconut_4350",
            "body": "Yes. Its interesting to compare MS with Apple: MacOS doesn't allow Crowdstrike (or any other EDR system) to operate in kernel mode. Only Apple coders in there!",
            "score": 22,
            "replies": []
          },
          {
            "author": "DeltaV112",
            "body": "No, because all the EDR vendors will screech about antitrust or whatever just like the last time Microsoft tried to lock them down.",
            "score": 12,
            "replies": [
              {
                "author": "seraph321",
                "body": "Yeah, seems likely, but this time ms has a hugely damaging incident to point to as justification and that very well could convince the government it’s in the public interest.",
                "score": 7,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "guest271314",
        "body": "&gt; ... but you can already perhaps see the problem...",
        "score": 14,
        "replies": []
      },
      {
        "author": "moreVCAs",
        "body": "eBPF",
        "score": 15,
        "replies": [
          {
            "author": "hoo29",
            "body": "Except Crowdstrike have already caused kernel panics with eBPF programs\nhttps://access.redhat.com/solutions/7068083",
            "score": 19,
            "replies": [
              {
                "author": "Worth_Trust_3825",
                "body": "To be fair, isn't eBPF itself not supposed to cause kernel panics, which in turn was an eBPF bug?",
                "score": 9,
                "replies": [
                  {
                    "author": "Excellent_Tubleweed",
                    "body": "Look, it's cool that the linux kernel devs wrote an informally specified interpreter that does just-in-time compilation, that runs inside the kernel.  And they can try to code their way to having no errors. But that sort of use case is literally what formal methods are for. Just \"Trying very hard not to make bugs\" has been the 'best practice' for so long, it's a worst practice now.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "moreVCAs",
                "body": "Hahaha, amazing 🤦 \n\nDidn’t realize that",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "dlg",
            "body": "In theory, [eBPF for Windows](https://github.com/microsoft/ebpf-for-windows) would allow tools like CrowdStrike Falcon to be written to run in a sandbox environment within the kernel. If the sandbox crashes, it would not take down the kernel.\n\nIt would be a best of both worlds, giving the process access to kernel, but limiting the blast radius to the sandbox process.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "gunt_lint",
        "body": "Wow that’s a great video. All the necessary info with clear explanation for viewers of lesser savvy, yet right to the point with no wasted time.",
        "score": 3,
        "replies": []
      },
      {
        "author": "ranban2012",
        "body": "they weren't doing rudimentary parameter validation (nevermind unsigned code) on input that was coming from an external file...  and then that input could potentially also be executing arbitrary code.  \n\nif I was a black hat state actor I would be PISSED right now that such a stupid mistake brought so much attention to such an enormous vulnerability.",
        "score": 4,
        "replies": []
      },
      {
        "author": "backpackedlast",
        "body": "Any one have any insight on what went wrong during the Software Development Life Cycle and allowed a bad release into the world wide production environments?",
        "score": 3,
        "replies": [
          {
            "author": "ZucchiniMore3450",
            "body": "I have no experience or information about this situation and company, but  interpolating from my personal experience is some manager was pushing developers to release immediately or his bonus will be 0.5% lower.\n\n\n\nThis was not some random bug hitting some systems in different circumstances - this would be caught with testing on at least one computer. This shows they didn't even try to test it. Huge no-no.\n\n\nNext step, following the same interpolation, some developer will be blamed and we continue as usual.",
            "score": 3,
            "replies": [
              {
                "author": "backpackedlast",
                "body": "Yeah my thoughts as well this should have been easily caught in testing processes.  \n  \nWhere did the process fail?  \n  \nDid they do any testing?  \n  \nIs this a case of oh \"minor\" change and we have Friday as the deadline or else internal business units will be mad about missing deadline so we will skip/bypass testing?",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Sad-Slip-504",
        "body": "The Microsoft response yesterday was interesting somewhat pointing the finger at the EU that it had to allow other developers access to kernel drivers as part of the anti-trust agreement on Microsoft Defender EndPoint. \n\n  \nAs has been highlighted Apple's MacOS doesn't allow 3rd party kernel drivers and they haven't had a similar EU intervention to change that. Falcon Sensor however is available for MacOS and so clearly they have been able to work around this limitation. What is the likely consequence of not having MacOS Kernel access? The Mac version is less secure? It takes up more resources?",
        "score": 3,
        "replies": []
      },
      {
        "author": "denverdonkos",
        "body": "this guy did an amazing and verbose explanation of the issue at hand followed up with the fix. Bravo Zulu!",
        "score": 5,
        "replies": [
          {
            "author": "eightslipsandagully",
            "body": "This has to be the first time I've ever seen someone use \"Bravo Zulu\" in the wild!",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "ventuspilot",
        "body": "Is this for real: Microsoft's WHQL labs will certify a driver, and after the certification the driver can dowload code from the internet and run any code it wants?",
        "score": 2,
        "replies": []
      },
      {
        "author": "tazebot",
        "body": "\"I don't often test, but when I do, it's in production\"\n\n \\- crowdstrike",
        "score": 2,
        "replies": []
      },
      {
        "author": "CrowTiberiusRobot",
        "body": "Crowdstrike made a post yesterday saying that the all-zero nullified data is in fact an artifact of how Windows security operates after a kernel crash. They are using the terminology \"we observed internally and in the wild\". I think, if true, this might alter the reasons many have given behind the issue and also the idea that they aren't doing validation. Not sure, just thought it was interesting:\n\nhttps://www.crowdstrike.com/blog/tech-analysis-channel-file-may-contain-null-bytes/",
        "score": 2,
        "replies": []
      },
      {
        "author": "tilixr",
        "body": "Thinking aloud, If you delete the \"dodgy channel files\" in Safe mode and reboot normally, won't CrowdStrike download it again?",
        "score": 4,
        "replies": [
          {
            "author": "rollie82",
            "body": "Fixing the definition files at the remote endpoint was no doubt done very early.",
            "score": 47,
            "replies": [
              {
                "author": "tilixr",
                "body": "Okay, I guess they just replaced them with the last known good version. That begs the question if CS stage-tested the def files before prod deployment.",
                "score": 6,
                "replies": [
                  {
                    "author": "spaceneenja",
                    "body": "My guess is someone did this intentionally. It was a proof of vulnerability they encountered but management didn’t care about, so they let it loose now instead of waiting for it to be exploited later e.g. by a state actor.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "seraph321",
                        "body": "Except, if that was ever proven, that person would likely get a huge personal fine and probably significant jail time. It's not a 'oh, I'll just get fired' kind of action. The move would be whistle blowing, not literally causing billions in damage and potential loss of life.",
                        "score": 5,
                        "replies": []
                      },
                      {
                        "author": "LeapOfMonkey",
                        "body": "Nah, it was probably more like intentional omission. Oh, you pushed a code I think will destroy everything, but I hate this job, so ok, go on.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "smellycoat",
                "body": "The bad channel file was up from 04:09 to 05:27 UTC.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "double-you",
            "body": "I'm not sure the information was very well spread out but removing the 291 file caused CrowdStrike to redownload it but at that point they had replaced it with a working file so you got a working file instead. How did you know if you had the fixed file? The broken one had a timestamp of 4:00 AM or something and the fixed one was 5:00 AM something. They had this mentioned on the website somewhere.\n\nIt would have been clearer if they had just stopped using the file that was buggy and moved any needed data to some file with a different name but this is what we got.",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "mikhail-m1",
        "body": "I think the video just explains the basics, and real questions are not touched, of cause we don't know what was the actual bug, but the driver release process is definitely broken, Microsoft haven't created automated recovery process and companies who creates software (System Integrator) just prefer Windows because they have percent from the Microsoft license's sale. \n\nI know about internal update release process in an antivirus company, updates are never rolled out to all clients at once, they start from small portion, and check, am not saying about internal testing.\n\nNobody could say that driver update that crashes the system is something unexpected, we know about it from windows 95, but I don't see any solution, how many of us have seen BSODs everywhere. If the system were setup at least to reboot to previous successful image it would help.\n\nWhy there are so many Windows machines everywhere? Because of a profit from the sales. Why do they have 3rd party anti-viruses? because each Windows machine should have one: )  Does the antivirus actually helps in real life or creates more problems?",
        "score": 3,
        "replies": [
          {
            "author": "JasonBravestar",
            "body": "Each Windows machine should have 3rd party antivirus? This was true... a long time ago.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "OldFcuk1",
        "body": "Explains everything so lengthlily like to the 10 year old and jumps over the core point of error that is not common IT knowledge:  \n\" ... they almost certainly started with a null pointer then added 9C to it and then just dereferenced it now debugging something like this is often an incremental process where you wind up establishing...\"",
        "score": 1,
        "replies": []
      },
      {
        "author": "kobumaister",
        "body": "The part where they load the code outside the driver to avoid the certifying process is outrageous, this could lead to code execution on kernel level with the correct certification!",
        "score": 1,
        "replies": []
      },
      {
        "author": "These-Bedroom-5694",
        "body": "I'm 99% certain crowd strike is going to get sued over disabling so many companies over a weekend.",
        "score": 1,
        "replies": []
      },
      {
        "author": "EAP007",
        "body": "Quick guide / Checklist of things to review to avoid being hit by a CrowdStrike type catastrophic outage.\n\n[https://vimeo.com/988596997/687cf365d0](https://vimeo.com/988596997/687cf365d0)",
        "score": 1,
        "replies": []
      },
      {
        "author": "criticalthinkerrr",
        "body": "Sorry but in my humble opinion, I lay the blame on companies who let any software be automatically installed be it at the application, the device, or the OS layer.\n\nMy IT company used Windows for years until my first Windows 10 machine.\n\nI turned off automatic updates as usual, yet in 2 days the OS had turned it back on and downloaded an update that hung my machine in an endless loop.\n\nI threw the Windows 10 machine away, and moved to Linux and never looked back!",
        "score": 1,
        "replies": []
      },
      {
        "author": "IndependentAd8248",
        "body": "How far software quality has fallen since the suits went goo-goo over TDD",
        "score": 1,
        "replies": []
      },
      {
        "author": "mightyhouseinc_ytttv",
        "body": "virtual dlls for backwards compatibility at start up over writing the address spaces on start up",
        "score": 1,
        "replies": []
      },
      {
        "author": "Pozay",
        "body": "Wish there was a bit more talk about windows verification process. They dont even check if all parameters are checked before being dereferenced?",
        "score": -18,
        "replies": [
          {
            "author": "puterTDI",
            "body": "Are you trying to blame windows for a bad kernel update from third party software?\n\nRemember that av is by necessity extremely invasive to the kernel.",
            "score": 23,
            "replies": []
          },
          {
            "author": "Sndr666",
            "body": "Funny how all posts questioning ms practices are downvoted to high heaven.",
            "score": 0,
            "replies": [
              {
                "author": "[deleted]",
                "body": "Because it's a bad take based on a misunderstanding of the verification process.",
                "score": 6,
                "replies": []
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Rabbit R1 Engineers Hard-Coded API Keys for ElevenLabs, Azure, Google Maps, and Yelp. How Does This Even Happen?",
    "body": "",
    "score": 982,
    "url": "",
    "created_utc": 1719526131.0,
    "author": "professorhummingbird",
    "permalink": "/r/programming/comments/1dq3mnt/rabbit_r1_engineers_hardcoded_api_keys_for/",
    "comments": [
      {
        "author": "adoggman",
        "body": "The software was clearly rushed and/or for nearly zero dollars. It's literally a CS undergrad figuring out how to get an Arduino with a mic to query ChatGPT for class in a week level mistakes being made.",
        "score": 745,
        "replies": [
          {
            "author": "shmorky",
            "body": "They just hid the text box and replaced it with a simple animation and off the shelf voice recognition. It's a fun little Kickstarter prototype, not an actual product.",
            "score": 119,
            "replies": [
              {
                "author": "GatitoAnonimo",
                "body": "Just got mine the other day. It’s a neat little toy. Works maybe 50% of the time if that. Best thing about that deal is I got a year of Perplexity which is amazing. I just can’t see why I would ever use this over my phone with any AI app. I’ll probably give it to my 10 year old nephew. He seems more the target demographic for such a thing.",
                "score": 7,
                "replies": [
                  {
                    "author": "FoolHooligan",
                    "body": "why did you financially support this scam?",
                    "score": 21,
                    "replies": [
                      {
                        "author": "GatitoAnonimo",
                        "body": "I didn’t think it was a scam. Why do you say that? Just a neat piece of tech I wanted to try.",
                        "score": 8,
                        "replies": [
                          {
                            "author": "BigThiccBoi27",
                            "body": "Its hilarious how people are downvoting you. \n\nYou bought a thing and spoke about your experience with it? booooooo!",
                            "score": 12,
                            "replies": [
                              {
                                "author": "GatitoAnonimo",
                                "body": "This is the second time I’ve been downvoted in this sub recently for discussing my experiences. It’s a bit puzzling.",
                                "score": 5,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "LightouseTech",
                            "body": "Maybe the fact that the founder is a known scam artist and that the hardware doesn't do what it was supposed to do (use AI to do actions on external software instead of puppeteer scripts) has something to do with it?",
                            "score": 4,
                            "replies": []
                          },
                          {
                            "author": "MdxBhmt",
                            "body": "Not OC, but you might want to see the CEO of rabbit previous tech ventures.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "jl2352",
                        "body": "I feel like people these days have forgotten what the word scam actually means.\n\nThe R1 isn’t a scam. It’s just a rushed poorly made product.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "coldblade2000",
            "body": "&gt; It's literally a CS undergrad figuring out how to get an Arduino with a mic to query\n\nHey, come on now, no need to get all rude and libelous...\n\n...it was an Android device lmfao",
            "score": 208,
            "replies": [
              {
                "author": "adoggman",
                "body": "I thought I was being nice by not implying they were using Java 🤷‍♂️",
                "score": -59,
                "replies": [
                  {
                    "author": "KyleG",
                    "body": "I'm not sure Android devs even use Java anymore since Kotlin is so much better.",
                    "score": 36,
                    "replies": [
                      {
                        "author": "MardiFoufs",
                        "body": "I mean yeah it's better than java 8 which is the alternative on android, but it's basically equal to java 21 (they both have strengths and weaknesses that the other doesn't have)",
                        "score": 1,
                        "replies": [
                          {
                            "author": "AfonsoFGarcia",
                            "body": "Java 21 is still not at the same level as Kotlin. Null handling is much better in Kotlin, and it's less verbose. That being said, the differences are getting smaller.",
                            "score": 7,
                            "replies": [
                              {
                                "author": "Bilboslappin69",
                                "body": "Java 21 is still nowhere near Kotlin.\n\n1. Null by default. \n2. Mutability shorthand. Java's verbosity often encourages developers to skip such things as declaring variables final, even though everything is often final. var and val are far better. \n3. An async API that doesn't suck. Java's completablefuture being the best default option is more than a decade behind most languages. \n4. Wildly less verbose. Doesn't require a single class per file. \n5. Limited reliance on 3rd party libraries for basic functionality. Lombok is a blessing and a curse. It's a blessing because it masks a lot of the miserable elements of Java. But it's a curse because it becomes a hard dependency of most projects and at this point, it's a monolith.",
                                "score": -2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Because the entire thing was a scam to cash in on the AI hype bubble as quickly as possible. The company behind this also developed scammy crypto stuff before jumping on to this hype wagon ",
        "score": 512,
        "replies": [
          {
            "author": "creepy_doll",
            "body": "Seriously.\n\nAIbros are the new cryptobros.\n\nLike, there are real legit applications for AI but they're going to take time to get right. But the whole thing has attracted a huge number of semi-smart people with no ethics.",
            "score": 143,
            "replies": [
              {
                "author": "chennyalan",
                "body": "&gt; AIbros are the new cryptobros.\n\nhttps://ludic.mataroa.blog/blog/i-will-fucking-piledrive-you-if-you-mention-ai-again/#fnref:2",
                "score": 54,
                "replies": [
                  {
                    "author": "eJaguar",
                    "body": "ai again",
                    "score": 13,
                    "replies": []
                  },
                  {
                    "author": "renaissancenow",
                    "body": "That was a fantastic, funny, snarky read. Thank you for sharing.",
                    "score": 9,
                    "replies": []
                  }
                ]
              },
              {
                "author": "iiiinthecomputer",
                "body": "My employer is going all in on tacking \"AI\" into everything whether or not it means anything or makes sense.\n\nLiterally rebranding to add \"AI\" on the end.\n\nWhen I ask them if we're eCompanyName.com 2.0 too I get blank looks.",
                "score": 14,
                "replies": []
              },
              {
                "author": "ElectronRotoscope",
                "body": "&gt;AIbros are the new cryptobros.\n\n\nhttps://youtu.be/mTBCzH1UyNY",
                "score": 6,
                "replies": []
              },
              {
                "author": "Spajk",
                "body": "The most legit application of AI is the god damn voice assistants and it's being applied so slowly that it's infuriating",
                "score": 9,
                "replies": [
                  {
                    "author": "QuickQuirk",
                    "body": "Hold on, there are a mountain of legit uses that are happening right now. they're just not being megahyped.\n\nEverything from the recommendation engines at online bookstores to recognising potentially cancerous or life threatening illness from easy to obtain data, upscaling in games, to scientific uses around chip design and identifying potential materials to be used in manufacturing.\n\nSo many *wonderful* uses, that are being buried by the smelly shitstorm of the techbro hypetrain.",
                    "score": 6,
                    "replies": []
                  }
                ]
              },
              {
                "author": "ChrisRR",
                "body": "And cryptobros are the new Beanie Baby collectors",
                "score": 3,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 7,
                "replies": [
                  {
                    "author": "CodeNCats",
                    "body": "I don't see it happening. The funding might actually increase. Right now the funding is spread over legit projects as well as garbage. Unlike nfts that have a very small niche use not worthy of the hype. AI actually has legitimate uses and with real potential to grow. Even if it's over hyped.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "SittingWave",
                "body": "the problem is that, judging from the job announcements, you can't get a job today if you don't have five years of AI experience in developing LLM. You don't even pass talent acquisition trash.",
                "score": 5,
                "replies": []
              },
              {
                "author": "QuickQuirk",
                "body": "It's the worst. When the backlash hits, and the bubble bursts, they're going to be harming all these legitimate projects and uses. A fortune is being thrown at massive LLM based startups, where that fortune could be used for lots of small innovations that are actually beneficial.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "wickedsight",
            "body": "It's always nice to have a gut feeling turn out to be correct...\n\nI had the order form fully filled out when I decided to finish watching the video. While doing that, I received an e-mail from them on the 'hide my email' address that I made specifically for this order. I had not submitted the form yet, but apparently they had already added my email to some mailing list.\n\nThis type of thing goes against any privacy regulation, so I canceled the order because I no longer trusted them to do the right thing. Using a product from them that wants access to my private data didn't seem like a good idea.",
            "score": 38,
            "replies": []
          },
          {
            "author": "BassSounds",
            "body": "But, but, but the founder was a math wizard as a kid! That makes it legit.",
            "score": 11,
            "replies": []
          },
          {
            "author": "headhunglow",
            "body": "Right. That's why I don't understand why people are getting caught up in the technical stuff. It's a scam, the software doesn't matter.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 144,
        "replies": [
          {
            "author": "Pennsylvania6-5000",
            "body": "Coffeezilla is always on point with his research.",
            "score": 25,
            "replies": []
          },
          {
            "author": "_commenter",
            "body": "wow we really are living through the stupidest timeline...",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "jppope",
        "body": "outsourced development anyone? with no technical leadership in house?",
        "score": 396,
        "replies": [
          {
            "author": "ThisIsMyCouchAccount",
            "body": "The simplest answer is that they were told to.\n\nIf the choice is between ship a crap product or get fired - I'll ship a crappy product.\n\nHell, my best projects were only \"ok\" at best. I've done all kinds of shitty things on the job because that's the hand I was dealt.\n\nYou push for good. You advocate. You gather data. But if it falls on deaf ears what do you do?\n\nYou ship the crap and maybe look for a new job if it bothers you.",
            "score": 327,
            "replies": [
              {
                "author": "aa-b",
                "body": "This is the right approach for an employee, but contractors need to be a bit more careful (at least where I live.) Employees are generally protected, but a contractor could potentially be sued for doing something as incredibly irresponsible as hardcoding API keys in a client app.\n\nIt's not really likely, just something to consider. Even for employees, if I saw \"Rabbit R1 - Senior Engineer\" on someone's resume I'd be grilling them about security because of this.",
                "score": 92,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "The API keys were hardcoded in the server and not the clients from how I understood the article. ",
                    "score": 16,
                    "replies": [
                      {
                        "author": "aa-b",
                        "body": "Yeah I think you're probably right, it's sort of vague. Embedding secrets in server-side source code would still be terrible security practice, but less bad than if they were on the actual devices.",
                        "score": 11,
                        "replies": [
                          {
                            "author": "jl2352",
                            "body": "I’m imagining it’s a *’we will put it there now to save time and fix it later’*, and later never came.",
                            "score": 2,
                            "replies": []
                          },
                          {
                            "author": "lolimouto_enjoyer",
                            "body": "I'm not surprised at all to be honest. There are a lot of people who choose convenience at the expense of security, both on the developer side and the user side.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "18763_",
                    "body": "I disagree, the social contract is not just between employees and the shitty employer (screw them over by all means) it is also with the unsuspecting user who did no harm to you .",
                    "score": 8,
                    "replies": [
                      {
                        "author": "aa-b",
                        "body": "Yeah I thought about it, and I agree. We all take shortcuts, and sometimes they might be a job requirement, but this sort of thing is well past that. Probably. I mean, the details aren't really clear",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "DanTheProgrammingMan",
                "body": "I hear you on code quality, but something that’s a fundamental security problem which is easily fixed? You should die on that hill. \n\nAnyway the fact that nobody did tells me that a junior probably did this and nobody did serious code review?",
                "score": 38,
                "replies": [
                  {
                    "author": "nerd4code",
                    "body": "A non-desperate senior would’ve walked away at some point before being hired.",
                    "score": 25,
                    "replies": []
                  },
                  {
                    "author": "B0Y0",
                    "body": "From everything I've heard about Rabbit development, I doubt there was *any* code review",
                    "score": 10,
                    "replies": []
                  },
                  {
                    "author": "TehLittleOne",
                    "body": "Hard agree. There are very few hills I will actually die on but avoiding front page security issues is one of them.",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "MardiFoufs",
                "body": "Lol what? I don't get this. It's literally not faster or easier to use API keys in the repo (again, the API keys were seemingly not shipped with the apps, they were committed in the internal repos). It's just incompetence. A source even states that the team was already using AWS key management, so the managers weren't somehow enforcing a \"push keys to repo\" policy. Devs just couldn't bother, since it's literally not faster once that's already set up and won't slow down any feature. \n\n\n\nI know that this sub likes to blame managers and management for everything, and it's basically the easiest way to get countless \"omg this so much this\" replies, but everything seems to indicate that everything about the rabbit was utterly incompetent and mediocre.",
                "score": 9,
                "replies": []
              },
              {
                "author": "YsrYsl",
                "body": "I used to be so quick to crap on this type of obvious \"mistake\" but I can emphatize a lot more now, at least willing to listen the reason behind it.\n\nSometimes management/non-technical decision makers can indeed be that ludicrous in their decision-making &amp; we can only follow what they want since we're serving their needs.",
                "score": 15,
                "replies": [
                  {
                    "author": "ThisIsMyCouchAccount",
                    "body": "This is a big example - but it's really no different than the day to day most of us have.\n\n\"We should being doing X.\"\n\n\"No. There's no time/budget/whatever.\"\n\nI was working on an internal business suite that synced data. HR, accounting, etc. I was told over and over and over that this had to 100% accurate.\n\nCan we start writing tests?\n\nAb-so-fucking-lutely not.\n\nGreat. I guess doing it manually and resetting things in the database is a great use of our time.",
                    "score": 16,
                    "replies": [
                      {
                        "author": "YsrYsl",
                        "body": "Hahaha I feel you. Just make sure you have the written records clearly stating your recommendations to cover your backs if things go wrong. You'll never know if they try to throw you under the bus &amp; you'd need to present your case to management.",
                        "score": 5,
                        "replies": []
                      },
                      {
                        "author": "Miranda_Leap",
                        "body": "Sounds like tests should have been part of the baseline requirement and presented as such, not as optional extra you could just not do.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "hyrumwhite",
                "body": "Shipping api keys that let anyone with technical know how steal your product or rack up a bill is probably worse than not shipping a product ",
                "score": 8,
                "replies": [
                  {
                    "author": "DelusionsOfExistence",
                    "body": "As a developer, I can't actually remember a time a client wanted something done right, only times where they want it done fast. Or in this scam's case, \"Now\".",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "ZirePhiinix",
                "body": "You can ignore the push for deliverable and go for quality but they'll just fire you. I've been in that boat.",
                "score": 2,
                "replies": []
              },
              {
                "author": "QuickQuirk",
                "body": "I've made the opposite choice in my career, and resigned when forced to ship a shitty project.\n\nWeird thing was, a few week later, I realised that the only mistake I had made *was waiting that long to do so due to misplaced loyalty.*\n\nStress levels went down, quality of life way up.",
                "score": 2,
                "replies": []
              },
              {
                "author": "SanityInAnarchy",
                "body": "This is one of the biggest reasons I want fuck-you-money:\n\n&gt; If the choice is between ship a crap product or get fired - I'll ship a crappy product.\n\nIf the product is so crap that shipping it seems like an act of deception, I raise hell while also looking for a new job. Worst case I keep my integrity and get more time to look for that new job, or whatever else I want to do with my life.\n\nBut that's a lot harder to do if you're a junior with no savings.",
                "score": 3,
                "replies": []
              },
              {
                "author": "random_son",
                "body": "Amen",
                "score": 0,
                "replies": []
              }
            ]
          },
          {
            "author": "gedankenlos",
            "body": "    // TODO: keep secrets in hashicorp vault\n    // hardcoded should be fine until we ship",
            "score": 73,
            "replies": [
              {
                "author": "chicknfly",
                "body": "That’s the problem. You didn’t TODO the second line! Easily missed.",
                "score": 40,
                "replies": [
                  {
                    "author": "abraxasnl",
                    "body": "Skill issue",
                    "score": 5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "recursive-analogy",
                "body": "most serious professionals these days have skipped the TODO pain entirely and just write TODON'Ts",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "omniuni",
            "body": "I think this was mostly in-house, but judging by how cobbled together the product is, I think they're just bad developers.",
            "score": 14,
            "replies": []
          },
          {
            "author": "WJMazepas",
            "body": "Offshore developer that did a lot of outsourced development here. \n\nI still wouldn't do this. \n\n\nMy team did hardcoded one API key on backend once, but that because it was a really stressful time where we did had to deliver a lot of features ASAP and still wasn't fast enough according to the client. \n\nAnd we didn't have time for PRs, so I couldn't have checked that error.\n\n\nBut as soon as we had time, we changed that",
            "score": 3,
            "replies": []
          },
          {
            "author": "BornAgainBlue",
            "body": "Senior dev here, fuck everyone who destroyed our jobs with hiring hacks. ",
            "score": 3,
            "replies": []
          },
          {
            "author": "restarting_today",
            "body": "When you let ChatGPT write your source code",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "proud_traveler",
        "body": "I think it's safe to assume ChatGTP did a large amount of the heavy lifting during the software development of this product.",
        "score": 256,
        "replies": [
          {
            "author": "__loam",
            "body": "I've seen some guys say shit like, be 100 times more productive with AI or you'll regret it, and I'm just thinking about the explosion of shit we're going to have to maintain because of these imbeciles.",
            "score": 145,
            "replies": [
              {
                "author": "Iggyhopper",
                "body": "I get paid to review AI generated code. The shitstorm is yet to come.\n\n\nBut it will be very strong.",
                "score": 70,
                "replies": [
                  {
                    "author": "PhaseDelay",
                    "body": "Why review code yourself? Make AI do it! I'm sure it'll all work out!",
                    "score": 18,
                    "replies": []
                  },
                  {
                    "author": "__loam",
                    "body": "I'd find a new job.",
                    "score": 17,
                    "replies": [
                      {
                        "author": "Iggyhopper",
                        "body": "It pays $45/hr. I think I will get the cash for now.",
                        "score": 24,
                        "replies": [
                          {
                            "author": "Frolicks",
                            "body": "curious - is this gig work or salaried? can you share the name of the company?",
                            "score": 6,
                            "replies": []
                          },
                          {
                            "author": "decentralizedsadness",
                            "body": "brother/sister/comrade that is not enough.",
                            "score": 5,
                            "replies": [
                              {
                                "author": "DelusionsOfExistence",
                                "body": "It is if you can't get a software position right now. Unfortunately food isn't free.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "decentralizedsadness",
                                    "body": "true",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 8,
                            "replies": [
                              {
                                "author": "DelusionsOfExistence",
                                "body": "But if you can't land a software job right now, that's fantastic for being able to eat food.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "JonFrost",
                            "body": "Is there another spot open? I'm sure there's plenty of trash to sift through",
                            "score": 3,
                            "replies": []
                          },
                          {
                            "author": "ChrisRR",
                            "body": "That's only $85k. That's not a very high salary, especially when you account for how much higher US devs are paid.",
                            "score": 4,
                            "replies": [
                              {
                                "author": "LookIPickedAUsername",
                                "body": "A 40 hour a week job has you working roughly 2000 hours a year, so that’s more like $90K.\n\nEdit: I'll note that the parent post originally said $65K before they edited it; I wasn't correcting them over $5K.",
                                "score": 2,
                                "replies": []
                              },
                              {
                                "author": "dexx4d",
                                "body": "It'd be a great second job, though.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "PoisnFang",
                            "body": "How can I get that gig?",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "yawaramin",
                    "body": "Sounds like diarrhea.",
                    "score": 4,
                    "replies": []
                  },
                  {
                    "author": "cecilkorik",
                    "body": "Exciting times to be a software developer. Us actual humans with real experience making battle-hardened, production-quality software will be in huge demand to fix all the disastrous, catastrophic, industry-incapacitating mistakes that AI code will make. It'll be like the demand for Cobol developers was in the lead up to Y2K, except instead of just one day being \"over\" it will only get more widespread as time goes on. I, for one, plan to charge such foolish companies through the nose to fix their mistakes. Looking forward to it.",
                    "score": 5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "breakslow",
                "body": "Senior dev here and AI has definitely increased my productivity. Will I ever trust it to write anything complicated? Hell no.\n\nI treat it as autocomplete that actually knows what's going on in my workspace. Having AI repeat patterns for boilerplate type code makes my job way more enjoyable.",
                "score": 32,
                "replies": [
                  {
                    "author": "__loam",
                    "body": "I've found it can be really good for code review as well when you don't give a shit if openai can read it. And I agree it's decent at short hops. It's not a 100x increase though, more like 0.2x at most over existing IDEs.\n\nE: people who write tests with it should be exiled.",
                    "score": 10,
                    "replies": [
                      {
                        "author": "breakslow",
                        "body": "Yep, 20% is a good estimate!",
                        "score": 4,
                        "replies": [
                          {
                            "author": "__loam",
                            "body": "I think there's a legitimate question about whether a 20% productivity  improvement is actually worth the cost of these systems. Microsoft went from almost totally green to increasing their emissions by 30% inside a year. We don't know publicly, but I have serious doubts that OpenAI is profitable. What I think will happen is we're going to get some really efficient local models, and the companies that spent billions on this tech will not be the winners of that market.",
                            "score": 9,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "ChrisRR",
                        "body": "It would need to be better than static analysis though.  The difference being that static analysis can definitively tell you if you've made a mistake, vs AI which tells you that it's statistically probable that you've made a mistake",
                        "score": 3,
                        "replies": [
                          {
                            "author": "__loam",
                            "body": "Yeah obviously just as a supplement. I definitely prefer deterministic tools and actually don't reach for GenAI all that often if ever.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "SanityInAnarchy",
                        "body": "&gt; people who write tests with it should be exiled.\n\nDisagree. That's the one thing it does where I can type the name of a function, and there's a good chance it'll spit out the entire function, and it'll be *exactly* what I would've written. It's also the one place I don't mind boilerplate showing up in my code.\n\nWith other code, I have to rewrite or ignore 90% of what it suggests. With tests it's the other way around, I only have to fix 10% of what it suggests.",
                        "score": 6,
                        "replies": [
                          {
                            "author": "__loam",
                            "body": "To Malta with you!",
                            "score": 5,
                            "replies": [
                              {
                                "author": "SanityInAnarchy",
                                "body": "I was worried you were gonna exile me to Kerguelen or something. Malta seems nice!",
                                "score": 6,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "ChrisRR",
                    "body": "I've used it to generate a few basic scripts that I can then hack away at.\n\nAs an embedded dev python isn't my forte, but I needed a UI for a tool on my PC.  So I asked ChatGPT to knock up a python script and specified all the elements I wanted and it worked up to a point.\n\nAfter I kept specifying too much it eventually gave me invalid code, but it sure gave me a very good start",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "FeliusSeptimus",
                    "body": "Yep. It writes garbage code, but it usually finds the right pieces much faster than me digging through documentation and it puts them together in something vaguely resembling the right shape. Just that saves me a ton of time.",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "SanityInAnarchy",
                    "body": "The boilerplate bugs me, though, because I still want the code to be readable. Sometimes boilerplate helps with that, but often it gets in the way.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "restarting_today",
                "body": "Yep. Any AI generated code is near instantaneous a red flag and might be grounds for getting fired at my company. Imagine leaking your IP to OpenAI",
                "score": 7,
                "replies": []
              },
              {
                "author": "creepy_doll",
                "body": "I'll only go as far as allowing code assistants to finish a line for me, and even that's just to save the typing. Still mentally check that it's exactly what I wanted.\n\nThe kind of shit they can sneak in when you're not expecting it often seems fine on first glance but then you realize it's terrible.",
                "score": 3,
                "replies": []
              },
              {
                "author": "iiiinthecomputer",
                "body": "About the only things I've found it to be any use for are:\n\n* Producing test boilerplate \n* Producing verbose Kubernetes go code boilerplate \n* Give me ideas how others have done this. I will look them over to see if they are shit or not.\n\neven then it is hit or miss.",
                "score": 2,
                "replies": [
                  {
                    "author": "__loam",
                    "body": "It's very good for brainstorming.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "iiiinthecomputer",
                        "body": "Yes - but it tends to lean towards outdated and deprecated ways of doing things so care and follow-up is needed.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "__loam",
                            "body": "This is actually a deeper point imo. It's getting harder to find primary sources of knowledge with the current structure of the internet.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "GoodishCoder",
                "body": "AI has definitely improved my productivity but you have to have the knowledge to identify when it's wrong or pushing garbage. It saves me a ton of time on boilerplate and unit tests by turning it into a code review instead of having to type it out. I can have AI work on tests while I go work on something else, then I can double back and take a look at what it came up with.",
                "score": 2,
                "replies": [
                  {
                    "author": "__loam",
                    "body": "Maybe I'm a sucker for writing tests but I really think if you use AI, writing your own tests is a very valuable way of verifying the way the AI generated code works. I have to imagine how easy it would be to just say \"looks right\" while merging very subtle bugs in.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "GoodishCoder",
                        "body": "I've written my own tests for years so I know what looks right and what doesn't. Having AI write tests you will have to make some changes but it gets you 90% there. No one should be using a coding assistant AI for tests or production code if they don't have the experience to know when it's wrong.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "kmeans-kid",
                "body": "&gt; the explosion of shit we're going to have to maintain\n\nWho are \"we\"?  The one that wrote it gets to fix it.",
                "score": -3,
                "replies": [
                  {
                    "author": "__loam",
                    "body": "That's certainly the hope",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "throughactions",
            "body": "ChatGPT would warn you if you tried to hard code API keys. This is bog standard dog shit outsourcing.",
            "score": 3,
            "replies": [
              {
                "author": "DrunkensteinsMonster",
                "body": "ChatGPT is not intelligent, if you ask it “should I hardcode api keys”, it will of course tell you no. If you give it some code to review with hardcoded api keys, it will probably flag that to you. But if you ask it to write some code, it will absolutely spit out code with hardcoded keys, if that is what is in the dataset scraped from the internet for your particular problem.",
                "score": 9,
                "replies": [
                  {
                    "author": "throughactions",
                    "body": "&gt; ChatGPT is not intelligent\n\nIn my experience neither are lowest-bidder contractors.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "KevinCarbonara",
            "body": "&gt; I think it's safe to assume ChatGTP did a large amount of the heavy lifting during the software development of this product.\n\nThat's a really dumb assumption considering it's not even remotely capable of such a thing",
            "score": -9,
            "replies": [
              {
                "author": "Fromagery",
                "body": "It's fairly good at spitting out code that does what you ask it to do - for most languages.  Will it be the most performant or secure? Hell no.  If you don't know what you're doing it'll definitely get you in trouble.   But having it spit something out and then refactoring from there works pretty well if you're feeling lazy or looking for ideas on how to accomplish something.",
                "score": 8,
                "replies": [
                  {
                    "author": "bludgeonerV",
                    "body": "It makes so many mistakes, misunderstands the problem all the time, writes code that won't compile, imports libraries that don't exist, calls methods that don't exist.\n\nFrankly the only thing AI seems useful for in programming is implementing common features it has plenty of examples of. You can use it to avoid doing mundane things and writing boilter-plate based on functional examples, but trying to get it to do anything novel is a total waste of time.",
                    "score": 13,
                    "replies": [
                      {
                        "author": "KyleG",
                        "body": "The one really good use I've found for it is after I write a couple lines of a simple match pattern for an enumerated type, it can generate the remaining ones.\n\nI mean like if I've written a deserialization function for `Text -&gt; MyEnumType`, I can write one line of a match pattern on one value of `MyEnumType` and it can finish the others for me (basically recognizing that this new function is the inverse of the one I previously write).\n\nSo I can write\n\n    type Foo = Bar | Baz | Fizz | Buzz\n    Foo.toText = cases\n      Bar -&gt; \"bar\"\n      Baz -&gt; \"baz\"\n      Fizz -&gt; \"fizz\"\n      Buzz -&gt; \"buzz\"\n    Foo.encode = cases\n      \"bar\" -&gt; -- and right here:\n\nAI will recommend Bar plus (correct) lines for Baz, Fizz, Buzz and if I'm lucky an else case that raises an exception or if my (explicit, non-inferred) typesig is `Text -&gt; Optional MyEnumType` it might have them all be `Some Value` and the rest case `None`",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "KevinCarbonara",
                    "body": "&gt; It's fairly good at spitting out code that does what you ask it to do - for most languages.\n\nOnly at the absolute most basic level possible. It can *usually* do hello world in most languages. It's rare I ever see it pull off even simple elementary functions like value swap, or other low level tasks. It certainly couldn't have written anything significant like the app in question.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "krum",
        "body": "Wtf is this Rabbit?",
        "score": 60,
        "replies": [
          {
            "author": "professorhummingbird",
            "body": "It is a physical AI Assistant - [https://www.rabbit.tech/](https://www.rabbit.tech/)",
            "score": 40,
            "replies": [
              {
                "author": "BoiledPoopSoup",
                "body": "How the fuck are they still selling this thing? Also, hilarious that they have careers listed.",
                "score": 53,
                "replies": [
                  {
                    "author": "WitELeoparD",
                    "body": "The CEO previously ran a Crypto scam. They are utterly shameless.",
                    "score": 30,
                    "replies": [
                      {
                        "author": "SanityInAnarchy",
                        "body": "He is the embodiment of [this meme](https://www.youtube.com/watch?v=mTBCzH1UyNY).",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "dexx4d",
                    "body": "Oddly, they're not hiring developers.  Maybe they should be.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "scratchisthebest",
        "body": "The intentionally vague wording on this site (\"gained access to\", ok) is making a lot of people, even people in this reddit thread, think they were shipping these API keys in the on-device firmware, when I don't think so? Basically this post skews \"data breach announcement\", not security announcement\n\nShoddy and bodged-together, yes, should they have used some other secret management solution, obviously, is Rabbit's security person some moron who didn't have anything better to do than post ip grabber links in reverse-engineering discords, [absolutely](https://twitter.com/xyz3va/status/1797345446488068213), are they the company that \"fixed\" the ability to escape into Android from the wifi captive portal login screen with `tel:` links by injecting easily-revertable javascript into the page, [of course](https://twitter.com/MarcelD505/status/1803938838622224884)\n\nbut this *particular* api key thing feels weird lol",
        "score": 25,
        "replies": [
          {
            "author": "Chisignal",
            "body": "work rhythm gaze six fuzzy teeny tender chunky disarm direction\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
            "score": 10,
            "replies": []
          }
        ]
      },
      {
        "author": "cowinabadplace",
        "body": "Hardcoding the API key on your server, whatever. It's a thing a thousand people have done. But not rotating is an interesting choice. Everyone here is also gleefully posting like they shipped the API keys to customers, which they did not.",
        "score": 12,
        "replies": []
      },
      {
        "author": "frakkintoaster",
        "body": "How did they get access to the code?",
        "score": 13,
        "replies": [
          {
            "author": "droptableadventures",
            "body": "The Rabbitude project is aimed at jailbreaking and modifying the Rabbit R1 device. Presumably someone with access to the source code leaked it to them (maybe a disgruntled employee / ex-employee?).\n\nFrom their description, it sounds like these API keys with admin access were hardcoded into their build scripts, committed into the repository, when really they should be kept elsewhere.",
            "score": 19,
            "replies": []
          },
          {
            "author": "AndrewNeo",
            "body": "isn't it just android? it can't be that hard",
            "score": 13,
            "replies": [
              {
                "author": "gedankenlos",
                "body": "It doesn't say that the hardcoded API keys were in the Android app. It says:\n\n&gt; the rabbitude team gained access to the rabbit codebase\n\nIt sounds to me like someone leaked or stole their backend code, and in that the API keys were hardcoded. It's a tiny, tiny step lower in severity than having secrets shipping in your app package, but it's still egregiously bad practice and a huge vulnerability.",
                "score": 35,
                "replies": [
                  {
                    "author": "frakkintoaster",
                    "body": "Yeah, that's what I was wondering, if someone decompiled something or source code was leaked.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 15,
                "replies": [
                  {
                    "author": "droptableadventures",
                    "body": "These secrets weren't shipped in the app package, from what the article says, they were hardcoded in scripts checked into the source code repository.",
                    "score": 22,
                    "replies": [
                      {
                        "author": "bludgeonerV",
                        "body": "Yep, it's just pure laziness, it's trivially easy to use Secrets/KeyVault type setups and do string substitution or load them as env vars for your scripts, the tools for this already exist.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "nightmurder01",
            "body": "Just need a debugger, or decent decompiler depending on what it was written in. Hardcoded is meaning strings. And tbh, all you need is a resource editor if its a string.",
            "score": 3,
            "replies": [
              {
                "author": "restarting_today",
                "body": "Or just look at network requests",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Zellyk",
        "body": "Bootcamp devs be like",
        "score": 21,
        "replies": [
          {
            "author": "restarting_today",
            "body": "Prompt engineers be like",
            "score": 3,
            "replies": []
          },
          {
            "author": "ChrisRR",
            "body": "I just can't imagine who's hiring bootcamp devs.  What developer with any amount of experience is looking at anyone with 8 weeks of experience and thinking \"you'll do\"?",
            "score": 1,
            "replies": [
              {
                "author": "Zellyk",
                "body": "They do 8-16 weeks focused on web only. Its not exactly bad, but then they think they’re 10x engineers.",
                "score": 0,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "g9icy",
        "body": "So I'm not an app or web dev, don't need to solve these problems.\n\nWhat's the correct way to do this? I'm not stupid enough to do this myself, but I'm not really clear on how the \"proper\" way works, in terms of architecture.\n\nIf the app needs to talk to an api, such as chatgpt, would all requests need to go via a server, so the keys stay server side?\n\nDo the keys stay local but get encrypted? If so, they'd still need to be decryped before hitting the API, so still needs to go via a server?\n\nOr is it all done via an O-Auth type thing?",
        "score": 4,
        "replies": [
          {
            "author": "professorhummingbird",
            "body": "Yes, there is a correct way and the patterns are very common and simple to learn. I want to say pretty much everyone does this but I guess Rabbit engineer's prove me wrong.   \n  \nFirst off, we never hard-code API keys directly into our codebase. Instead, we use something called an environment file. That's where we put all our secret keys and credentials. Then, in the actual codebase, we use placeholders to reference these keys.\n\nBasically it works like this:\n\n1. Create an environment file in your project. It's usually named \".env\".\n2. In this file, store your keys like this: `KEY_NAME=your_api_key`.\n3. In your code, use placeholders to reference these keys. In JavaScript, you'd use `process.env.KEY_NAME`.\n4. Your environment file is never part of your code base. You keep it locally on your computer when developing. Then when in production you set it up your environment file directly on the server. \n5. Whenever possible we keep API requests server-side. Your client-side app talks to your server, which makes the API calls using the stored keys. \n6. If you need to store keys locally (like in a mobile app), you would encrypt them. I've never had to do this\n7. OAuth is good option, but like runs into the same problem as API Keys. I.E. it will have a client secret key that can't be exposed. We do the same thing here and put them in the .env folder",
            "score": 3,
            "replies": [
              {
                "author": "g9icy",
                "body": "Thanks for clearing that up. Similar to how we do translations during game dev.\n\nShame it has to go via a server, it must increase costs, but it's a necessary evil.",
                "score": 2,
                "replies": [
                  {
                    "author": "teamcoltra",
                    "body": "It doesn't really increase cost and the request already needed to go to the server in some form. Also in their case I don't think they would have wanted requests going directly straight to OpenAI (for instance) all the time anyway so they could pretend that some of their results were from their own service.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "NotTheRadar24",
        "body": "This is why you should use a secrets manager like [Doppler](https://doppler.com) or [AWS Key Management Service](https://docs.aws.amazon.com/kms/latest/developerguide/overview.html) (AWS KMS). Hardcoding your secrets or storing them in .env files will always risk something like this happening.",
        "score": 6,
        "replies": [
          {
            "author": "fapmonad",
            "body": "&gt; As part of the inventory process, we identified additional secrets that were not properly stored in AWS Secrets Manager.\n\n&gt; As part of the rotation process, the team updated relevant portions of the codebase to ensure that all secrets were properly stored.\n\nhttps://www.rabbit.tech/security-investigation-062524",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Glycerine",
        "body": "Bad Developers will build bad products with bad practices.",
        "score": 2,
        "replies": []
      },
      {
        "author": "happyscrappy",
        "body": "Okay, so I get how being able to see others responses is a big deal. So I see they screwed that up.\n\nOther than that, I don't understand what's axiomatically wrong with hardcoded API keys. An API key is to identify which client is accessing a service. So doesn't the client have to know the API key used for (for example) accessing google maps?\n\nAPI keys aren't exactly private. They only identify the client, not the user. If you give a client admin access without any authentication and then send that client out to customers then you've made a big mistake.",
        "score": 7,
        "replies": [
          {
            "author": "sethismee",
            "body": "How much of an issue this is depends on the API key really. Google maps API keys provide limited access and also have features for further restricting which operations are allowed to be performed with that key. The worst someone could do is probably send a whole bunch of requests with the key to rack up rabbits bill from google. If rabbit uses the same API key for all devices, which they probably do because google says there's a limit of \"300 API keys per project\", they'd have no way to stop them without issuing a new API key and updating the app, where the attacker could just grab the new one if nothing else has changed.  \nLike they call out in the blog, the elevenlabs one is an especially big deal. They even say in their documentation:\n&gt; If someone gains access to your xi-api-key he can use your account as he could if he knew your password.\n\nThe solution here would probably be to proxy the requests through another server, where only that server knows the API key and can restrict which operations users can perform with it while also doing rate limiting with some device/account unique ID.",
            "score": 30,
            "replies": [
              {
                "author": "happyscrappy",
                "body": "&gt; Like they call out in the blog, the elevenlabs one is an especially big deal. They even say in their documentation:\n\nYeah, if elevenlabs doesn't have the ability to have different permissions per API key then you have to implement it yourself in the way you suggest below. You have to front their service. Ultimately you're not even fronting it, just providing your own API that happens to call out to get things done. Your device asks the server to do \"operation A\" and operation A just happens to include getting location from Google Maps.\n\n&gt; The solution here would probably be to proxy the requests through another server, where only that server knows the API key and can restrict which operations users can perform with it while also doing rate limiting with some device/account unique ID.\n\nBut then you have to embed the API key for that forwarding service. And it'll still cost you money (CPU time) if people borrow that key and use it to impersonate to your service. Although not as much as if you were paying Google I bet.\n\nAPI keys are used to try to defend against users who want to do something and are completely authorized to do so, but you don't want them to do it, possibly because they are essentially fronting/rebadging your service or copying your content. API keys are ultimately copyable, impersonation is possible. But at least you can individually shut down abused keys and send out a new one. That will slow down the attacker although presumably they can just copy the new key too.\n\nI guess in that way hardcoding a key is bad because if you decide to rotate keys you have to send out a new app instead of just sending it out to clients over your service.\n\nThis all reminds me of DVD CSS and how the miscreants just stole just about the most popular device key and used that. CSS had a way to expire keys for future discs but doing so would mean a lot of customers couldn't watch any new discs. Blu-ray tried to made it mandatory to be able to change client keys via updates that were carried on the disc to get around this problem.",
                "score": 4,
                "replies": [
                  {
                    "author": "AforAnonymous",
                    "body": "&gt;but then you have to embed the API key for that forwarding service\n\nNo, that's where you use classic AAA, i.e. user accounts? And/or you dynamically generate and pass the key to the client if you need that level of separation",
                    "score": 2,
                    "replies": [
                      {
                        "author": "happyscrappy",
                        "body": "&gt; No, that's where you use classic AAA, i.e. user accounts? \n\nAgain user accounts only identify users. API keys can identify clients. If you want to keep people from impersonating your app/client device and fronting/rebadging your service user accounts won't do it. You have to try to identify the client. They can authenticate all they want but without the API key you won't provide the service.\n\n&gt; And/or you dynamically generate and pass the key to the client if you need that level of separation\n\nYou could. It doesn't really change anything though. The key still has to come to the client and thus still can be stolen. And I really don't see the value. If you will hand out an API key to any client that can authenticate you cannot prevent other apps from impersonating your client and getting a key.\n\nLook at it this way. This entire dumb Rabbit device was created to monetize all this and they only want the services to work from Rabbit devices. User accounts don't prevent that because they don't do anything to authenticate the device.",
                        "score": 0,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 3,
            "replies": [
              {
                "author": "happyscrappy",
                "body": "&gt; In this case, the API key allows read/write access to all users who have interacted with it. That's a very broad authorization scope and puts everybody (users and key holders alike) at risk.\n\nThat's what I said too. I get that. Don't put the information on the device needed to do anything the device doesn't normally need to do.\n\n&gt; Also, exposing your API key could potentially lead to abuse/misuse from malicious actors\n\nAnd what is the alternative? How do you not expose your API key? Maybe not your google one, but you have to expose an API key of some sort. Or just not have an API key at all and that's even worse because then there's no way to do key bans.\n\n&gt; Generally, if you're able to host your own abstraction of the API on a server you control you'll be able to better restrict how it's being used\n\nTo do that you would use API keys and maybe accounts. So you still have to have API keys on the device.\n\nIf you have a turnkey device that can access a service then by definition the data needed to access the service is on the device and can be stolen. There's really nothing you can do to prevent impersonation. API keys are never truly private.",
                "score": 2,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 2,
                    "replies": [
                      {
                        "author": "happyscrappy",
                        "body": "&gt; If there's simply no account system required/wanted, you could have some kind of mechanism that works from device \"fingerprint\".\n\nThis doesn't do anything. You're asking the device to send its fingerprint. Someone who wants to impersonate a device will simply create a fingerprint on a valid device and will store it for use when wanting to impersonate that device.\n\nThere is simply no way to be sure that the far end is telling the truth when you ask it to prove it is a legit device you sold instead of an impostor. Not when you are in the business of selling devices and shipping them to customers. You're literally handing out information about valid clients with every sale, a miscreant can use that information in ways you wouldn't like.\n\nWhen used in this fashion, API keys are an attempt to try to prevent device impersonation. But they just make it a little bit more difficult, not preclude it. Ultimately it's a game you can't win except maybe in courts. See DeCSS. See Nintendo against the Switch emulators.\n\n&gt; But what's important is that the client device doesn't contain a third party API key\n\nNow you're adding qualifications. Sounds like we're on the same page. There's nothing wrong with having API keys, even hardcoded ones. Just don't do certain things wrong. Like put a key which has the ability to do various admin things (like see other customers data) on the device. Which these dummies did.\n\n&gt; Bonus points: you can cache some API requests to avoid a call to the API host, potentially.\n\nRight, as long as the service allows that. Sometimes that's against terms because you're essentially replicating their service using their service's data.  Other times it's fine or even encouraged.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "AforAnonymous",
                    "body": "In the case of a true zero touch turnkey device, you'd probably use some (non-sequential, despite the name) device serial number as the **initial** setup API key, and then rotate it periodically? Makes factory reset processes a bit of a pain I suppose, but… ¯\\\\\\_(ツ)\\_/¯",
                    "score": 1,
                    "replies": [
                      {
                        "author": "happyscrappy",
                        "body": "It certainly would make factory reset impossible if each serial number only works once.\n\nAlso when someone starts impersonating devices by making up serial numbers and thus \"burning\" those numbers your customers will be angry because the device they bought now won't work because someone they've never met activated using their serial number.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "haroldjaap",
            "body": "Yeah I agree. It being an android app means you can always decompile the app and extract any api key from there. There are no secrets in a compiled android app, only hidden or obfuscated pieces of string. This is just basic android 101. For them to not share the apikey of e.g. Google maps is much less trivial than they think. Had it been only an app without the hardware some of the issues wouldn't be issues imo. (Haven't read the article, but google maps key in the apk file is not uncommon)",
            "score": 7,
            "replies": [
              {
                "author": "restarting_today",
                "body": "Your API key should be on your server. Not in your client code.",
                "score": 8,
                "replies": [
                  {
                    "author": "nacholicious",
                    "body": "On mobile the keys still need to get on the client for eg maps, firebase, etc.\n\nIt's not trivial to separate the keys from the client, and in the best case you still need to rely on a lot of client side code to ensure the client itself has not been tampered with, eg Google Play Integrity",
                    "score": 1,
                    "replies": [
                      {
                        "author": "hennell",
                        "body": "I've never built anything but the most basic of android apps, but wouldn't you proxy things if the API key is non-unique and not secure?\n\nAlso I'd have assumed there must be a way to store protected encrypted data for an app for things like this? App runs and securly downloads API keys into app protected memory or something.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "ICanHazTehCookie",
                "body": "It's unfortunate that android can be so relatively easily decompiled, but the solution at that point is to keep your keys server-side and route requests through there. Although it sounds like the whole source - including backend - just got straight up leaked here? So I guess the root issue is checking the secrets into VCS.",
                "score": 3,
                "replies": [
                  {
                    "author": "haroldjaap",
                    "body": "It depends on the secrets that were leaked. If they have root (or any modify) access to some resource, never include them into git. If they're readonly such as Google maps, yeah you can fetch them from a backend, but then if you want them you just perform some dynamic code injection or decompile and recompile the app with logging to get them. If you tunnel all traffic to those servers like Google maps via your own server with user authentication between the client and your server, only using the gms apikey serverside, the you're getting somewhere. But it's still abusable as a malicious hacker could just use that route instead to access gms on your key, but now you're able to block that specific user if you detect malicious usage. Hence you need proper logging and monitoring etc. It's a tough thing. Iirc you can pin your Google maps apikey to a specific app (via bundle id and app signature), not sure how it exactly works but I presume it uses Google Play integrity apis to ensure the request comes from the app, that it runs on a legit device that is not rooted. And that api is not easily spoofed by dynamic code injection (as far as I know there's no known exploit yet, note, regular in app root checkers are fairly easily circumvented with frida).",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "dkimot",
                "body": "this api key isn’t in the app, it’s in build scripts. maybe read the article next time?",
                "score": -4,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "thethirdmancane",
        "body": "This is simple, good, fast and cheap you cannot have all three.",
        "score": 2,
        "replies": []
      },
      {
        "author": "tubbo",
        "body": "hilarious",
        "score": 2,
        "replies": [
          {
            "author": "professorhummingbird",
            "body": "Right? I still can’t believe it",
            "score": 1,
            "replies": [
              {
                "author": "tubbo",
                "body": "i watched the coffeezilla video and laughed my ass off when people discovered it was just a bunch of playwright scripts linked to ChatGPT. so basically the development process was:\n\n1. record a bunch of playwright scripts in the browser\n2. make an android app that listens to voice commands and executes those scripts with some really specific parameters i'm sure\n3. get teenage engineering to design the enclosure\n4. ???\n5. profit\n\nstep #2 could have been done by either low-cost freelance developers or possibly (as alluded to in other comments) generated by ChatGPT itself. the whole thing is just amazing to watch.\n\np.s. i feel for those who bought this thing, it's really a waste of money and i'm heartbroken that teenage engineering has anything to do with it...",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "pat_trick",
        "body": "Gotta go fast, don't have time to think about security, ship that product.",
        "score": 2,
        "replies": []
      },
      {
        "author": "ClubAquaBackDeck",
        "body": "Because they are and have always been scam artists.",
        "score": 2,
        "replies": []
      },
      {
        "author": "KyleG",
        "body": "I'm using a language a lot lately where all code is stored in a database, and the DB is append-only. My biggest concern with the language currently is this very thing. Because once you hard-code that key, it's there *forever*. There's no removing it.",
        "score": 1,
        "replies": [
          {
            "author": "cecilkorik",
            "body": "There's nothing wrong with that once you rotate your keys. Get into the habit of rotating your keys. An expired/revoked key is worthless to anybody, forever. Only the latest/current key is valid, and if somebody does get it, it will soon be invalid too.\n\nIf somebody has permanent ongoing access to your append-only database and is monitoring your keys as they renew, your ancient-history keys also being available are among the least of your worries.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "boxingdog",
        "body": "imo elevenlabs should remove the api keys",
        "score": 1,
        "replies": []
      },
      {
        "author": "i_am_at_work123",
        "body": "Just when I thought this couldn't get any more ridiculous!",
        "score": 1,
        "replies": []
      },
      {
        "author": "prateeksaraswat",
        "body": "Baby’s first encryption key. Hyundai also did it I think. Or they used encryption keys from tutorials.",
        "score": 1,
        "replies": []
      },
      {
        "author": "seanprefect",
        "body": "my sweet summer child, I'm an infosec architect for fortune 50 companies and the things I've seen, such wonders such horrors.",
        "score": 1,
        "replies": []
      },
      {
        "author": "OstrichOutrageous459",
        "body": "bruh , i mean how R1 still manages to disappoint despite everyone having 0 expectations ??",
        "score": 1,
        "replies": []
      },
      {
        "author": "OptimisticRecursion",
        "body": "If I adequately slapped my forehead for how stupid this is, I'd be dead now.\n\nEdit: if they simply asked their own LLM, it would tell them it's a bad idea...! 🤣",
        "score": 1,
        "replies": []
      },
      {
        "author": "holyknight00",
        "body": "No surprise, it was just a quick cash-grab from people already known for creating crypto scams. It's the physical equivalent of a NFT cash-grab.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Angulaaaaargh",
        "body": "FYI, some of the ad mins of r/de were covid deniers.",
        "score": 1,
        "replies": []
      },
      {
        "author": "VexisArcanum",
        "body": "MKBHD was right after all",
        "score": 1,
        "replies": []
      },
      {
        "author": "ericmoon",
        "body": "as if in-house engineers have the slightest fucking clue what they’re doing in j random startup",
        "score": 0,
        "replies": []
      }
    ]
  },
  {
    "title": "Intel Spots A 3888.9% Performance Improvement In The Linux Kernel From One Line Of Code",
    "body": "",
    "score": 982,
    "url": "",
    "created_utc": 1731151311.0,
    "author": "Akkeri",
    "permalink": "/r/programming/comments/1gn80h2/intel_spots_a_38889_performance_improvement_in/",
    "comments": [
      {
        "author": "seba07",
        "body": "Have they removed a sleep?",
        "score": 460,
        "replies": [
          {
            "author": "hannson",
            "body": "Sort of, they brought the free coffee back.",
            "score": 270,
            "replies": [
              {
                "author": "ActurusMajoris",
                "body": "Error 418.",
                "score": 36,
                "replies": []
              },
              {
                "author": "chicknfly",
                "body": "I heard they were sourcing their coffee from Peixoto coffee out in Chandler. If that’s true, I would probably be at work for 16hrs per day in a constant state of delighted hyperfocus.\n\nOr in the break room constantly overly caffeinated.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "poop-machine",
            "body": "    sleep(500); // simulate connection latency, remove before release",
            "score": 58,
            "replies": [
              {
                "author": "Deranged40",
                "body": "I once heard a story about \"Efficiency loops\" - it's where you just add random sleeps/for loops for no reason but to take up time. \n\nLater, when you're tasked with increasing the efficiency of the function, just go reduce the sleep amount or the loop count by a few and report your new benchmarks to the manager.",
                "score": 28,
                "replies": [
                  {
                    "author": "giantsparklerobot",
                    "body": "The best implementations of efficiency loops do some meaningless work like multiple useless sorts or factoring a random number. That way when profiling the code it looks like it's doing something, when you \"fix\" the code you can show it doing less \"work\". Removing some obfuscated code also makes more a nicer looking patch when someone reviews it.\n\nSource: I have definitely used efficiency loops with overbearing managers making you justify every minute of your time.",
                    "score": 26,
                    "replies": [
                      {
                        "author": "GimmickNG",
                        "body": "How in the hell would efficiency loops ever pass code review.\n\nAt some point, you and a co conspirator would need to sandbag, and that would require pretty dire conditions.",
                        "score": 14,
                        "replies": [
                          {
                            "author": "giantsparklerobot",
                            "body": "Code reviews 99% of the time are \"looks good to me\" or at best \"compiles/interprets without additional errors\".\n\nEfficiency loops are a defense mechanism against micromanaging non-technical managers. They want constant \"lines goes up\" metrics while never giving any resources to important foundational parts to the code. You can spend your time doing actual important work in the code base and knock a loop off an efficiency loop to make a line go up in a report.\n\nJust like this supposed \"improvement\" in the Linux kernel an efficiency loop doesn't actually trash performance. It just uses enough memory or cycles to be able to selectively instrument. When it improves it looks like a big change when in reality it was only a fraction of a percent of wall clock time or some fraction of a kilobyte of RAM saved.\n\nThere's untold numbers of software projects where management simply does not understand the actual problem space of the code. They also have misaligned incentives for building functioning reliable code.",
                            "score": 17,
                            "replies": []
                          },
                          {
                            "author": "reshef",
                            "body": "I’ve come across these left behind by laid off people and I can understand how it happened for sure: if your only reviews come from within the team your bros a) trust you b) do not give a fuck",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "louiswins",
                    "body": "[The Speed-up Loop](https://thedailywtf.com/articles/The-Speedup-Loop) (Daily WTF)",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "MaybeTheDoctor",
                    "body": "My manager did that in the 80s but for memory - he would pad all data structures with extra 100-200 bytes so it was easy to do memory optimization later",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Shendare",
            "body": "From my non-expert skimming of the content:\n\nThey adjusted memory allocation page alignment to avoid thrashing the alignment code when software allocates lots of page blocks that don't line up each consecutive allocation on page boundaries.\n\nmmap() had been coded to page-align any memory allocations that are at least one full page in size (4kb?).\n\nThis was causing problems for cases where a large number of such allocations were being made, but each allocation itself was not an exact multiple of pages in size.\n\nThat caused the end memory address of each allocation to be non-aligned and thus forcing a re-mapping of each following allocation so that -it- could be page-aligned.\n\nThe fix was to only page-align if the memory being allocated was itself sized to an exact multiple of pages.\n\nThis still doesn't sound perfect, as what it's really doing is making the -next- allocation more performant rather than the current one, when the current one isn't a multiple of 4kb in size.\n\nBut it does solve the problem of tons of remappings having to be performed in a small time period when software allocates tons of larger-than-a-page but not multiple-of-page sized memory blocks.",
            "score": 11,
            "replies": []
          },
          {
            "author": "golgol12",
            "body": "Judging from the article, I think they just changed a default to used aligned memory to allocate a memory map.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "RevolutionaryRush717",
        "body": "Coincidentally, 3889 is also the number of cookies the site hosting the \"article\" wants to set.\n\nThe \"article\" seems to be a transcript of a conversation between a newly hired test lab assistant and someone from sales, done by the salesperson.\n\nIt's safe to assume that nobody's Linux machine will run noticeably faster due to the commit.",
        "score": 985,
        "replies": [
          {
            "author": "13steinj",
            "body": "I can imagine some enterprise workloads that specifically make use of THP getting better, not really comsumer workloads though.\n\nBut it seems like this is some strange one up game for PR with Linus having found some 2.6% improvement on the same benchmark recently.",
            "score": 86,
            "replies": []
          },
          {
            "author": "bzbub2",
            "body": "i see 5 blocked from ublock and it looks like its from social buttons and google analytics. its not bad. phoronix makes news out of basic goings on in dev. sometimes its pretty silly but who cares? its all pretty positive",
            "score": 39,
            "replies": [
              {
                "author": "TryingT0Wr1t3",
                "body": "I still haven't got used to Michael's new photo. Was used to the old one. I really like Phoronix, it has survived from an era I remember having more blogs/news sites for Linux that all slowly died.",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "GreatMacAndCheese",
            "body": "My favorite bit:\n\n&gt; The patch message confirms it will fix some prior performance regressions and deliver some major uplift in specialized cases. \n\nSo.. they introduced code that inadvertently slows things down considerably, and are now introducing a fix for those slowdowns and some other performance increases in specific cases? [*insert_stick_into_bicycle_wheel_spokes.jpg*](https://i.redd.it/vm0e90yrjsh81.jpg)",
            "score": 33,
            "replies": [
              {
                "author": "Zaphoidx",
                "body": "Developers aren’t perfect, testing isn’t perfect; there will always be bugs (oftentimes regressions).\n\nThe next best thing after prevention is correction, which they’re doing here. So much better than leaving the code slow",
                "score": 38,
                "replies": []
              },
              {
                "author": "cdsmith",
                "body": "This is the story of software development.  You make a change, but it causes a regression.  You find and fix that regression.  Sure, you could avoid regressions if you stopped making any changes, I guess...  Maybe we should all use the Linux kernel from 1995.",
                "score": 17,
                "replies": []
              }
            ]
          },
          {
            "author": "lllama",
            "body": "Imagine doing original reporting on a niche topic for most of your life and then something thinks they're cute and add quotes around article 😙",
            "score": 2,
            "replies": [
              {
                "author": "BujuArena",
                "body": "Seriously, the disrespect for Michael is crazy.  This guy has been pumping out 6 to 8 articles per day for 20 years mostly on topics nobody else is covering, many of which are extremely interesting.  Sure, some don't hit, but I've found at least 1 per day on average is fascinating and couldn't be found anywhere else.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "LiftingRecipient420",
            "body": "Phoronix is well known to be blog spam",
            "score": -14,
            "replies": [
              {
                "author": "Zaphoidx",
                "body": "Phoronix brings to light a lot of kernel work that would otherwise go missed to the average interested person not following the mailing lists 24/7.\n\nHardly blog spam",
                "score": 26,
                "replies": [
                  {
                    "author": "LiftingRecipient420",
                    "body": "Phoronix has been banned from /r/Linux for a decade because it is blog spam.",
                    "score": 0,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Kaon_Particle",
            "body": "You can invent whatever % performance improvement you want just by narrowing the scope of what you're measuring.  Easy to say your 1 line of code is a massive improvement if you're only measuring 10 lines of code.",
            "score": 0,
            "replies": []
          }
        ]
      },
      {
        "author": "GayMakeAndModel",
        "body": "They turn branch prediction back on? lol let me read it\n\n\nEdit: it was a memory alignment issue, it seems",
        "score": 559,
        "replies": [
          {
            "author": "henker92",
            "body": "Which they solved by adding a branch. Full circle",
            "score": 245,
            "replies": [
              {
                "author": "aksdb",
                "body": "I could have predicted that.",
                "score": 57,
                "replies": [
                  {
                    "author": "gimpwiz",
                    "body": "You're going out on a limb, there.",
                    "score": 7,
                    "replies": [
                      {
                        "author": "idontchooseanid",
                        "body": "Let's not jump into conclusions this early.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "MaleficentFig7578",
            "body": "It adjusts a heuristic for allocation of transparent hugepages, making them more likely to succeed and improving one benchmark that must be TLB-heavy by 40 times",
            "score": 48,
            "replies": [
              {
                "author": "DummyDDD",
                "body": "Actually, the new heuristic is less likely to succeed. Previously, transparent hugepages would be triggered for any allocation at or over 2 mb (on x86), now, it's triggered for allocations that are a multiple of 2 mb. I guess the third generation xeon phi processors (which are the one with the massive improvement) have a tiny tlb for 2 mb pages, where transparent hugepages is a bad idea. It could also be an issue with low associativity in the caches, which means implicitly aligning all of the allocations to 2 mb might cause more cache evictions (which was the reason for the regression on non xeon phiprocessors).",
                "score": 12,
                "replies": [
                  {
                    "author": "MaleficentFig7578",
                    "body": "They say the issue is that multiple allocations can't be coalesced because each one is individually rounded to a THP boundary. So if you keep allocating 2.5MB each one gets 1.5MB padding after, the first 2MB is a THP and the other 0.5MB is left over. But now if you keep allocating 2.5MB they can be placed next to each other so 4 of them could make 5 huge pages if you're lucky.",
                    "score": 6,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "ShadowGeist91",
            "body": "Commenting just based on the title before reading the actual article is like the equivalent of commenting \"First\" on YouTube videos.",
            "score": 28,
            "replies": [
              {
                "author": "GayMakeAndModel",
                "body": "I can’t believe that comment got upvoted so much. I mean, I’ll take it…",
                "score": 2,
                "replies": []
              },
              {
                "author": "shevy-java",
                "body": "I always post \"First\" on youtube videos!\n\nAfter all I need to let everyone else know that I was faster than they were, those slow snail-people.\n\n(I am not serious. I actually don't use any Google commenting. One day I'll also stop using reddit - right now I am hanging in via old.reddit, but the moment they remove old.reddit is the moment I am also permanently gone here. Also the censorship got so insane on reddit, one can no longer have any discussion that includes \"controversial\" content...)",
                "score": 3,
                "replies": [
                  {
                    "author": "ShadowGeist91",
                    "body": "&gt; One day I'll also stop using reddit - right now I am hanging in via old.reddit, but the moment they remove old.reddit is the moment I am also permanently gone here. \n\nBe sure to have an activity in place to substitute all the time you'd be investing on Reddit if that happens. I'm currently doing the same with Twitter after the US election stuff (not american, but I follow a lot of english-speaking users, and I get sucked into that vortex via proxy), and it's significantly harder when you don't have anything to do to fill that time.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Matthew94",
                "body": "lamo THIS 🤣🤣🤣",
                "score": -9,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Sopel97",
        "body": "from https://elixir.bootlin.com/linux/v6.11/source/arch/alpha/include/asm/pgtable.h#L32\n\n    /* PMD_SHIFT determines the size of the area a second-level page table can map */\n    #define PMD_SHIFT\t(PAGE_SHIFT + (PAGE_SHIFT-3))\n    #define PMD_SIZE\t(1UL &lt;&lt; PMD_SHIFT)\n    #define PMD_MASK\t(~(PMD_SIZE-1))\n\nso if my math is correct `PMD_SIZE == 1UL &lt;&lt; (12 + 9) == 2MiB`. That's a pretty rigid requirement for this optimization to kick in. How does it fare in practice? Is there a way to benefit from this from user level code (e.g. force specific allocation size)?",
        "score": 45,
        "replies": [
          {
            "author": "YumiYumiYumi",
            "body": "Your URL has \"arch/alpha\" in it and I'm pretty sure Intel isn't optimising for Alpha, so doubt that's the right definition.\n\nBut I believe huge pages are 2MB on x86-64, so it might be the same anyway (personally have no clue).\n\nMy *guess* is that this patch improves perf for small memory allocations, and when you have transparent hugepages enabled.",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "_SteerPike_",
        "body": "So my laptop is going to be 39 times faster from now on? Great news.",
        "score": 97,
        "replies": [
          {
            "author": "q1a2z3x4s5w6",
            "body": "Not quite, it's more like a 3888.9% speed increase in something that took 0.0001 seconds to run and makes up less than 1% of what currently makes your PC run. So maybe not much lol",
            "score": 277,
            "replies": [
              {
                "author": "[deleted]",
                "body": "Damn you, Amdahl!",
                "score": 88,
                "replies": [
                  {
                    "author": "Bloedbibel",
                    "body": "We should really repeal this law",
                    "score": 35,
                    "replies": []
                  },
                  {
                    "author": "jbiserkov",
                    "body": "https://en.wikipedia.org/wiki/Amdahl%27s_law",
                    "score": 20,
                    "replies": []
                  }
                ]
              },
              {
                "author": "alex-weej",
                "body": "The fact that such headlines choose such an inefficient choice of facts to present is so frustrating. They know they are lying by omission and people just lap it up.",
                "score": 20,
                "replies": [
                  {
                    "author": "13steinj",
                    "body": "Big number more clicks. Need to have a The Onion-like satirical tech outlet; \"User finds infinite performance improvement by running the code in his head and writing out the output state themselves.\"",
                    "score": 10,
                    "replies": []
                  },
                  {
                    "author": "polacy_do_pracy",
                    "body": "i don't know why but I didn't read the headline as a \"general\" improvement",
                    "score": 3,
                    "replies": [
                      {
                        "author": "alex-weej",
                        "body": "Probably because you're used to this kind of BS.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "brimston3-",
                "body": "I don't even know how they are quantifing it. Anon page alignment is going to speed up memory accesses so it'll add up pretty quick, but there's no way you can measure it as 38x.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "C_Madison",
            "body": "If all it does is this one thing? Yeah. Kind of a weird use case, but it's your machine.",
            "score": 25,
            "replies": []
          },
          {
            "author": "mjbauer95",
            "body": "40 if you round up",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "granadesnhorseshoes",
        "body": "&gt;However this change has been shown to regress some workloads significantly. [1] reports regressions in various spec benchmarks, with up to 600% slowdown of the cactusBSSN benchmark on some platforms.\n\n\ndevil's in the details.",
        "score": 127,
        "replies": [
          {
            "author": "censored_username",
            "body": "&gt;That mmap patch merged last week affects just one line of code. The cited memory management patch introducing regressions into the mainline Linux kernel have been upstream since December of 2023. \n\nNo, that was a previous patch. This patch fixes that issue, which is part of why it gets such good numbers.",
            "score": 84,
            "replies": [
              {
                "author": "granadesnhorseshoes",
                "body": "you are right, thanks for the clarification.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "digital_cucumber",
            "body": "Yeah, it's just a crappily written article, the new patch didn't introduce (known) performance regressions, only fixed the already existing ones.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "SaltyInternetPirate",
        "body": "Countdown to when this performance bump materializes into a security exploit.",
        "score": 28,
        "replies": []
      },
      {
        "author": "romulof",
        "body": "Line changed: `yum install amd-cpu`",
        "score": 140,
        "replies": [
          {
            "author": "Repulsive_Branch_458",
            "body": "lol",
            "score": 1,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": -37,
            "replies": [
              {
                "author": "chazzeromus",
                "body": "you wouldn’t download a cpu, would ya?",
                "score": 11,
                "replies": [
                  {
                    "author": "Mental_Lawfulness_10",
                    "body": "Hehe, I was referring to the article \"that increased the course speed\"not the code line.",
                    "score": 0,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Stilgar314",
                "body": "whoosh!",
                "score": 17,
                "replies": [
                  {
                    "author": "Gblize",
                    "body": "Sure, but this is not necessarily r/ProgrammerHumor, yet",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "involution",
        "body": "this guy's article headlines are so click bait",
        "score": 18,
        "replies": []
      },
      {
        "author": "rmyworld",
        "body": "3888.9% improvement in something no one will ever notice",
        "score": 11,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "40x improvement in code the kernel spends 1% of its time in is only a 1% improvement. It’s only more than that if your accounting is broken. \n\nWhich it all too often is. I’ve seen 10x overall from removing half the code from a bottleneck, and 20% from removing half the calls in something the profiler claimed was 10% of overall time. \n\nI kinda think we need to go past flame charts into something else. These days the lot as much as their predecessors. \n\nMaybe someday one of the benefits of horizontal scaling in chips instead of vertical is that we can simulate the entire CPU and get more accurate overall cost analysis from each line of code. Including cache coherence overhead",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "anythingMuchShorter",
        "body": "It’s a very misleading wording. If one of the spark plug wires in your car has some resistance and loses 0.01% of the voltage through the wire and I clean it and now it loses 0.001% of the voltage, the waste is 10 times lower, so I’ve made that cable 10 times more efficient. But because it wasn’t actually wasting much and it’s just one component, you’d be very mistaken to think I made your car 10 times as efficient and if you were getting 30 mpg before you’ll now get 300 mpg.",
        "score": 5,
        "replies": [
          {
            "author": "TheJazzR",
            "body": "I get that you were looking to help common folk understand this with a car analogy. But I think you didn't help much.",
            "score": 2,
            "replies": [
              {
                "author": "Flat_Course3948",
                "body": "Worked for me. ",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Hambeggar",
        "body": "The electric grid thanks you.",
        "score": 9,
        "replies": []
      },
      {
        "author": "zootayman",
        "body": "line in a commonly used library ?\n\n\"\"However this change has been shown to regress some workloads significantly.\"\"\n\nso not a general improvement",
        "score": 3,
        "replies": [
          {
            "author": "PhysicalMammoth5466",
            "body": "Not with that attitude",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "4024-6775-9536",
        "body": "I once broke a code by forgetting a ;\n\nThen fixed it with a performance improvement of ∞% with a single character",
        "score": 3,
        "replies": []
      },
      {
        "author": "moreVCAs",
        "body": "Funny example demonstrating both why microbenchmarks are super useful and how they are almost always a lousy proxy for whole-system performance.",
        "score": 2,
        "replies": []
      },
      {
        "author": "UpUpDownQuarks",
        "body": "As a non-kernel programmer: Is this the result of Linus' kernel patch from a few days ago?\n\n[Reddit](https://www.reddit.com/r/programming/comments/1gh1vlq/linus_torvalds_lands_a_26_performance_improvement/)  and [Linked Source of the thread](https://www.phoronix.com/news/Linus-2.6p-Faster-Scale-Patch)",
        "score": 5,
        "replies": [
          {
            "author": "Ok-Bit8726",
            "body": "He gets a lot of shit for his brashness, but that's honestly epic. He still understands how everything works.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "billie_parker",
        "body": "Lmao I got down voted to hell a couple of weeks ago for saying linus' 2% improvement was insignificant",
        "score": 2,
        "replies": []
      },
      {
        "author": "Eternal_ink",
        "body": "&gt; The benchmark seems to create many mappings of 4632kB, which would have merged to a large THP-backed area\n\nCan anyone explain what's the significance of the number 4632 here? Or simply why it's exactly 4632kb.",
        "score": 1,
        "replies": []
      },
      {
        "author": "ZxOxRxO",
        "body": "WTF !",
        "score": 1,
        "replies": []
      },
      {
        "author": "skatopher",
        "body": "No one who works at Intel was involved.  This is a weird title",
        "score": -26,
        "replies": [
          {
            "author": "nitrohigito",
            "body": "Given that it was an Intel produced and maintained automated test bot that caught this, and that in the linked email thread it's a person from Intel bringing up this catch, and that in the CC there are several other people from Intel, I do think people who work at Intel were involved.",
            "score": 71,
            "replies": []
          },
          {
            "author": "amroamroamro",
            "body": "technically it's correct. It says:\n\n&gt; Intel **spots** 4000% performance improvement in kernel from 1 line of code\n\nand not:\n\n&gt; Intel **made** 4000% performance improvement in kernel with 1 line of code",
            "score": 15,
            "replies": []
          },
          {
            "author": "c4chokes",
            "body": "If they could find it themselves, they would be beating Apple silicon 🤣",
            "score": -1,
            "replies": []
          }
        ]
      },
      {
        "author": "insideout_waffle",
        "body": "Now do Windows next",
        "score": 0,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Well ok when you get such an improvement maybe the specific was shit in the first place and you just removed the shit",
        "score": -17,
        "replies": []
      }
    ]
  },
  {
    "title": "Judge dismisses majority of GitHub Copilot copyright claims",
    "body": "",
    "score": 966,
    "url": "",
    "created_utc": 1724838183.0,
    "author": "stronghup",
    "permalink": "/r/programming/comments/1f360xd/judge_dismisses_majority_of_github_copilot/",
    "comments": [
      {
        "author": "umtala",
        "body": "Apparently nobody read the article.\n\n&gt; The court’s dismissal primarily focused on the accusation that GitHub Copilot violates the Digital Millennium Copyright Act (DMCA) by suggesting code without proper attribution. An amended version of the complaint had taken issue with GitHub’s duplication detection filter, which allows users to “detect and suppress” Copilot suggestions matching public code on GitHub.\n\n&gt; The developers argued that turning off this filter would “receive identical code” and cited a study showing how AI models can “memorise” and reproduce parts of their training data, potentially including copyrighted code.\n\n&gt; However, Judge Tigar found these arguments unconvincing. He determined that the code allegedly copied by GitHub was not sufficiently similar to the developers’ original work. The judge also noted that the cited study itself mentions that GitHub Copilot “rarely emits memorised code in benign situations.”\n\nThey claimed that Microsoft was violating DMCA. They didn't provide evidence of this claim, and in fact their evidence showed the opposite of what they were trying to prove. Therefore those claims were dismissed. The copyright infringement claims were not dismissed.",
        "score": 407,
        "replies": [
          {
            "author": "not_a_novel_account",
            "body": "There is no outstanding copyright claim, all the 1202(b) claims which would be \"copyright claims\" were dismissed.\n\nWhat's left is a breach of contract claim for the open source licenses, that the AI models would be legal if they followed the license conditions. For such conditions to be nominally applicable it would first need to be found that copyright would otherwise be violated. Judge Tigar says as much in the June 24 order:\n\n&gt; While OpenAI is likely correct that the attribution and notice terms in the Doe Licenses at issue are conditions, this does not impede Plaintiffs’ ability to bring a breach of contract claim.\n&gt;\n&gt; ...\n&gt; \n&gt; Accordingly, the Court declines to read in a requirement that a plaintiff must bring suit for copyright infringement in the event of a breach of condition.\n\nPlantiffs are allowed to bring the claim, but given they were totally unable to sustain their 1202(b) claims there's no likely path to victory here.\n\nAlso these articles are always trash, [read the actual ruling](https://www.law360.com/articles/1855576/attachments/1)",
            "score": 11,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 128,
            "replies": [
              {
                "author": "RyanCacophony",
                "body": "love the implication that the patrons of Wendys are such ardent academics lol",
                "score": 40,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 18,
                    "replies": [
                      {
                        "author": "RyanCacophony",
                        "body": "Oh I totally get the reference, just found it extra funny being used in this context",
                        "score": 12,
                        "replies": []
                      },
                      {
                        "author": "coderman93",
                        "body": "FYI, his is a quote from The Office.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Kinglink",
                    "body": "I'm glad it's not just me... Meme aside, Do people think Wendy's is the library?",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Full-Spectral",
                        "body": "The burgers are better at Wendy's.",
                        "score": 5,
                        "replies": [
                          {
                            "author": "Kinglink",
                            "body": "Barely.  Oh wait this isn't a library, this is a Burger King!",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "mozilla666fox",
                "body": "To be fair, you get a coloring book and crayons at Wendy's.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "Kinglink",
            "body": "&gt;However, Judge Tigar found these arguments unconvincing. He determined that the code allegedly copied by GitHub was not sufficiently similar to the developers’ original work. The judge also noted that the cited study itself mentions that GitHub Copilot “rarely emits memorised code in benign situations.”\n\nJudge basically says that it's not memorizing code, which kind of leads to it isn't just copying code. (Which is absolutely correct, so at least the judge seems to understand what AIs are doing.) \n\nCopyright infringement is probably going to get settled.  I don't see Microsoft trying to go \"we trained the AI on stuff that has impermissible copyrights to do so\" but maybe they're just mad enough to try that.",
            "score": 15,
            "replies": [
              {
                "author": "hardolaf",
                "body": "It kind of is \"memorizing\" the code though. It's just that because of the trimming process, it becomes less precise and thus less likely to regurgitate the training data.",
                "score": 22,
                "replies": [
                  {
                    "author": "Kinglink",
                    "body": "I like the word \"training\" because that's kind of what it's doing.    In a lot of ways it's like a training a person, because if you take a junior and show him the first function he has ever seen.. he can write that function.  He probably can't write another function, maybe he's able to make obvious changes (strings for instance) but even then, I remember students who thought that the strings were immutable otherwise the program doesn't work. \n\nThen you show them more and more programs and they'll start realizing that each of the things are pieces that can be combined in other ways. \n\nLLMs aren't (that) inventive, or creative (depends what you call their hallucinations, but those are kind of crap), but go down the same path.  \n\nThe difference between a human and a LLM is you can teach the human the rules, but to teach an LLM the rules kind of violates the concepts of AI, because the idea is your focused on training data, to generate the internal rule set, rather than specifying the hard coded rules. \n\nThat being said, with any suitable training size it should be unable to remember any specific code.  Though when you ask for a specific well known piece of code Q_rsqrt, don't be shocked when it is able to recreate it.  Again, most people who really focus on it, probably can too, or the one piece they forget(the specific numbers), is what computers are actually good at memorizing.",
                    "score": 7,
                    "replies": [
                      {
                        "author": "Ur-Best-Friend",
                        "body": "I never bought the argument that training AI is in any significant way different from a human learning from other humans. If you have an artist you like and you pick up some of their techniques through looking at/listening to their work, are you infringing on their copyrights? Well then every artist that has ever existed is a dirty thief, because no human has ever learned any complicated skill without learning from others that came before them.   \n  \nAs long as the output is significantly different, that's not copyright infringment in my book, and that goes for humans and AI both. People throw a huge fit when an AI song has a chord progression that's superficially similar to a human musician's song, and ignore far more blatantly similar tracks made by other human musicians.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "PaintItPurple",
                "body": "\"Rarely emits memorized code in benign situation\" is basically the opposite of \"is not memorizing code.\" It means that the software _is_ memorizing code, but is programmed to avoid emitting that code verbatim under normal circumstances.",
                "score": 5,
                "replies": [
                  {
                    "author": "Kinglink",
                    "body": "No it's not memorizing code.  \n\nIf you think a LLM has every single code it's used to train on in it somewhere, that would be literally impossible I used the comparison of a 16 gig model that's trained on 4 billion of pictures.  If a each picture was in there, it'd be 4 bytes of data.  It's just physically impossible.  The same is true for code models.  They don't have every piece of code sitting around in it's model. \n\nWhat is going on is there's weights, and if you have certain weights just right it might recreate the exact input that it trained on.  But it's rather hard to do that reliably with out heavily influencing the data set.",
                    "score": 11,
                    "replies": []
                  },
                  {
                    "author": "meltbox",
                    "body": "This. Rarely emits copyrighted material would be like saying Napster is fine if the majority of content was legal if you didn’t add “pirated” to the end of the search.\n\nStupid ruling on this basis alone.",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "Ur-Best-Friend",
                    "body": "Even if that were the case, which it's not, that actually wouldn't be copyright infringment. There are plenty of provisions protecting transformative works. I'm not sure there's a single song by The Prodigy that doesn't heavily employ the uses of samples, sometimes from several dozens of songs in a single one of their tracks. If that was copyright infringment they'd long since have been sued into the ground. Same with collage art etc.\n\nIf the end result is significantly different from what it was based on, that's not copyright infringment.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "PaintItPurple",
                        "body": "I can't speak to The Prodigy specifically, but big artists who don't get sued usually will get permission to use samples. Otherwise they can and do get sued. Heck, Robin Thicke's Blurred Lines didn't even use a direct sample and actually re-did the Marvin Gaye song they borrowed from, and they still got sued and had to pay out a bunch of money. Making the leap from \"derivative\" to \"transformative\" is not as trivial as you're making it out to be. In fact, artists who are sued this way almost never even try to argue that the use is transformative, and instead will often try to argue that the use of the copyrighted work is too minimal to matter.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "pixel_of_moral_decay",
            "body": "Which makes sense.\n\nIf you compare code you’ll find people regularly the same thing since we’re solving the same problems with the same tools, and all learned the same patterns.\n\nThe algorithm was trained on data, which is not subject to copyright, presentation is.  As copyright exists today they don’t need the authors consent for that. It’s no different than you reading a book than speaking about what you read or applying it to your next project. You don’t need permission from the author to apply the knowledge only if you quote them or directly reuse their work.\n\nYou can read this comment and write a paper influenced by it, that’s not violating any copyright.  Only if you quote it beyond fair use doctrine.\n\nMost of these arguments against AI on the grounds of copyright will lose. That’s fundamentally not how copyright was intended to work and not how it’s written.\n\nJust because you read a book on programming doesn’t mean anything you write afterwords using those techniques/strategies/design patterns violated the authors copyright. That’s not how copyright works.  In fact it actually protects derivative works as well as influenced works.",
            "score": 3,
            "replies": []
          },
          {
            "author": "lookmeat",
            "body": "And honestly it's the wrong way to fight this. I am surprised that there hasn't been better organization in defining the rights of this. I guess the IP companies with a lot of lawyers already realized and just did contracts behind the scenes.\n\nWhat AI is doing is very much on the space of \"fair use\", because they don't generate a copy of the art, but a program that contains inspiration of the art and *has the potential to create a copy of it*. You know what else has a potential to make a copy? Photographs, but you can't sue camera makers for copyright infringement! Hell you can't even sue the photographer, only whomever publishes a picture containing your IP (and even then there's a lot of stipulations of fair use, a picture containing your work isn't a copyright infringment, but a photocopy of it does).\n\nThat said, copyright lets you forbid use of work for certain things without a license. Artists can license their work for ML-use separately of other uses. Basically extend the Creative-Commons, GPL and other popular \"free to use, but protecting the artist still\" licenses to not allow the use of the art for ML-training. A separate commercial-ML license could be proposed for those uses.\n\nThat said I don't think that developers worry so much about their code getting copied this way enough to warrant an exodus of github (since that's the only way to be able to put code in a place where you won't be forced to allow its use for ML training) so, honestly, I don't see this mattering enough in the long-run. A few people who don't know enough about coding or ML, but just enough to own code and fear for it being copied will take this far, but I doubt it'll make it through.",
            "score": 4,
            "replies": [
              {
                "author": "jherico",
                "body": "This.  Training an LLM is the *very definition* of transformative.",
                "score": 5,
                "replies": [
                  {
                    "author": "Uristqwerty",
                    "body": "Training may be transformative, but using it to generate new content similar to its training set isn't. If the whole process from scraping to generating were `[A -&gt; B -&gt; C]`, saying the `[A -&gt; B]` subset counts as transformative doesn't necessarily mean that the whole is as well. Especially since `[B -&gt; C]` is specifically judged by the training algorithm based on how well it matches `[B -&gt; A]`.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "lookmeat",
                        "body": "It still works. If I use AI to make a perfect copy of someone else's work *I committed copyright infringement*^1. Take a simple example: I take a photograph of non-public domain painting in a museum. Then I use this photograph to print out copies of the painting and sell them without permission of the copyright holder. Clearly *I* am the one who infringed in it, and arguing that the camera manufacturer made a lot of effort to ensure that the photographs taken were very detailed copies, or the printer whose sole job is to make copies. It's my responsibility to make sure I'm not infringing any IP in how I prompt the AI. As long as the software isn't producing perfect copies, it isn't different than asking a really talented kid to make you a picture perfectly in the style of another artist. \n\nThe thing is that the AI models have their value of knowing how to do multiple styles, and the content used to train them maybe wouldn't have been available for that for free. An artist may choose to put their pictures for public viewing online, but may want money for any commercial use of their artwork. AI isn't the first, you should see how many companies would use memes for commercial purposes, without considering that the art may have a creator who holds the copyright. Here this being larger companies.\n\nIANAL, but artists probably want to get together and sue ML creators who used their art with a non-free commercial use license without paying for the license. It's gonna get ugly, and probably will make it to the SC (unless the ML companies are willing to accept a missing in favor of artists early). You'd have to sell the argument that training an AI that you're going to sell is commercial use, and that they couldn't use another art (as they wouldn't be able to train the AI to do that artist's style otherwise, lessening the value of the model) and therefore they should have been paid. Otherwise, going forward, licenses must consider the use for ML models, prohibiting free use for this purpose.\n\n^1 There's a very interesting philosophical/legal discussion on what if I never had access to the original, never interacted with it, and wasn't influenced here, *but the AI did use it for training*. Without the AI it'd be a clear \"clean room\" implementation and would be fair use, but its it really a clean room if the AI has the knowledge of the original embedded within itself?",
                        "score": 3,
                        "replies": [
                          {
                            "author": "meltbox",
                            "body": "Hard disagree. This doesn’t map cleanly tot he camera metaphor because camera manufacturers give you a tool to reproduce. If you use that tool to ingest copyrighted material you are responsible for that.\n\nThe problem with large AI models is not the model itself but the trained models which are already “sold” to the end user with the copyrighted data ingested. It would be like Sony selling me a camera with whole copyrighted books already on the SD card which IS illegal.",
                            "score": 1,
                            "replies": [
                              {
                                "author": "lookmeat",
                                "body": "&gt; This doesn’t map cleanly tot he camera metaphor because camera manufacturers give you a tool to reproduce. If you use that tool to ingest copyrighted material you are responsible for that. \n\nYou got it right in that it isn't the camera.\n\n&gt; The problem with large AI models is not the model itself but the trained models which are already “sold” to the end user with the copyrighted data ingested.\n\nYou got it wrong in that the copyrighted data is not contained therein. Say that I read a copyrighted book on how to write better, then I write an novels using the rules and guidelines within that book, to the point that there's examples of all rules within the book, though not the contents itself. Someone could, just reading my novel, learn the same writing techniques without reading the original book. Tell me is that plagiarism?\n\nLike I said in my first example, it does open the question of what is a clean room implementaiton. But lets be clear, the ML model does not contain any work on its own. Just enough knowledge that it *could* recreate it. If we are going to say that is a problem, it's going to cause a huge problem with writer groups.\n\nSo rather it's like Sony investigating paintings and pictures all over the world to define a color scheme (think RGB) and then making a camera that uses that. It has content and knowledge that came from analyzing other works. But is it plagiarism?\n\nSo I hope those examples explain to you that the AI doesn't have the knowledge. Otherwise any author who has consumed a copyrighted work and was inspired by it could be liable.\n\nAnd again, it's not like authors do not have any protection or way to defend themselves. They only need to explicitly state they do not give a license for commercial ML use. And they could try to sue retroactively arguing they never gave that right away to the companies, they just assumed. It'll be a complicated lawsuit, and one that will set new precedents (but this tech is a unique situation) but it actually has a shot.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "meltbox",
                                    "body": "Perhaps. I guess I just don’t agree that human and AI interpretation are equivalent. For one thing humans often can claim fair use because we don’t train a human on text to then output text. Humans can train on text, movies, images, emotions, real life experiences etc and then output some combination into a unique text. Human and LLM learning are not analogous and even the creator of neural nets admitted that neural nets shouldn’t have been called that because they don’t really mimic how neurons work.\n\nAI today is also largely single discipline with some glue logic to make them seem to be able to merge models together. Plus some hard logic filters to keep undesired stuff from coming out like say…. black Nazis or copyrighted code with GPL headers.\n\nAlso for example color spaces aren’t based off works but rather human perception, maybe behavioral and neuroscience. While works might be sampled to understand what areas of that perception to prioritize they aren’t actually encoded int the color space in any way.\n\nIt’s like someone else pointed out. Pi contains a copyrighted movie in it but if you need the source material or information as large as the source material (series of pointers) to decode the copyrighted movie from pi then the copyright infringement is not on PI but rather the pointer which decodes it.\n\nJust like a colorspace doesn’t infringe but rather the representation of the copyrighted work in that colorspace.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "meltbox",
                    "body": "By this definition so is zipping up a movie. Look ma, the bits are different now!\n\nCome on…",
                    "score": 1,
                    "replies": [
                      {
                        "author": "jherico",
                        "body": "No, it's not.  Zipping is a lossless bi-direction encoding system.  Training a network is ENTIRELY different.  \n\nYour analogy is like saying that showing a movie to someone and having them be able to recount the plot is the same as pointing a camera at a movie and recording the whole thing.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "jeanbonswaggy",
        "body": "This isn't good news, massive corporations using your code without credit for profit will never be good",
        "score": 666,
        "replies": [
          {
            "author": "was_fired",
            "body": "If you read the article it actually is fairly good news.  \n  \nThe most important claim being made is that Microsoft violated open-source / copy-left licenses.  That claim is going to go to trial so the question of: Can I make a closed source AI model based on GPL code will likely get its day in court.",
            "score": 445,
            "replies": [
              {
                "author": "purleyboy",
                "body": "It is going to be fascinating to see how this plays out. The underlying vectors that form the core model of an LLM do not contain any facsimile of the training data. That's a strong argument for not being a derivative of OSS. If it is deemed to be a derivative then it's potentially going to be unenforceable in the longterm as the number of LLMs continues to grow at such a fast rate (just look at HuggingFace). It's going to be hard difficult, possibly impossible, to 'prove' a piece of code was used in training.",
                "score": 64,
                "replies": [
                  {
                    "author": "simon_o",
                    "body": "&gt; It's going to be hard difficult, possibly impossible, to 'prove' a piece of code was used in training.\n\nThat has never been an obstacle when it's been the big corps suing the little guys.",
                    "score": 56,
                    "replies": [
                      {
                        "author": "purleyboy",
                        "body": "Code copyright laws are a mess. Technically speaking,  all code snippets on StackOverflow fall under CC by SA, meaning everyone here who has ever cut and pasted from StackOverflow should be publishing an attribution for each code snippet. No one does this. It's impractical. CC by SA also has copyleft implications. \nIn fact,  from a commercial sense,  you may be better off telling your developers to use github copilot over using StackOverflow to get snippet type code generated because there are (currently) no legal issues with the generated code. Specifically, there are no copyleft issues.",
                        "score": 27,
                        "replies": [
                          {
                            "author": "hackingdreams",
                            "body": "&gt; Technically speaking, all code snippets on StackOverflow fall under CC by SA, meaning everyone here who has ever cut and pasted from StackOverflow should be publishing an attribution for each code snippet. No one does this. It's impractical.\n\nI've been at companies that *very much* track this, and add it to their open source disclosures. There's a whole industry built around tracking usage of open source code, making sure that license attribution is done correct, and making sure your products aren't in violation.\n\nIn this case, the burden to detect and complain about this copyright infringement lies on StackOverflow, as ultimately it's their copyright being violated by these offenders. StackOverflow apparently doesn't care, as it hasn't sued anyone over it yet. Therefore, this *entirely* fraction of the argument is moot. \n\n(It's the same thing about pirating content online - just because the companies don't care enough to track you down and make you pay, doesn't mean it's not violating their copyright. The big content creators mostly care about the big vendors of this copyrighted data - in this analogy, Microsoft - than the little guys. Just because you didn't get caught doesn't give you the right.)\n\n&gt; In fact, from a commercial sense, you may be better off telling your developers to use github copilot over using StackOverflow to get snippet type code generated because there are (currently) no legal issues with the generated code.\n\nExcept, you know, the very likely possibility that you get sued for copyright infringement right after Microsoft loses this case. The amount of emergency lawyering that would have to be done, the *ridiculous* degree of code auditing, the fucking five alarm panic this would cause at most companies means that this advice is the ***worst fucking advice*** I've literally ever heard. \"Might as well commit copyright infringement, it's not *yet* been settled it's copyright infringement.\" No fucking thanks.",
                            "score": 16,
                            "replies": [
                              {
                                "author": "purleyboy",
                                "body": "I am involved in a lot of M&amp;A and am very familiar with the various OSS scanning tools and the legal implications. First, Github indemnifies paying customers for any law suits,  but I understand if corporations find this unattractive.\n\nSecond, the copyright laws in code are ineffective today. As you mention, StackOverflow doesn't pursue anyone for violating their license. Legally though,  companies should care about code being pasted from StackOverflow just as much,  or possibly more, than code generated from Github Copilot.\n\nI've used Blackduck, Snyk and Mend plenty of times. In over 50 M&amp;As I've been involved in every single company has OSS license violations in their code base (typically lack of attribution). We fix it post acquisition,  but I see enough to know how bad our industry is.\n\nThe reality is that most companies have violations on OSS licenses due to developers adding libraries or cutting and pasting code without any oversight.  Right now the same is happening with GAI. Whether your company allows it or not, guaranteed your developers are using it.",
                                "score": 8,
                                "replies": [
                                  {
                                    "author": "balefrost",
                                    "body": "&gt; As you mention, StackOverflow doesn't pursue anyone for violating their license.\n\nI don't think that's correct. The copyright lies with whoever contributed the code to SO. The original author licensed their contribution to SO as CC BY-SA, and so SO has to distribute it under that license.\n\nThe original author could dual-license their content, for example charging companies to use it commercially, releasing it under a proper open source license, or (in some jurisdictions) releasing it to the public domain.\n\nI think the only person who could pursue such cases would be the original contributor. Most contributors don't care - they intended their work to be used freely.\n\nI agree, though, that it's a legal minefield.\n\n(Incidentally, I couldn't reply to /u/hackingdreams or even to your grandparent comment.)",
                                    "score": 3,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "dysprog",
                                "body": "&gt; I've been at companies that very much track this, and add it to their open source disclosures. There's a whole industry built around tracking usage of open source code, making sure that license attribution is done correct, and making sure your products aren't in violation.\n\nI had a company track me down and beg me to grant an MIT License for a code snippet I posted on stackoverflow.  \n\nApparently the legal department had been looking for me for a few years and somehow found me on Facebook of all places. \n\n(No idea why it took them so long, I use my legal name on SO, which is fairly google-able. There are about 5 people by that name, and it's also my gmail address) \n\nI considered squeezing some dollars out of a corporation for the  principle of it, but decided I'd rather not give payment related information in case it was some absurd scam.",
                                "score": 3,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "KSRandom195",
                            "body": "&gt; Specifically, there are no copyleft issues.\n\nNo copyleft issues so far.",
                            "score": 7,
                            "replies": [
                              {
                                "author": "purleyboy",
                                "body": "Well, the US copyright office ruled last year that you cannot copyright AI generated content,  unless a human has been significantly involved in refining the content. So, at the moment,  technically you cannot copyright any raw code generated by a coding assistant. Which leads to a whole other discussion about what in the future is copywriteable and what is not.",
                                "score": 13,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "kintar1900",
                            "body": "This is the most cogent comment on this thread. Thank you.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Worth_Trust_3825",
                        "body": "Corpos go at each other over code snippets. Check out IBM v Microsoft over public api copyright, and Oracle v Google over java usage in android, where the case hung mostly on google copying an indexof function.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "WaitForItTheMongols",
                    "body": "An LLM is ultimately a really fancy form of lossy data compression. You compress the training data into the vectors, and the elements of the material in the training set will come back out.\n\nAny sufficiently advanced compression algorithm produces a bit stream that is indistinguishable from randomness (that's what it means to compress data to the maximum, so that all the redundant material is gone and what remains is purely the entropy of the data).\n\nBut if I take the latest Avengers movie and compress it, it's still copyright infringement even if there is no facsimile of the movie. The data doesn't become a movie until I play it back, decompressing and rendering the frames. But when you run an LLM, you get the code back too, and it's just as derived from the source material as my compressed movie is.\n\nThis will certainly be interesting.",
                    "score": 172,
                    "replies": [
                      {
                        "author": "Chroiche",
                        "body": "it's not just decompression though, it combines things. Sometimes the result is vastly different to any of the training data, sometimes it's verbatim. The analogy to movie compression doesn't really hold up besides verbatim replication.",
                        "score": 47,
                        "replies": [
                          {
                            "author": "WaitForItTheMongols",
                            "body": "Of course it's a new thing, but the point is that even if it's combining things, they come from the data it's pulling from. It's all derived works. Even if you can't comprehend how the copyrighted content is baked into the model, it's still baked in and still taking the work of others, usually without their permission.",
                            "score": 39,
                            "replies": [
                              {
                                "author": "ZorbaTHut",
                                "body": "The actual definition of \"derived work\" is a lot more restrictive than that, though. US Law says:\n\n&gt; A \"derivative work\" is a work based upon one or more preexisting works, such as a translation, musical arrangement, dramatization, fictionalization, motion picture version, sound recording, art reproduction, abridgment, condensation, or any other form in which a work may be recast, transformed, or adapted. A work consisting of editorial revisions, annotations, elaborations, or other modifications which, as a whole, represent an original work of authorship, is a \"derivative work\".\n\nand these are all very direct derived works that include major elements of the original. It doesn't include things like \"getting inspired by a novel to write your own novel\", nor does it include \"learning from analyzing a novel and using that knowledge to write your own novel\".\n\nIf the compression is lossy enough, it may no longer count as a derived work.",
                                "score": 28,
                                "replies": [
                                  {
                                    "author": "AngryGroceries",
                                    "body": "Also it's been stated elsewhere, but \"combining\" is doing a LOT of legwork here. Technically human learning is just \"combining\" things that come from \"learned data\". And in that sense human output is derivative.\n\nWhile AI models are still nowhere near human levels of learning, there's no tidy solution here because it is something new and cant be reduced to \"this is just fancy winzip\"",
                                    "score": 15,
                                    "replies": []
                                  },
                                  {
                                    "author": "oorza",
                                    "body": "I'm not sure this applies here, I think new case law will be written.\n\nIn the case of a derived work, we're usually talking about things humans create.  AI work can't be copyrighted and doesn't have IP protections currently, so what it outputs doesn't matter, so the question becomes: is the LLM itself a derived work?  Obviously not, but that doesn't mean anything beyond this case law can't apply here.",
                                    "score": 4,
                                    "replies": []
                                  },
                                  {
                                    "author": "Ictogan",
                                    "body": "I'd argue that depending on how much of the original data ends up being stored in the model, the model may be considered to contain a condensation of the original work.",
                                    "score": 2,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "kintar1900",
                                "body": "&gt; Even if you can't comprehend how the copyrighted content is baked into the model, it's still baked in and still taking the work of others\n\nIf you're going down THAT route, then any human producing code is also violating copyright, because we produce software based on learning from previous things we've seen. The AI models do that learning differently, and can't make intuitive leaps or reason about specific problems, but at the fundamental level both humans and LLMs are processing, storing, and recombining past experiences for new output.",
                                "score": 5,
                                "replies": [
                                  {
                                    "author": "lelanthran",
                                    "body": "&gt;  at the fundamental level both humans and LLMs are processing, storing, and recombining past experiences for new output.\n\nLargely irrelevant, because ... scale matters, in law.\n\nHumans aren't reading and absorbing a few billion lines of copyrighted code; the LLM is.\n\nJust like possessing a single joint isn't illegal where I am, but possessing 4000 tons of weed is illegal.\n\nScale matters. The argument that \"using copyright just the way a human does, but scaled up a billion times\" is stupid.",
                                    "score": 8,
                                    "replies": [
                                      {
                                        "author": "accountForStupidQs",
                                        "body": "Scale only matters when a specific threshold is put into legislation. Saying one controversial statement and several million are both equally legal, and killing one person or one thousand are both illegal. Whether something counts as copyright infringement, until a law says otherwise, will not depend on if it's done slowly or quickly, once or one billion times.",
                                        "score": 10,
                                        "replies": [
                                          {
                                            "author": "lelanthran",
                                            "body": "&gt; Scale only matters when a specific threshold is put into legislation.\n\nMy point is that they *put* those thresholds into legislation **because** scale matters. IOW, you've got cause and effect backwards - a legislated threshold is the result of scale mattering.\n\nThis (slurping up the entire worlds corpus of copyrighted text to derive a new product) is something new, so why do you expect the legislation to be in place for this?",
                                            "score": 2,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "sparr",
                            "body": "If you run it 100 times and you get 99 new movies and the exact original movie once, that's [at least] one instance of copyright infringement.",
                            "score": 3,
                            "replies": []
                          },
                          {
                            "author": "oorza",
                            "body": "Decompression in lossy video codecs isn't as simple as you might think, the analogy stands fine I think.  You can add a bunch of processing filters on both sides of video codecs - stuff like noise reduction/addition, color adjustments, etc.\n\nIf I take The Avengers film and add a fansub track, replace parts of the music with a custom score I wrote, and then add a ton of video filters to the (de)compression, it's nowhere near a verbatim replication.  But it'd still be copyright infringement to sell it.\n\nIt's the same thing as an AI: taking an original piece of IP, layering some changesets on top of it, pushing it through a lossy codec, then decoding it again with more filters on top of it.  That describes both an LLM and a bunch of weird pirated anime on the internet, but only the latter is currently illegal.",
                            "score": 9,
                            "replies": [
                              {
                                "author": "Xyzzyzzyzzy",
                                "body": "If something is a derivative work, then you can use the derivative content to point to exactly which works it was derived from. If I write a song that starts out \"is this the real life?/is this just fantasy?/caught in a landslide/no escape from reality\", it's clearly derivative of Bohemian Rhapsody by Queen. You don't need to know anything about me to say that. You just need to show that my lyrics are the same as their lyrics.\n\nIf an LLM produces a derivative output, we should be able to show which prior work it is derived from, right? LLMs can produce indisputably derivative outputs, and when they do, we can show the original works they're derived from, the same as if a person creates a derivative work.\n\nBut - correct me if I'm wrong - you're going a step further and saying that the LLM itself is a derivative work of every item in its training data set, so every output produced by the LLM is derived from the entire training data set. If I have ChatGPT write an SQL snippet to add a new column to my AccountsPayable table, it's derived from all of the SQL in its training corpus. It's also derived from St. Paul's letter to the Ephesians, *Quotations from Chairman Mao*, and \"To a Mouse\" by Robert Burns. (\"Wee, sleeket, cowran, tim'rous beastie/O, what a panic's in thy breastie!\")\n\nThat seems like a dramatic expansion of copyright, and a massive transfer of legal and economic power to existing copyright holders at the expense of all future creative work.\n\nEven if we have different standards for human-written and LLM-produced works, LLMs are ubiquitous. A current copyright holder could claim that they have good reason to believe my work was written by an LLM, it's derivative, it's a violation of their copyright, and they'll sue me unless I pay them $5k to settle the claim. Even if the claim is frivolous, I can only be assured of winning in court if I can prove that my work was written before February 14th, 2019, when GPT-2 was made available to the public.\n\nWe already have patent trolling; now we can have copyright trolling, too. If I have seen further than others, it is by standing upon the shoulders of giants, so the giants are entitled to compensation. It's an RIAA lobbyist's wet dream!",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "a_marklar",
                            "body": "Yes, that is the lossy part",
                            "score": 12,
                            "replies": []
                          },
                          {
                            "author": "quetzalcoatl-pl",
                            "body": "So, if I take Avengers, run it through H265 (compression), add subtitles (combine things), and add meme stickers here and there and also some audio with my comments to the best scenes (even more combining things, my personal products added) - then it is not copyright violation? YAY, hold my beer, I'm opening new business!\n\nedit: oh crap, oorza already wrote that, their comment is better, aaw :)",
                            "score": 5,
                            "replies": []
                          },
                          {
                            "author": "ianitic",
                            "body": "It's more like movie compression with a filter on top. If there wasn't a fine tuning step it would be closer to just the noise from movie compression (using this analogy). The only thing preventing that is the very lightweight fine tuning step.\n\nHeck, one of the use cases of something called an autoencoder is literally compression and the pre-training step is nearly identical to LLMs.",
                            "score": 3,
                            "replies": []
                          },
                          {
                            "author": "Helluiin",
                            "body": "&gt; The analogy to movie compression doesn't really hold up besides verbatim replication.\n\nif you compress a movie and put a filter over it thats also combining things. yet most people would probably call that copyrightinfringement",
                            "score": 1,
                            "replies": []
                          },
                          {
                            "author": "hackingdreams",
                            "body": "&gt; it's not just decompression though, it combines things.\n\nSo? Now it's just incorporating copyrighted data from *multiple sources* instead of one.\n\nThe fact it can generate code that's verbatim to the training data indicates that it is, in fact, a sophisticated compression scheme. You just admitted it.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "accountForStupidQs",
                        "body": "But every vector is mutated by every element of the training set. If you were to overlay the first hour of every movie of the past 50 years, frame by frame, each frame would end up being black or dark near. Does that imply that the black frame is a facsimile of one of the movies? Which one? And if we say only half the movies released were used, how do you prove that Back to the Future was one of the masks, but Jaws wasn't one of the masks?\n\nThe way the training works you're almost performing the opposite operation of what you propose ideal compression is. Where ideal compression leaves only that unique minimum noise that clearly identifies one work from another, the training aims to ignore all uniqueness and encode only those qualities which are common to the whole set of training data",
                        "score": 27,
                        "replies": [
                          {
                            "author": "rebbsitor",
                            "body": "&gt; Which one? \n\nI think under current copyright law the answer is \"all of them\".  Taking a copy of something and incorporating it into another work is basis of a derivative work. \n\nIf the assertion is it's not derivative, then that's also saying that the model can be made without the copyrighted works, which it can't be.\n\nMushing 50 copyrighted things together seems like you have something that's derivative of 50 works.",
                            "score": 19,
                            "replies": [
                              {
                                "author": "kintar1900",
                                "body": "&gt; Taking a copy of something and incorporating it into another work is basis of a derivative work. \n\nYou're still missing the point of the parent comment. For your statement to hold, you must have _recognizable_ copies of the original work taken verbatim from the source. Creating a \"new\" movie by cutting scenes from Jaws and Back to the Future together would be copyright infringement (if we ignore parody law). Parent comment's point is that taking Jaws and Back to the Future and producing movies with the same scene structure, color palette, or character arcs is not copyright infringement, and is a much closer example to the way generative AI works.",
                                "score": 10,
                                "replies": [
                                  {
                                    "author": "rebbsitor",
                                    "body": "&gt; Parent comment's point is that taking Jaws and Back to the Future and producing movies with the same scene structure, color palette, or character arcs is not copyright infringement\n\nThis is a misunderstanding of copyright law. Creating a derivative work without the permission of the copyright holder is itself copyright infringement. The fact that the starting point is a copyrighted work that's being modified/recreated with differences means this is a derivative work and is copyright infringement.\n\nedit: For clarity, making a movie about a shark terrorizing a beach or a kid in a time traveling car wouldn't be copyright infringement as those general ideas aren't copyrightable.  \n\nBut your example, \"taking Jaws and Back to the Future and producing movies with the same scene structure, color palette, or character arcs\" is taking (copying) identifiable elements of those movies.  Your description literally names what's being copied.",
                                    "score": 3,
                                    "replies": [
                                      {
                                        "author": "__loam",
                                        "body": "I think the legal question is whether it's fair use, which is actually more complex than most people assume.",
                                        "score": 3,
                                        "replies": []
                                      },
                                      {
                                        "author": "Xyzzyzzyzzy",
                                        "body": "That's not actually how copyright law works in the US, though. Copyright only protects certain types of creative work from reproduction. It's not a blanket prohibition on all derivative works.\n\nFor example, if you write a cookbook, you hold copyright on the words that you wrote in the cookbook. You do not hold copyright on the recipes themselves. I can't copy-paste the text from your book to my book, but I can write instructions for making your split pea soup in my own words. You have copyright on the text and images, not the process of making the soup.\n\nIf I publish a paper describing a new sorting algorithm with improved performance under certain conditions, I have copyright on the paper and the code in the paper. I do not have copyright on the algorithm itself, because algorithms are not protected by copyright.\n\nThere's a well-understood process for your company to use the algorithm without risking a copyright violation. You give Alice the code for the algorithm from my paper. Alice writes, in her own words, a detailed description of what the code does, without any actual code. You pass that to Bob, who has not read my paper. Bob uses the description to code the algorithm. If I claim you infringed on my copyright, you can show that you didn't. You absolutely copied my algorithm, but there's no general prohibition on copying algorithms. If I wanted to protect my algorithm, I'd have to apply for a patent, which is an entirely different thing.",
                                        "score": 1,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "hackingdreams",
                            "body": "It doesn't matter. If the model spits out code that looks sufficiently close to my GPL'd code because it was *trained* on my GPL'd code, you essentially created a sophisticated copy and paste machine. You can throw as many fancy terms at it as you like, but it ultimately *does not matter* how you got to the same damned code.\n\nAnd folks, boy does Copilot like to generate the *same* code as it's provided - down to the bugs, comments, and often even *copyright notices*. Microsoft throwing up some \"heh heh, don't look behind the curtains\" filters over the output to try to hide this fact from the public is even *more* evidence of wrongdoing.\n\nBuilding a copy machine with illudium unborkable compression technology doesn't matter in the slightest - it's *still* a copy machine.",
                            "score": 18,
                            "replies": [
                              {
                                "author": "accountForStupidQs",
                                "body": "The how should absolutely matter, lest we say monkeys with typewriters are prima face copyright infringement because they may eventually produce the works of Agatha Christie",
                                "score": 5,
                                "replies": [
                                  {
                                    "author": "kintar1900",
                                    "body": "I think you're getting downvoted because you used _prima face_. It's pretty obvious nobody arguing against LLMs in this thread actually understands legal reasoning, much less the way LLMs actually work. :/",
                                    "score": 6,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "kintar1900",
                                "body": "&gt; It doesn't matter. If the model spits out code that looks sufficiently close to my GPL'd code because it was trained on my GPL'd code, you essentially created a sophisticated copy and paste machine.\n\nIf you believe this, I seriously hope you've never read any GPL'd code, and then written you own code that does something similar. By your own logic, being exposed to the GPL'd code has altered your training set, and given you the capability to produce other code which performs the same or similar function, and you are therefore violating the GPL terms.",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "hegbork",
                                    "body": "Yep. That's how it works. Have you heard about cleanroom implementations?\n\nBtw. It was Microsoft who threatened the entire industry around 20-25 years ago when the code for NT was leaked. Anyone who looked at it would taint all their future work. At that time every open source operating system purged committers who admitted publicly to even breathing in the direction of that code.",
                                    "score": 3,
                                    "replies": []
                                  },
                                  {
                                    "author": "__loam",
                                    "body": "I mean that's literally the legal reality right now lol.",
                                    "score": 2,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "sparr",
                            "body": "&gt; how do you prove that Back to the Future was one of the masks\n\nIf there exists any short* prompt that gets the model to reliably reproduce a clip from BttF, that is probably sufficient proof.\n\n\\* too short to uniquely describe BttF",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Swoop3dp",
                        "body": "It's not really compression. LLMs don't reproduce the training data word by word. (unless the model overfits the data, which you want to avoid) \n\nIf I, a human, read some GPL code I will learn new concepts from it. If I then apply those concepts somewhere else nobody will care, unless I actually copy the code. \n\nLLMs basically do the same thing, just on a much bigger scale.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "GlitteringFriggit",
                            "body": "Some if the queries I've made to claude have returned 200+ line verbatim copies of code (including all the original comments and everything). \nAnd to be clear I wasn't trying to get it to return copied code, these were just random queries. I only noticed due to the \"humanness\" of the comments, searched online and found the exact code from a 13 year old stack overflow post.",
                            "score": 21,
                            "replies": []
                          },
                          {
                            "author": "hackingdreams",
                            "body": "Not even close. An LLM has no intrinsic idea of what it's even looking at. It's all just a stream of bits that ultimately forms a table of how frequently some bits connect to some other bits - it's a sponge-like frequency table, which is *very much* like something you'd see in a compression algorithm.\n\nIf you, a human, produced *identical* code to some GPL'd code after having read it earlier, *you* would be tagged for copyright infringement, and you'd be guilty of it. If you learned something from that code and applied some principles from it, you're fine. If you copy and pasted from it, you're going down.\n\nThere's more than enough sufficient evidence that these machines are essentially sophisticated copy and paste machines. You can call them \"Markov-like copy and paste bots\" - the next bit they paste is just derived from a frequency table they've stored by being trained on GPL'd data. That makes *the whole training model* a derivative work, and thus *anything it creates* a derivative work.\n\nNo amount of \"but humans work the same way\" argument is going to beat the fact that Microsoft had to install filters on its output to prevent it from *literally* generating code with copyright notices, straight from FOSS code. There's no argument there - it saw, it copied, it pasted.",
                            "score": 25,
                            "replies": [
                              {
                                "author": "uCodeSherpa",
                                "body": "Humans DO NOT work the same way and anyone claiming this is a full on moron.",
                                "score": 6,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "WaitForItTheMongols",
                            "body": "Yes, but again, LLMs do not learn. They modify their parameters using various gradient descent techniques and genetic algorithms to optimize their weights to fit a value function, but that's not learning. When I read code, I learn. I process it using my understanding of the world based on other algorithms I'm familiar with. LLMs do not do this. They re-train to fit the new training data, but they do not have an understanding which they can then integrate new information into.",
                            "score": 10,
                            "replies": [
                              {
                                "author": "jmlinden7",
                                "body": "It really doesn't matter if they learn or not. What matters is if they produce output which violates copyright.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "Helluiin",
                            "body": "lossy image compression also dosent reproduce the image pixel by pixel",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "purleyboy",
                        "body": "An LLM is fundamentally a neural network. Each node (neuron) has an activation value and output weights. These numbers (and the node connections) are refined and adjusted with each piece of training data. The continual refining means that the end network is not a representation of any one piece of training data, but of all pieces of training data effectively overlaid. So, you generally will not get the training data back as output from an LLM.\nCompression is all about maintaining maximum original information (minimal information loss) with minimal storage. LLMs are not good at this. \nYou may get an LLM to output a very small piece of code that is identical to training data,  but often times this is because there are limited ways to perform a simple piece of logic. The actual training data is not stored as a facsimile in the LLM.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 8,
                            "replies": [
                              {
                                "author": "purleyboy",
                                "body": "Here's a great article for you on [memorization](https://www.tonic.ai/guides/understanding-model-memorization-in-machine-learning). This is the exception that is being addressed in future training techniques.",
                                "score": 4,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "[deleted]",
                                    "score": 9,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "meltbox",
                        "body": "I can’t believe I had to scroll this far to find someone who knew what the hell they were talking about.\n\nPissed me off.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "loup-vaillant",
                    "body": "&gt; The underlying vectors that form the core model of an LLM do not contain any facsimile of the training data.\n\nAnd we know this how, exactly?\n\nI can take a picture and encode it into some giant QR code, and while the QR-code itself will look that it does not contain any facsimile of the original image (it certainly won’t look anything like the original image), there’s no doubt all the information is there, and that’s what matters here.\n\nCan you actually say the underlying vectors do _not_ contain loads of information from the training data? I think not, those vectors are mostly a _representation_ of that data. A lossy one for sure, but if it did not contain information from the training data, what would even be the point of that training?\n\n&gt; It's going to be hard difficult, possibly impossible, to 'prove' a piece of code was used in training.\n\nIt is possibly just as hard to prove that a human has read a particular novel, or learned from a particular piece of code. The fact remains that if I reproduced source code from memory and distributed it as if it were my own, I’d be infringing copyright.",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "ConnaitLesRisques",
                    "body": "I feel this is like saying an h.265 stream of the Lion King contains no drawings of Simba.",
                    "score": 8,
                    "replies": []
                  },
                  {
                    "author": "NickWalker12",
                    "body": "&gt;It's going to be hard difficult, possibly impossible, to 'prove' a piece of code was used in training.\n\nLaws can be passed requiring LLMs to make available publicly the full database of training data (losslessly compressed), which the LLM can be falsified against, as well as the associated license for each piece of media. Fair compensation can be given for the distribution cost incurred to the company.\n\nBut I'm honestly more shocked that this isn't already law in the EU, given:\n\n* LLMs can reproduce source data.\n* GDPR gives EU citizens the [right of erasure](https://gdpr-info.eu/art-17-gdpr/).",
                    "score": 3,
                    "replies": [
                      {
                        "author": "purleyboy",
                        "body": "But laws are local to one jurisdiction. How do you stop Open Source models published outside of that jurisdiction?",
                        "score": 2,
                        "replies": [
                          {
                            "author": "NickWalker12",
                            "body": "You can't, really, same as other laws. But you can make it illegal to distribute to, or operate within, protected jurisdictions, if you don't comply (like GDPR does with American companies), and use diplomacy &amp; treaties to open many avenues for justice internationally (e.g. extradition). It's one of the many benefits of globalism - we can cooperate with allies wishes.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "hackingdreams",
                    "body": "&gt; It's going to be hard difficult, possibly impossible, to 'prove' a piece of code was used in training.\n\nNot really. The Plaintiffs will ask for the logs, and Microsoft will provide them, or admit they don't have them. Admitting they don't exist looks *really, really bad* for Microsoft in the light of the law. It's essentially \"the dog ate my homework.\"\n\nThis isn't some shifty fly-by-night operation. This is a multi-billion dollar behemoth.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "purleyboy",
                        "body": "Sure, for Microsoft. Now go over to HuggingFace and see the ever increasing number of llms being published. We're seeing an acceleration of open source model weights being published. In coming years it will be almost impossible to regulate/govern these models.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "__loam",
                            "body": "That's great. Microsoft still may have to go through discovery and have to disclose their training set. If they lose in a big way here that could make it very difficult for large companies to develop these models. If that makes it so open source models are in a legal grey area, I think that's a good outcome because it makes it harder for large mega corporationa abuse smaller players.",
                            "score": 1,
                            "replies": []
                          },
                          {
                            "author": "meltbox",
                            "body": "Sure. But an open source model is at least not profiting off this. Microsoft is.\n\nStealing movies is one thing. Selling stolen movies is a whole other level",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "PaintItPurple",
                    "body": "This seems a bit like saying that highly compressed data does not contain a facsimile of the source material. If you've created some fixed data that a computer program can use to recognizably reproduce a copyrighted work, it seems more than fair to say that the data contains a copy of the work, even if you can't point to a human-readable copy in the data itself.",
                    "score": 1,
                    "replies": []
                  },
                  {
                    "author": "Uristqwerty",
                    "body": "[In computer science, bits don't have colour. In human society, and especially the law, bits *do*](https://ansuz.sooke.bc.ca/entry/23). The LLM might not contain any bits from the training data by the time it finishes pureeing it all through the relevant calculus and squeezing it into a brick of model weights for diostribution, but the intangible metadata about the training data's provenance exist in a parallel dimension that math cannot interact with, so no description of the algorithms is enough to say how much of the original colour remains.",
                    "score": 1,
                    "replies": []
                  },
                  {
                    "author": "meltbox",
                    "body": "What? They do indeed. These vectors are just lossy compression.\n\nIt’s like arguing a zip file isn’t a facsimile of the data that was compressed to create it. Or h.264 files aren’t the original movie.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "purleyboy",
                        "body": "The underlying technology are neural networks. With each piece of new training data, backpropagation is used to rebalance all of the neural network nodes and activation values. This inherently \"overwrites\" or \"adjusts\" any prior data. The result is that the model understands concepts and does not contain the original data (generally speaking - there are some exceptions from memorization). This is not like using ElasticSearch where you'd literally store the complete text that has been input.\n\nIf I read a book I can tell you about the contents and offer opinions, but I cannot give you a verbatim word for word copy of the book (maybe a few key phrases). LLMs are similar to this, it learns concepts and general language structure but it doesn't store the literal contents of the training data.\n\n  \n[Here's some further information.](https://help.openai.com/en/articles/7842364-how-chatgpt-and-our-language-models-are-developed) \"...ChatGPT does not copy or store training information in a database. Instead, it learns about associations between words, and those learnings help the model update its numbers/weights. The model then uses those weights to predict and generate new words in response to a user request. It does not “copy and paste” training information – much like a person who has read a book and sets it down,...\"",
                        "score": 1,
                        "replies": [
                          {
                            "author": "meltbox",
                            "body": "I understand what they’re saying but entirely disagree. Large models of all kinds have perfect recall and their feedback explicitly prioritizes closeness to the training data.\n\nWhile the representation is not lossless it is always mimicking the input data as closely as possible and interpolating between points when not possible.\n\nGo see the arc challenge and the interviews that Google researcher has done on AI. Current models appear to be purely recall driven. They don’t really have anything akin to what would be considered interdisciplinary reasoning or transfer like humans do.\n\nSo my position is that even though the encoding looks nothing like the original data an approximation of the original data can be recovered from the internal weights and the appropriate input. Therefore you are essentially distributing a lossy version of copyrighted material which is still not okay. IE re-encoding a movie with artifacts and worse quality is still illegal even if entire minute long segments are missing.\n\nThe other issue here is say a human is also capable of copyright infringement, but won’t because there are legal consequences for doing so.\n\nBut a machine gets no consequences because it’s not human? The argument is absurd even if you assume that LLMs do change data like a human because unlike a human it can’t in any reasonably effective way be restricted from violating copyright.\n\nEdit: Also OpenAI is the last place I’d look for info on this. It would be akin to asking Purdue Pharma if opioids are safe.",
                            "score": 1,
                            "replies": [
                              {
                                "author": "purleyboy",
                                "body": "Here's an explanation on [Wikipedia](https://en.wikipedia.org/wiki/Artificial_intelligence_and_copyright#:~:text=Copyright%20infringing%20AI%20outputs). Overfitting is generally exceptional but does exist. This should not be confused with the complete training dataset being accessible.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Kinglink",
                "body": "I'm going to bet Microsoft settles the licensing issue if they can.   I don't think they have a leg to stand on. \n\nHowever this decision already sets a good precedent, with the judge agreeing that AIs don't copy code... which is true, they really don't.  \n\nYou have more danger from a junior dev just copying code from Stack Overflow, than an AI writing something similar to something else.",
                "score": 3,
                "replies": []
              },
              {
                "author": "stonerism",
                "body": "It would be extremely interesting if we can pull more AI technology out of proprietary black boxes.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "I got bad news about every framework and library then ",
            "score": 50,
            "replies": [
              {
                "author": "TistelTech",
                "body": "at least they get credit for their work on the library. looks good on resume etc. LLM steals credit.",
                "score": 6,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "It’s transformative. Not much different from a student looking at your code to learn from it ",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Gubru",
            "body": "Hard disagree. If massive corporations can train on your data, then you can train on massive corporations' data.",
            "score": 41,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 28,
                "replies": [
                  {
                    "author": "exodusTay",
                    "body": "if this goes thru i hope someone trains an llm with all the leaked code online and makes it public.",
                    "score": 9,
                    "replies": []
                  }
                ]
              },
              {
                "author": "lngns",
                "body": "Microsoft's official stance is that [your code is free-to-use, but code of entities with lawyers is not](https://www.theregister.com/2024/06/28/microsoft_ceo_ai/).",
                "score": 5,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 5,
                "replies": [
                  {
                    "author": "Gubru",
                    "body": "Their data: every book, movie, tv show, and other piece of media ever published.",
                    "score": 10,
                    "replies": []
                  }
                ]
              },
              {
                "author": "nightcracker",
                "body": "A new specimen in the wild: the temporarily embarrassed data broker.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "aykcak",
            "body": "Not surprising though. The case was set up to fail. *Copyright* was entirely the wrong angle. I have no idea what they were trying to achieve here",
            "score": 6,
            "replies": []
          },
          {
            "author": "Jmc_da_boss",
            "body": "If you don't want corporations using your code don't open source it",
            "score": 7,
            "replies": []
          },
          {
            "author": "Berkyjay",
            "body": "Dude, most of us have public repos and share the shit out of our code.  We aren't medieval alchemists jealously guarding our work.",
            "score": 6,
            "replies": []
          },
          {
            "author": "RoboticElfJedi",
            "body": "Who do you think will benefit if there is more copyright? You, and the 4 cents of royalties you hope to get for your code, or Big Content?\n\nSadly in my view letting the likes of Altman have at it is the lesser of two evils. At least this way I get to use an AI when it helps.",
            "score": 11,
            "replies": []
          },
          {
            "author": "DreamingInfraviolet",
            "body": "It's good news because I'd rather have great tools than restricting progress in the name of copyright. Someone using my free MIT code doesn't hurt me, but gives society benefits.",
            "score": 5,
            "replies": []
          },
          {
            "author": "MaleficentFig7578",
            "body": "We get to use their code too. We get to train AIs on the Windows source code leak with impunity.",
            "score": 1,
            "replies": []
          },
          {
            "author": "WordAggravating4639",
            "body": "Reading Comprehension 0/10",
            "score": 1,
            "replies": []
          },
          {
            "author": "hamthrowaway01101",
            "body": "The jokes on them, my code sucks",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Spitfire1900",
        "body": "No one seems to understand that the license you attach to your project does not matter if it’s uploaded to GitHub.\n\nThe ToS you agree to by using GitHub allows them to train against your software, even if it’s explicitly denied in your project’s license.",
        "score": 79,
        "replies": [
          {
            "author": "Luvax",
            "body": "It may be a ToS violation to upload code where this permission isn't given, but GitHub does not automatically receive the rights they want.",
            "score": 60,
            "replies": [
              {
                "author": "GrandOpener",
                "body": "  If you have and upload to a GitHub repository, you have agreed to and are legally bound by their policies. At least in the US, I’m pretty sure the act of uploading your code indicates your continued agreement to their ToS. \n\nRemember that code can be dual licensed. Even if you provide a license that prohibits use as training data, your agreement to the ToS can establish a separate license only to GitHub that permits it. Nothing is contradictory about that situation. \n\nIf you don’t agree with their ToS, your only real recourse is to not use GitHub. ",
                "score": 35,
                "replies": [
                  {
                    "author": "Tuna-Fish2",
                    "body": "Only if you have the ability to grant such a license. If, for example, the code was GPL licensed and contained contributions from people other than you, no such license is granted, no matter what you and github agree on.",
                    "score": 57,
                    "replies": []
                  },
                  {
                    "author": "ykafia",
                    "body": "ToS are not always legally binding",
                    "score": 38,
                    "replies": [
                      {
                        "author": "Ghi102",
                        "body": "Exactly this. The only thing they can really do if you violate their TOS is to stop hosting your stuff and maybe ban you from the platform.",
                        "score": 19,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "spareminuteforworms",
                    "body": "&gt; your only real recourse is to not use GitHub\n\nSounds like a plan.",
                    "score": 22,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 6,
                        "replies": [
                          {
                            "author": "spareminuteforworms",
                            "body": "Yea it seems like it ought to be achievable with the right insurances/contracts.",
                            "score": 1,
                            "replies": []
                          },
                          {
                            "author": "sonobanana33",
                            "body": "I moved to codeberg. They even enabled CI for my account, so I can run CI.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "ficiek",
                    "body": "This sounds like bullshit because anyone can take my code and upload it. Are you a lawyer or are you just guessing?",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "Otis_Inf",
                    "body": "&gt; If you have and upload to a GitHub repository, you have agreed to and are legally bound by their policies.\n\nI'm not in the US. I couldn't care less about some site's EULA. the law is what counts.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Spitfire1900",
                "body": "That is an issue with more minutia, if you are the copyright holder of the work and host it on GitHub then you’re giving them permission to train on it.\n\nIf you are cloning someone else’s repo, that was originally hosted on a self-hosted git instance onto GitHub then they do not, but you’re at fault in that situation, not GitHub.",
                "score": 6,
                "replies": [
                  {
                    "author": "Astrogat",
                    "body": "Don't GitHub have to do due diligence to make sure you actually have the copyright in that case? If not, do they delete it (which would require them to retrain a new model) if it turns out someone didn't have the rights to give away the copyright?",
                    "score": 7,
                    "replies": [
                      {
                        "author": "Spitfire1900",
                        "body": "The due diligence is the responsibility of the uploader. GitHub may decide to delete the repo if it cannot comply with their terms, but they can’t remove it from already trained models. \n\nThere’s still a lot of unanswered questions, but none of them are going to be fixed simply by updating the license to say “you may not use the source code of this work to train AI”.",
                        "score": 4,
                        "replies": [
                          {
                            "author": "Astrogat",
                            "body": "&gt;but they can’t remove it from already trained models. \n\nIsn't this a breach of DMCA? If they are notified that they are hosting copyrighted content, aren't they obliged to remove it? Why wouldn't that include the model?",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Luvax",
                    "body": "Even if you are the copyright holder, you may not be in a position to grant such a license. Additionally, it might be up for debate if the uploader could have reasonably assumed what the specific details of such a license contain. Especially in europe where regular people are usually not expected and upheld to the same kind of legal understanding than companies are.\n\nBut sure, this is the US. But the blanket statement I replied to was simply not accurate and \"It says so in the ToS, therfore it must be legal\" is extreme bullshit.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "I'm not sure I understand this. How does Github not \"receive the rights they want\", Their ToS gives them exactly the rights they want and probably even shifts liability to the user if they upload something they did not have adequate rights to.",
                "score": 4,
                "replies": [
                  {
                    "author": "svick",
                    "body": "If I don't have the rights to some code, but upload it to GitHub anyway, GitHub didn't receive the rights because I couldn't have given them.",
                    "score": 7,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "Yeah but if you do that you are liable, not GitHub",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "__loam",
                    "body": "ToS are not necessarily legally binding if they conflict with the actual law.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "Yeah but in this case it's pretty clear, the user grants GitHub a license to do certain things to their repo and the user is responsible for making sure they have an appropriate license for what they upload.\n\nIf you upload copyrighted material to GitHub it's going to end up being your problem not githubs",
                        "score": 1,
                        "replies": [
                          {
                            "author": "__loam",
                            "body": "These models didn't exist when the ToS was created so I could see there being laws against the retroactive inclusion of user data in training sets.",
                            "score": 3,
                            "replies": [
                              {
                                "author": "[deleted]",
                                "body": "GitHub has the ability to analyze, index, etc... what you upload.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "__loam",
                                    "body": "Yes I understand what you're saying, I'm telling you that kind of contract won't necessarily hold up in court.",
                                    "score": 3,
                                    "replies": [
                                      {
                                        "author": "[deleted]",
                                        "body": "In this case it will because by using GitHub you\n\n1) allow GitHub to do certain things with what you upload \n\n2) acknowledge that you have the appropriate license for what you upload \n\nIt will be your problem, not githubs if you do not have the correct license.\n\nGoing even farther, it's hard to complain about rights for anything that's publicly available on the internet. Content has been scrapes, parsed and used for a long time.",
                                        "score": 2,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Zulban",
                "body": "Your thinking sounds reasonable but doesn't pass a simple legal thought experiment. If I upload a repo to GitHub that has a LICENSE saying \"I don't agree to any GitHub ToS\" clearly that doesn't make it so.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "tav_stuff",
            "body": "Terms of service are not above the law. An analogy would be if I signed a work contract stating that after I leave my job I can’t work for another 2 years. It doesn’t matter if my contract says that — it’s illegal so I can legally ignore it",
            "score": 6,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 9,
            "replies": []
          },
          {
            "author": "crazedizzled",
            "body": "&gt; The ToS you agree to by using GitHub allows them to train against your software, even if it’s explicitly denied in your project’s license.\n\nWhich is what is going to be argued in court, because that is not how copyright law works.",
            "score": 4,
            "replies": []
          },
          {
            "author": "nnomae",
            "body": "I can't transfer to you a right I do not own. If I upload my employers code to github I don't own it and as such can not transfer to them any permissions based on that code since those rights are not mine to transfer.",
            "score": 2,
            "replies": []
          },
          {
            "author": "dravonk",
            "body": "Someone else uploaded (open source) code written by me unto GitHub, before it was owned by Microsoft and Copilot existed, who do I get to sue?",
            "score": 2,
            "replies": []
          },
          {
            "author": "Kinglink",
            "body": "That could be true, but let's say you write a GPL3 program and I take it and use it in my code.  It's now GPL3 code (or at least abides by it)  Now what if I take that code and upload it to github or other publicly available places?  That was perfectly fine, even expected. \n\nBut just because that's fine and expected, does that mean I can change your license to allow training on it...  That's kind of the heart of this case.  (And the part that's not been decided yet)",
            "score": 1,
            "replies": []
          },
          {
            "author": "__loam",
            "body": "I'm very skeptical that TOS is going to hold up in court against actual copyright law. Meta is saying the same thing with respect to images on their sites.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Smooth-Zucchini4923",
        "body": "&gt;Judge Jon Tigar’s ruling, unsealed last week, leaves only two claims standing: one accusing the companies of an open-source license violation and another alleging breach of contract.\n\nAren't those the most important claims? Weird way to phrase this headline.",
        "score": 11,
        "replies": [
          {
            "author": "emperor000",
            "body": "But isn't 20 a majority out of 22?",
            "score": 4,
            "replies": []
          },
          {
            "author": "bwainfweeze",
            "body": "Hang out on Hackernews more. We talk about how writers don’t get to pick the titles for their articles most of the time. That’s the editor and the editors are trying to make clickbait titles we all fall for. It’s a racket.",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "PsychologicalStore96",
        "body": "So, licences are dead ?",
        "score": 55,
        "replies": [
          {
            "author": "FlukyS",
            "body": "Well it kind of hits at a weird question which is \"inspiration\" isn't copyrightable. For instance, I can write a song that is a ripoff of Metallica and I can do so based on my listening of Metallica, in that case as long as I didn't copy a chord progression, lyric...etc word for word it isn't infringing. This is well known and not controversial at all. Copyright comes into play though when an infringing work is released that isn't just inspired by something but directly copying word for word, note for note. In the case of copyrighted code for instance all code can be accidently reproduced a number of times in a number of different places if the problem being solved isn't novel, so it's hard to trace who owns a specific coding pattern. If though for instance someone has a Copilot subscription and it pastes a specific piece of GPL code though and it can be reproduced the works themselves are infringing and would have to be relicensed or removed so most companies that have a legal department won't even allow that conceptually at all. I think the big question here is when someone does infringe on it and is challenged for it in court to comply with the original license will that be upheld and not specifically that Copilot was trained on it because that hasn't been legislated yet but usage of copyrighted works is heavily legislated.",
            "score": 71,
            "replies": [
              {
                "author": "ElMachoGrande",
                "body": "There are programmers who occasionally google a solution to their problem, learns how it works, and then they write their own version of the solution. Then there is another category of developers: liars.\n\nI see the AI as pretty much the same.",
                "score": 32,
                "replies": [
                  {
                    "author": "spareminuteforworms",
                    "body": "There are people who write attribution into their code base though and abide the license of projects they depend on.",
                    "score": 12,
                    "replies": [
                      {
                        "author": "ElMachoGrande",
                        "body": "If you find some snippet of code on the internet, looks at it, understand it, and then write your own version of that solution (because you always want it o confom to your code style anyway), do you really provide attribution? I sure as hell don't, unless I copy code verbatim (which I don't).",
                        "score": 25,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Zulban",
            "body": "If I upload a repo to GitHub that has a LICENSE saying \"I don't agree to any GitHub ToS\" clearly that doesn't make it so. Licenses are for third parties who see the project code, they don't nullify the GitHub ToS.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Ravarix",
            "body": "Code copyright was always a myth. The system barely works for the medium it's designed for.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Jmc_da_boss",
            "body": "They have always been tenuous at best. With limited and volatile precedent in court.",
            "score": 2,
            "replies": [
              {
                "author": "lIlIlIIlIIIlIIIIIl",
                "body": "Is that because algorithms can't be copyrighted?",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "NeverComments",
            "body": "If a piece of code is violating a license it’s violating that license regardless of whether it was generated it via AI, grabbed off StackOverflow, written by an employee, or came to you in a dream. This lawsuit has zero bearing on that. ",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "RedPandaDan",
        "body": "If it's decided that AI model output isn't copyright, doesn't that mean the end of all software licenses, proprietary or not?\n\nSomeone posted the windows 2000 source code online a few years ago, couldn't someone build an AI with that and nothing else in its data set and launder the whole thing?",
        "score": 23,
        "replies": [
          {
            "author": "NeverComments",
            "body": "If the AI outputs content that infringes upon someone else’s copyright then using that content is copyright infringement. Separately, the content output by an AI that does not infringe upon someone else’s copyright cannot be copyrighted as-is because it is not the product of human creativity. \n\nUsing AI content as part of a larger creative work allows you to copyright that content as an original creation. ",
            "score": 21,
            "replies": []
          },
          {
            "author": "mccoyn",
            "body": "This is ultimately decided by a court.  Take this similar situation.  It isn't copyright infringement to study a piece of code and generate new code using the knowledge gained from that study.  But, it is copyright infringement to memorize a piece of code and write an exact copy of that code.  Where is the line between these?  Generally, you should stay away from where most people will think the line is, otherwise you will be in court arguing which side of the line you are on.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "BarelyAirborne",
        "body": "This is not good for open source.  I'm reluctant to give up my code if it's going to be ingested and regurgitated by someone else's bot that's not going to give me even a whiff of attribution.",
        "score": 37,
        "replies": [
          {
            "author": "Additional-Bee1379",
            "body": "That already happened without the ai.",
            "score": 109,
            "replies": []
          },
          {
            "author": "xcdesz",
            "body": "I dont get this need for attribution.  Almost all software out there has massive requirements / dependency lists of open source code being used with the most attribution being that you need to copy a string of some license file into your project somewhere.  \n\nLong before AI, most downstream developers will happily use your open source code without bothering to look up the persons name who developed it.  Why does \"attribution\" matter to you so much?   Also, in many cases its a massive corporation that is behind those open sourced frameworks you are using.",
            "score": 28,
            "replies": [
              {
                "author": "dravonk",
                "body": "It was always a problem, but when one of the largest software companies in the world is selling tools that systematically violate licenses, it makes the problem a lot bigger.",
                "score": 7,
                "replies": []
              },
              {
                "author": "solartacoss",
                "body": "i feel the same but with music.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "neopointer",
            "body": "I wish there was a license to completely opt-out of this crap.",
            "score": 11,
            "replies": [
              {
                "author": "fkih",
                "body": "I wish there was a license to opt-in. No license? No training.",
                "score": 26,
                "replies": [
                  {
                    "author": "neopointer",
                    "body": "That would be the dream. If you don't let it be used for training explicitly, then it's not allowed.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "wolfpack_charlie",
                    "body": "They'd never have a big enough dataset",
                    "score": 1,
                    "replies": [
                      {
                        "author": "crazedizzled",
                        "body": "That's the point.",
                        "score": 6,
                        "replies": [
                          {
                            "author": "wolfpack_charlie",
                            "body": "More like that's why it'll never be opt-in, unfortunately ",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "MikusR",
                "body": "There is. Don't release the source.",
                "score": 6,
                "replies": []
              },
              {
                "author": "svick",
                "body": "If a trained LLM like Copilot is not considered a derivative work, then no kind of license is likely going to help you. \n\nThough that is a big if, and it's basically what this court case is about.",
                "score": 3,
                "replies": []
              },
              {
                "author": "HerrEurobeat",
                "body": "Well if they are using GPL licensed code to create their product (aka training their AI), shouldn't they need to be able to provide the original sources and copyright information? Since this is virtually impossible, using GPL should opt you out.\n\n\nI could very well imagine though that they find a loophole in the definition, like that training on code isn't using that piece of code itself, making it not fall under the license or something",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Saki-Sun",
            "body": "With the current state of AI code, they seriously need to ingest and regurgitate more of mine.\n\n  \nI personally relish our AI overlords, although I suspect I will be long retired before they take over.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "skratlo",
        "body": "It may be over in the US, but it isn't in the rest of the developed world. I'm looking forward to how this will play out in EU.",
        "score": 7,
        "replies": []
      },
      {
        "author": "sleeping-in-crypto",
        "body": "I don’t think people realize what is happening here nor what the endgame of all this is where copyright and licensing are not respected just because &lt;big corp&gt; wants to use your property to train its models:\n\nA world of walled gardens where the training software cannot access, gated by a labyrinthine network of access and licenses that only the most seasoned lawyers can unwind (at proportionate cost, of course).\n\nIf that’s the world you want, sure, keep promoting decisions where MS, OpenAI and others can keep using the entire world’s creative works without permission or license.\n\nYou know the worst part is, this is the biggest missed opportunity in human history to date: wouldn’t you love to be part of a generation-defining project to turn the world’s knowledge into AI? They robbed you of that by doing it for profit and then claiming they owe you nothing. You gave them everything…. And they believe they owe you nothing.",
        "score": 3,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "They aren’t turning the world’s knowledge into AI. They’re turning the worlds *opinions* int AI. And its foibles and its fears.\n\nHalf of us are dumber than average and language models can’t tell who is who.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "M4mb0",
        "body": "Good. Most of these claims are completely ridiculous.",
        "score": 5,
        "replies": []
      },
      {
        "author": "horror-pangolin-123",
        "body": "So basically piracy is ok if it's done via AI?",
        "score": 3,
        "replies": [
          {
            "author": "NeverComments",
            "body": "Using AI to skirt copyright is like asking a contractor to do it for you and thinking that gives you some magical legal loophole. If the material is infringing then it's infringing. It doesn't matter where you sourced it.",
            "score": 4,
            "replies": []
          }
        ]
      }
    ]
  },
  {
    "title": "Why sprints are taking the joy out of building software",
    "body": "",
    "score": 965,
    "url": "",
    "created_utc": 1730302626.0,
    "author": "zaidesanton",
    "permalink": "/r/programming/comments/1gfpgq4/why_sprints_are_taking_the_joy_out_of_building/",
    "comments": [
      {
        "author": "sol119",
        "body": "For me sprints are not a problem, people mindlessly following all the ceremonies just for the sake of it is.",
        "score": 990,
        "replies": [
          {
            "author": "[deleted]",
            "body": "Yeah we technically use sprints but it’s much more fluid model. Maybe we’re not using them “correctly” but it’s much more common sense approach for us",
            "score": 188,
            "replies": [
              {
                "author": "Envect",
                "body": "Doing things the way that works best for your team is the pinnacle of agile. The idea that there's a \"correct\" way to do it is wrong.",
                "score": 276,
                "replies": [
                  {
                    "author": "thetreat",
                    "body": "I like to prescribe juuuuust enough process. If your team is doing just fine without everything that people recommend for sprints, great! Don’t change a thing. If you’re dysfunctional because people end up duplicating work and no one is sure what others are working on or no one knows what is the right priority? Maybe add a stand up a couple times a week. Doesn’t need to be every day. Or maybe you just have a weekly launch meeting where you talk about new projects and demo finished ones. \n\nBut if you’re getting bogged down more in tracking work than doing work, then cut back! Experiment with different models, gather feedback from the team! Nothing is set in stone. Just be flexible and use your brain until you find what fits.",
                    "score": 80,
                    "replies": [
                      {
                        "author": "derpinot",
                        "body": "Retrospectives are the most crucial ceremony in Agile.",
                        "score": 10,
                        "replies": []
                      },
                      {
                        "author": "format71",
                        "body": "Problem-focused vs solution-focused. \nScrum and all its tools are solutions. If you don’t have the problem, don’t take the medicine. \nIf you have a problem - or just want to improve - try change what you’re doing. \n\n\nThe only thing, though: don’t tell me ‘scrum doesn’t work’ after refusing to follow the process as it’s described. ‘We tried scrum, except for the standups, the sprint goals, the retrospects and the whole backlog-thing, but it didn’t do anything good for us’. 😖",
                        "score": 27,
                        "replies": [
                          {
                            "author": "Bruce_McBruce",
                            "body": "A classic - \"we tried baseball and it didn't work\"\n\nhttps://ronjeffries.com/xprog/articles/jatbaseball/",
                            "score": 20,
                            "replies": [
                              {
                                "author": "format71",
                                "body": "Haha! Thanks! Never saw that post :-)",
                                "score": 8,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "QuickQuirk",
                        "body": "So much this.\n\nProcess *slows down development.*\n\nBut so does miscommunication and mistakes.\n\nYou introduce just enough process when you need it to solve those miscommunication issues, quality failure, and other problems.\n\nNo more, no less.\n\nI want to facepalm every time I see a shop with just 4 developers running carefully crafting sprints with large amounts of time spent in meetings and long product discussions with dozens of stakeholders and long document chains and careful handoff that are sucking the joy of their jobs out of those developers.",
                        "score": 12,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Nosa2k",
                    "body": "You hit the nail on the head! It’s software development not construction work!",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "smallfried",
                    "body": "I consider the most important meeting the retro. Hold it every sprint in the beginning. In it, the team can decide on how to do all processes, including how and how often to do the retro itself. Moderate it well (and make sure the least talkactive people are heard) and even an inexperienced team can get to a good way of working.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "Envect",
                        "body": "Before my last retro at the job I just left, I was given feedback (indirectly) that I should give more feedback during retros. I was keeping my head down because I'd already noticed the futility of it so I chuckled to myself and ignored it.\n\nSomeone else gave feedback in that retro that developers typically get to choose which stories they work on in a sprint. Our scrum master responded by saying that this person should throw whatever agile book they read that in in the garbage because there's no freedom for developers in agile.\n\nI left that job feeling equal parts vindicated and disillusioned. There's too much cargo culting going on around agile. That kind of retro completely destroys the whole process.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "smallfried",
                            "body": "A bad scrum master can really screw things up. Sometimes it's a sign that it's just agile on paper so the product might sell better but all management levels are just business as usual.",
                            "score": 3,
                            "replies": []
                          },
                          {
                            "author": "EveryQuantityEver",
                            "body": "There is nothing worse than doing retros when you know that you're not being listened to and nothing is going to be changed.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "HiddenStoat",
                    "body": "When I first got introduced to agile (and Agile) the trainer said \"Agile is agile with training wheels\" - that's always stuck with me as a nice way of capturing your point :)",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "ZiKyooc",
                "body": "Individuals and interactions over processes and tools.\n\nIt sounds like you are doing it correctly",
                "score": 34,
                "replies": [
                  {
                    "author": "C_Madison",
                    "body": "It has always been so sad to me how a \"movement\" build on this rule ended up being at least, if not even more, process-driven than what we had before. \"You have to do the Daily exactly this way.\" \"Why? Everyone says its garbage?\" \"That's what the book says.\"",
                    "score": 10,
                    "replies": [
                      {
                        "author": "ZiKyooc",
                        "body": "They claim empiricism, but I don't buy it. There's no actual scientific research backing those things as no result could be extrapolated to any possible situation. It's more about dogma.",
                        "score": 8,
                        "replies": [
                          {
                            "author": "C_Madison",
                            "body": "Yeah, same. Each time someone told me that it is \"proven by experience\" or something like that it was cargo-culting, usually on a blog post of some big tech company. This industry is highly averse to real scientific research. If it fits what they want to hear it's good, if not it gets ignored.",
                            "score": 5,
                            "replies": [
                              {
                                "author": "jimmux",
                                "body": "So much of software development is like this. It's incredibly frustrating. We pretend to be smart people making data-driven decisions, but really follow the mob most of the time. If you challenge someone on a decision and ask to see the evidence, they take it personally. \n\nI know why it happens. Usually it's all about job security and padding the resume. That's valid, but please can we drop the pretense?",
                                "score": 6,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "GuyOnTheInterweb",
                        "body": "The problem I see is when you get a dedicated Scrum master or so, is that they are not actually involved in any day-to-day development, and so all they got left to go from is the book.. and then agile dies.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "QuickQuirk",
                    "body": "The number of times I hear people say things like 'You're not doing agile right. Look at this blog post detailing these specific 12 steps'.\n\nI love sending them to that four line manifesto.\n\nIt always surprises me how people have time to read these long books, or watch hours long training videos; and they've never once bothered to spend the 48 seconds required to read the f'ing manifesto.\n\nI suspect the snake oil 'agile industry' deliberately obfuscates this.",
                    "score": 7,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Raziel_LOK",
                "body": "It is rather that u have a good team than anyone that is doing scrum right. I am yet to see.\n\nAnything with enough effort will somehow work. So if it is hard for most people to get it right it is probably because it is dogshit.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "novagenesis",
            "body": "People nowadays forget the point of sprints.  They provide a looser dev-driven estimation with dev-driven launch dates as an answer to Waterfall, where Business both owned the estimates and the release deadlines.\n\nIf people are running their sprint anything but \"looser\" they're doing it wrong.",
            "score": 64,
            "replies": [
              {
                "author": "RebeccaBlue",
                "body": "Businesses will always try to turn Agile-type development practices into really fast waterfall practices.",
                "score": 85,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 44,
                    "replies": [
                      {
                        "author": "upsidedownshaggy",
                        "body": "The issue is non-technical leaders are the people with the money and the people with money want control over how their money is being used.",
                        "score": 19,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 17,
                            "replies": [
                              {
                                "author": "asurarusa",
                                "body": "&gt; You're even seeing arguments in Congress about how we need to import more doctors into the country to suppress wages, luckily doctors have a massive lobby that is quite successful.\n\nNot to go off topic, but the AMA is a cartel that restricts the number of people that can get into med school (via lobbing to reduce the number of med schools), stops non mds from providing basic primary care and has been behind the shortage of residency spots for decades, all  to prop up wages. We don’t need to import anyone to fix the problem, we just need to open more seats at med schools and create more residency positions.",
                                "score": 5,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "yangyangR",
                            "body": "The separation of labor and capital",
                            "score": 4,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "soft-wear",
                        "body": "As if we had a choice lol. It wasn't an accident that almost every major tech founder left and placed an MBA in charge. My personal favorite is when managers take agile/scrum/whatever training and their takeaway is never \"we're not supposed to associate complexity with time\".",
                        "score": 9,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 11,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "C_Madison",
                    "body": "Reminder: They even turned waterfall into waterfall. Original waterfall had going back to earlier phases as a part. But management didn't like that, cause it meant no clear number when things end ... so, waterfall got waterfalled. :(",
                    "score": 12,
                    "replies": [
                      {
                        "author": "RebeccaBlue",
                        "body": "It's waterfall-inception.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "QuickQuirk",
                    "body": "I have to keep reminding our CEO of this. Whenever he demands why we're not hitting dates perfectly, and hints that it's because we're not using agile correctly, I point out that this is exactly the opposite of what Agile is trying to improve. Agile ain't waterfall.",
                    "score": 7,
                    "replies": [
                      {
                        "author": "RebeccaBlue",
                        "body": "The big thing is, software development is chaotic.  Business Administration types think that they can just add a bazillion processes and if that doesn't work, threats, and that will make it less chaotic.  I've been coding professionally for almost 40 years now, and I've never seen the added processes &amp; threats model work.  It just doesn't.\n\nThe big thing about Agile is that it starts with that reality and tries to improve upon the situation.  It's not perfect, but it works about as well as any chaos-wrangling idea can work.",
                        "score": 7,
                        "replies": [
                          {
                            "author": "QuickQuirk",
                            "body": "Exactly. IT's more 'Accept reality, Embrace the chaos'",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "novagenesis",
                    "body": "I wouldn't say \"always\".  I've had significant success.  Only the first company I ever used sprints at did that, and I left them in 2010 or so.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "asurarusa",
                "body": "&gt; dev-driven launch dates\n\nThis is i think is the part that gets lost in 90% of sprint implementations. With one exception, every ‘agile’ team I’ve worked on has been told some variant of ‘we need this done in x sprint’, so launch dates were always driven externally and estimations just served as a mechanism for buying more time.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "barmic1212",
            "body": "I love speak about pattern agile instead of framework agile. We don't apply a framework battery included, but some patterns where and when we need. Inspired by kanban, scrum, xp or whatever.\n\nFor me the important thing is to have feedback loop it's the way to improve the work. Take feedback from team (generally with retrospective but can be other) and outside team (generally with demo but can be other thing). Make it frequently and take a account on feedback. It's my guide line with let place for fun because it's important",
            "score": 11,
            "replies": []
          },
          {
            "author": "mpanase",
            "body": "Agile is about following all the processes. \n\nI'm an Agile black belt ninja space-captain. Trust me, I've got all the certifications.",
            "score": 5,
            "replies": []
          },
          {
            "author": "Dreamtrain",
            "body": "my new team has a habit of rotating on a volunteer basis who runs it too, it bothers me more than it should",
            "score": 3,
            "replies": []
          },
          {
            "author": "yangyangR",
            "body": "If a system is \"not a problem\" but only every single one of its implementations, then the system has a fundamental flaw. It is taking a wrong assumption about human behavior so that it in invariably sows the seeds of its own destruction.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "zoddrick",
        "body": "This is why I promote kanban over scrum. Populate a backlog wtih epics/stories -&gt; fill the RTP column -&gt; Pull in stories as you complete others. Its that simple. If you want to track metrics on how you are performing you can do cycle time and throughput.",
        "score": 334,
        "replies": [
          {
            "author": "vm_linuz",
            "body": "I love kanban!            \n              \nThere is work to do.            \nThat work has priority.                \nThere are workers to do the work.            \n              \nIt's very pure.",
            "score": 195,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 58,
                "replies": [
                  {
                    "author": "Mikefrommke",
                    "body": "“Give me a prioritized list” \n“Everything is important”\n“….”",
                    "score": 44,
                    "replies": [
                      {
                        "author": "Maxion",
                        "body": "In my current project, the customer has marked all tickets as high priorirty. We have more tickets assignd per sprint than we can do. Yesterday I was told we need to next standup talk about why we are not completing high priority issues that are affecting production fast enough. Maybe because literally every ticket is the same priority?",
                        "score": 12,
                        "replies": [
                          {
                            "author": "TangerineSorry8463",
                            "body": "You need them to rank the items in high priority by priority.\n\n  \nI'm not even joking. Tell them that you're doing High Prio -&gt; Mid Prio -&gt; Low Prio in that order, and within these tiers, you go by High Prio 1, High Prio 2, High Prio 3 etc.",
                            "score": 7,
                            "replies": [
                              {
                                "author": "usernameqwerty005",
                                "body": "&gt; You need them to rank the items in high priority by priority.\n\nPersonally I prefer a numbered list of priority, rather than \"high\", \"mid\", \"low\", else you'll end up with a list where everything is \"high\".\n\nA sorted list. Devs start at the top. Tell them to review the list weekly or bi-weekly. That way you _always_ have exactly one top priority.",
                                "score": 6,
                                "replies": []
                              },
                              {
                                "author": "Maxion",
                                "body": "It doesn't really matter if we rank them by discrete categories or by continuous values, the issue is the higher ups aren't communicating their expectations re: priorities in any other way than flagging things with the highest priority in the dropdown and shoving them in sprints. Apart for some of the technical tickets, it's not really possible to known which order they are expected to be done in.",
                                "score": 3,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "justaguy101",
                        "body": "If everything is important, nothing is important!",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "Until you have external dependencies, and that team uses a different software process, good luck getting your work done. People over simplify scrum/agile and it is exhausting.",
                "score": 7,
                "replies": [
                  {
                    "author": "mailed",
                    "body": "what do you mean by oversimplify?",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "sprcow",
            "body": "Strong agree. All the teams I've been on with sprints end up having nonsense data anyway, because they never actually RELEASE in 2 week cycles. They want to pull velocity numbers based on 2-week completion rate, but sometimes stuff carries over and gets completed next sprint. \n\nWe end up doing 80 points one sprint, 40 points the next, and they end up trying to troubleshoot our low velocity weeks as if 80 is normal, and not just an arbitrary snapshot where we released just after the sprint finished as opposed to just prior.",
            "score": 56,
            "replies": [
              {
                "author": "carsncode",
                "body": "Troubleshooting velocity is already a huge red flag. It's not a performance metric, it never was. It's an estimation tool.",
                "score": 33,
                "replies": [
                  {
                    "author": "Perfect-Campaign9551",
                    "body": "Preach, brother",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "bwainfweeze",
                "body": "The secret Kanban we used on a waterfall project was the least drama I’ve ever had (we found other ways to conserve drama, such as shitty misleading velocity charts that almost lead to fisticuffs every week for months because the manager wouldn’t change them).\n\nCI/CD is sort of a troublesome acronym because continuous delivery works great with Kanban and set milestones, while continuous deployment works a bit less well.\n\nYou grade the last handful of builds by how complete versus how stable they are and you let the customer choose. You can have this version missing this one feature you asked for (completely) this other version that has it halfassed, or you can wait another ten days to get everything you wanted. \n\nThe customer generally has a date they want to see the completed product, and a workflow that has to be gone through before they deploy it. You can generally start reacting to the breaking changes even if one feature is still missing or broken. With a little communication you might still be able to ship on time. Or only a couple days late. And without compressing the tail of the SDLC to avoid shifting right.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "sambeau",
            "body": "Moving to Kanban was the best thing our team did. The bosses hated it, but as the manager I had to just take the flak and keep them informed and protect my team from them. Team was happier, code was higher quality, features were polished, tests were written. I highly recommend it.",
            "score": 36,
            "replies": [
              {
                "author": "zoddrick",
                "body": "The fun thing about kanban that people dont often consider is customizing the columns to fit your workflow. For example I was on a team once where we wanted to integrate the QA workflow as part of our UI test. So we had a column right after Ready To Pull which was like QA/UI test sync or something. And basically we would go over with QA how they would test this feature in the UI when they get a build. This was normally things like oh I do this funky input and then try this otehr thing etc... We would take that information and make it AC as part of the story and then make sure we wrote UI tests that did exactly what she wanted to do. FOr a while she would duplicate the effort but eventually she realized that the tests were covering those cases. This gave her more time for nuanced testing that maybe she hadn't considered before. Then we started teaching her how to write the selenium tests so she could actually help us when we did that part.",
                "score": 17,
                "replies": []
              },
              {
                "author": "spareminuteforworms",
                "body": "Why exactly do bosses hate it?",
                "score": 5,
                "replies": [
                  {
                    "author": "asurarusa",
                    "body": "Because sprints have explicit start/end/due dates while with kanban it’s ‘it’s done when it’s done’. Bosses love Gantt charts which you can’t do as easily without sprints.",
                    "score": 19,
                    "replies": [
                      {
                        "author": "vplatt",
                        "body": "Gantt charts and dependency management have NOTHING to do with sprints or Agile.  They predate any form of Agile by quite a long time.\n\nhttps://ganttchart.com/history_of_the_gantt_chart/\n\nIn fact, I think we can reasonably demonstrate that Agile in any form cannot be supported by any of the scientific management disciplines.  It's really more a form of mass delusion or even hysteria; especially in the form of Scrum.  I have quite enjoyed working on certain Agile projects, even using SAFe, but they have all invariably drifted more towards Kanban practices and not towards Scrum.  \n\nAside: the most toxic Agile projects I've worked on have all used per-sprint metrics which essentially gamified the apparent productivity of teams; which obviously bore no relevance towards delivering actual business value.  Rather their focus was on politics in one form or another and in trying to pit teams against each other for various reasons.  I haven't seen any of those projects actually deliver working valuable systems though.  The ones that focus on Kanban practices and did not pit teams against each other via metrics have all flourished though.",
                        "score": 5,
                        "replies": [
                          {
                            "author": "sambeau",
                            "body": "In an ideal world, yes. In the real world of business, gantt and waterfalls are everywhere, usually surrounding supposedly agile teams. \n\nScrum is silent on design, and silent on how to manage multiple scrum teams that have to work together to create a cohesive system. Scrum does not scale to 100s of developers. \n\nI once sat in a meeting about how to organise a scum of scrums meeting and realised I was in a meeting about a meeting about meetings. \n\nScrum is just unsustainable at that level.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "kur4nes",
            "body": "We switched to kanban from scrum a few month ago. Scrum was pointless. Either we had tickets in the sprint that took multiple sprints or developers needed to pull tickets from the backlog during the sprint, since the planned tickets were already done. Add to that critical bugs that need fixing and the whole scrum circus is just noise that doesn't add any value.\n\nJust need to get to the jira kanban diagrams showing throughput etc.",
            "score": 17,
            "replies": []
          },
          {
            "author": "EmperorOfCanada",
            "body": "This is how most software projects work. Once in a very blue moon, the project inherently has many moving parts created by separately run teams (probably different companies). And a very stiff and high level of management is required.\n\nBut, the above is the extreme exception. Most projects are fine with a combination of an Eisenhower matrix and kanban. \n\nAnd, very much as you said, the metrics are all there for anyone who needs to see them. This eliminates the need for managers and allows for the use of leaders who can oversee dozens of projects where they occasionally nudge them back on track and make sure they have what they need. \n\nWeird what happens when you treat programmers like adults.",
            "score": 31,
            "replies": [
              {
                "author": "svenz",
                "body": "Wtf is an Eisenhower matrix.",
                "score": 2,
                "replies": [
                  {
                    "author": "EmperorOfCanada",
                    "body": "https://t2informatik.de/en/wp-content/uploads/sites/2/2024/01/eisenhower-matrix-smartpedia.png\n\nSuper easy to use. it is a great filter to use with someone who is pushing for their stupid feature or bit. You stand by a whiteboard covered in postit notes and say, where would you put this. Then, when they start to put it somewhere you point to things below or to the left and say, \"Is it more important that this, or more urgent than that?\" and soon enough they end up putting it in the lower left hand corner which is in the \"Don't bother with this\" section. \n\nOften the backup argument people will use is, \"Can't you just do both?\" and I will answer, \"If someone is doing that, they aren't doing something else. Nobody can do two things at the exact same time. So, what do you suggest they don't do while they are doing this?\" and then wave for them to pick an issue. They will then say, \"But can't you just spend some extra time one day to do this?\" To which I say, if there was extra time they will work on the issues in priority of urgency and importance, which one of these is less important or urgent than your task?\"\n\nYou can use this to hold the line, and often it only takes a few visits to the whiteboard for the people who have these issues which are only urgent and important in their own heads to stop bothering you.\n\nWhen they do have something which works they have pre-filtered it and are prepared to see it placed prominently, and are happy if it doesn't make it to the very top right corner. \n\nThere are some dolts who just don't get this, and it is time to revisit their continued employment.",
                    "score": 19,
                    "replies": []
                  },
                  {
                    "author": "soft-wear",
                    "body": "&gt; Eisenhower matrix\n\nIt's really called an Eisenhower decision matrix, and it just makes it easier to determine whether to do now, do later, do never or delegate.",
                    "score": 11,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "kdthex01",
            "body": "Kanban * planning poker * focus factor solves 90% of the complaints in this article.",
            "score": 11,
            "replies": []
          },
          {
            "author": "novagenesis",
            "body": "I prefer weak scrum to Kanban because at some point I'm reporting to biz and even if I give a 3-month margin of error, It's important I can provide a roadmap at some time or another, even if that roadmap changes every month.\n\nAnd it gives me ammo when a new request comes down to point to the Dream Feature of the Year and have proof that they're about to lose any chance of getting it.",
            "score": 14,
            "replies": [
              {
                "author": "zoddrick",
                "body": "This is why you have throughput and cycle time metrics. The business wants to know when or how fast you will get something done? You story it out and based on those two metrics you can give a pretty good mark on when it would be completed - even if its not the highest priority thing you are working on. \n\nScrum doesn't have any good way to measure that type of knowledge given the boundary lines (springs/releases). Its only concern is the things in the current sprint and if you are going to complete those. So when random feature gets dropped into your backlog its hard to predict when you will get to that.",
                "score": 15,
                "replies": [
                  {
                    "author": "novagenesis",
                    "body": "I don't find that.  But maybe it's because I'm not following a \"strict\" or \"formal\" scrum.  Tickets that weren't started are fair game to cull as long as the decision was well-communicated.\n\nOur releases get IMMEDIATE reactions from sales and from clients, so we need to have release dates.  Sprints give us that in the least obstructive way possible.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Old_Stay_4472",
            "body": "What if there is always a ticket for you to pick all the time?",
            "score": 3,
            "replies": [
              {
                "author": "zoddrick",
                "body": "Thats the entire point. There is always work in the RTP column and that work is stack ranked. So the top card is the most important thing to work on. In Kanban there is no time boundary like there is with scrum (think sprints/releases). Work flows from left to right across the board and is shipped on whatever release cadence you have in place.",
                "score": 15,
                "replies": [
                  {
                    "author": "Old_Stay_4472",
                    "body": "I guess my management is shitty and flood the board with tickets for the entire quarter\n\nEdit: more than capable",
                    "score": 2,
                    "replies": [
                      {
                        "author": "zoddrick",
                        "body": "You should use the backlog as the holding area for work and then have a weekly or biweekly meeting to fill the ready to pull column",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "The-Malix",
            "body": "_May I introduce you to scrumban_",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "punppis",
        "body": "Without even reading the article every programmer knows why. I have never actually used it in a professional setting.\n\nImagine having timetable for implementing card payments or something. Its ready for production when its ready. Nobody knows if you are going to have a bug that takes 2 days to solve.",
        "score": 354,
        "replies": [
          {
            "author": "Piisthree",
            "body": "I get asked something like \"How many bugs do you expect to find, and how long do you expect they'll all take to fix and verify?\" on a near daily basis.",
            "score": 243,
            "replies": [
              {
                "author": "manystripes",
                "body": "If you give a range, they will only hear the low number. If you pad it out, they'll ask why it will take so long and itemize all of the things that you know need to be done, and if you can't list it as a known they'll ask you to remove it from the estimate. Like... you already had a number in your head when we started this conversation, why were you even going to ask if you were going to complain if I gave a different one?",
                "score": 145,
                "replies": [
                  {
                    "author": "jhaluska",
                    "body": "Scary how accurate this is across every industry.",
                    "score": 33,
                    "replies": []
                  },
                  {
                    "author": "muuchthrows",
                    "body": "This is so extremely dishonest, I can't understand why developers put up with this crap. If you don't like my estimate, make up your own estimate then. Why are you coming to me for help if you don't want my help? It's an estimation, not a negotiation.",
                    "score": 59,
                    "replies": [
                      {
                        "author": "RebeccaBlue",
                        "body": "And \"estimates\" turn into \"promises\" way too often.",
                        "score": 58,
                        "replies": [
                          {
                            "author": "smackson",
                            "body": "I mean, that is the core of management philosophy in software.\n\n1) push the estimates shorter, by hook or by crook \n\n2) when reality sets in, make a big deal about the difference between estimate and current scenario. (Leverage the \"Don't break your promise!\" atmosphere.)\n\n3) Engineer works extra hours\n\n4) profit\n\n**Everything** is just to make 3 and 4 happen.",
                            "score": 42,
                            "replies": []
                          },
                          {
                            "author": "upsidedownshaggy",
                            "body": "Lmao that was our SCRUM/Agile Wrangler a couple of weeks ago. Talking about how we had a bunch of tickets spill because business didn't define their wants at all and acceptance criteria was changing while tickets were being QA'd. Said something along the lines of \"Every sprint we commit to a certain number of tickets that we promise business we'll deliver.\" a couple of devs pushed back on that stating when we commit to a sprint we didn't commit to the near doubling of point and time estimation due to injections and business changing their mind on requirements mid sprint.",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Venthe",
                        "body": "Because, and that's a hard pill to swallow, developers never understood that we are experts.\n\nYou don't really argue estimations with a mechanic or a surgeon; yet the average developer will go \"uhhh... I guess if i skip tests...\". Business is people, and people will always try to get what they want as cheaply and quickly as possible.\n\nOn the other side of the spectrum we have developers who will not compromise on their vision of scope. The correct answer from a developer is - \"if you want it in X, we can only deliver Y subset\"",
                        "score": 5,
                        "replies": [
                          {
                            "author": "muuchthrows",
                            "body": "I’m wondering if the key difference is that a surgeon or mechanic’s customer is a consumer, where it is immediately obvious they are not the expert in the relationship. Business on the other usually think they know best, in all areas.\n\nDefinitely agree on the scope discussion. I’ve learned that getting a stakeholder to accept a higher estimate almost never works, but a lower scope is in many cases accepted. It shows you’re realistic but at the same time pragmatic and solution-oriented.",
                            "score": 7,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "soft_white_yosemite",
                    "body": "I hate that we have to haggle over estimates",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "txdv",
                "body": "\"Hm, when I wrote this bug I aimed for 3 days, but it looks like 4 days to fix now\"",
                "score": 108,
                "replies": [
                  {
                    "author": "frnxt",
                    "body": "Well, we do have to factor in inflation, don't we?",
                    "score": 20,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Fyzllgig",
                "body": "That’s got to be maddening at first but I imagine you’re pretty inured to it. I hate being so directly accountable to people who clearly don’t understand software development. Just send them YouTube clips of the Rumsfeld unknown unknowns speech every time they ask",
                "score": 28,
                "replies": [
                  {
                    "author": "iamapizza",
                    "body": "Ever notice there's an entire shitton of people at orgs who need you to account for every minutiae of your team's work, but their work isn't tracked at all?",
                    "score": 64,
                    "replies": [
                      {
                        "author": "bwainfweeze",
                        "body": "Neofeudalism.",
                        "score": 15,
                        "replies": []
                      },
                      {
                        "author": "GimmickNG",
                        "body": "timesheets drive me irrationally mad.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "bwainfweeze",
                "body": "I know I have told managers numerous times that the product wasn’t ready to ship because we haven’t found enough bugs yet. \n\nYou know what your process is like, and the code quality. It’s inevitable that garbage in means garbage out and if we aren’t finding bad bugs, it’s because we aren’t looking for them properly. \n\nWhen you ship a new major version there’s a point where you start pressuring customers to upgrade to save you support costs. That’s also informed by how many patch releases you’ve issued and what’s in them. Too soon and you raise support costs, not lower them.",
                "score": 14,
                "replies": [
                  {
                    "author": "Piisthree",
                    "body": "1000% yes. This right here is the voice of experience and scar tissue. We tend to scoff at users who just refuse to upgrade for years and years, but we gotta be careful how many eager users we wish on ourselves before the code is mature enough.",
                    "score": 8,
                    "replies": []
                  }
                ]
              },
              {
                "author": "CherryLongjump1989",
                "body": "Answer their question with another question. How many women do they think they'll meet at the bar and how long will the sex last?",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "sisyphus",
            "body": "Seriously I wish I had a dollar for every time in some standup I've said 'If I knew what the problem is it would already be fixed but since I don't know what the problem is yet I don't know how long it will take to fix'",
            "score": 111,
            "replies": [
              {
                "author": "hubbabubbathrowaway",
                "body": "*blank stare* so what's your estimation?",
                "score": 79,
                "replies": [
                  {
                    "author": "PmMeYourBestComment",
                    "body": "5",
                    "score": 49,
                    "replies": [
                      {
                        "author": "WaitingForTheClouds",
                        "body": "When I say 4 and they tell me \"it needs to be a fibonacci number\" I'm gonna fucking lose it.",
                        "score": 54,
                        "replies": [
                          {
                            "author": "One_Economist_3761",
                            "body": "Yup. We have a situation where the points are added up and then an \"average points\" are created as a stat for management. Averages don't make sense here.\n\nI have tried to suggest T-shirt sizes, so Small, Medium and Large, but apparently management doesn't understand that, and they want numbers that can be shown on a graph.",
                            "score": 7,
                            "replies": []
                          },
                          {
                            "author": "NotScrollsApparently",
                            "body": "This hits close to home. Nobody on my team knows what the fuck \"effort\" is, yet the awkward PO is going to keep asking us to give her something just so she can put in a number as her higher ups demand to see it. I swear to god I spend more time lately translating their demands and questions and formulating the answer to they can understand it than I do on actual work. Sprints and managers were supposed to make our life easier and work more efficient, at the end of every week it feels like it's the opposite and I need to babysit and micromanage *them*\n\nIn another article here one time I read about a system where every ticket is either \"hours\", \"days\" or \"weeks\". That's it. I loved that idea because often you can't really be more precise than that anyway",
                            "score": 2,
                            "replies": [
                              {
                                "author": "vplatt",
                                "body": "&gt; In another article here one time I read about a system where every ticket is either \"hours\", \"days\" or \"weeks\".\n\nYou can get pretty close to that if you assume points are \"effort days\", where 1 point is ~1 day of effort for dev to start and finish that story.\n\nNotice I didn't leave room to estimate tickets in terms of hours.  Like, why even let someone micromanage your team like that?  Just take it off the table.  One point is about a day; full stop.",
                                "score": 3,
                                "replies": [
                                  {
                                    "author": "NotScrollsApparently",
                                    "body": "We are specifically instructed to NOT think of effort in terms of actual time. On one hand it makes sense since if you give a specific time range, the PMs will hold you to that - on the other nobody really understands what the fuck is effort supposed to be now.",
                                    "score": 2,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "Plasmatica",
                        "body": "\"5 what?\"\n\n\"Yes\"",
                        "score": 12,
                        "replies": [
                          {
                            "author": "EntroperZero",
                            "body": "Speed.",
                            "score": 11,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "ThisIsMyCouchAccount",
                    "body": "I have flat out asked them what number makes them happy.\n\n\"I'm saying I don't know what estimate to give because I don't know. But you don't accept that. So, what number makes you happy. If you just want to make something up with no reasoning we might as well use one that makes you happy.\"\n\nNo frustrated tone. Just matter of face. \n\nIt made a few people uncomfortable. \n\nNow, to keep myself employed I would usually follow it up by saying I could give them an update by the end of the day (or whatever) after I've had more time looking at the issue.",
                    "score": 27,
                    "replies": [
                      {
                        "author": "bwainfweeze",
                        "body": "Had a manager who early in my career didn’t like my estimate of 12 months so he tried to line item veto every single one of my sub estimates and ten minutes in he didn’t notice that I just shut down. hhe got the estimate to 6 months, which was just absurd. \n\nSo the project took 18.  And to this day I maintain that my 12 month estimate was correct. We spent so much time reworking shortcuts that didn’t pan out that it added months on, and if we hadn’t taken the shortcuts trying to stay under 12 months, we wouldn’t have missed both projections.",
                        "score": 31,
                        "replies": [
                          {
                            "author": "stahorn",
                            "body": "Sounds a bit like when I hear the smart idea to save time by not writing tests. Maybe it's faster for a week or two, but a few months into the project and you're just trying to not break stuff. Adding in tests afterwards also takes much longer.",
                            "score": 11,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "sisyphus",
                    "body": "Too real.  I didn't come here to be triggered.",
                    "score": 11,
                    "replies": []
                  },
                  {
                    "author": "dethswatch",
                    "body": "if only I'd be able to invert a btree, this would have never happened",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "sisyphus",
                    "body": "Too real.  I didn't come here to be triggered.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "bwainfweeze",
                    "body": "“Of you? Poor and deteriorating.”",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "RVelts",
                "body": "It’s like asking somebody how long it’s going to take them to find their lost car keys. I mean, maybe 5 minutes, maybe two days, maybe I’ll need to contact the manufacturer for a replacement, maybe I’ll buy a helicopter instead.",
                "score": 35,
                "replies": []
              }
            ]
          },
          {
            "author": "Jerome_Eugene_Morrow",
            "body": "My team is forced to do sprint planning for ML work. \n\nHard theoretical problem that academics have never cracked? Let’s give that five points and plan as if it will be done in two weeks.",
            "score": 85,
            "replies": [
              {
                "author": "heresyforfunnprofit",
                "body": "Writing up the acceptance criteria for those stories is always fun.",
                "score": 22,
                "replies": []
              },
              {
                "author": "StrangelyBrown",
                "body": "This is when you respond to the question \"How long should we allocate to do this?\" with \"After how long of doing this and failing to succeed would you recommend giving up? Because we need at least that long\"",
                "score": 6,
                "replies": [
                  {
                    "author": "GimmickNG",
                    "body": "A lot of the time research takes way longer than any sprint can accommodate, and although you can break it down into pieces, you'll never be able to account for the unexpected fully.\n\n\"Build a SOTA model that has higher accuracy than the literature\" sounds easy only if you have absolutely no idea what goes into it, and even if you timebox a maximum amount of time before you give up, you're more likely just going to end up giving up given the short deadlines. Hell literature review in itself can take a couple months, and that's just the beginning. No way most companies will grant access to that level of time.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "GimmickNG",
                "body": "I didn't come here to catch strays. Yeah lets just condense an entire graduate degree's worth of work into a sprint, it's not like it's hard or anything.",
                "score": 3,
                "replies": []
              },
              {
                "author": "CommunismDoesntWork",
                "body": "I built a really really complex ML pipeline/model/thing that ended up taking me a year to finish, and at the start, I didn't even know if it was possible, much less the exact stuff I would be doing. I still did sprints, sprint planning and of course demo day every two weeks to show off my progress. I just wrote a \"spike\" story and said it would take up my entire sprint. In it, I wrote down the things I thought I could accomplish like research a list of possible algorithms, test them, and report on how well they work. After that, each new story got more and more refined and detailed as I had a clearer picture of the solution. But why do any of that in the first place? Why not just do the demo after 2 weeks without writing the story? Because writing down what I plan on working on helps organize my thoughts and makes me think of things I might have forgotten about. It also keeps the entire team in the loop and manages expectations. The last thing you want is to here a comment like \"That's all you got done?\" during a demo. Sprints make everyone aware of what to expect during the demo, and I always got a \"hell yeah, good progress\" during demos. Sprint and stories are good for you and everyone around you. Just do it.",
                "score": 9,
                "replies": []
              },
              {
                "author": "Venthe",
                "body": "It's still amazing to me to this day that companies mandate scrum (which I'm a big fan of) to what essentially amounts to R&amp;D.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "njharman",
            "body": "Hmmm, you're description sounds like every project management system except Agile which sprints are a small part of.\n\nI've almost never worked in professional setting that did not have deadlines. I've never seen any one do actual Agile even though most claimed.\n\nAgile is not how top level/middle managers are trained or operate. They want to plan, predict, have (business based, not technical based) deadlines and dictate how much gets done. They don't change because they're rarely accountable, their poor practices/results are largely externalized (devs pay for crunch, users pay for bugs and security breaches, bottom up pay for mass layoffs after failed project) \n\nAgile is at its core moving the decision of how much gets done to developers (who should know). The stakeholders decide what order things get done. \n\nSprints only exist because estimation inaccuracy more than linearly scales with duration of work.",
            "score": 18,
            "replies": [
              {
                "author": "punppis",
                "body": "Sure you have deadlines for a feature, but nobody is forcing me to have so many deadlines at once that I need to separate them into 2 week sprints.\n\nI have always been a part of quite small team in game industry so might be different. But to be honest if I know how to do something beforehand, it gets done that day. Usually there are problems that are hard to see beforehand, like scaling issues on server side.\n\nI have a backlog with priorities, I just do them at my pace as does everybody else, artists and designers too. Then you get a patch. Might be one week or 1 month between patches. Sometimes even more. After the basics are made (MVP), you dont have to wait for anyones work and nobody waits for yours. Sometimes I get asked if I can make and test a feature _today_ and Ill try, like adding some forgotten small feature right before building. If i cant do it no biggie, its in next patch.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "bwainfweeze",
            "body": "Illusion of control. People get really uncomfortable around known unknowns. They need therapy but won’t go.",
            "score": 12,
            "replies": []
          },
          {
            "author": "shenglong",
            "body": "&gt; Without even reading the article every programmer knows why. \n\nI've been a professional developer for more than 20 years and I have no idea why. \n\nEvery week there's one of these articles. OOP is broken. Scrum is broken. REST is broken. NOSQL is broken. SQL is broken. etc etc etc\n\nI have very rarely experienced the pain points elucidated by these authors to the point where I felt the need to blog about it. There are of course exceptions, but these were often because of entire ecosystems, e.g. SOA, or the shit surrounding stuff like Sarbanes-Oxley.\n\nIf you find that *IT* processes aren't working, it's usually a sign that they are misaligned with *Business* requirements/processes. Which either means you've picked the wrong process toolset, or business needs to get on board (cnf: Service Partner vs Strategic Partner).\n\nEvery process has its pros and cons. One of the great things about Agile (not sprints per se) is that it allows you to course-correct and adjust fairly easily. I'm going through an issue with business process/requirement misalignment right now. How to handle it? I tell the team to switch to Kanban for a while, and we go on with our lives. I have no idea why people feel the need to be so dogmatic about trivial things.",
            "score": 15,
            "replies": []
          },
          {
            "author": "Venthe",
            "body": "Sprints optimize for a different thing. \"How to slice the work, to at least deliver every sprint to be able to gather feedback and optionally pivot\"\n\n\"Done when it's done\" can be used legitimately, but more often than not I've heard it as an excuse. \"Done\", \"delivered\" is better than perfect. That's why you split stories to fit in the sprint and investigate the outcome to fix the issues that prevented them being finished.",
            "score": 21,
            "replies": [
              {
                "author": "BiedermannS",
                "body": "Sprints optimize for an environment where the people working on the software can't be expected to behave like adults, so you ask them every day how its going and force arbitrary time ranges without accounting for what actually needs to be done",
                "score": 5,
                "replies": [
                  {
                    "author": "balefrost",
                    "body": "I think this is an overly cynical take.\n\nIn my opinion, sprints work well when the sprint's scope is treated as an estimate, not a target. \"We thought we would get X done this sprint, and we actually got Y done\". That helps you establish a moving baseline estimate of how much work you can get done in a sprint.\n\nIf you get too little done in a sprint, you can ask \"why\". Maybe it was some transient thing - John was sick for 3 days, so we didn't get as much done as we had planned. Maybe it's a systemic issue - there are too many meetings / distractions, or maybe we're getting scope-creeped by the customer. Regularly looking at \"what did we plan / what did we achieve\" is necessary to tease out these systemic issues and to respond to them.\n\nIn my opinion, these are *more* adult ways to approach work than to just say \"It'll be done when it's done\", with little transparency to the stakeholders.\n\nUltimately, it comes down to trust. If the stakeholders don't trust the developers, then it will suck no matter what system is used. If you're able to say \"I'll be done when it's done\" to the stakeholder, then there's already a large amount of trust in place, and Scrum would likely work just fine.",
                    "score": 16,
                    "replies": []
                  },
                  {
                    "author": "Venthe",
                    "body": "Who asks? Who forces?\n\nProduct owner? He sets the backlog. You - developers - tell how long it will take. Or negotiate how to slice the part. Who asks, on a daily? Scrum master? Daily is not a report for the sm or po, if you feel it this way, remove them from the meeting. This is meeting for you to organise the work for a day.\n\nIt really screams that your environment is not ready for scrum/sprints, much less agile.",
                    "score": 9,
                    "replies": [
                      {
                        "author": "BiedermannS",
                        "body": "My last job was an environment where we did scrum. Not only did we do scrum, we did SAFe. Dailies, retrospectives, everything, yet nothing got really done. The retros where just there to bitch about whats wrong and the dailies were to make the PO happy, so they knew everybody was working.\n\nAnd I agree, that environment wasn't ready to work really agile, but that has nothing to do with scrum. The big problem is, that scrum will not solve that. Getting into an agile mindset will. But once you have an agile mindset, there is no need for scrum and sprints. Get a kanban board, do planing meetings as needed and just work together like a team of adults. Allow the team to self manage and they'll do great things.\n\n&gt; This is meeting for you to organise the work for a day.\nI don't need a meeting to organize the work for a day. I can do that on my own. And if something goes wrong, I ask my coworkers instantly. We have the agility we need to get stuff done and there is no need for fixed sprints at all.\n\nAlso, I'm not saying to dont plan at all or to not split things up into small pieces, I'm just saying you don't need scrum for that. You can be agile without using scrum.",
                        "score": 9,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "zabby39103",
            "body": "Sprints are supposed to be short and for things you can quantify aren't they?  Ideally two week tasks at most, break up the task if it is longer, it doesn't have to be merged or delivered, just give a sense of what was done.  It's not for when something is ready for production.\n\nAlso if it takes longer, that's totally fine, as long as you can justify and explain during the meeting.  If someone takes a super long time I'll double check their PRs to see if they are actually doing work. If used properly they just keep people accountable. I know some people at my work would play games all day if we only relied on \"trust me bro\".",
            "score": 3,
            "replies": []
          },
          {
            "author": "venuswasaflytrap",
            "body": "Scrum or otherwise, the way I see Sprints, is “okay, we have no idea how long it will take to accomplish this semi open ended task, but we can at least make more solid estimates for the near future”.\n\nObviously you don’t know what bugs you’re gonna get back, but I feel like the question is “what are you planning to do in the next [x] days, so that we can coordinate with other people in the business and other teams”.\n\nSome of “rules” given on sprints lead the kinds of problems you describe where you have a high risk thing which may have 5 days of bugs or 0 bugs, which really gives high variance on sprint estimates - to that I would say, don’t estimate the fix for the hypothetical bugs which may or may not exist. Just scope out something that you have high visibility of and high predictability about.\n\nE.g. “I can’t promise it will be bug free, but within the next 2 weeks, I can definitely have a first pass, and you can expect early versions of [x, y, z] features. And I will prioritize those things because we need to coordinate with other teams, and the earlier they can see those features, even in a buggy state, the earlier we can get feedback or that they can get going in something”.\n\nI don’t think it’s really as complicated as developers like to think. The fact that it’s software problems doesn’t make it special.\n\nI imagine hiring a contractor to build a custom house on an empty plot. It’s a long task, with lots of unknowns. Yeah there’s a blueprint, but so many moving parts with supplies and regulations and unforeseen barriers which might change things.\n\nIf you’re the homeowner who’s paying for it, what you don’t want, is a contractor to say “I’m gonna build the house, and it’ll take as long as it takes, and the therefore as much money as it takes and you just gotta live with it”. That’s nuts. You just sit there with no oversight or influence as this project goes on forever.\n\nWhat you want is someone that says “okay, for the next two weeks we’re focusing on digging the hole for the foundation, even if we change the plans it will still need this. I’ve got everyone coordinated to this goal. If it goes well we can schedule the concrete truck to lay the foundation, but that won’t be until we meet next”. And periodic updates with periodic bits of work and waypoints where you can adjust the plan, and periodic tangible evidence of progress, even if you didn’t know exactly what those waypoints would look like on the day you started.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "codingclosure",
        "body": "This perspective is pretty common, however \"sprints\" are not the problem, how they are used is the typical culprit. In other cases its simply the wrong tool for the job e.g. when business priorities are changing faster than the sprint.",
        "score": 103,
        "replies": [
          {
            "author": "zerovian",
            "body": "business priorities change &lt; 2 weeks?  pure chaos.  that's a management issue.",
            "score": 99,
            "replies": [
              {
                "author": "zephyrtr",
                "body": "Yes but this is also many folks' lived experience. The fact that it sounds horrible doesn't mean it's not happening.",
                "score": 76,
                "replies": []
              },
              {
                "author": "codingclosure",
                "body": "It also could be a code/system issue resulting in a high defect rate or other reasons. That said, dev process absolutely should adapt to the needs of the business, not drive it. Sometimes a hole needs to be dug out of and scrum might not be the best process solution, something like kanban might be.\n\nAdditionally, 2-week sprints are common, this isn't a rule.",
                "score": 9,
                "replies": []
              },
              {
                "author": "Fit-Jeweler-1908",
                "body": "sprints can be longer than 2 weeks, its not a hard rule.  we have teams doing 1 week sprints while others are doing longer, usually up to a month...",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "PuzzleCat365",
            "body": "There is zero framework that can deal with priorities changing every week or too.",
            "score": 25,
            "replies": [
              {
                "author": "codingclosure",
                "body": "That simply is not true, this is a good case for Kanban. \n\nA valid example of this maybe a resource constrained team is working on a new feature while the app is new and customers are onboarding. In this scenario, onboarding customers have run into go-live blocking gaps that need addressing. The business must prioritize addressing these gaps to start recognizing revenue, the dev team must pivot. Product may have not done enough validation up front, sure, but this is often the case with a beta rollout that isn't well-controlled. Its temporary as more customers are onboarded and gaps are addressed. At this point you might re-evaluate moving to Scrum or a process that doesn't need to be so reactive.",
                "score": 16,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "xmBQWugdxjaA",
        "body": "Sisyphus ain't happy.",
        "score": 13,
        "replies": []
      },
      {
        "author": "exjackly",
        "body": "I generally agree with the article.\n\nCalling them sprints - and requiring them to be two weeks long - is a great way to burn out your team.  Managers hear sprint, and the focus on an incessant drumbeat of velocity/story points/..., and the expectation is for 40+ productive hours a week.\n\nDespite us knowing that you will not have 40 hours of productive time even working 50-60+ hours a week.  Hell, I've been at places that had 30 minute stand-ups that ran to an hour daily, 2-3 backlog meetings per sprint (also an hour), tech demos every sprint (2-4 hours), bi-weekly all-hands, weekly team coordination meetings across the entire program, separate meetings with product owners,  ... Legitimately more than 10 hours (closer to 15 with 20+ possible for tech leads) a week per team member before counting anything else or allowing for breaks.\n\nOther places have had sprints planned out 2-3 months in advance, had fixed ship dates 9-15 months out, no feature flexibility, and of course the team was not the ones setting those schedules.\n\nI can also count on one hand the number of Scrum Masters, Agile Team Leads, etc. that I have been able to have a meaningful conversation about the Agile Manifesto with.  And none that have genuinely been able to put people ahead of process or software ahead of documentation.\n\nI'll own that none of these have been 'Agile' shops in reality.  But, this is what is being sold as Agile and what developers are being held to in way too many places.",
        "score": 12,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 88,
        "replies": [
          {
            "author": "EveryQuantityEver",
            "body": "That doesn't follow at all. While doing work for someone else means its not all going to be fun, that doesn't mean it has to be made worse.",
            "score": 15,
            "replies": []
          },
          {
            "author": "hippydipster",
            "body": "Bingo.  If you became a software developer, your role was always going to be to make what others want.  \n\nIf you want some control, some purpose, self-determination, then you needed to learn an actual domain, and be a leader of work in the domain, as opposed to a facilitator of others dreams.  Computer Science can be that domain, but software developer cannot.\n\nHey, I learned this the hard way too.",
            "score": 26,
            "replies": [
              {
                "author": "Headpuncher",
                "body": "that sounds a lot like a defeatist attitude. I changed jobs, went from sprints and PM always asking for unrealistic estimates to one half hour meeting a week and being allowed to \"get on with it\".  I have tasks to complete, but there isn't a group of non-techincal, or has-been-technical, career advancing asshats on my case on a daily basis. Life is literally transformed for the better.",
                "score": 17,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "EmperorOfCanada",
        "body": "Sprints are one of the core delights of micromangers. Standups are micromanagement crack.",
        "score": 66,
        "replies": [
          {
            "author": "Devboe",
            "body": "We switched from everyone giving an update to going through the open items in the sprint and only giving an update if you have something to contribute to one of those items. Makes stand up much more enjoyable.",
            "score": 10,
            "replies": []
          },
          {
            "author": "backelie",
            "body": "&gt; The Daily Scrum is a 15-minute event **for the Developers of the Scrum Team.** To reduce complexity, it is held at the same time and place every working day of the Sprint. If the Product Owner or Scrum Master are actively working on items in the Sprint Backlog, they participate as Developers.\n\nIf you have managers in your standup that's an organizational issue.",
            "score": 11,
            "replies": [
              {
                "author": "Dankbeast-Paarl",
                "body": "How do I remove the managers from standup? lol",
                "score": 6,
                "replies": [
                  {
                    "author": "backelie",
                    "body": "Step 1: Talk with your team and/or the scrum master about all the issues you have with how the org is doing things wrong.\n\nStep 2: You and/or the team and/or the scrum master talk to management about the benefits you'd think you'd see if you were actually following Scrum instead of the way you're doing it now.  \n(You might want to do this very gently bit by bit over time.)  \n\nDepending on your org/management it's more or less likely that this wont change anything but that's not a problem with Scrum, it's a problem with management refusing to change. Frameworks can't change people.  \n\nIf you do all you can to make your own process better and come up against a hard wall then you either accept that you're playing stupid inefficient games, do whatever work you feel comfortable with and receive a pay check, or you go looking for a new job.",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "bwainfweeze",
            "body": "Don’t forget being able to catch your developers “lying” practically every week so you have an excuse to administer verbal beatings.",
            "score": 18,
            "replies": [
              {
                "author": "EmperorOfCanada",
                "body": "Absolutely. I find that this becomes a vicious circle. Bad managers use these tools to treat their developers like children, so they start acting like children, which justifies treating them like children.\n\nWhen I hear a software manager say anything like \"herding cats\" I instantly know they are a micromanager who is endlessly being frustrated by people who don't respect them and now hate their jobs.",
                "score": 14,
                "replies": [
                  {
                    "author": "bwainfweeze",
                    "body": "I hoped Ted Lasso would change some of this, but I’ve only worked with one manager since the show aired, so my sample size is practically a divide by zero error.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "EmperorOfCanada",
                        "body": "There is a massive difference between managers and leaders. Night and day. The worst part is that managers think that by copying some of the processes used by leaders they can be better managers. \n\nThe simple distinction between a manager and a leader is how many projects they can run. A leader can run dozens, a manager might struggle with one. \n\nAnd, by leaders, I am not talking about a senior manager who manages managers. I'm talking about someone who has teams working on each project where the entire team spends their entire time actually working.\n\nA leader has a clear vision, they have imparted that vision to to the people working on the project. Often they built the vision together. The vision is flexible as needed. Then, they are guardians of sticking to the vision; some of this will be clients trying to drift the vision in stupid ways, there will be other people covetous of the resources, then there will be the fools who just want to pee in the soup because they like the flavour better. The leader will spend their time more like a guard dog keeping these forces at bay.\n\nSome of their time will be gathering things the teams need.\n\nVery little of their time will be spent in meetings where there isn't a specific problem to be solved. Once you start having status meetings you are dealing with a manager, not a leader. Especially in 2024, there are so many tools which will automatically measure and monitor progress. Anyone who wants to see a progress report can log in and see. To have a manager fiddling with these reports simply means that someone is hiving off their own little kingdom of power, as controlling information is where power comes from. If you are able to control the flow of information up and down, you have some power. To have free access for everyone to all the key information is to eliminate any power most managers would be able to accrue; thus eliminating most management positions. \n\nAnd this is where most managers are entirely delusional. They somehow think they need to filter this information for the developers because the developers will make bad decisions; which makes little sense unless the manager is significantly smarter and more capable than the developers; which is very rare, as most managers are failed developers who got their position through seniority/politics, and not some measure of great management prowess.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Markavian",
        "body": "Sprints with a targeted release window are better than 3-6 months long projects with high risk deployments at the end.\n\nBut in a world where good CI/CD pipelines exist, and every feature is releasable independent of a wider release cadence... then agreed sprinting constantly is a bad idea.\n\nSprints are great for green field projects where progress needs to be shown to stakeholders, an accountability is maintained by releasing to a production ready space - but becomes useless the moment real users start using your system, and you need to fire fight issues, or respond reactively to market feedback. (That's where Kanban or Scrumban steps in).\n\nLike any agile tool or methodology - different processes are good in the right context for a specific phase of software and product development.",
        "score": 33,
        "replies": [
          {
            "author": "PublicFurryAccount",
            "body": "The value of sprints with brown field projects is that they chop engineer time into digestible chunks for program management, which becomes a major concern once the product is established and the organization becomes complex.\n\nJust as important, a lot of engineer time will be used by adding new features. As you imply, we're done with the world were you write some code, ship some disks, and never touch the thing again because you can't really do much to it after it ships.\n\nThese changes are, in my experience, the vast majority of what goes on and really can be fit into a sprint-based rubric easily. Even when features run into serious problems, it's much easier to block out the necessary time, bring resource budgets to other stakeholders, provide clear times to reassess those allocations, and evaluate just how bad an issue is in a way that's easier for the entire organization to understand.\n\nIt's arguably more valuable for something that's being done on a well-established product, where there are a lot of competing demands that are well-defined and ready for work, than for a truly green field project that is generally the sole priority of the company anyway.",
            "score": 11,
            "replies": []
          }
        ]
      },
      {
        "author": "local_eclectic",
        "body": "Sprints do not exist to me. Project managers can use them all they want, but I personally exist in the headspace of kanban because of, you know, not being naive.",
        "score": 20,
        "replies": [
          {
            "author": "backelie",
            "body": "Project managers do not exist to me, because anything they could want from me can be conveyed by the product owner, whose role is actually useful to me as a dev.",
            "score": 7,
            "replies": [
              {
                "author": "NotScrollsApparently",
                "body": "You have an useful PO? Mine is just a courier between PM and devs, badly translating statements from either party until it escalates either devs or PMs have to step in and sort it themselves. \n\nI've literally had multiple situations where I had to explain something to our PO, they sent it to someone else, they responded, the PO forwarded it to me and then I had to explain why that would/wouldn't work again to the PO so they can go back and explain it tothem, and this went on and on...",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "look",
        "body": "Kanban is the way. Sprints are just an illusion of control.",
        "score": 15,
        "replies": []
      },
      {
        "author": "alwyn",
        "body": "It’s the 'people' who wants the sprints without themselves running along which is the problem",
        "score": 4,
        "replies": []
      },
      {
        "author": "Draqutsc",
        "body": "For my team, sprints just reduced efficiency massively. In the past, production bugs where squashed, in the week they where found. Now they have to wait for the next sprint. Which is massively annoying the users.\n\nAnd for some reason we have to use story points, AND hours in the 2 rounds of planning poker... The first round is for the story points, and the second round is for the hours, because the story points are useless and the estimated hours mostly always wrong. I really preferred Kanban.",
        "score": 6,
        "replies": [
          {
            "author": "asurarusa",
            "body": "&gt; And for some reason we have to use story points, AND hours in the 2 rounds of planning poker\n\nI worked at a company where we switched from points to hours and back every time the scrum master quit. After the first round trip I realized no one believed the estimations and no one was doing real analysis because there’s no way we could have gotten away with jumping back and forth so often if people actually used the data.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "10000BC",
        "body": "Because we re not meant to sprint like rats in a wheel! Sprints should be seen like the „competition season“ for athletes….with meaningful time to reflect between seasons!! Fuck the rat race!",
        "score": 4,
        "replies": []
      },
      {
        "author": "zrooda",
        "body": "It's funny that the practical form of agile took the shape of these rigorous processes while line 1 of the agile manifesto says\n\n&gt; Individuals and interactions over processes and tools",
        "score": 4,
        "replies": []
      },
      {
        "author": "Ok_Elk_6753",
        "body": "Our sprints are two weeks which culminate in deployments. Probably 3-5 days of those are code freeze. I spend more time doing nothing and in code freeze rather than work, and it's tiring. The moment i feel I'm hitting some stride and doing progress, the sprint is nearing the end and testing and deployment time is near. I swear I get paid to do nothing during code freeze several days a month.\n\nI despise and hate short sprints from the bottom of my heart but fuck it I'm handsomely paid and I get downtime where i can do a bit of gaming or something else, so I wont ruin that, let them waste their time and money.",
        "score": 4,
        "replies": []
      },
      {
        "author": "jonr",
        "body": "Developing software is more like a long hike, not sprints. One step at a time, enjoy the view, leave no garbage. :)",
        "score": 4,
        "replies": []
      },
      {
        "author": "dave8271",
        "body": "Building software for a business that by definition cares about revenue, resource and projections is what takes the joy out of building software, regardless of what framework or methodology you wrap around those requirements, because those requirements will always be the driving force of both what you do and how it's measured.\n\nThe problem with agile philosophy is that it's very much oriented towards a mentality of we've got money to live on while we do what we love and do it well, so who cares if this never monetizes and eventually folds? If you're a VC backed start-up and you don't really care if your idea succeeds or not provided you get to spend all that VC liquidity first, this approach will work - indeed I've seen many start-ups collapse because they put all their time and effort into building beautiful CI/CD pipelines, used the latest bleeding edge tech stacks and their engineers had a whale of a time \"doing everything the right way\" (read: LARPing at being one of the world's biggest tech giants) and the only problem was in all of that, they forgot to create a product.\n\nThis is the way of the world. If you want to build software, sustainably, for a living, it's not going to be as fun as pursuing it for a passion.\n\nOh and don't get me wrong, btw - even within a business I would still advocate for some methodology based on agile values and empowering the developers and technical experts to guide the technology part is still the best way to build software that achieves the best results _for the business_. I'm just saying it doesn't matter whether it's Scrum, Kanban, whatever, you're going to get frustrations that are part of the methodology and/or come about as a result of business pressures adjacent to the methodology, because that's how running a business works.",
        "score": 44,
        "replies": [
          {
            "author": "asphias",
            "body": "&gt; The problem with agile philosophy is that it's very much oriented towards a mentality of we've got money to live on while we do what we love and do it well, so who cares if this never monetizes and eventually folds? \n\n\nErrr...\n\n\n&gt; **Working software** over comprehensive documentation\n&gt; **Customer collaboration** over contract negotiation\n\n\n\nIf you're not working together with your stakeholders and not delivering working products then you're not even following the basic guidelines of the agile manifesto.\n\n\nI guess we can just call anything agile nowadays.",
            "score": 46,
            "replies": [
              {
                "author": "joe-knows-nothing",
                "body": "&gt;I guess we can just call anything agile nowadays\n\nAlways has been",
                "score": 37,
                "replies": []
              },
              {
                "author": "Turbots",
                "body": "I've been \"certified\" as a scrum master since 2008, because as a consultant it made my dayrate go up.\n\nIn most cases, scrum is done in a way that totally contradicts the agile manifesto, in fact, most people in software development, especially managers and team leads, do not know what is in it, let alone know it exists.\n\nIndustrialized Scrum is followed to the letter as it was taught: a bunch of rules in a rulebook that needs to be followed to the T.\n\nSo happy to be working in a truly agile organisation using a mix of Scrum and Kanban, because that's what works for us.\n\nWeekly sprints with 1 Jira board for all items focusing really hard on flow and getting stuff to production continuously, and removing blockers.\n\nDaily, very short stand ups where we only talk about blockers or nice to knows. Product owner sometimes attends to clarify on shifting priorities.\n\nWeekly demo to product and business.\nWeekly retro if we feel like it, the retro board is open all week to add items when you think of something that could be improved, something that was nice, or something that you're wondering about.",
                "score": 10,
                "replies": []
              },
              {
                "author": "zephyrtr",
                "body": "Just about every person I see on the Internet complaining about agile is actually either complaining about Jira/Scrum or has no real understanding of what agile is. Very, very few folks are even aware there is an agile manifesto. And you can finish reading the entire thing in about 60 seconds.",
                "score": 15,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "&gt; is actually either complaining about Jira/Scrum or has no real understanding of what agile is\n\nThat's because \"agile\" as an industry movement has nothing to do with the agile manifesto.\n\nIt's like complaining about Christianity during The Crusades and then some rando pops up to tell you how good a dude Jesus was.  Nobody cares because it doesn't matter.",
                    "score": 12,
                    "replies": [
                      {
                        "author": "asphias",
                        "body": "Except it does matter.\n\n\nAgile as written is an anarchist methodology that puts power in the hands of the developers.\n\n\nAll these companies think they're just implementing a productivity tool, but they're accidentally providing us with a stick to hit stuck up managers with and work to provide a better work environment.\n\n\nIt's certainly not what management *meant* to happen(in most places), but if you play your cards right you can use the agile manifesto to reorganize your own team into something that actually works. If anyone disagrees point to the manifesto and ask if we stopped working agile?\n\n\n(Although depending on the company/manager this may result in good progress, or it may result in your termination. Proceed carefully)",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Missing_Username",
                    "body": "What they're complaining about is how \"agile\" is implemented where they work.\n\nIt doesn't really matter what agile is *supposed* to be, when you can be pretty safe in assuming that to your average non-developer it means jira/scrum.\n\nAnd if the response to that is \"you could teach them\", you have far more faith in people than I do at this point. They don't care to learn, and I'm not Sisyphus.",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Schmittfried",
                "body": "You can produce deliverables quite frequently without ever meeting customer demand. Agile just prescribes quick iteration and early feedback. Sure, ideally that feedback comes from customers, but that requires customers to collaborate with in the first place. While finding product market fit you don’t necessarily have that. ",
                "score": 6,
                "replies": []
              },
              {
                "author": "dave8271",
                "body": "Yes, notice how \"revenue\" and \"covering costs\" aren't part of agile philosophy. I'm not saying they should be, I'm simply highlighting where the clash of interests occurs and why businesses end up adopting frameworks like Scrum.\n\nWorking software can mean a lot of things. The devil is in the details.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "MajorMalfunction44",
            "body": "Solo game dev, here. Agile and Kanban keep me sane. One of the joy leeches is not seeing an end to things. Having a board of tasks lets me put things down. Seeing consistent progress is very reassuring.",
            "score": 17,
            "replies": []
          }
        ]
      },
      {
        "author": "dfwtjms",
        "body": "Be agile, not Agile. Just do the thing. Recently I've learnt to truly appreciate managing my own work. So much pointless box ticking going on in this industry.",
        "score": 3,
        "replies": []
      },
      {
        "author": "rinkebysvenska",
        "body": "I hate the word agile and I hate story points with a passion",
        "score": 3,
        "replies": []
      },
      {
        "author": "NiteShdw",
        "body": "I prefer Kanban over sprints. It's more flexible and more project focused, and doesn't impose artifical deadlines for work.",
        "score": 3,
        "replies": []
      },
      {
        "author": "FantasticFolder",
        "body": "Agile is a Cargo Cult",
        "score": 3,
        "replies": []
      },
      {
        "author": "ImTalkingGibberish",
        "body": "Agile is not the problem, the business doing ceremonies to pretend we are agile is.  \nStarting a feature knowing you can’t test nor deliver isn’t agile.  \nTelling the team about a new requirement without any detail and giving us deadline isn’t agile.  \n  \nA big part of the corporate world are doing things to check boxes on higher level reports",
        "score": 3,
        "replies": []
      },
      {
        "author": "ore0s",
        "body": "Comparing 2 weeks vs. 6 weeks with buffer in between to take care of everything isn’t fair; the alternative is worse. Some clients expect every request to be handled like IT support—30 minutes, 1 hour max each, no planning. \n\nI had a client who constantly bombarded me with tasks, treating me like a chatbot. When I tried to prioritize and set a weekly schedule, they got frustrated, thinking I wasn’t working and demanding constant responses. They couldn’t see why technical work needs structure and space to do focused work, insisting the needs of a business doesn’t work that way. \n\nAnd actually-- this mindset isn’t rare. Many senior stakeholders in large companies, including big tech, have similar expectations. They'd churn out endless task requests if left alone. It’s tough to bridge the gap when clients don’t understand the complexities of development workflows.",
        "score": 2,
        "replies": []
      },
      {
        "author": "DeadPlutonium",
        "body": "I’m exhausted by the restating of the obvious and preaching to choir — how tf do we get management and business folks to drop the dogmatic following of agile?\n\nIt’s legit the number one thing that makes me not look forward to sitting down for a job I otherwise love.",
        "score": 2,
        "replies": []
      },
      {
        "author": "IDunnoReallyIDont",
        "body": "I find it way more joyful than waterfall. It’s the only way to deliver true incremental value and quickly pivot and adjust as needed.",
        "score": 2,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Fuck middle managers and fuck agile, the processes anyways and how it exists in most orgs.\n\nI hate they are called sprints, should be called mini cycles or something since every manager takes it to mean 120 percent all the time.\n\nAnd retros along with planning, points, scrum, stand ups, etc are mostly negative time savers as in they are way too complex and take way too much time.\n\nPeople adopted it as a way to micromanage but seem proactive 90 percent of the time",
        "score": 2,
        "replies": []
      },
      {
        "author": "NoJudge2551",
        "body": "This rant article has an issue with a bad corporate culture in whatever organization, not the Agile framework. Frameworks are abused by people. It's also just a framework. If it's not working, then use waterfall, kanban, etc. Also, if the corporate culture is bad, then just use burecraticly neutral techniques. At my organization, they tell us to ask for prioritization. List out the items being worked on and ask what are the top 3, what are the new deadlines, whag other resources can be tapped to complete within the deadline, etc.",
        "score": 2,
        "replies": []
      },
      {
        "author": "gammison",
        "body": "Work allocation and planning frameworks are pseudoscientific and people will change processes to whatever fits for them in the end but that process will always be disrupted when push comes to shove.\n\nThe problem is the relationship between owners and workers is fundamentally antagonistic. Bad scrum or agile doesn't make crunch or buggy code, being forced to do something other than what you've planned or doing things in forced timelines you don't control does.",
        "score": 2,
        "replies": []
      },
      {
        "author": "oconnellc",
        "body": "The author seems very upset at the word 'sprint'.  Things would be much better if we used a word that means to move at a comfortable pace.",
        "score": 2,
        "replies": [
          {
            "author": "hippydipster",
            "body": "We should work in meanders.  What should we work on this meander?  Don't know, maybe we'll just wander around and see what's most important today.\n\nAnd then when people say \"hey we need a goal and commit to it!\", and we can say, \"yo, it's not called a 'meander' for nothing\".",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "chowderbags",
        "body": "One of the biggest problems is that they're called \"sprints\" in the first place. That implies people working flat out the entire time. People can maybe do that for a short period. A few months. After that, they'll burn the fuck out. But management demands the amount of work you get from a team working flat out \"because that's what you did before, so why are metrics down?\". If it had been called \"cycles\" or something instead, maybe it would've resulted in fewer dickhead managers thinking that the industry standard is to work people to the bone.",
        "score": 2,
        "replies": []
      },
      {
        "author": "mikkowus",
        "body": "At the end of the day it's for managers to have an idea of how long things take to get done so they can report on it.",
        "score": 2,
        "replies": [
          {
            "author": "-ghostinthemachine-",
            "body": "Right. The sprints aren't for you, just do your job. I have only delivered my code for 10 years and do you think any of my t-shirt sizes or points or estimates have ever been correct? It's someone else's problem when the points don't match, my job is to deliver value to the team and to the company.",
            "score": 3,
            "replies": [
              {
                "author": "mikkowus",
                "body": "Yes. Exactly. In my mind, It's a way for non programmers to pretend they are part of them team which usually results in them dragging things down and stressing us programmers needlessly",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "ou812_today",
        "body": "PMP+SAFe = Death of Agile.\n\nMost of the Scrum Ceremonies are there to enable communication and foster collaboration both (C&amp;C) internally with the team and externally with stakeholders. If that’s not happening it usually means the focus has become on the process and not on C&amp;C. \n\nUsually, this results because project managers get involved or run the Agile teams or are managing the Scrum Masters. This isn’t a blame. Project Managers have a different focus and have a fiduciary duty to the company. Scrum Masters are people servants to the Agile teams and are responsible for ensuring C&amp;C is happening within the teams. Mixing the two roles into a single person is most often the death of agile. Yet, PMI has been pushing to mix these for decades once they realized that Agile and Scrum Masters would lead to devaluation of PMI (incorrectly assumed that it was a threat). \n\nIt’s a lost easier to be Agile in a smaller team and company where milestones and delivery dates are flexible. The hardest part with Agile teams has been forecasting. In many shops executives need to inform customers and other stakeholders of release dates. Also, those dates are immutable in some cases. When this scenario exists, Agile teams struggle between staying “pure” and having to provide metrics and progress reports that confirm they are on track or off track. It can still be done, without adding process and making developers lose joy. But often times, process creeps in as “guard rails” to prevent teams from going off track. These guard rails over time lead to “death by a 1000 cuts” scenario. This ruins Agile more than just following ceremonies for the sake of ceremonies.",
        "score": 2,
        "replies": []
      },
      {
        "author": "UncleGrimm",
        "body": "&gt; Think about your last sprint. Do you feel those “Individuals and interactions over processes and tools” and “Responding to change over following a plan” parts worked well?\n\nYes, actually. The mere existence of a “sprint” does not prescribe how to handle any of that. \n\nI just use sprints for loosely planning my work out, and so other people can see what I plan to work on. If a coworker runs into an issue that’s not critical but I can solve it quickly, I fix it and retroactively make a ticket and pull it in. If there’s 1 day left in the sprint and I’ve got nothing to do, I’m pulling something in and it might “carry over,” but like, that literally means nothing unless you work beneath micromanagers… in which case, development there will always suck ass whether they’re “agile” or have “sprints” or not, because you work under micromanagers.\n\nIn my experience, good companies still have some processes you gotta follow, but if you get shit done and the right shit gets done, then nobody really cares how you run your board. My board is primarily there so 1) *I* don’t lose track of stuff, 2) people don’t have to DM me to ask when a feature is being released, and 3) frontend guys know when I’m working on backend features that their work is dependent on",
        "score": 4,
        "replies": []
      }
    ]
  },
  {
    "title": "Video Game Developers Are Leaving The Industry And Doing Something, Anything Else - Aftermath",
    "body": "",
    "score": 963,
    "url": "",
    "created_utc": 1726125652.0,
    "author": "zxyzyxz",
    "permalink": "/r/programming/comments/1fewp6i/video_game_developers_are_leaving_the_industry/",
    "comments": [
      {
        "author": "mpanase",
        "body": "If those I know in the industry are anything to go by... they hate the industry but they love videogames and they won't leave it. \n\nAbusive relationship at it's finest.",
        "score": 777,
        "replies": [
          {
            "author": "zxyzyxz",
            "body": "That's why salaries are so low in video games compared to other tech industries, there is a basically unlimited supply of fresh faced programmers wanting to work in video games, because it's \"fun,\" compared to enterprise software which is \"boring,\" no wonder video game companies exploit that fact.",
            "score": 454,
            "replies": [
              {
                "author": "LindenRyuujin",
                "body": "This is so true. There is a lot of pressure that if you won't do this someone else will. You combine that with the fact you care deeply about what you're making and it's an easily exploted industry (and I worked at some great companies, with technical and invested owners and still saw this).\n\n\nI ended up contracting after two companies I worked for were shuttered in less than a year (and a third closed after I interviewed but before I heard back). It was a revelation. Less stressful, nearly double the pay and my opinion was valued. It feels so good to stop worrying about work when the day ends. A lot of my identity was tied up in being a game developer, so it took some adjustment, but I'm much happier now that I have left games behind (and that just makes me sad for the industry).",
                "score": 139,
                "replies": [
                  {
                    "author": "jumbohiggins",
                    "body": "Mind speaking about how you switched? I'm a pipeline dev and considering switching but all my experience has been in games.",
                    "score": 22,
                    "replies": [
                      {
                        "author": "LindenRyuujin",
                        "body": "I talked about this in another reply below (more generally about contracting) but in terms of tech, I started out with a jump to a company with a legacy C++ product they were upgrading. I ended getting a permanent position there. I moved around a bit internally (ended up working on AR project in Unity! Another time my games background played out unexpectedly in my favour).   \n  \nFrom there I got quite a bit of mobile experience and now I'm working on Mobile Security. I never expected to end up here, but if you can find a good recruitment agency I think that can really help with changing sectors. The agency I used had a much better feel for what other roles wanted and I ended up interviewing for jobs I never would have applied for myself (or known how to find).",
                        "score": 21,
                        "replies": []
                      },
                      {
                        "author": "gopher_space",
                        "body": "All of the backend roles are open to you if you know how to talk about your work.  You're a senior engineer with a ton of backend, CI/CD, and cloud experience.  Everyone has work for you to do.",
                        "score": 15,
                        "replies": [
                          {
                            "author": "jumbohiggins",
                            "body": "I haven't touched much cloud only a bit of AWS. \n\nI mostly work in Python.",
                            "score": 5,
                            "replies": [
                              {
                                "author": "gopher_space",
                                "body": "It's not the individual technologies, it's that you understand the entire process.  The hardest part of these jobs is operating within whatever janky build setup they've come up with, and you won't need as much training in that area.\n\nPaste your resume into a LLM and then ask it to draw parallels to a backend engineer job posting that you add.",
                                "score": 7,
                                "replies": [
                                  {
                                    "author": "jumbohiggins",
                                    "body": "Thanks I'll start looking into that.",
                                    "score": 4,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "Lv_InSaNe_vL",
                                "body": "Look for \"DevOps\" or \"infrastructure engineer\" (my technical title), those are some of the keywords i used to find my job. I come from IT so its a little different but i had a ton of experience scripting and automating stuff (although I had some experience with CI/CD things, but just from some hobby tinkering on my GitHub) which leans really well into managing dev pipelines and stuff like that.",
                                "score": 3,
                                "replies": [
                                  {
                                    "author": "jumbohiggins",
                                    "body": "Awesome I'll look into that. If you don't mind me asking what is the salary range for that kind of position? You can dm me if you don't want to mention publicly. I know games generally gets away with paying less.",
                                    "score": 3,
                                    "replies": [
                                      {
                                        "author": "Lv_InSaNe_vL",
                                        "body": "I dont want to give away too much info so I don't get doxxed (even though I'm sure if someone really wanted to they could piece together my post history), but I'm currently making $76500 which puts me very firmly into the middle class in my area. Like I have a house, a daily and project car, and I'm working on my pilots license kind of middle class.",
                                        "score": 3,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Just_Farming_DownVs",
                    "body": "How did your entry into contracting look like? Curious as I'm wanting to start in a different industry.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "LindenRyuujin",
                        "body": "I only contracted briefly (for about a year, my original plan was to use it as a stop gap until I could get back into games), I'm back as a permanent employee now (although still outside games as you might have guessed) so I'm not expert.\n\nMy route was talking to a recruitment agency. They had a much better feel for what other roles wanted and I ended up interviewing for jobs I never would have applied for myself (or known how to find). My C++ skills have opened quite a few doors as it's a rapidly disappearing skill outside of games and there are still plenty of legacy systems that use C or C++. I used an umbrella company to make getting paid and paying my taxes easier so I never had to look into setting up as a limited company or anything I'm afraid, which would have been the next step I think.",
                        "score": 8,
                        "replies": [
                          {
                            "author": "Just_Farming_DownVs",
                            "body": "I appreciate the insight, technical recruiting is definitely the way I'll be going!",
                            "score": 2,
                            "replies": []
                          },
                          {
                            "author": "josluivivgar",
                            "body": "also because all C++ positions require AT LEAST 5+ years of working experience.\n\neven if you're familiar with C++ there's almost no entry positions, and for someone that has experience but didn't work on C++ it's basically just as hard, there's very few avenues of entry except while you work on something else slowly learn and contribute to projects in C++ in open source for 5  years \n\nit's a closed club where only experienced people get to play and no new guys can get in (people coming from game development can fill that niche tho particularly if you worked on engines)",
                            "score": 2,
                            "replies": [
                              {
                                "author": "LindenRyuujin",
                                "body": "One thing I have picked up changing areas is that it's often worth applying for things even if you don't quite fit the bill. Particularly if it says \"The Ideal Candidate\" - they're not expecting you to match every criteria necessarily. I think you'd be surprised. From what I've seen there are very new people of any kind applying for C and C++ jobs of any kind (even fewer for Objective C).\n\nYou might have to brush up on memory management practices if you've only been using C++ 11 or newer. There's very little use of smart pointers before then in my experience, and a lot of legacy code is still running old versions of C++ (although as someone rapidly becoming an old fogey I tend to default on manual memory management myself, particular with a games background. I guess I'm part of the problem now).",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "name-is-taken",
                        "body": "Not the original Replyee, but was also a SDEV contractor in the boring but reliable side.\n\nFind a tech Recruitment agency. I had a good experience with TechSystems for about 10yrs, but ymmv.\n\nLots of Government contracts out there that run on 2-3 year loops, lots of other businesses doing niche industry work.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "Just_Farming_DownVs",
                            "body": "I appreciate the insight, definitely gonna be the direction I move.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "FRIKI-DIKI-TIKI",
                "body": "I used to work in simulation, right at the beginning of the .com boom, half of my cohort that I started with went into web dev, the other half into game dev. Everyone of those that went into game dev regretted it when they hit their mid 30's, actually wanted to make more money and found that the fresh faces limited their upper end. They had only one of two choices, leave the industry or jump to management.\n\nThose that left and jumped to web had lost precious time because the .com bust came shortly after. Those that jumped to management just became hollow shells that hated their job. Game dev is a battlefield that leaves carcass of your bright eyed developers hopes and dreams stewn among its landscape.\n\nIt sucks because I personally find it far more interesting work, but I chose web dev at that critical juncture. They were making double what a game dev was, the work was easier and I work for money.\n\nPeople that say do what you love, miss the second piece of advice, which is do something you love that is lucrative. Because eventually you will get bored of it, my interest in my 20's is very different from my interests now.",
                "score": 24,
                "replies": [
                  {
                    "author": "clubby37",
                    "body": "&gt; do what you love\n\nWhen I was a kid, there was a \"take your kid to work\" day, and I went with my Dad, because my mom worked in schools, and as a kid, I went to school every day, so it wouldn't have been special.  Dad was a biologist, and all his coworkers said they wish they'd done biology as a hobby and gotten a different job.  I asked something like \"aren't you supposed to do what you love?\" and a guy replied \"if you love something, don't let it become about money or survival, because when you *have* to do something you love, it chips away at the love.\"  They weren't making a ton of money, though.  If it'd been lucrative, they might've had different advice.",
                    "score": 18,
                    "replies": [
                      {
                        "author": "booch",
                        "body": "Meh. I am a software dev. I love software dev. I love money and try to get more for being a software dev. But that doesn't stop me from loving software dev. If I won the lottery today, I'd retire... and develop software. I just wouldn't have someone else telling me _what_ to develop.",
                        "score": 19,
                        "replies": [
                          {
                            "author": "clubby37",
                            "body": "&gt; I am a software dev. ... If I won the lottery today, I'd retire... and develop software.\n\nDitto for Dad's co-worker, except with biology instead of programming.  Once it stops being about survival (read: obedience in the worksplace) then it can only be about the love, or you wouldn't do it at all.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Drogzar",
                    "body": "You just have to learn to search good offers, know your worth and negotiate...\n\nWhen I moved to London as a Senior Game Dev, I more-than-doubled my salary just by asking for that number. Hiring good people is expensive and hard... if they have a candidate they want, they will be very open to hear your numbers.\n\n4 years later, in the same place, I had got almost a 40% raise because I was open with my manager and told him I was happy there... as long as I felt appreciated.\n\nI was routinely receiving offers for 200K/year to work in fintech (like, I guess, half the software engineers in London) and ignored them because I would jump of a bridge if I had to work in fintech (for reference, 200k/year in London is an absolute crapload of money).\n\nJuniors do get taken advantage in gamedev because there are a billion available and it takes a ton of effort to educate them (You need a lot of engine-specific knowledge or industry knowledge, to be effective) but experienced games people are worth A LOT more than webdev guys (relative to a junior), you just need to know your own worth and actually ask for it.\n\nI'm currently a Lead Software Engineer in games and I'm making more money than the reported Glassdoor salaries of people in my same position in my country.\n\nAlso, I quickly google around, Tech Leads in games in USA are being offered  150-250K a year... including remote positions, so no need to pay insane rent... I think that falls well into \"lucrative\" for doing something you love?? Sure, it's not the half a mill you could make at Facebook, but fuck working in Facebook, lol.",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "Idiberug",
                    "body": "&gt;People that say do what you love, miss the second piece of advice, which is do something you love that is lucrative. \n\nEven within game development this is useful advice. So many indie developers make their dream game with no market research and have their heart broken when it flops because there is no audience. If you want to thrive in indie development, you have to think like a business and make what the market wants, not what *you* want.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Chii",
                "body": "&gt; because it's \"fun,\" compared to enterprise software which is \"boring,\"\n\nIt's the same in the entertainment industry too. Lots of fresh faced actors and musicians looking to make their mark, but most are just exploited. \n\nThis is why you shouldn't be pursuing passion under someone else's budget. Work at a \"boring\" place (where you maximize your earnings), be frugal to gather money/capital, and when you have enough reserve, self-fund your own passion project.",
                "score": 57,
                "replies": [
                  {
                    "author": "zxyzyxz",
                    "body": "Basically the ethos of r/financialindependence in a nutshell, that's what I'm doing. Or at the very least, get a chill tech job and work on your passion project video game on the side, many successful game developers started off that way.",
                    "score": 27,
                    "replies": []
                  }
                ]
              },
              {
                "author": "krum",
                "body": "How about working on enterprise software in the game industry.  Low pay and boring.  The best of both worlds!",
                "score": 5,
                "replies": []
              },
              {
                "author": "RICHUNCLEPENNYBAGS",
                "body": "Well if you look at what these people say a lot of them have very game-specific skills like “narrative design” that aren’t actually applicable to another tech job anyway",
                "score": 5,
                "replies": [
                  {
                    "author": "mistabuda",
                    "body": "I think the developers being referred to here are the ones that write code and not the \"developers\" that are not in technical roles.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "TurboGranny",
                "body": "Honestly, I find it hard to make the math work in most of the games industry. In software, you have a ton of business to business licensing/subscription fees that give you a solid predictable revenue base with which to compensate talented developers. In video games, it requires a mountain of work for often a one time purchase price from regular consumers and even then you don't know if people will even like your game. Plus there are so many games that you have to spend a mountain of cash on marketing and anything and everything that you can use to help relieve some of that pressure wants to charge your dev team business to business licensing prices. I have no idea how anyone is supposed to survive in that business unless they are building a continuous development game with a subscription fee like WoW or a very low end retro indy game.",
                "score": 4,
                "replies": [
                  {
                    "author": "SortaEvil",
                    "body": "AAA games is a very hit-based industry. AAA games are _expensive_ to make, but a hit game can make a _boatload_ of money. There's a reason that every Activision studio over time became a CoD support studio ― even before the microtransactions and live-service layer, the game printed money and if you have one or two games that print money like that, you can have a few flops from your other studios. Of course, you could _also_ just stop making other games that may or may not be big, and then you can print _more_ money, which is the route Activision eventually went for.\n\nBut as AAA games have gotten more and more expensive to make, publishers have become more and more risk averse with them. Which is where you start to see smaller studios going for AA games, which can still look great thanks to Unreal (Think OG Hellblade). A team of 20-50 people can make a really solid game with a great look for a fraction of the price of AAA dev.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "MillerHighLife21",
                "body": "This is also just supply and demand at work. Economics always wins.",
                "score": 3,
                "replies": []
              },
              {
                "author": "tidbitsmisfit",
                "body": "software devs need to unionize, worth more than there salary by far",
                "score": 23,
                "replies": [
                  {
                    "author": "panchosarpadomostaza",
                    "body": "If you unionize the video game devs, yes.\n\nThe other devs? No.",
                    "score": 0,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Yuzumi",
                "body": "Basically. I wouldn't be opposed to working on a game of some sort, but I made the decision before I even went to college that I did not want to work in the games industry. Even from the outside it seemed like a constant crunch time for less pay and appreciation.\n\nI'd much rather have a boring job that pays the bills while not being overly stressful to something that would result in burnout and probably kill my enjoyment in games.\n\nThough, at this point I don't think the skillset I got while working would translate to game development anyway.",
                "score": 2,
                "replies": []
              },
              {
                "author": "stult",
                "body": "&gt;  compared to enterprise software which is \"boring,\"\n\nThere is something soul crushing about spending your entire life optimizing the \"Edit\" dropdown widget for Excel",
                "score": 2,
                "replies": []
              },
              {
                "author": "Matthew94",
                "body": "&gt;redditor learns how labour markets work\n\nI am shocked that wages would be higher for jobs that people would be less interested in.",
                "score": 2,
                "replies": [
                  {
                    "author": "zxyzyxz",
                    "body": "Well, it's not that redditors are learning this fact, obviously they know how supply and demand works, it's the article itself implying how it's a shocking thing.",
                    "score": 5,
                    "replies": [
                      {
                        "author": "Matthew94",
                        "body": "&gt; obviously they know how supply and demand works\n\nI would not agree on that point. \n\nA lot of people have a very naive view of how salaries are negotiated. There are endless posts on here to the tune of \"X works hard, why should Y get paid more?\" when anyone with half a brain knows that *effort* isn't the core determining part of your salary.",
                        "score": 5,
                        "replies": [
                          {
                            "author": "MaleficentFig7578",
                            "body": "If it's a meritocracy then it would be. So it's not a meritocracy. Lots of people believe it's a meritocracy.",
                            "score": 3,
                            "replies": [
                              {
                                "author": "Matthew94",
                                "body": "&gt; If it's a meritocracy then it would be\n\nWrong. Even if it was a meritocracy, someone could be more productive than everyone else while putting in much less effort. Human industry is all about avoiding back-breaking labour. Working yourself to death is not something to be proud of in most cases.\n\n&gt;Lots of people believe it's a meritocracy.\n\nIt largely is when you have an appropriate definition of merit.",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "xmsxms",
                "body": "And yet the work is basically the same. Write some algorithm, write some tests, debug some crash etc... It's not like they are needing to play games for x hours a day as part of their job.",
                "score": 1,
                "replies": [
                  {
                    "author": "Deranged40",
                    "body": "Honestly not all that similar.\n\nI write C# for a living. Have for over a decade. I'm absolutely *fascinated* with how differently we do even simple things like loops in a game engine such as Unity (which also uses the very same C# language).\n\nIt's an entirely different paradigm of programming. Just about everything is based on the \"Update\" concept. Which (hopefully) will happen 60+ times per second. Which gives our entire game just 16 milliseconds to run its code before we start it all over again.\n\nDependency injection is done differently. Unit testing is very different. And integration testing is *critical* when it's even possible at all. \n\nIn making yet another microservice at my \"boring\" job making business applications, I don't really recall ever actually needing to know any kind of advanced math beyond skipping a certain amount of records and selecting a few more (pagination). Maybe I'll use some low-level statistics if I'm generating a report for a manager.  \nIn video games, you need to know pretty advanced math. Calculus goes a long way. Linear algebra and matrix math makes games run much more efficiently... if you know how to do them.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "xmsxms",
                        "body": "Yeah it's harder. I was trying to make the point that making games is closer to enterprise programming than it is to *playing* games.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "mistabuda",
                    "body": "Sure when you strip away all nuance it's basically the same. Making games is harder than writing enterprise software mainly because you are chasing fun which is a subjective thing. Pretty sure John Carmack did a talk on this.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "zxyzyxz",
                        "body": "Also the mathematics and other calculations needed in games seem way more intense than general enterprise CRUD.",
                        "score": 18,
                        "replies": [
                          {
                            "author": "mistabuda",
                            "body": "Yea it's a completely different beast",
                            "score": 7,
                            "replies": []
                          },
                          {
                            "author": "The-WideningGyre",
                            "body": "As is caring about performance, and honestly doing something new and/or interesting.\n\nI started in games, and moved out, but it was definitely interesting and challenging work.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "I still consider doing it even though I’d essentially be a junior again just to go into a toxic industry where I’ll get paid less. But working on something that means anything at all to me sounds appealing.",
                "score": 1,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "Tell them that boring enterprise software not only pays better, but leaves them plenty of free time to play more video games.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "gelfin",
            "body": "I guess I’m just wired for cynicism, but the fact that I love games is the exact reason I refused to *ever* consider getting into the industry.\n\nPoint: “Do what you love and you’ll never work a day in your life.”\n\nCounterpoint: Nothing will ever strip the joy out of your favorite hobby like making it your job.\n\nPlus, the awful working conditions have been right out there for all to see for, like, thirty years. You’re going to get worked like a slave for months on end, practically paid like one, compelled to release something broken and disappointing far too early, and then you’ll be laid off. Nobody should love anything enough for that to be okay. That’s cult-level messed up. \n\nIf you love games, do something that affords you the time and money to play them.",
            "score": 79,
            "replies": [
              {
                "author": "torrent7",
                "body": "Can confirm, games are far less interesting after you've been making then for 10+ years. You spend more time admiring and deconstructing how things were created than actually enjoying the game.\n\n\nliterally me: \"oh what a neat visual effect, let me go look at this siggraph paper where they described their technique\"",
                "score": 20,
                "replies": [
                  {
                    "author": "nupogodi",
                    "body": "Wait I do that and I’m platform dev, not in games",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "cake-day-on-feb-29",
                "body": "&gt; Counterpoint: Nothing will ever strip the joy out of your favorite hobby like making it your job.\n\nThat's dependent on the job and workplace IMO. I know plenty of people who got into doing or working with what they love, and they're generally happy aside from dealing with the occasional bad coworker or customer, which all jobs experience at some level.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "aa-b",
            "body": "Just over a decade ago Penny Arcade did a webcomic series about life as a video game tester, and they collected war stories on the site: https://www.penny-arcade.com/news/post/2011/08/10/the-trenches1\n\nIt looks like they've shut it down, but I remember the stories being really good. I was just starting out as a junior dev at the time, and it was reassuring to know my \"boring\" career had the significant benefit of not being rabidly dysfunctional",
            "score": 14,
            "replies": [
              {
                "author": "mpanase",
                "body": "All hail the glory of [archive.org](http://archive.org) [https://web.archive.org/web/20230318162404/http://trenchescomic.com/comic/post/9811](https://web.archive.org/web/20230318162404/http://trenchescomic.com/comic/post/9811)",
                "score": 13,
                "replies": [
                  {
                    "author": "aa-b",
                    "body": "Brilliant, thanks! That's definitely worth browsing, some fantastic content in there.\n\nI guess it kind of undermines the thesis of the article. It was talking about how things have fundamentally changed in the industry, but from the outside those stories do sound pretty similar to the ones from ten years ago",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "OMGItsCheezWTF",
            "body": "I was chatting about this with one of our devs yesterday!\n\nHe studied game development at college, wanted to get into the games industry, but quickly realised the industry penalises developers by playing on their love of games. \"We can offer a fraction of what other software industries can because people will take it in order to make games\"\n\nYou can do some incredible, amazing programming working on games, complex and deeply involved maths. In exchange you work under permenant crunch, 60+ hour weeks, thankless higher ups and for 1/5th of the wage of say a fintech firm where you're making boring CRUD APIs for 40 hours a week with almost no crunch and good benefits.\n\nAnd once you've got your game out of the door the studio will be purchased and shut down by one of the 3 big publishers 30 seconds later, leaving you jobless.",
            "score": 26,
            "replies": []
          },
          {
            "author": "Bbonzo",
            "body": "I used to hire game devs for a big studio and the amount of people from other tech industries with stable jobs wanting to get into game dev \"because it's exciting and they always wanted to do that\" was astounding. They simply didn't know what they were getting themselves into and had a very romanticized view of game dev.",
            "score": 20,
            "replies": [
              {
                "author": "ZorbaTHut",
                "body": "I used to work with one of those! She joined our studio because she wanted a break from the busy world of making 3d editing software.\n\nShe went back to her old job in less than half a year.\n\nI honestly liked working with her, she was good, but it's a tough damn industry and it tends to chew people up *fast*.",
                "score": 10,
                "replies": []
              },
              {
                "author": "root88",
                "body": "VFX people are trying to get into the video game industry right now because it's actually way better off these days than their industry.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "agumonkey",
            "body": "Very common pattern. Paramedics, nurses, teachers .. same traits.\n\nWhat's sad is that the guys seems to be extremely good at their craft.. they could benefit a lot of places instead.",
            "score": 5,
            "replies": []
          },
          {
            "author": "ChallengeDiaper",
            "body": "I worked in the industry for many years. Best jobs of my career. I was also single at the time so that helped. I wouldn’t/couldn’t do it now with a family.",
            "score": 5,
            "replies": []
          },
          {
            "author": "iiiinthecomputer",
            "body": "Aviation has quite a bit of this too, at least until you get to the higher and most professional levels.",
            "score": 5,
            "replies": []
          },
          {
            "author": "krum",
            "body": "I've been a programmer in the game industry for 25 years.  I haven't even worked on a game team for over 12 years, choosing to work on back-end stuff (think Steam, Epic store kind of stuff) since then instead.  I'd love to get out, but I feel stuck.  I'm not sure I could even get a job somewhere else without an actual pay cut.",
            "score": 2,
            "replies": []
          },
          {
            "author": "winowmak3r",
            "body": "I think with the recent successes by smaller indie developers and even solo acts we'll see more and more games get made that way rather than big AAA studios. Or a lot more instances of developers leaving, forming their own studio, making a hit, and then selling the IP and studio to the AAA guys. That's how they'll make their living. I know more and more of my games library is smaller studios that don't have as much pressure from shareholders to make a larger profit every quarter. Allows them to focus on the games and it shows.",
            "score": 2,
            "replies": []
          },
          {
            "author": "theavatare",
            "body": "I did a master on games development and lasted 6 months in the industry:(",
            "score": 1,
            "replies": []
          },
          {
            "author": "DigThatData",
            "body": "I think this phenomenon extends to a lot of industries that draw people simply because they want to work in that industry. Another example is professional sports. Big sports franchises are insanely wealthy and capable of paying fat salaries if they wanted to, and are incentivized to hire rockstar analytic talent, but instead pro teams pay a pitance to their analysts because they can.\n\nMaybe things have changed, but this is based on 2015-ish when I had a colleague in my MS math/stats program who was a former NBA player himself who had considered working in sports analytics, and was surprised how comparably poor the salaries he was being offered were. I think it was something like 50%-70% what he was being offered elsewhere.",
            "score": 1,
            "replies": []
          },
          {
            "author": "abraxasnl",
            "body": "Absolutely. I used to be a game dev. The craft is great, but I don’t have a deep passion for games. I’ve never regretted leaving the industry.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "g9icy",
        "body": "I've been trying to leave, but hitting a bit of a brick wall.\n\nMy skills don't seem to translate well, and have actually been told by one employer that \"they don't hire from the games industry\".\n\nI scout job listings but I'm having a hard time finding what skills I need to learn that don't also make me fall asleep. At least games is interesting.\n\nIt's hard to say to an employer, yes I know React isn't on my CV, but after 15 years of programming in C, C++, C#, Powershell, Lua and yes, sometimes, even Javascript, I'm sure I can pick up React on the fly. They won't buy into it.\n\nSo the option is to take an enormous paycut. As a result, I'm now saving like a madman to make sure I can survive the inevitable (and hopefully temporary) pay cut.",
        "score": 122,
        "replies": [
          {
            "author": "torrent7",
            "body": "If you're a gameplay engineer or engine developer, just apply to any native (c/c++) based job; there isn't much competition for those jobs.\n\n\nBig tech is the easiest. You can also do games industry adjacent such as meta reality labs or Microsoft on a platform team (xbox or some windows team).",
            "score": 77,
            "replies": [
              {
                "author": "g9icy",
                "body": "&gt; If you're a gameplay engineer or engine developer\n\nI've done both, I'll take a look but rarely see C/C++ based jobs.\n\nThe added complication is that I refuse to work in an office, so there's that.",
                "score": 19,
                "replies": [
                  {
                    "author": "torrent7",
                    "body": "Yeah, fully remote would be a lot harder tbh. Good luck in your search",
                    "score": 37,
                    "replies": []
                  },
                  {
                    "author": "JesusWantsYouToKnow",
                    "body": "Try looking in industries like robotics, avionics, and space. I've seen quite a few jobs posted recently looking for developers who are strong in modern C++ and understanding 3D rendering who can help develop simulation, visualization, and testing platforms for these industries.",
                    "score": 13,
                    "replies": []
                  },
                  {
                    "author": "Zimgar",
                    "body": "Yeah full remote might be the hard part but there are many jobs out there for C++.\n\nAs an example almost all the automated car companies use a simulation to train their AI on which is very close to a game engine.",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "ThisRedditPostIsMine",
            "body": "You may want to look into the robotics industry, if there are any companies near you. I work in a robotics firm and some of our best engineers are former game developers who switched over. Particularly the C++, high performance programming and linear algebra transfers very easily.",
            "score": 15,
            "replies": [
              {
                "author": "g9icy",
                "body": "Good idea, I might take a look.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "ratnik_sjenke",
            "body": "Ignore people saying to put React on your resume and fake it. The front end JavaScript field is absolutely flooded right now, and you will end up fired if you try to fake the skills. \n\nI would look at C# jobs, which especially in the Midwest are the easiest to land. Although depending on your current pay might end up in a pay cut unfortunately.",
            "score": 14,
            "replies": []
          },
          {
            "author": "evasive_btch",
            "body": "I love recruiters and HR being less than a glorified string comparer. \n\n&gt; Oh this guy programmed 15 years but didnt work with C#. Obviously a wrong fit\n\nFucking r-word's",
            "score": 56,
            "replies": [
              {
                "author": "g9icy",
                "body": "Honestly yeah, that's how it works.\n\nI got turned down for a job recently for not having enough mobile game experience.\n\nI have 15 years of AAA and AA game experience... what part of that means I can't work on a mobile phone game? It's insane.",
                "score": 37,
                "replies": [
                  {
                    "author": "Kinglink",
                    "body": "To be fair, mobile games, and AAA are VERY different beasts. \n\nCan you learn it?  Yeah.  But I think the real fact of the matter is stupid companies don't hire the programmer, they hire the skills.  They want you to already be exactly what they're hiring, and they don't realize that doesn't help longitivity with a company, and also if they're buying you as X programmer, they're paying for X as well as the search for it.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "Ranra100374",
                        "body": "I really about this about hiring because once you've gone into a certain subfield, you're now pigeonholed into that subfield.",
                        "score": 5,
                        "replies": [
                          {
                            "author": "Kinglink",
                            "body": "I will understand it to an extent,  If I hire a gameplay programmer who never worked on graphics as a graphics programmer, I'm getting a \"junior\"  Where as if I hire someone who has done graphics for 3-5 years, I should be getting an established programmer who knows some of the intricacies of it. \n\nBut as a Network (gameplay) programmer, they don't even want to look at you for generalists slots.  WTF?\n\nAlso I worked on Saints Row 2 (AAA) so I'm sure I got lucky and got a lot more attention, than if I only worked on Barbies horse adventure, and smaller niche titles/ip fodder.  Just the size of the games you work on can be hard to change.",
                            "score": 5,
                            "replies": [
                              {
                                "author": "Ranra100374",
                                "body": "&gt; But as a Network (gameplay) programmer, they don't even want to look at you for generalists slots. WTF?\n&gt; \n&gt; \n\nYeah, this is what I'm talking about. Like if you know Java, you should be able to work on C# and vice versa. But no, they want someone who has the exact skillset.",
                                "score": 5,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "VoltairBear",
                "body": "It’s not recruiters and HR normally making that decision. I used to work as a sourcer (now I’m a dev) and the hiring managers dictate the requirements. \n\nI had one CTO tell me “If they don’t have minimum 2 years of experience with React, I don’t want to see them. I don’t want to teach someone React”",
                "score": 18,
                "replies": [
                  {
                    "author": "Xyzzyzzyzzy",
                    "body": "All that tells me is that their company hires the sort of developers who need to be taught React.\n\nWhich, in turn, tells me that they either suck at hiring, or they pay crap wages, or both. Most likely both.",
                    "score": 18,
                    "replies": [
                      {
                        "author": "Kinglink",
                        "body": "Or they suck at teaching it too/Suck at hiring people who can learn.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "evasive_btch",
                    "body": "Thank you for the insight! I am a bit salty because I struggled to find a job after working with Delphi for 6 years.",
                    "score": 5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Kinglink",
                "body": "He does C++ but clearly he doesn't know C.  REJECTED!",
                "score": 14,
                "replies": [
                  {
                    "author": "acdcfanbill",
                    "body": "Where's his classes?!  He can't program without his classes!",
                    "score": 7,
                    "replies": [
                      {
                        "author": "Kinglink",
                        "body": "Or the other way. \n\n\"Classes and templates will only confuse his puny C mind.\"",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "zxyzyxz",
                "body": "Reading this comment about this phenomenon is hilarious: https://old.reddit.com/r/csMajors/comments/1f8x5ma/world_record_rejection/llhpub8/?context=3\n\n&gt; Auto rejection systems from HR make me angry. I'm a tech lead and for 3 months HR wasn't able to find a single person for the position we're looking. I've created myself a new email and sent them a modified version of my CV with a fake name to see what was going on with the process and guess, I got auto rejected. HR didn't even look at my CV. I took this up to management and they fired half of the HR department in the following weeks, the issue was they were looking for an angularjs developer while we were looking for an Angular one (different frameworks, similar names), this kind of silly mistakes must and can be fixed in minutes, and since the CVs were auto rejecting profiles without angularjs in it we literally lost all possible candidates. The truly infuriating part was that I consistently talked to them asking for progress and they always told me that they had some candidates that didn't pass the first screening processes (which was false).\n\n&gt; People who work in HR are incredibly mediocre and lazy.",
                "score": 29,
                "replies": []
              },
              {
                "author": "cpt_justice",
                "body": "I remember comments on Slashdot way back regarding companies seeking experienced Java programmers with at least 10 years under their belts; Java had only been released like 2 years earlier.",
                "score": 2,
                "replies": []
              },
              {
                "author": "EveryQuantityEver",
                "body": "You can make your point without the slur.",
                "score": 1,
                "replies": [
                  {
                    "author": "evasive_btch",
                    "body": "You're right. For some reason, I have a hard time getting rid of it in my vocabulary. Sorry.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Kinglink",
            "body": "&gt; My skills don't seem to translate well, and have actually been told by one employer that \"they don't hire from the games industry\".\n\nOne employer doesn't make everyone.  Keep trying.\n\nLook for Embedded roles.  They usually want C and C++.  Game industry personnel have a high level of skill at the low level.  \n\nIf you want to go to the front end, learning React, or JS would be good, but if you want to be a backend programmer, well there's a lot of variants.\n\nIn my experience, good companies DON'T hire based on the programming language you know, they expect you to be able to learn it on their dime.  But there's a lot of shitty companies that want to hire \"cogs\" instead of programmers, and avoid those. \n\nAlso work on your system design... One thing I experienced in the video game industry is there's almost every \"Senior\" programmer is not a senior outside of the industry, because they don't write design documents and don't know how to design a system.  You can learn that, and that's the MOST important skill a programmer can have.",
            "score": 9,
            "replies": [
              {
                "author": "g9icy",
                "body": "&gt; One thing I experienced in the video game industry is there's almost every \"Senior\" programmer is not a senior outside of the industry\n\nThis is true unfortunately.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "BradBeingProSocial",
            "body": "The other side of tech industry has recently decided they don’t want to invest in people anymore. They only want people who hit the ground running. Huge mistake, but anyways…\n\nIf there are only a few things missing from your resume, it wouldn’t be hard to learn them on your own. Just make up some system and build it using React",
            "score": 5,
            "replies": []
          },
          {
            "author": "SwitchBlade_",
            "body": "Speaking from (limited) experience, Hedge Funds and HFT firms absolutely love video game C++ programmers. The physics and math involved in fluid dynamics for video games and financial mathematics are very similar and a C/C++ background is perfect.",
            "score": 3,
            "replies": []
          },
          {
            "author": "zelphirkaltstahl",
            "body": "But are you a so called \"React Developer\" who limits their skills to one single framework? No? Ah-haha! Now they got ya! You didn't mention their buzzword!",
            "score": 4,
            "replies": []
          },
          {
            "author": "zxyzyxz",
            "body": "Just put React on your resume anyway, then get the job. Alternatively, work in backend rather than frontend or full stack since it seems like you know that side better. Fake it til you make it.",
            "score": 17,
            "replies": [
              {
                "author": "316497",
                "body": "&gt; Just put React on your resume anyway, then get the job.\n\nThat's only going to work for companies with rock-bottom standards. Any company who cares about their product is going to have senior developers interviewing you who will ensure you actually know React and all of the frontend tech that comes with it.\n\nI have interviewed tons of \"senior React engineers\" who had \"10+ YOE\" with React on their resume, but then couldn't build a basic form in React in an interview. I assure you, \"just put it on your resume and get the job\" is not going to work if OP doesn't actually know React and FE development reasonably well.",
                "score": 7,
                "replies": [
                  {
                    "author": "zxyzyxz",
                    "body": "That's not what I meant by \"just,\" I meant to actually learn React and do a few sample projects, but when it comes to automated ATS scanning for keywords, yes you definitely should put React on the resume even if you've never used it professionally. Of course you have to pass the interview to get the job.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "g9icy",
                "body": "Yeah I could do that. They will need examples of projects though, that's the problem. I could make demos in my spare time I suppose.\n\nI could do full stack, might have a mess about over the weekend.",
                "score": 4,
                "replies": [
                  {
                    "author": "zxyzyxz",
                    "body": "Make a project and show it off. And anyway, if you say you worked on it during your previous job, they honestly won't ask to show you the code, obviously because it's not \"yours,\" but you can still talk about it.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "18randomcharacters",
            "body": "If you can pick it up so easily, then do.\n\nBuild a demo site",
            "score": 3,
            "replies": [
              {
                "author": "thecaspg",
                "body": "Demo site or hobby project can help.At least it worked for me few times.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "PuzzleCat365",
            "body": "&gt;\"they don't hire from the games industry\"\n\nDon't take the word of somebody in the games industry that does not want you to be hired at another company.",
            "score": 4,
            "replies": [
              {
                "author": "g9icy",
                "body": "To be clear I applied for a job outside of the industry but somewhat adjacent, ie an \"app\" but it had 3D elements to it, some sort of specialised 3D modelling app iirc.\n\nThey said they don't hire out of the games industry, which I found odd seeing as the skills would directly benefit the app they were making.",
                "score": 7,
                "replies": [
                  {
                    "author": "Forbizzle",
                    "body": "That hiring manager is stupid.",
                    "score": 9,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "torrent7",
            "body": "Oh, another suggestion. Take a look at medical imaging or the oil and gas industry. They do a lot of native development.",
            "score": 2,
            "replies": []
          },
          {
            "author": "mogwai_poet",
            "body": "&gt; been told by one employer that \"they don't hire from the games industry\"\n\nThis actually makes some sense -- games programming has significantly different priorities/best practices than enterprise or web dev or embedded systems, and even if you try to keep that in mind, if you've been doing one kind of programming for a decade and suddenly switch to a different kind, it's easy to fall back on old habits.",
            "score": 2,
            "replies": []
          },
          {
            "author": "Additional-Toe-9012",
            "body": "Geez. I’d hire you fast. I have devs who don’t understand performance or basic algorithms, just painful to work with.",
            "score": 2,
            "replies": []
          },
          {
            "author": "Matt3k",
            "body": "&gt; I know React isn't on my CV, but after 15 years of programming in C, C++, C#, Powershell, Lua and yes, sometimes, even Javascript, I'm sure I can pick up React on the fly.\n\nThis is the kind of attitude I love. I don't care what languages you know, I care that you've worked with a lot of them for a prolonged time and can code like a smart person. I would absolutely love to hire a \"Junior web dev\" who has 15 years of C experience. I mean, knowing the Javascript frontend de jour isn't very important to me. You'll find someone. Probably another old fart. Don't give up.",
            "score": 2,
            "replies": []
          },
          {
            "author": "CoreyTheGeek",
            "body": "Look at getting an AWS solutions architect certification and learn the nodejs/express/dynamo setups, lambdas, and CICD with Jenkins and terraform and that'll get you a job doing backend web apps",
            "score": 2,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "Tbh if you know some javascript you can learn react in a couple of days, honestly you can deploy a web app in react in probably a single day but that's without going in-depth at all into server components or anything, just learn react.",
            "score": 2,
            "replies": []
          },
          {
            "author": "jl2352",
            "body": "My two cents is there is a big field at the moment of mixing Python with C++ or Rust. I would take a look at that. It's a bit of a niche, but a surprisingly large niche.\n\nThese places have a lot of Python, and can easily hire more Python developers. So they don't care about your Python skills (and you can be honest if your Python knowledge is poor). It's the native side they need help with.\n\nAlthough for greenfield development Python + Rust is where it's at.",
            "score": 2,
            "replies": []
          },
          {
            "author": "shableep",
            "body": "As someone that has done both game dev and web dev, I would hire a skilled game dev in a heartbeat. I tell people all the time how much harder game dev is. Such incredibly talented people in that field hitting WAY above their weight. The complexity of 3d alone, and the incredible need for optimization creates these fantastic developers. Whoever told you they don’t hire from the game industry is truly missing out. \n\nOne of the things that I find most frustrating about web dev is all the people with framework experience while lacking in programming experience. Sometimes it feels like the frameworks are doing a lot of work to make up for the lack of baseline programming experience in the web dev community.\n\nI’d recommend picking up a couple frameworks and making some demo projects to show companies. I bet that’ll help a LOT. Maybe take Svelte and React and make two different simple 2d games with them. You get to use your game dev chops and also show that you can easily adapt your skills to the popular frameworks that exist. Anyone that doesn’t hire you after doing that has lost their marbles as far as I’m concerned.",
            "score": 2,
            "replies": []
          },
          {
            "author": "BoredGuy2007",
            "body": "Interview with FAANG. They won’t care about any of that except Leetcode, which you should absolutely destroy with slight preparation with your background",
            "score": 2,
            "replies": []
          },
          {
            "author": "Waterbottles_solve",
            "body": "&gt; So the option is to take an enormous paycut.\n\nI wouldnt think twice about this. Take the paycut, in a year you will be normal again.",
            "score": 4,
            "replies": []
          },
          {
            "author": "GrapefruitMammoth626",
            "body": "Interesting take, as software dev, if I was to jump into video games id have to take to massive pay dip as id be entering at entry level.\nI think the boundary exists both ways as there are indeed overlaps, but not enough?",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "PuzzleCat365",
        "body": "I recommend it.\n\n  \nThat's why I develop video games as a hobby in my spare time and do the boring technical work for a salary. You earn double, have more free time and better a pension. Doing video games on your own is also more rewarding and interesting. You can set your own direction and work on it when you feel like it, not because you have to.",
        "score": 141,
        "replies": [
          {
            "author": "ykafia",
            "body": "And you're not bound by time or money constraint, I decided to participate in the development of an open source game engine and I learned soooo much by just deciding I'd write a compiler for a shader language made for this game engine. It's fun and challenging and I'm not bored trying to do stuff \n\nI wouldn't have enjoyed doing what I did if I was paid to make it work under a dead line.",
            "score": 29,
            "replies": []
          },
          {
            "author": "stupid_muppet",
            "body": "where are you getting a pension, govt dev?",
            "score": 6,
            "replies": [
              {
                "author": "PuzzleCat365",
                "body": "Big ass boring company. People like to hate on those, but in Europe they're one of the best employers, most people worked their whole life there. Pension will cover 100% if my current salary without counting my own contributions.",
                "score": 10,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "maxinstuff",
        "body": "You have to understand that game companies are not in the tech. They’re in entertainment.\n\nGo and write code somewhere where your skills are valued. \n\nFor &gt;99% of people, art is a leisure activity.",
        "score": 189,
        "replies": [
          {
            "author": "The_Mad_Jackpot",
            "body": "I think a lot of game devs may not understand that there's still fun work in other industries. Just because the product itself isn't fun doesn't mean the work isn't fun. I love the puzzles and problems I get to work on, and I'm working on \"simple\" management software.\n\nI love games, but it doesn't pay that well and the work itself isn't itself more fun.",
            "score": 32,
            "replies": [
              {
                "author": "android_queen",
                "body": "Maybe. But there are definitely a lot of folks like me who worked in other industries and discovered they’re not nearly as much fun. ",
                "score": 10,
                "replies": []
              },
              {
                "author": "elebrin",
                "body": "Just because the product itself is fun doesn't mean that making it will be.\n\nWhat makes a job enjoyable working for good leadership, with decent people, and on a product tied to something that people either need or value highly while being well compensated and having good working conditions and good work life balance.\n\nI am in financial tech, and the product we work on is not interesting, but I tick all the other boxes. The best part of my workday is logging out and not worrying about getting a call to log in and take a look at something.",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "zerexim",
            "body": "But they pay 60 bucks for such leisure activities. I mean, there is a money in entertainment.",
            "score": 30,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 64,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "It’s called supply and demand. There’s just a never ending stream of young naive programmers ready to enter the hell that is the gaming industry. What they don’t realize is that they can get a much easier stable job that pays way better, and that they can make video games on the side.",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "WileEPeyote",
            "body": "I don't have any experience in the game development industry. Where do you think they put their value? From the press, it seems like the game designers are the \"rock stars\" of the industry. The development end of things (while critical) seems like a small part of what sells a game.",
            "score": 2,
            "replies": [
              {
                "author": "SortaEvil",
                "body": "Working in game dev, I can safely say that the money allocation is heavily weighted towards engineering, with art and design getting the raw end of the deal most of the time. Money allocation is also weighted toward the more senior end of the totem pole because, through the laws of supply and demand, there are a lot of jrs to choose from, and one junior isn't _that much_ different from the next, but on the flipside, the industry grinds you out, so there aren't nearly as many seniors in any department to choose from, so they tend to get much better salaries.\n\nIt's true that, entering the workforce as a junior, you can get much better pay for much less work working in almost any other industry, but if you survive for 5-10 years, the salary difference becomes less massive, even if the work is still much harder in games.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "ZorbaTHut",
        "body": "Honestly, this is a normal part of the game industry cycle. As other people mention, there's a *lot* of people trying to get in, but the work is hard and the pay is bad. When the industry has a bit of a downturn (i.e. the last year) a ton of people leave the industry to do something else and *basically* never come back. Then the industry picks up again and starts hiring fresh college grads again.\n\nThis isn't the first of such cycles and it won't be the last.",
        "score": 27,
        "replies": [
          {
            "author": "Kinglink",
            "body": "What I find hilarious is the game industry sees the last year as \"game industry downturn\" and are talking about it as so.  But really it's the entire tech sector's downturn, and the game industry was just a blip on that radar.\n\nI think it's just they had it with the industry and are just using that as a single rallying point.",
            "score": 8,
            "replies": []
          }
        ]
      },
      {
        "author": "Neuromante",
        "body": "Since this trend started -in videogames- I've seen that there's been a lot of reporting on it in an incredibly myopic way.\n\nI mean, game developers (If we consider \"developer\" what is considered \"developer\" in a generalist tech company) *are* tech professionals. The are not working in a vacuum, and the generalist tech world, after the pandemic, has gone through several earthquakes that has left many developers in many big companies out of a job after many layoffs pushed by overhiring. Game companies had a huge increase on sales when no one could do shit outside their houses (like streaming had), and now turns out people are less prone to stick at home playing games than before (or watch movies at their home), so things started to fall apart.\n\nWhile this recent trend of actually giving a shit for the working conditions of the developers in these companies is refreshing (where they were 10 years ago, or 20, when shit was the same?) what all these \"reporting\" is missing the actual context: Developers in the gaming industry are leaving not because they are burnt out (this has been happening for decades), but because the current market is correcting itself after few really weird years.\n\nAnd by the way, in the \"serious\" industry, the jokes about leaving everything and start a farm have been running for decades. The problem is the corporate world.",
        "score": 11,
        "replies": []
      },
      {
        "author": "Gaidin152",
        "body": "Was thinking about getting in.  Even learned software engineering and cot computer science after gaming for since elementary school.  But damn.  The abuse the industry became known for when I got my degree was brutal.  Went a more standard route and good thing as well given some medical adventures I have had.",
        "score": 6,
        "replies": []
      },
      {
        "author": "Weyzu",
        "body": "I’m leaving gamedev this year. After a couple of years of working for one of the top corpos, and having not spent my entire career in game dev, I think I have a sufficiently detached perspective to say that it’s a weird industry. \n\nOn average, there’s more passion and there’s a constant drive for cutting-edge tech, but simultaneously we’re being bogged down by old processes. We face unrelenting clients (players), and as many have mentioned, there’s a lingering abusive relationship between the employees and the industry in general.\n\nThere’s really a more sensible way to live professionally. For me it’s switching to something steadier. Some might say I’m choosing a snoozefest or something like that. I don’t care. For me it’s nonsense to sabotage personal life in name of games. Passion for games is best pursued on our own terms, not with a blade to our necks.\n\nIf the industry can’t imagine a different future for itself then, to quote David Gaider, „maybe it deserves to die”.",
        "score": 10,
        "replies": [
          {
            "author": "rabid_briefcase",
            "body": "I've been both in and out of the industry for several decades.  While it is certainly a contraction of the industry, most of the problems you described are a symptom of individual companies.\n\nIt's a common symptom that many companies struggle with, but in large part because of the nature of where the problems lie.  Bad companies hire a ton of people and have high turnover. As a result LOTS of people experience the bad problems. Good companies tend to be smaller and have low turnover. As a result FEWER people experience the best scenarios.  \n\nGood game companies tend to have older folks at the helm, and actually have retirement parties for people on occasion. Bad game companies are run by people in their 20's, 30's, and sometimes in their 40's, and they don't have enough real-world experience to navigate the business world well.  One of the useful checks during interviews is to pay attention to the number of gray-haired individuals. If everyone interviewing is below age 40 or so, avoid it.\n\n&gt; On average, there’s more passion and there’s a constant drive for cutting-edge tech, but simultaneously we’re being bogged down by old processes.\n\nThis depends tremendously on the companies and the processes you're referring to.  Most studios I've worked at and teams I've been on have been willing to experiment around just about every processes if you can make a good business case for it, including why the policy is there and what benefits there would be for the new one. \n\n&gt; For me it’s nonsense to sabotage personal life in name of games.\n\nUniversally true. Crunch time is a symptom of bad management. Old-timers in the industry know to say \"no\" if asked, it really isn't that hard.  Yes, there absolutely are abusive managers and abusive companies that prey on people unwilling or unable to say \"no\", they're toxic. There are also many amazing managers who push back on scope creep and budget adequate time for development, but as they're such great places people rarely leave.\n\n&gt; There’s really a more sensible way to live professionally. For me it’s switching to something steadier.\n\nDepending on what and how people measure the industry is between 200B to 400B globally each year. The estimated 10B reduction represents a lot of jobs to be sure, but globally the industry is huge and it's only \n between 5% to 2.5% depending on details of how you count it. Entertainment as a whole and video games specifically aren't going anywhere.\n\nThe vast majority of the layoffs and problems have been at the insecure businesses, places with high turnover, and companies that like to live on the knife's edge. Yes it's a little rougher for everybody and money isn't flowing as easily, but for good companies it's completely within the typical ebb-and-flow we've seen since the industry's earliest days.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "biteater",
        "body": "Am I the only one here who loves my job in games lol",
        "score": 4,
        "replies": []
      },
      {
        "author": "iamapizza",
        "body": "My gloom and doom brain is thinking that the industry will, instead of improving conditions, start looking towards generative AI solutions to churn out low quality trash or at least have it take over some of the basic tasks involved in development and overall us seeing a quality decline.",
        "score": 6,
        "replies": []
      },
      {
        "author": "GAELICATSOUL",
        "body": "Work enterprise and live frugally. Save up to take a sabbatical to work on a passion project you've worked on as a hobby that shows promise. Get back to work before the money runs out. Rinse and repeat.",
        "score": 16,
        "replies": [
          {
            "author": "GimmickNG",
            "body": "How do you deal with explaining the absence on your resume when taking a sabbatical?",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "RedPandaDan",
        "body": "In gamedev you can slave away for years making incredibly intense simulations running at 60 FPS for shit wages and a consumer market that'll delight in your failures... or you can go into webdev, shovel some react slop together that takes a second to get to its first contentful paint and make more money for way less stress.\n\nNo one should be working in gamedev if they can avoid it.",
        "score": 12,
        "replies": [
          {
            "author": "Great-Use6686",
            "body": "And when you’re forced to rush through unrealistic deadlines and there are bugs consumers blame it specifically at”the devs.”",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "torrent7",
        "body": "Yeah, as someone who has left the industry I'll let people in to a well known but rarely brought up fact. The games people really love to play now and more so in the past were made with the sweat and tears of an overworked abused workforce. There's a terible underlying theme that if you enjoyed a game, it probably had a horrific crunch to get it at the quality people desire. \n\n\nI hadn't heard the term death march until I talked to some of the people working on Halo... apparently it's a crunch (60-80 hour weeks) for over a year. \n\n\nThere's a reason there is a lot of AAA mediocrity these days - those studios have matured and people don't crunch like they used to. The economics of paying your employees well, respecting their quality of life, and shipping a truly good game does just not pencil. It's sad in multiple different ways.",
        "score": 42,
        "replies": [
          {
            "author": "JarateKing",
            "body": "We've known for decades now that crunch is not sustainable, productivity-wise. It burns people out and people do shit work when they're burnt out.\n\n\nIt works out sometimes, but it's certainly not a recipe for success. The problem with Cyberpunk 2077's infamously terrible launch wasn't that devs needed *more* crunch.",
            "score": 14,
            "replies": [
              {
                "author": "torrent7",
                "body": "It's sustainable in the sense that there are always more post college grads trying to get in the industry than there are people leaving it. \n\n\nIt's [mostly] not sustainable on an individual level, hence the huge turnover.\n\n\nSo it depends on your POV. If you're a consumer, it's sustainable, if you're the person making the sausage, probably not.",
                "score": 5,
                "replies": [
                  {
                    "author": "JarateKing",
                    "body": "It certainly happens but I think it's overstated in these discussions. Hiring people takes time and money. Onboarding new hires takes time and company resources, especially to an ongoing project. Training up new grads takes time and company resources.\n\n\nYou generally don't want to do this to any significant extent while the project's going, because productivity will suffer. So it doesn't immediately address productivity lost to crunch-induced burnout, you're still gonna have burnt out employees on at least until the rest of the project (unless you cancel it entirely, which companies obviously don't intend).\n\n\nAnd there ain't much to say about that except [we know it makes for worse games](https://www.gamedeveloper.com/business/the-game-outcomes-project-part-4-crunch-makes-games-worse)",
                    "score": 3,
                    "replies": [
                      {
                        "author": "torrent7",
                        "body": "Just curious, do you work in the industry? I just don't want to seem condescending - I've never seen or heard of a company in the games industry worry about turn over or burn out. It's just expected and a normal part of the development process. If you have a number of critical senior or principal level engineers that are required to ship a game in the next 6 months or you start losing tens of millions of dollars keeping the larger dev team working, you don't care about burn out, you just want and need to ship your game.\n\n\nEveryone is focused on the next 3-4 months, anything beyond that is just not very important. Good luck even having a discussion about tech debt.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "obp5599",
                    "body": "This is such a massive talking point on reddit but ive yet to ever see it be true. Turnover is not very high at the studios ive worked at. Unless something is seriously going wrong with a specific project",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "evasive_btch",
            "body": "I do not believe you that that's the reason why AAA games are shit.\n\nAAA games are shit because they are created with the monetization model in mind, instead of a good game mechanic.",
            "score": 51,
            "replies": [
              {
                "author": "schmuelio",
                "body": "The monetization model (i.e. profit above all) is why their developers are treated so poorly. It's all about keeping as much money as physically possible.\n\nWell, that and they keep hiring and protecting rampant abusers.",
                "score": 21,
                "replies": []
              },
              {
                "author": "torrent7",
                "body": "Those monetization models are part of the equation. It's far easier, cheaper, aand sustainable to shove monetization schemes in a game than to focus on a player centric experience. When your salaried employees work twice as much (crunch) as what their nominally paid, games are a lot less expensive to make. The flip side of that is that is that if you cannot rely on crunch, your costs go up significantly, these costs must be gotten back somehow or companies will go under; enter extra monetization.",
                "score": 9,
                "replies": []
              }
            ]
          },
          {
            "author": "IQueryVisiC",
            "body": "The far cry game engine is a product of crunch. Nobody uses it. Instead they use Unity3d, who never developed a game, or unreal, which was written by the owner at his pace (similar to id tech). Also: “blazing fast renderer” . Today games just add new skins for their yearly release.  Or even continuous deployment. No new GTA, no man’s sky . Madden CoD FIFA",
            "score": 13,
            "replies": [
              {
                "author": "BlueGoliath",
                "body": "When did Ubisoft make the Far Cry engine publicly available?",
                "score": 12,
                "replies": []
              },
              {
                "author": "Vozka",
                "body": "If you mean the original CRYENGINE (which I don't think has been used for any Far Cry games), then that's an engine that's been used by some great games like Prey or Kingdom Come: Deliverance. It's always been more specialized than strongly generalized engines like Unity and newer versions of Unreal Engine, which may have more to do with why it's not used as much.",
                "score": 9,
                "replies": [
                  {
                    "author": "Bhraal",
                    "body": "The first Far Cry was the first CryEngine game, developed by Crytek and published by Ubisoft. Between Far Cry and Far Cry 2 EA swooped in and signed a deal with Crytek to develop a new game using CryEngine (Crysis).\n\nUbisoft then bough the full rights to Far Cry, including a perpetual license for the version of CryEngine that had been used for the first game. Ubisoft started modifying the engine to make it work for the various console ports and renamed it Dunia by the time Far Cry 2 was released. \n\nBoth Crytek and Ubisoft have kept on developing their engines (although Ubisoft has said they are sunsetting Dunia), so I imagine they are quite different today even though they came from the same base code.\n\n------\nCryEngine is also the base of Amazon's (now deprecated) Lumberyard game engine, [which in turn was the basis of StarEngine \\(Star Citizen\\) and Open 3D Engine.](https://i.imgur.com/isqXaAG.jpeg)",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "schmuelio",
                    "body": "&gt; If you mean the original CRYENGINE (which I don't think has been used for any Far Cry games)\n\nApparently the Far Cry engine is a \"heavily modified\" version of CryEngine, I don't know how much \"heavily modified\" means or whether you would consider that a different engine at that point.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "encloser",
            "body": "https://www.oreilly.com/library/view/death-march-second/013143635X/\n\nThe term has been around a while. It was so common, even outside of gamedev, that someone wrote a book about it.\n\nYounger people may hate on Agile, but it effectively killed Death March culture in my fintech experience.",
            "score": 6,
            "replies": [
              {
                "author": "torrent7",
                "body": "Curious... Its exceedingly rare that games aren't developed with agile as the predominant development process, especially games as a service.",
                "score": 2,
                "replies": [
                  {
                    "author": "encloser",
                    "body": "Agile is a double edged sword IMHO. Instead of 3 year projects with the last year being a death march, it can foster a constant death march in every sprint. But in my personal experience it has instead spread the \"crunch\" out to more acceptable levels instead of constant for extended periods.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "syklemil",
            "body": "This is also somewhat related to other cathedrals humanity has built. It's generational work, where financing may come and go, and some managers/owners are more interested in building progress than they are in treating their workers humanely.",
            "score": 2,
            "replies": [
              {
                "author": "torrent7",
                "body": "Exactly. It's great to be the beneficiary of this work, less so to do the work.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "bradwrich",
            "body": "As an avid player, I’m fine with the wait. GTA 6 was just postponed and my thought was, ok, it’ll be better. \n\nI’m guessing the pressure isn’t from the players. It is from the investors. Monetization over entertainment.",
            "score": 3,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "IMO the reason for AAA mediocrity is there are so many more devs on a game now, and this creates a huge problem for leadership to steer everybody in the right direction and still have good ideas percolate.\n\n\n\nDoom had just 16 people on it including support staff. This is about the same size as the credits for Pink Floyd's Dark Side of the Moon album.  If they had 600 people working on it, is there any chance it could be good? Absolutely not. \n\n\nThere are still studios that can make great titles at scale but it will depend greatly on the quality of the leadership and game director to see if they can handle a large scale. There are very few who actually can. Even at from soft, if Miazaki isn't in charge it falls apart.",
            "score": 1,
            "replies": [
              {
                "author": "SortaEvil",
                "body": "It's not the size of the team that's the problem (well, not _directly_), it's the cost of the game making publishers risk averse. If you're spending half a billion or more on a game, you need to recoup costs. In order to recoup those costs, you need a guarantee that the game is going to sell gangbusters. So how do you do that? Fall back on known IP and known gameplay patterns that people love. The tradeoff is that you get shinier and shinier toys, but they start to feel vacuous and uninspired (because they are).\n\nSo, yeah, AAA games are derivative and boring because they're expensive to make. They're expensive to make because they employ hundreds of people to make the game over multiple years. They take hundreds of people multiple years to make because people demand that the games keep getting bigger and more detailed, which requires more time and effort to make the games, and therefore more cost.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "SortaEvil",
            "body": "&gt; There's a reason there is a lot of AAA mediocrity these days - those studios have matured and people don't crunch like they used to.\n\nNo, it's because people want shiny, big, open-world AAA games (or, at the very least, publishers _think_ that's what people want), and big, shiny, open-world games cost a lot of money to make. So publishers end up being very conservative with what games they greenlight, because those games are expensive, and publishers aren't in the business of losing money.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "bundt_chi",
        "body": "The article doesn't go into a lot of detail on the specific roles but from what little I saw many of the roles were artistic or non technical roles. Like \"concept designer\" and UX. Which don't get me wrong can make or break a game but this is the programming sub. Maybe I missed it but are there as many programmers leaving ?  I know it's a toxic culture but it always seemed like there were lots of people willing to put up with it ?",
        "score": 3,
        "replies": []
      },
      {
        "author": "campbellm",
        "body": "Shitty work/coding practices, low pay, abusive management, inflexible timelines, what's not to love?",
        "score": 3,
        "replies": []
      },
      {
        "author": "thehutch17",
        "body": "I was recently made redundant from the games industry after seven years and am now moving into an embedded role instead. Perhaps I was just with a decent games studio, but I never had crunch or issues with other members of the team. The pay was an issue I saw since you get a lot less (Even for senior roles), but the flexibility of fully remote was great.",
        "score": 3,
        "replies": []
      },
      {
        "author": "purpoma",
        "body": "Industry is healing",
        "score": 5,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Gaming seems like one of the areas more prone to predators because it seems to have far more passionate people involved, which is a shame because at a certain point being part of a cool product isn’t worth all the exploitation and shit eating.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Forbizzle",
        "body": "This has been a constant in the video games industry.  Lay offs right now are worse than before COVID, but we've had waves in the past before. Eventually people grow up, have higher expenses, and realize that a lot of these big studios will never pay them what they can make in other roles using their skills.",
        "score": 2,
        "replies": []
      },
      {
        "author": "psilo_polymathicus",
        "body": "Yeah, honestly, the only way it will change is when the people that these companies need don’t have enough because they won’t put up with being treated like shit.",
        "score": 2,
        "replies": []
      },
      {
        "author": "FormerlyGruntled",
        "body": "The games industry staff need to realize, every big studio sees them as nothing more than contractors. When the game is done, so is the gig, and everything gets torn back down and new teams are made from people who aren't familiar with each other. The big publishers don't care, because all the developers from small companies want to go work for one of those big abusive names.\n\nWe're also in the middle of a VC dry-up period, so new capital for untested products is very slim, which is why so little new is coming out of the mainstream teams, and everything is regurgitated.\n\nThe real talent is found in smaller studios and indie development squads. Stop giving the spotlight to the abusers, start shining the light on the real gems so they can grow.",
        "score": 2,
        "replies": []
      },
      {
        "author": "not_some_username",
        "body": "It was a matter of time. They kept shitting a them because “it was their passion” now the passion fade away",
        "score": 3,
        "replies": []
      },
      {
        "author": "stonerism",
        "body": "*treats game devs like shit*\n\nWhy can't we find game devs anymore?",
        "score": 2,
        "replies": []
      },
      {
        "author": "tadrith",
        "body": "I love that we have video game developers, because I love video games.\n\nBut video game development is one of the most thankless and difficult programming jobs you can have. You're generally paid less compared to many other software development fields, and depending on what you're doing you're going to actually need those advanced math classes.\n\nI dabbled in it, before I entered the workforce. I found it pretty grueling work. Then, when it came time to get a job, I found that not only was working on business apps with SQL a lot easier, it also paid a lot better...",
        "score": 1,
        "replies": []
      },
      {
        "author": "volune",
        "body": "They will death march you for a release deadline, and then lay you off as a reward for all the hard work.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Stellar_Science",
        "body": "For C++ game developers with decent math skills, scientific modeling and simulation may be a good career pivot. Instead of the simulations looking good and being fun, they have to be accurate and match the real world to a given precision, but otherwise many of the software development skills are transferable.",
        "score": 1,
        "replies": [
          {
            "author": "Bakoro",
            "body": "Also: robotics and almost anything related to controls systems and manufacturing.  \n   \nYou'll probably have to learn a little something about motors, gears, and other hardware, but whenever I do motion controls I think about the overlap with game development to the point of \"should I just be doing this project in Unreal?\".",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "rs98101",
        "body": "Yup. As an undergraduate CS major my dream was to work for a game development studio. Once I got plugged into the industry I found out about the low pay and insanely long hours I gave up on that dream fairly quickly. No regrets.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Syliann",
        "body": "Many of the best games are indie passion projects and not big studio games. If young people are truly passionate about games, they should learn from those who went into the industry about how little job security there is and the terrible work balance.\n\nGetting a more stable \"boring\" job can fund a hobby project outside of work. Full creative control and not being bound by market forces can be invaluable",
        "score": 1,
        "replies": []
      },
      {
        "author": "Lothrazar",
        "body": "If its normal in the industry to get laid off every two years; and/or get laid off every time you launch a SUCCESSFUL game, yeah i can understand why of course",
        "score": 1,
        "replies": []
      },
      {
        "author": "delThaphunkyTaco",
        "body": "I'd assume the indie market will just get better",
        "score": 1,
        "replies": []
      },
      {
        "author": "ysustistixitxtkxkycy",
        "body": "Tech companies in general have gotten very excited in assuming that AI will take over the jobs of all those complicated developers and have been falling over themselves to get rid of people.\n\nI have strong feelings about how we'll see this play out.",
        "score": 1,
        "replies": []
      },
      {
        "author": "CoreyTheGeek",
        "body": "Yeah they found out they could go do web development for double the salary and work 30 hours a week in a non toxic company that won't lay them off before bonuses and dev games in their nights and weekends. \n\nThe game industry needs to die so it can be reborn.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Ultra_Noobzor",
        "body": "And they are absolutely right to do so. Games have been invaded by venture capital and the staff who actually build these games are being treated like absolute crap.",
        "score": 1,
        "replies": [
          {
            "author": "ogn3rd",
            "body": "This is all of tech. They got to games last. Theyve ruined the rest already.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "OSBY_Glabay",
        "body": "I've been into software development for over 2 decades, and been writing games for about 15, from my own indie 2d engine to some big names, I love video games and they gave me so much over the years, but I also love to design and create software that helps small dev teams of 1 to 20 people do more and get more out of their time. Where I wouldn't turn down a job in the game industry, I would have more enjoyment making software for teams of devs",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "Why Copilot is Making Programmers Worse at Programming",
    "body": "",
    "score": 958,
    "url": "",
    "created_utc": 1726064302.0,
    "author": "bizzehdee",
    "permalink": "/r/programming/comments/1feb9qd/why_copilot_is_making_programmers_worse_at/",
    "comments": [
      {
        "author": "pydry",
        "body": "The fact that copilot et al lead to a kind of \"code spew\" (generating boilerplate, etc.) and that the majority of coding cost is in maintenance rather than creation is why I think AI will probably have a positive impact on programming job creation.\n\n\nSomebody has to maintain this shit.",
        "score": 1248,
        "replies": [
          {
            "author": "ChadtheWad",
            "body": "I've called it \"technical debt as a service\" before... seems fitting because it makes it less painful to write lots of code.",
            "score": 301,
            "replies": [
              {
                "author": "prisencotech",
                "body": "I might have to set a separate contracting rate for when a client says \"our current code was written by AI\".\n\nA separate, *much higher* contracting rate.\n\nWe should all demand hazard pay for working with ai-driven codebases.",
                "score": 137,
                "replies": [
                  {
                    "author": "Main-Drag-4975",
                    "body": "Yeah. For some naive reason I thought we’d see it coming when LLM-driven code landed at our doorsteps.  \n\nUnfortunately I mostly don’t realize a teammate’s code was AI-generated gibberish until after I’ve wasted hours trying to trace and fix it.\n\nThey’re usually open about it if I pair with them but they never mention it otherwise.",
                    "score": 56,
                    "replies": [
                      {
                        "author": "spinwizard69",
                        "body": "There are several problems with this trend.  \n\nFirst LLM are NOT AI, at least I don’t see any intelligence in what current systems do.  With coding anyway it looks like the systems just patch together blocks of code without really understanding computers or what programming actually does.  \n\nThe second issue here is management, if a programmer submits code written by somebody else, that he doesn’t understand, then management needs to fire that individual.   It doesn’t matter if it is AI created or not, it is more a question of ethics.   That commit should be a seal of understanding.  ",
                        "score": 37,
                        "replies": [
                          {
                            "author": "prisencotech",
                            "body": "There's an extra layer of danger with LLMs.\n\nCode that is subtly wrong in strange, unexpected ways (which LLMS specialize in) can easily get past multiple layers of code review.\n\nAs @tsoding once said, code that looks bad can't be that bad, because you can tell that it's bad by looking at it. Truly bad code looks like good code and takes a lot of time and investigation to determine why it's bad.",
                            "score": 45,
                            "replies": [
                              {
                                "author": "MereInterest",
                                "body": "It's the difference between the International Obfuscated C Code Contest ([link](https://www.ioccc.org/)) and the Underhanded C Contest ([link](http://www.underhanded-c.org/)).  In both, the program does something you don't expect.  In the IOCCC, you look at the code have have no expectations.  In the UCC, you look at the code and have a wildly incorrect expectation.",
                                "score": 21,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "thinkmatt",
                "body": "And easy to write a ton of useless tests on all sorts of unlikely permutations. Thats the hardest for me to review in a PR",
                "score": 6,
                "replies": []
              },
              {
                "author": "BiteFancy9628",
                "body": "AI writes much better code than any of my junior engineers and it doesn’t take 5 fucking sprints for something I could do myself in a day. It allows you to instantly compare and contrast 10 different approaches and debate the pros and cons all in under an hour, learning in the process. And after you confirm it works, it can give you tips to improve the code quality with logging, error handling, etc and then make the changes for you.\n\nIt’s a major accelerator and curmudgeons will have to get used to it or be out of work. The final code is still your responsibility.\n\nOf course it is algorithmic plagiarism. But that’s the legal department’s problem to figure out.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "NuclearVII",
            "body": "Maintaining a codebase is pretty fucking hard if you don't know what the codename does.\n\nA gennAI system doesn't know anything.",
            "score": 314,
            "replies": [
              {
                "author": "PotaToss",
                "body": "A lot of the value of a good dev is having the wisdom to write stuff to be easy to maintain/understand in the first place.\n\nI don't really care if how the AI works is a black box, if it creates desirable results, but I don't see how people's business applications slowly turning into black boxes doesn't end in catastrophe.",
                "score": 44,
                "replies": [
                  {
                    "author": "felipeccastro",
                    "body": "I'm in the process right now of replacing a huuuuuge codebase generated by LLMs, with a very frustrated customer saying \"I don't understand why it takes months to build feature X\". The app itself is not that big in terms of functionalities, but the LLM generated something incredibly verbose and impossible to maintain manually.\n\nSure, with LLMs you can generate something that looks like it works in no time, but then you learn the value of good software architecture the hard way, after trying to continually extend the application for a few months.",
                    "score": 26,
                    "replies": [
                      {
                        "author": "GiacaLustra",
                        "body": "How did you even get to that point?",
                        "score": 9,
                        "replies": [
                          {
                            "author": "felipeccastro",
                            "body": "It was another team who wrote the app, I was hired to help with the productivity problem. ",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "tronfacex",
                        "body": "I started teaching myself to program in C# in 2019 just before LLMs. \n\n\nI was forced through textbooks, stack overflow, reddit threads, Unity threads to learn stuff. I think if I started from scratch today I would be too tempted to let the LLM do the work, and then I wouldn't know how anything really works.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "NuclearVII",
                    "body": "I'm perfectly fine with the black-boxiness in some applications. Machine learning stuff really thrives when you only care about making statistical inferences. \n\nSo stuff like forecasting, statistical analysis, complicated regression, hell, a quick-and-dirty approximation are all great applications for these algorithms.\n\nGen AI.. is none of that. If I want code, I want to know the why - and before AI bros jump in, no, copilot/chatgpt/whatever LLM du jour you fancy cannot give me a why. It can only give me a string of words that is statistically likely to be the why. Not the same thing.",
                    "score": 18,
                    "replies": [
                      {
                        "author": "Magneon",
                        "body": "That's all ML is (in broad strokes). It's a function aproximator. It's great when you have a whole lot of data and don't have a good way to define the function parametrically or procedurally. It's even possible for it to get an exact right answer if enough compute power and data is thrown at it, in some cases. \n\nIf there's a way to deterministically and extensibly write the function manually (or even it's output directly), it'll often be cheaper and/or better.\n\nIronically one of the things LLMs do decently well is pass the turing test, if that's not explicitly filtered out. There's that old saying about delivering the things you measure.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "saggingrufus",
                "body": "This is why I use AI like rubber duck, I talk through and argue my idea with it to convince myself of my own idea.\n\nIf you are trying to generate something that your IDE is already capable of doing with a little effort, then you probably just don't know the IDE. Like, ides can already do boiler plates.",
                "score": 19,
                "replies": []
              },
              {
                "author": "ReginaldDouchely",
                "body": "Agreed, but \"pretty fucking hard\" is one of the reasons we get paid well.  I'll maintain your AI-generated garbo if you pay me enough, even if I'm basically reverse engineering it.  And if you won't, then I guess it doesn't really need to be maintained.",
                "score": 26,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "Thanks to hackers, everything is a ticking time bomb if it's not maintained. The exploitable surface area will explode with LLMs. This whole setup may be history's most efficient job creation programme. ",
                    "score": 20,
                    "replies": [
                      {
                        "author": "HAK_HAK_HAK",
                        "body": "Wonder how long until we get a zero day from a black hat slipping some exploit into GitHub copilot via creating a bunch of exploited public repos",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "iiiinthecomputer",
                        "body": "I've seen SO much Copilot produced code with trivial and obvious SQL injection vulnerabilities.\n\nAlso defaulting to listening on all addresses (not binding to localhost by default) with no TLS and no authentication.\n\nIt tends to use long winded ways to accomplish simple tasks, and use lots of deprecated features and old idioms too.\n\nMy work made me enable it. I only use it for writing boring repetitive boilerplate and test case skeletons.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "tom_swiss",
                "body": "GenAI is just typing in code from StackExchange (or in ye olden days, from books - it's a time honored practice) with extra steps.",
                "score": 86,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 94,
                    "replies": [
                      {
                        "author": "Thought_Ninja",
                        "body": "It can probably have an accent if you want it to though.",
                        "score": 43,
                        "replies": [
                          {
                            "author": "agentoutlier",
                            "body": "The old TomTom GPS had like celebrity voices and one of them was Ozzy and it was hilarious. I would think it would be pretty funny if you could choose that for developer consultant AI.",
                            "score": 16,
                            "replies": []
                          },
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "[deleted]",
                        "body": "Judging by how bad the suggestions are it just might be. I am using it to design a data model schema right now and it’s prob taking me more time to use it then I saved",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "EveryQuantityEver",
                    "body": "At least doing stuff from StackExchange had a person doing it, who actually had an idea of the context of the program.",
                    "score": 9,
                    "replies": []
                  },
                  {
                    "author": "MisterFor",
                    "body": "What I hate now is doing any kind of tutorial. Typing the code is what I think helps to remember and learn, but with copilot it will always autocomplete the exact tutorial code.\n\nAnd sometimes even if it has multiple steps it will jump to the last one, and then following  the tutorial becomes even more of a drag.\n\nEdit: while doing tutorials I don’t have my full focus, I am doing them on the job. I have to switch projects and IDEs during the tutorial multiple times for sure. So no, turning it on and off all the time is not an option. In that case I prefer to have the recommendations than waste time dealing with it. I hate them, but I would hate more not having them when opening real projects.",
                    "score": 11,
                    "replies": [
                      {
                        "author": "aniforprez",
                        "body": "... can you not just disable it? Why would you use it while you're learning anyway?",
                        "score": 36,
                        "replies": []
                      },
                      {
                        "author": "SpaceMonkeyAttack",
                        "body": "Can't you turn it off while doing a tutorial?",
                        "score": 12,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Over-Temperature-602",
                "body": "We just rolled out automatic pr descriptions at my job and I was so excited.\n\nTurned out it's worthless because it (LLMs) can't deduct the \"why\" from the \"what\" 🥲",
                "score": 13,
                "replies": [
                  {
                    "author": "TheNamelessKing",
                    "body": "We did this as well, it was fun for a little bit, and then useless because it wasn’t really helpful. Then, one day a coworker mentioned they don’t read the LLM generated summaries because “I know you haven’t put the slightest bit of effort in, so why would I bother reading it?”. Pretty much stopped doing them after that and went back to writing them up by hand again.",
                    "score": 14,
                    "replies": []
                  },
                  {
                    "author": "PeachScary413",
                    "body": "AI 🥲",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "You aren’t thinking like a manager yet. Get ChatGPT to write it and ChatGPT to maintain it, hell get it to design it too, but getting ChatGPT to manage it is a bridge too far of course. What could possibly go wrong.",
            "score": 63,
            "replies": [
              {
                "author": "SanityInAnarchy",
                "body": "The irony here is, management is the job ChatGPT seems *most* qualified for: Say a bunch of things that *sound* good, summarize a bunch of info from a bunch of people to pass up/down in fluent corpspeak, and if someone asks you for a decision, be decisive and confident even if you don't have nearly enough context to justify it, all without having to actually understand the details of how any of this actually works.\n\nThis makes even more sense when you consider what it's trained on -- I mean, these days it's bigger chunks of the Internet (Reddit, StackOverflow, Github), but to train these bots to understand English, they originally started with a massive corpus of email from Enron. Yes, *that* Enron -- as a result of the lawsuit, huge swaths of Enron's *entire email archive* ended up as part of the public record. No wonder it's so good at corpspeak. (And at lying...)\n\nIn a just world, we'd be working for companies where ChatGPT replaced the C-suite instead of the rank-and-file.",
                "score": 67,
                "replies": [
                  {
                    "author": "DaBulder",
                    "body": "Don't make me tap on the sign that says \"A COMPUTER CAN NEVER BE HELD ACCOUNTABLE - THEREFORE A COMPUTER MUST NEVER MAKE A MANAGEMENT DECISION\"",
                    "score": 22,
                    "replies": [
                      {
                        "author": "SanityInAnarchy",
                        "body": "Companies can be held accountable to the decisions made by a computer. This has already happened in a few cases where a company tried to replace their call center employees with an AI chatbot, the chatbot promised things to customers talking to it, and the company was forced to honor those promises.\n\nIf you mean *executives* being held accountable and not being able to hide behind the company, that's *incredibly* rare. Have we even had a case of that since Enron?",
                        "score": 17,
                        "replies": [
                          {
                            "author": "DaBulder",
                            "body": "Considering the phrase is attributed to an internal IBM slide set, it's really talking about internal accountability.",
                            "score": 8,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "LucasRuby",
                "body": "From my experience, ChatGPT is a lot better at writing new code than maintaining existing code. Mainly, and that's the main reason ChatGPT isn't useful most of the time, is that to maintain existing code (say, fix a bug or tweak functionality slightly), I have to give it so much context that I'd end up spending more time writing the prompt than working with code. The actual code writing in these cases seems to be very little, sometimes a line or two worth of code  for a bugfix or a feature change.  \n\nWhereas for writing new code, that's what AI is so incredibly helpful at because there's so many lines of code to write, you actually spend a lot of time writing the obvious code. AI can do that for me and I can just edit or tweak a few lines, write the couple functions that actually involve complex logic and fix the oversights in the rest of the boilerplate it wrote.",
                "score": 8,
                "replies": []
              },
              {
                "author": "TreDubZedd",
                "body": "ChatGPT at least seems to understand how Story Points should be used.",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "FortyTwoDrops",
            "body": "This is precisely what I’ve been trying to say to everyone riding high on the AI hype train.\n\nIt’s hard enough to manage/maintain/wrangle a large codebase made by multiple people.  Trying to maintain the hot garbage coming out of AI right now is going to create a lot of jobs.  Turns out that Software Engineering is a LOT more than just writing lines of code.\n\nNevermind all of the suboptimal, error prone, and outright hallucinated crap coming out of LLMs lately.  It really feels like they’ve regressed, but maybe it’s my expectations have gotten higher.  They’re still a useful argument when used appropriately, but the whole “they’re taking our jobs” is a resounding… no.",
            "score": 12,
            "replies": []
          },
          {
            "author": "Main-Drag-4975",
            "body": "It is *incredibly* frustrating to try and work in a teammate’s previously-coded module only to slowly realize that:\n\n1. The author doesn’t know what their own code does\n2. It may have _never_ worked\n3. It was built with extensive “help” from LLMs.",
            "score": 20,
            "replies": [
              {
                "author": "mobileJay77",
                "body": "Human co-workers can do that, too. Even before copilot. Had a code that only didn't crash, when it failed to find any matching data.\n\nMe and another, more sane colleague got frustrated, because we were to fix that low-effort crap.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "I love copilot. Writing code takes time, copilot saves developers so much time by writing code that is obvious.\n\nWhen the code isn't obvious, copitlott will usually output nonsense that I can ignore.",
            "score": 68,
            "replies": [
              {
                "author": "upsidedownshaggy",
                "body": "I mean you didn't co-pilot for that. VSCode and other modern IDE's have plugins that will auto-generate a tonne of boilerplate for you. Some frameworks even like Laravel have generator commands that will produce skeleton class files for you that removes writing your own boilerplate.\n\n  \nEdit: to anyone who feels compelled to write an \"Umm ACTUALLY\" reply defending their use of Chat-GPT or Co-Pilot to generate boilerplate, I really don't care. I was just pointing out that IDE's and everyone's favorite text editor VS-Code 99% of the time has built in features or a readily available plugin that will generate your boilerplate for you, and these have been available before LLM's hit the market the way they have in the last few years.",
                "score": 56,
                "replies": [
                  {
                    "author": "FullPoet",
                    "body": "Yeah thats honestly what Im experiencing too - a lot of younger developers who use a lot of AI help dont use their tools (IDEs) to any significant level. \n\nThings like auto scaffolding, code snippets, whole templates or just shortcuts (like ctor/f) theyve never heard of - Im honestly grateful to share them because theyre super useful.",
                    "score": 52,
                    "replies": []
                  },
                  {
                    "author": "donalmacc",
                    "body": "Have you tried copilot or cursor or any of those? It's roughly equivalent (in my experience) to the difference between a naive auto complete and a semantic context.",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "wvenable",
                    "body": "ChatGPT generates intelligent boilerplate that IDE's just can't match.\n\nI could say \"generate a class with the following fields (list here) and all the getters and setters\" and it would do it.  I could even say infer the type from the name and it would probably get that mostly right.\n\nEDIT: I get it -- bad example.  How about \"take this Java code and now give it to me in JavaScript\"?",
                    "score": 17,
                    "replies": [
                      {
                        "author": "upsidedownshaggy",
                        "body": "See I've experienced the exact opposite. Granted this was like a year ago now, but GPT was generating absolute nonsense getters and setters that were accessing non-existent fields, or straight up using a different language's syntax. I spent more time debugging the GPT boilerplate than it would've taken me to run the generator command the framework I was using had and making the getters and setters myself.",
                        "score": 24,
                        "replies": [
                          {
                            "author": "aniforprez",
                            "body": "Yeah this was my experience. Everyone raving about it initially made me think it would be great to be able to have it automatically write tests for stuff I was doing. The tests it spat out were complete garbage and a lot of them were testing basic shit like checking if the ORM was saving my models. I don't need that shit tested when the framework devs already did that I want to test logic I wrote",
                            "score": 11,
                            "replies": []
                          },
                          {
                            "author": "wvenable",
                            "body": "I once pasted like 100 properties from C# to make ChatGPT generate some related SQL and not only did it do it but it pointed out a spelling error in one of the properties that had gone unnoticed.\n\nHave I had ChatGPT generate nonsense?  Sure.  But it's actually more rare than common.  Maybe because as you become more familiar with the tool you begin to implicitly understand its strengths and weaknesses.  I use it for its strengths.",
                            "score": 9,
                            "replies": [
                              {
                                "author": "takishan",
                                "body": "&gt;  Maybe because as you become more familiar with the tool you begin to implicitly understand its strengths and weaknesses\n\nI think this is the part lots of people don't understand simply because they haven't used the AIs very much. Or they've only had access to the lower quality versions. For example when you pay the subscription for the better ChatGPT, it makes a significant difference.\n\nBut it's a question of expectations. If you expect the AI to do everything for you and get everything right, you're going to be disappointment. But depending on how you use it, it can be a very effective tool.\n\nI view it as a mix between a fancy autocomplete mixed with a powerful search engine. You might want to know more about something and not really know how to implement it. If you knew the right words to Google, you could probably find the answer yourself.\n\nBut by asking ChatGPT in natural language, it will be able to figure out what you want and point you in the right direction.\n\nIt's not going to write your app for you though, it simply cannot hold that much stuff in context",
                                "score": 10,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "Idrialite",
                            "body": "Idk what to tell you. Copilot alone generates entire complicated functions for me: https://imgur.com/a/ZA7CXxz.\n\nTalking to ChatGPT is even more effective: https://chatgpt.com/share/0fc47c79-904d-416a-8a11-35535508b514.",
                            "score": 8,
                            "replies": [
                              {
                                "author": "intheforgeofwords",
                                "body": "I think classifying the above photos as \"complicated functions\" is an interesting choice. These are relatively straightforward functions, at best; at worst (on a complexity scale) they're trivial. Despite that, both samples you've shown exemplify both the best and worst things about genAI:  when syntactically correct code is generated, it tends to be overly verbose. And syntactically correct code that happens to be idiomatic is not always generated.\n\n  \nThe cost of software isn't just the cost of writing it - it's the cost of writing it and the cost of maintaining it. Personally, I'd hate to be stuck adding additional logic into something like \\`CancelOffer\\` because it really needs to be cleaned up. That \"cost\" really adds up if everything that's written is done in this style.",
                                "score": 8,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "EveryQuantityEver",
                        "body": "IDEs will absolutely generate all those getters and setters for you.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 25,
                "replies": [
                  {
                    "author": "Deranged40",
                    "body": "I also have a copilot license provided by my company. \n\nI find that way more often than not, it tries to autocomplete a method call with just the wrong values passed in. Often not even the right *types* at all. \n\nAutocomplete was much better at guessing what I was about to type tbh.\n\nI do find it helpful a lot of the times when it describes why an exception gets thrown when I'm debugging. Especially since I work in a monolith with *a ton* of code that I've frankly never seen before.",
                    "score": 9,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "glowingGrey",
                "body": "Does it really save that much time? The boilerplate might be quite verbose, especially if you're early on the dev process and on a project that still needs a lot of the scaffold putting in place, but it's also very non-thinky code which is easy to write or copy from elsewhere, and you generally don't need to do very much of it either.",
                "score": 6,
                "replies": []
              },
              {
                "author": "heartofcoal",
                "body": "yeah, it's a glorified auto-complete when the code doesn't demand a lot of thought",
                "score": 11,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 12,
                    "replies": [
                      {
                        "author": "heartofcoal",
                        "body": "I feel like it hallucinates way too much for complex prompts, I just do object oriented scripting, which kinda still makes it a glorified auto-complete",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Digital-Chupacabra",
        "body": "&gt; When a developer writes every line of code manually, they take full responsibility for its behaviour, whether it’s functional, secure, or efficient.\n\nLMAO, they do?!? Maybe I'm nitpicking the wording.",
        "score": 1129,
        "replies": [
          {
            "author": "JaggedMetalOs",
            "body": "Git blame knows who you are! (Usually myself tbh)",
            "score": 264,
            "replies": [
              {
                "author": "FnTom",
                "body": "I will never forget the first time I thought \"who the fuck wrote this\" and then saw my name in the git blame.",
                "score": 204,
                "replies": [
                  {
                    "author": "Big_Combination9890",
                    "body": "Ah yes, the good old `git kenobi` move:\n\n*\"Do I know who wrote this code? Of course, it's me.\"*",
                    "score": 58,
                    "replies": []
                  },
                  {
                    "author": "zukenstein",
                    "body": "Ah yes, a tale as old as (epoch) time",
                    "score": 12,
                    "replies": []
                  }
                ]
              },
              {
                "author": "CyberWank2077",
                "body": "I once made the mistake of taking the task to incorporate a standard formatter for our 7 months old project. which made it so that i showed up on every git blame result for every single line in the project. Oh god the complaints i kept getting from people about parts of the project i never saw.",
                "score": 42,
                "replies": [
                  {
                    "author": "kwesoly",
                    "body": "There is a config file for git where you can list which commits should be hidden from blaming :)",
                    "score": 44,
                    "replies": [
                      {
                        "author": "CyberWank2077",
                        "body": "damn. so many potential use cases for this. No more responsibilities for the shit i commit!",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "chazragg",
                "body": "Or does it https://github.com/jayphelps/git-blame-someone-else",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "MonstarGaming",
            "body": "IME the committer and the reviewer take full responsibility. One is supposed to do the work, the other is supposed to check the work was done correctly and of sufficient quality. Who else could possibly be responsible if not those two?",
            "score": 107,
            "replies": [
              {
                "author": "andarmanik",
                "body": "A secret third person which we’ll meet later :)",
                "score": 68,
                "replies": [
                  {
                    "author": "cmpthepirate",
                    "body": "Secret? I think you're referring to the person who finds all the bugs after the merge 😂",
                    "score": 17,
                    "replies": [
                      {
                        "author": "troccolins",
                        "body": "Or the user(s) who runs into any unintended behavior.",
                        "score": 4,
                        "replies": []
                      },
                      {
                        "author": "Coby_Wan_Kenobi",
                        "body": "The QA engineer",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "CharlesDuck",
                    "body": "Is this person in the room with you right now?",
                    "score": 5,
                    "replies": [
                      {
                        "author": "shaderbug",
                        "body": "No, it will be there once I'm gone",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "angelicosphosphoros",
                    "body": "Do you mean manager?",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "nan0tubes",
                "body": "The nickpick exists in the space between is responsible for and takes responsibility.",
                "score": 24,
                "replies": []
              },
              {
                "author": "sir_alvarex",
                "body": "The next person who comes along to fix the code, obviously.",
                "score": 7,
                "replies": []
              },
              {
                "author": "Big_Combination9890",
                "body": "If all else fails, I can still blame infrastructure, bitflips caused by cosmic radiation, or the client misconfiguring the system 😎\n\nNo, but seriously though, there is a difference between \"being responsible\" and \"taking responsibility\".\n\nWhen dev-teams are harried from deadline-to-deadline, corners are cut, integration testing is skipped, and sales promises new features before the prior one is even out the door, the developers may be responsible for writing that code...\n\n...but they certainly aren't the ones to blame when the steaming pile of manure starts hitting the fan.",
                "score": 8,
                "replies": [
                  {
                    "author": "wsbTOB",
                    "body": "pikachu face when the 6000 lines of code that got merged 15 minutes before a deadline that was totally reviewed very very thoroughly has a bug in it",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "PiotrDz",
                "body": "Only commiter.  Reviewer is there to help, but he would have to reverse engineer whole task, basically double the work to be fully responsible.",
                "score": 6,
                "replies": []
              },
              {
                "author": "sumrix",
                "body": "Maybe the testers.",
                "score": 14,
                "replies": [
                  {
                    "author": "TheLatestTrance",
                    "body": "What testers?",
                    "score": 17,
                    "replies": [
                      {
                        "author": "Swoop3dp",
                        "body": "You don't have customers?",
                        "score": 53,
                        "replies": [
                          {
                            "author": "moosehq",
                            "body": "Hahaha good one",
                            "score": 5,
                            "replies": [
                              {
                                "author": "TheLatestTrance",
                                "body": "Exactly - test in prod. Fail forward. Agile. Sigh. I hate MBAs.",
                                "score": 7,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "hypnosquid",
                            "body": "&gt;You don't have customers?\n\nHa! I sarcastically told my manager once, \"...but production is where the magic happens!\"\n\nHe love/hated it so much that he put it on a tshirt and gave it to me as a gift.",
                            "score": 4,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "MonstarGaming",
                    "body": "They should share in the responsibility, but it isn't their's alone.\n\n\nI suppose it depends on the organization. My teams don't use dedicated testers because they often cause more fricition than necessary (IMO). My teams only have developers and they're responsible for writing both unit and integration tests. ",
                    "score": 4,
                    "replies": [
                      {
                        "author": "Alphamacaroon",
                        "body": "In my org there is only one responsible person, and that is the committer. Otherwise it gets too easy to throw the blame around. Reviewers and QA are tools you leverage to help you write better code, but it’s your code at the end of the day.",
                        "score": 10,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "DynamicHunter",
                "body": "The second reviewer",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Shawnj2",
            "body": "What about when they copy paste from stack overflow?\n\nLike when you do this you should obviously try to have an idea of what the code is doing and that it is doing what you think it does but want to point out this is definitely not a new problem",
            "score": 19,
            "replies": [
              {
                "author": "dangerbird2",
                "body": "ctrl-v programmers walked so chatgpt programmers could run😤",
                "score": 17,
                "replies": []
              }
            ]
          },
          {
            "author": "SpaceShrimp",
            "body": "You are not nitpicking, obviously the author takes responsibility of every word and every nuance of his text..",
            "score": 6,
            "replies": []
          },
          {
            "author": "occio",
            "body": "int i = 8; // I take no responsibility for this code.",
            "score": 4,
            "replies": []
          },
          {
            "author": "CantaloupeCamper",
            "body": "These legions of responsible coders doing great work are going to suck now!\n\nLong live the good old days when code wasn’t horrible!",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "thomasfr",
        "body": "Not learning the APIs of the libraries you are using because you got a snippet that happens to work for sure is a way towards being a worse practical programmer and lowering the quality of the work itself.\n\nI try to limit my use of ChatGPT to problems where I know everything involved very well so that I can judge the quality of the result very quickly. Some times it even shows me a trick or two that I had not thought about myself which is great!\n\nI am one of those people who turn off all forms auto completion from time to time. When I write code in projects I know well I simply don't need it and it makes me less focused on what I am doing. There is something very calm about not having your editor screaming at you with lots of info all the time if you don't need it.",
        "score": 267,
        "replies": [
          {
            "author": "andarmanik",
            "body": "In vscode I find myself spamming escape so that I can see my code instead of a unhelpful code completion.",
            "score": 115,
            "replies": [
              {
                "author": "Tersphinct",
                "body": "I definitely wish sometimes co-pilot had a “shut up for a minute” button. Just puts it to sleep for like 30 seconds while I write something without any interruptions.",
                "score": 41,
                "replies": [
                  {
                    "author": "stuaxo",
                    "body": "Would be handy to have that activated by a foot pedal.",
                    "score": 36,
                    "replies": [
                      {
                        "author": "Tersphinct",
                        "body": "Maybe something like a padded column you can kick.",
                        "score": 14,
                        "replies": []
                      },
                      {
                        "author": "Silpheel",
                        "body": "I want mine de-activated by swearing at it",
                        "score": 7,
                        "replies": []
                      },
                      {
                        "author": "SamplingCheese",
                        "body": "This would be pretty amazing, actually. Shouldn't be too hard to accomplish with simple midi. hmmm.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "cheeseless",
                    "body": "I use a toggle for AI completions in Visual studio, I think it's not bound by default but it's useful.",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "RedditSucksDeepAss",
                    "body": "I would love a button for 'give suggestion here', preferably as a pop up\n\n\n\n\n\nI can't believe they prefer showing suggestions as inline code",
                    "score": 10,
                    "replies": [
                      {
                        "author": "FullPoet",
                        "body": "Agreed. Honestly turned it off in Rider. It was too annoying and just went back to ctrl space to give me autocompletes.",
                        "score": 3,
                        "replies": []
                      },
                      {
                        "author": "Tersphinct",
                        "body": "There is a button to trigger a prompt, but that it isn't in a dropdown isn't that bad. When it's more than 1 or 2 lines, it gets really difficult to view things properly in the normal intellisense dropdown UI.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "edgmnt_net",
                "body": "I keep seeing people who get stuck trying to use autocomplete and not finding appropriate methods or grossly misusing them, when they could've just checked the documentation. Some devs don't even know how to check the docs, they've only ever used autocomplete.",
                "score": 10,
                "replies": [
                  {
                    "author": "donalmacc",
                    "body": "I think that says a lot about how useful and good autocomplete is for 90+% of use cases.",
                    "score": 12,
                    "replies": []
                  }
                ]
              },
              {
                "author": "ClankRatchit",
                "body": "Escape or sometimes I hit tab and get something from deep in the class library",
                "score": 2,
                "replies": []
              },
              {
                "author": "BradBeingProSocial",
                "body": "It drives me crazy when it suggests multiple lines. I flipped it off entirely because of that situation. It annoyed me waaaayyyy more than it helped me",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "itsgreater9000",
            "body": "&gt; Not learning the APIs of the libraries you are using because you got a snippet that happens to work for sure is a way towards being a worse practical programmer and lowering the quality of the work itself.\n\nThis is my biggest gripe with ChatGPT and its contemporaries. I've had far too many coworkers copy and paste certain code that works, but isn't really a distillation of the problem at hand (e.g. I've seen someone make some double loop to check set intersections when you can just use... a method that does set intersection). Then the defense is \"well, ChatGPT generated it, I assumed it was right!\" like wtf, even when I copy and paste shit from SO I don't typically say \"well idk why it works but it does\".",
            "score": 31,
            "replies": [
              {
                "author": "awesomeusername2w",
                "body": "Well it doesn't sound like a problem of AI. If you have shit devs they will write shit code regardless. I'd even say that it's more probable that copilot generates code that uses the intersect method than not, while shit devs can very well write the looping by hand if they don't know why it's bad.",
                "score": 12,
                "replies": [
                  {
                    "author": "itsgreater9000",
                    "body": "of course they're shit devs, the problem is them blaming ChatGPT and others instead of... mildly attempting to solve a problem for themselves. shit devs will shit dev, but i don't want to hear \"but chatgpt did it!\" in a code review when i ask about why the fuck they did something. i'd be complaining the same way if someone copy and pasted from SO and then used that as justification. it isn't, but it's way more problematic now given how much _more_ chatgpt generates that needs to be dealt with.\n\nnobody is on SO writing whole classes whole-cloth that could potentially dropped into our codebase (for the most part). chatgpt is absolutely doing that now (whether \"drop-in\" is a reasonable description is TBD), and i need to ask where the hell did they come up with the design, why did they use this type of algorithm to solve such and such a problem, etc. if the response is \"chatgpt\" then i roll my eyes",
                    "score": 6,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Isote",
            "body": "Just yesterday I was working on a bug in my code that was driving me crazy. So I took my dog for a walk. During that time thinking I realizing that oh..... libc++ string::substr the second parameter is probably the length and not the ending index. Autocomplete is a great tool but doesn't replace thinking about the problem or reading the fantastic manual. I have the feeling that co-pilot is similar. I don't use it, but I could see looking at a suggestion and learning from an approach I didn't consider.",
            "score": 5,
            "replies": [
              {
                "author": "TheRealBobbyJones",
                "body": "But a decent auto complete would tell you the arguments. They even show the docs for the particular method/function you are using. You would have to literally not read the screen to have the issue you specify. ",
                "score": 14,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "marcus_lepricus",
        "body": "I completely disagree. I've always been terrible.",
        "score": 130,
        "replies": [
          {
            "author": "[deleted]",
            "body": "Bro did someone put an edible in my breakfast or some shit? I cannot stop laughing at this comment and it’s the type of comment I’d expect from a developer\n\nlol, thanks for a good start to my morning. hope your day goes well",
            "score": 11,
            "replies": []
          },
          {
            "author": "Takeoded",
            "body": "Find it hilarious that Copilot is trained on my shitty OSS code (-:",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "LookAtYourEyes",
        "body": "I feel like this is a lukewarm take. It's a tool, and like any tool it has a time and place. Over-reliance on any tool is bad. It's very easy to become over-reliant on this one.",
        "score": 212,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 70,
            "replies": [
              {
                "author": "josluivivgar",
                "body": "reading stack overflow code and understanding it to your use case imo, is actual skill, and it takes research and takes understanding, I actually see nothing wrong with that and don't consider people who do that bad devs, it's pasting code without adapting it that's bad, unfortunately sometimes it works with side effects. those are the dangerous cases\n\nin reality it's no different than looking up an algorithm implementation to understand what it's doing just on a simpler level\n\nI agree that LLMs might make it easier to get to that I work but not quite without getting it though, because you don't actually have to fix it you can just re prompt until it kinda fits and then you're fucked when a complex error occurs",
                "score": 19,
                "replies": []
              },
              {
                "author": "nerd4code",
                "body": "We need actual engineering standards and licensure, imo.",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "RoyAwesome",
            "body": "&gt; Over-reliance on any tool is bad.\n\nI think Autocomplete does this to an extent.  I work in C++, and I'm kind of embarrased to admit I was over 10 years into my career before I really got comfortable with just reading the header file for whatever code I was working on, and not just scanning through autocomplete for stuff.  \n\nThere is a lot of key context that is missing when you don't actually just read the code you are working with.  Things like comments that don't get included in auto complete, sometimes you'll have implementations of whatever that function is doing in there, etc.  You can just see all the parameters and jump to them... It really helps with learning the system and understanding _how_ to use it, not just finding the functions to call.\n\nI work with a whole team of programmers that rely on intellisense/autocomplete and sometimes when I help them with a problem, I just repeat verbatim a comment in the header file that explains the problem they are having and gives them a straightfoward solution.  They just never looked, and the tool they relied on didn't expose that information to them.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Eolu",
            "body": "Yeah I’m with you. Yeah, it’ll cause some problems. People will need to learn to solve those problems, either by using less AI, learning new skills, or adjusting processes and practices. Probably a combination of all 3. Interesting tools do not put engineers out of business, it gives them a new domain to become skilled at. \n\nThere are some significant concerns to be put forward about how to integrate AI with the world, but this is really the weakest of them all. You could’ve made the same argument about Google 20 years ago and no one would say it wasn’t worth it now.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Roqjndndj3761",
        "body": "AI is going to very quickly make people bad at basic things.\n\nIn iOS 18.1 you’ll be able to scribble some ideas down, have AI rewrite it to be “nice”, then send it to someone else’s iOS 18.1 device which will use AI to “read” what the other AI wrote and summarize it into two lines.\n\nSo human -&gt; AI -&gt; AI -&gt; human.  We’re basically playing “the telephone game”.  Meanwhile our writing and reading skills will rot and atrophy.\n\nRinse and repeat for art, code, …",
        "score": 64,
        "replies": [
          {
            "author": "YakumoFuji",
            "body": "&gt; So human -&gt; AI -&gt; AI -&gt; human. We’re basically playing “the telephone game”.\n\noh god. chinese whispers we called it. \"the sky is blue\" goes around the room and turns into \"were all eating roast beef and gravy tonight\".\n\nnow with ai!",
            "score": 24,
            "replies": [
              {
                "author": "wrecklord0",
                "body": "Huh. In france it was called the arab phone. I guess every country has its own casually racist naming for that children's game.",
                "score": 4,
                "replies": [
                  {
                    "author": "THATONEANGRYDOOD",
                    "body": "Oddly the German version that I know seems to be the least racist. It's literally just \"silent mail\".",
                    "score": 5,
                    "replies": [
                      {
                        "author": "jiminiminimini",
                        "body": "The Turkish version is called \"from ear to ear\".",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "PathOfTheAncients",
            "body": "We're already well into this pattern for resumes. AI makes your resume better at bypassing the AI that is screening resumes. The people in charge of hiring at my company look at me like I am an alien when I question the value of this.",
            "score": 10,
            "replies": []
          }
        ]
      },
      {
        "author": "BortGreen",
        "body": "Copilot and other AI tools work best on what they were originally made for: smarter autocomplete",
        "score": 37,
        "replies": [
          {
            "author": "roygbivasaur",
            "body": "100%. I don’t even open the prompting parts or try to ask it questions. I just use the autocomplete and it’s just simply better at it than most existing tools. Most importantly, it requires no configuration or learning a dozen different keyboard shortcuts. It’s just tab to accept the suggestion or keep typing. \n\nIt’s not always perfect but it helps me keep up momentum and not get tripped up by tiny syntax things, variable names, etc. I don’t always accept the suggestion but it often quickly reminds me of something important. It’s also remarkably good at keeping the right types, interfaces, and functions in context. At least in Typescript and Go. It’s just as dumb as I am when it comes to Ruby (at least in the codebases I work in).\n\nIt’s also great when writing test tables, which people have weirdly tried to say it doesn’t do.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "sippeangelo",
        "body": "Holy shit how does this guy's blog have \"136 TCF vendor(s) and 62 ad partner(s)\" I have to decline tracking me? Didn't read the article but sounds like a humid take at best.",
        "score": 28,
        "replies": [
          {
            "author": "wes00mertes",
            "body": "Another comment said it was a lukewarm take.\n\nI’m going to say it’s a grey take. ",
            "score": 4,
            "replies": [
              {
                "author": "currentscurrents",
                "body": "However, none of us have read anything but the title, so we're all going off what other commenters say.\n\nI hear it's purple-violet-green.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 113,
        "replies": [
          {
            "author": "mr_nefario",
            "body": "I work with a junior who has been a junior for 3+ years. I have paired with her before, and she is completely dependent on Copilot. She just does what it suggests.\n\nI have had to interrupt her pretty aggressively “now wait… stop, _stop_, _STOP_. That’s not what we want to do here”. She didn’t really seem to know what she wanted to do first, she just typed some things and went ahead blindly accepting Copilot suggestions.\n\nI’m pretty convinced that she will never progress as long as she continues to use these tools so heavily.\n\nAll this to say, I don’t think that’s an isolated case, and I totally agree with you.",
            "score": 48,
            "replies": [
              {
                "author": "BlackHumor",
                "body": "If she's been a junior for over three years, what did she do before Copilot? It only released in February 2023, and even ChatGPT only released November 2022. So you must've been working with her at least a year with no AI tools.",
                "score": 13,
                "replies": []
              },
              {
                "author": "emelrad12",
                "body": "seemly placid rich adjoining hunt tie cats complete sand violet\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
                "score": 9,
                "replies": []
              }
            ]
          },
          {
            "author": "FnTom",
            "body": "&gt; the auto complete suggestions are fantastic if you already know what you intend to write.\n\n100% agree with that take. I work with Java at my job and copilot is amazing for quickly doing things like streams, or calling builder patterns.",
            "score": 19,
            "replies": []
          },
          {
            "author": "Chisignal",
            "body": "paltry seemly pause narrow upbeat soup juggle ten slap sense\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
            "score": 19,
            "replies": []
          },
          {
            "author": "deusnefum",
            "body": "I think it makes good programmers better and lets mediocre-to-bad programmers skate easier.",
            "score": 5,
            "replies": []
          },
          {
            "author": "bjzaba",
            "body": "Somewhat of a nitpick, but digital tablets require _a lot_ of expertise to use competently, they aren’t autocomplete – it's not a really great analogy. They are more akin to keyboards and IDEs.\n\nA better analogy would be an artist making heavy use of reference images, stock imagery, commissioned art, or generative image models and patching it together to make their own work, without understanding the fundamentals of anatomy, lighting, colour theory, composition etc. Those foundational skills take constant effort to practice and maintain a baseline level of competence with, and a lack of these definitely limits and artist in what they can produce.\n\nAnother analogy would be pilots over-relying on automation, and not practicing landings and other fundamental skills, which can then cause them to be helpless in adverse situations.",
            "score": 4,
            "replies": []
          },
          {
            "author": "AfraidBaboon",
            "body": "How is Copilot integrated in your workflow? Do you have an IDE plugin?",
            "score": 3,
            "replies": [
              {
                "author": "jeremyjh",
                "body": "It has plugins for VS Code and Jetbrains. I mostly get one-liners from it that are no different than more intelligent intellisense; see the suggestion in gray and tab to complete with it or just ignore it. When it generates multiple lines I rarely accept so I don’t get them that often.",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "RoyAwesome",
            "body": "&gt; Copilot is an amazing timesaver. I don't use the chat feature but the auto complete suggestions are fantastic if you already know what you intend to write.\n\nYeah.  I use it extensively with an opengl side-project im doing.  I know OpenGL.  It's not my first rodeo (or even my second or third), so I know _exactly_ what I want.  I just fucking HATE all the boilerplate.  Copilot generates all of that no problem.  It's really helpful, and my natural knowledge of the system allows me to catch it's mistakes right away.",
            "score": 3,
            "replies": []
          },
          {
            "author": "DMLearn",
            "body": "I agree with your take. I think it just enables sloppy work to happen quicker. Unfortunately, many people do sloppy work.\n\nI haven’t used copilot very much, but on the couple occasions I have I’d say it felt a lot like talking to a colleague about the problem I’m solving or decision I’m making. I got some general code that got the structure of the solution I wanted, but I still had some work to do to get it right.\n\nMy experience is that you still need to think through your problem and thoroughly review the code that copilot provides to get the solution. Many people, in my experience, don’t bother to do this in the first place. Now they can continue to be lazy, but with something else’s code.",
            "score": 2,
            "replies": []
          },
          {
            "author": "StickiStickman",
            "body": "&gt; if you already know what you intend to write.\n\nEven then, just using it to brainstorm ideas when I'm stick works amazingly well.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Berkyjay",
        "body": "Counterpoint; It's made me a much better programmer.  Why?  Because I know how to use it.  I understand its limitations and know its strengths.  It's a supplement not a replacement.",
        "score": 32,
        "replies": [
          {
            "author": "luigi-mario-jr",
            "body": "Sometimes it is also really fun to just muck around with other languages and frameworks you know nothing about, use whatever the heck copilot gives you, and just poke around. I have been able to explore so many more frameworks and languages in coffee breaks with copilot.\n\nAlso, I do a fair amount of game programming on the side, and I will freely admit to sometimes not giving any shits about understanding the code and math produced by copilot (at least initially), provided that the function appears to do what I want. \n\nI find a lot of the negative takes on Copilot so uninspiring, uncreative, and unfun, and there is some weird pressure to act above it all. It’s like if you dare mention that you produce sloppy code from time to time some Redditor will alway say, “I’m glad I’m not working on your team”.",
            "score": 16,
            "replies": [
              {
                "author": "Berkyjay",
                "body": "&gt; Sometimes it is also really fun to just muck around with other languages and frameworks you know nothing about, use whatever the heck copilot gives you, and just poke around\n\n\nYes exactly this.  I needed to write a shell script recently to do a bit of file renaming of files scattered in various directories.  This isn't something I do often in bash, so it would have required a bit of googling to do it on my own.  But copilot did it in mere seconds.  It probably saved me 15-30 min.\n\n&gt;I find a lot of the negative takes on Copilot so uninspiring, uncreative, and unfun, and there is some weird pressure to act above it all. It’s like if you dare mention that you produce sloppy code from time to time some Redditor will alway say, “I’m glad I’m not working on your team”.\n\nThere are a lot of developers who have some form of machismo around their coding abilities.  It's the same people who push for leetcode interviews as the standard gateway into the profession.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "Valuable-Benefit-524",
            "body": "Yeah exactly, I don’t get the hate. It’s saves SO MUCH TIME writing documentation and it’s actually really freaking useful for debugging/understanding code. I don’t ask it actually write my code; I do ask it why X piece of code isn’t working the exactly the way I thought it would and it’s autocomplete helps me overcome my shitty typing skills",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 10,
        "replies": [
          {
            "author": "janyk",
            "body": "Speak for yourself.  I'm senior, can actually write code, and read the documentation for the components in the tech stack my team uses and I still can't find work after 2 years.",
            "score": 7,
            "replies": []
          }
        ]
      },
      {
        "author": "xenophenes",
        "body": "The amount of times I've put prompts into an AI and it's returned inaccurate code with incomplete explanations, or has simply returned a solution that is inefficient and absolutely not the best approach, is literally *almost all the time*. It's very rare to get an actually helpful response. Is AI useful for getting unstuck, or getting ideas? Sure. But it's a starting point for research and it should not be relied upon for actual code examples to go forth and put out in development nor production. It can be useful in specific contexts, for specific purposes. But it should not be the end-all-be-all for developers trying to move forward.",
        "score": 15,
        "replies": [
          {
            "author": "phil_davis",
            "body": "I keep trying to use ChatGPT to help me solve weird specific problems where I've tried every solution I can think of. I don't need it to write code for me, I can do that myself. What I need to know is how the hell do I solve this weird error that I'm experiencing that apparently no one else in the entire world has ever experienced because Google turns up nothing? And I think it's actually almost never been helpful with that stuff, lol. I keep trying, but apparently all it's good for is answering the most basic questions or writing code I could write myself in not much more time. I really just don't get much out of it.",
            "score": 4,
            "replies": [
              {
                "author": "wvenable",
                "body": "&gt; What I need to know is how the hell do I solve this weird error that I'm experiencing that apparently no one else in the entire world has ever experienced because Google turns up nothing?\n\nIf no one else in the world has experienced it then ChatGPT won't know the answer.  It's trained on the contents of the Internet.  If it's not there, it won't know it.  It can't know something it hasn't learned.",
                "score": 13,
                "replies": [
                  {
                    "author": "phil_davis",
                    "body": "Which is why it's useless for me. I can solve all the other shit myself. It's when I've hit a dead end that I find myself reaching for it, that's where I would get the most value out of it. Theoretically. If it worked that way. I mean I try and give it all the relevant context, even giving it things like the sql create table statements of the tables I'm working with. But every time I get back nothing but a checklist of \"have you tried turning it off and on again?\" type of suggestions, or stuff that doesn't work, or things that I've just told it I've already tried.",
                    "score": 6,
                    "replies": []
                  }
                ]
              },
              {
                "author": "xenophenes",
                "body": "Exactly this! I've heard of a couple specific instances where certain AI or LLM models will return helpful results when troubleshooting, but it's rare, and really in a lot of cases the results could be far improved by having an in-house model trained on specific documentation and experiments.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "oknowton",
        "body": "Replace \"Copilot\" in the title with \"Google\" (search), and this is saying almost exactly what people were saying 25 years ago.  Fast forward some number of years, and it was exactly the sort of things people were saying about Stack Overflow.\n\nThere's nothing new.  Copilot is just the next thing in a long line of things that do some of the work for you.",
        "score": 8,
        "replies": [
          {
            "author": "NostraDavid",
            "body": "The more things change, the more they stay the same.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "pico8lispr",
        "body": "I’ve been in the industry for 18 years, including some great companies like Adobe, Amazon and Microsoft. \n\nI’ve used a lot of different technology in that time. \n\nC++ made the code worse than C but the products worked better. \nPerl made the code worse than C++, but the engineers were way more productive. \nPython made the code worse than Java, but the engineers were more productive. \nAWS made the infrastructure more reliable and made devs way more productive. \nAnd on and on. \n\nIt’s not about if the code is worse. \n\nIt’s about two things: \n1. Are the engineers more or less productive. \n2. Do the products work better or worse. \n\nThey don’t pay us for the code they pay us for the outcome. ",
        "score": 21,
        "replies": []
      },
      {
        "author": "Resident-Trouble-574",
        "body": "I think that jetbrains full-line completion is a better compromise. I'm still not sure that it's a net improvement over the classical auto-complete, but sometimes it's quite useful (e.g. when mapping between DTOs) and at the same time it doesn't write a ton of code that would require a lot of time to be checked.",
        "score": 3,
        "replies": []
      },
      {
        "author": "african_or_european",
        "body": "Counterpoint:  Bad programmers will always be bad, and things that make bad programmers worse aren't necessary bad.",
        "score": 3,
        "replies": []
      },
      {
        "author": "oantolin",
        "body": "Very disappointing article: it's all about *how* copilot is making programmers worse, but the title promised the article would discuss *why* it's doing that.",
        "score": 3,
        "replies": []
      },
      {
        "author": "smaisidoro",
        "body": "Is this the new \"Not coding in assembly is making programmers worse\"? ",
        "score": 14,
        "replies": []
      },
      {
        "author": "Pharisaeus",
        "body": "I always wonder about all those \"productivity boost\" praises for copilot and other AI tools. I mean if you're writing CRUD after CRUD, then perhaps that's true, because most of the code is some \"boilerplate\" which could be blindly auto-generated. But for some \"normal\" software with some actual domain logic, 90% of the work is to figure out how to solve the problem, and once you do, coding it is purely mechanical, and code-completion on steroids is a welcome addition.\n\nDo LLMs make programmers worse at programming? It's a bit like saying that writing on a computer makes writers worse at writing. It does affect the \"manual skill\" of writing  loops, function signatures etc, but I'm not sure if it matters that much, when the \"core\" skill is to express the domain problem as a sequence o programming language primitives. In many ways, higher level languages and syntax sugars were already going in such direction.\n\nNevertheless I think it's useful to not be constrained by tools - if suddenly internet is down or you can't use your favourite IDE because you're fixing something off-site, you should still be able to do your job, even if slightly slower. I can't imagine the development team saying \"sorry boss, no coding this week because Microsoft has an outage and copilot doesn't work\".",
        "score": 6,
        "replies": []
      },
      {
        "author": "standing_artisan",
        "body": "People are lazy and stupid. AI just encourages them to not think any more.",
        "score": 6,
        "replies": [
          {
            "author": "supermitsuba",
            "body": "I think this is the take here.  You cannot take LLM at face value.  I have had wrong code given all the time.  Couple that with how out of date the information is and devs need to use multiple sources to get the right picture.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "MoneyGrubbingMonkey",
        "body": "Maybe it's just me but copilot has been an overall dogshit experience honestly\n\nIt's answers to questions are sketchy at best and while it can write semi decent unit tests, the refactoring usually just feels like you're writing the whole thing yourself anyway\n\nI doubt there's any semi decent programmer out there that's getting \"worse\" through using it since most people would get frustrated after the 2nd prompt",
        "score": 11,
        "replies": []
      },
      {
        "author": "devmor",
        "body": "I have made the majority of my income in cleaning up horrible code, written by people under time constraints with poor understanding of computer science.\n\nCopilot gives me great optimism for the future of my career - my skills will only grow in demand.",
        "score": 5,
        "replies": []
      },
      {
        "author": "duckrollin",
        "body": "It's really up to you how much you review copilots code. I always look at non-boilerplate and see what it did and look things up I don't know unless I'm in a hurry. \n\nIf you just blindly trust it to write 100s of lines, verify the input and output with your unit test and move on without caring what's in the magic box - yeah you're not going to have learnt much. There is some danger there if you do it every time.",
        "score": 2,
        "replies": []
      },
      {
        "author": "i_am_exception",
        "body": "I am fairly good at coding but I have recently seen a downward trend in my knowledge. All because of how heavily I was using copilot for writing the boilerplate for me. I was feeling more like a maintainer rather than a coder. That’s why I have turned off copilot for now and moved to a keybinding. If I need copilot, I can always use to call it but I would like to write the majority of the code myself.",
        "score": 2,
        "replies": []
      },
      {
        "author": "RawDawg24",
        "body": "I think my problem with the blog post is it’s basically a hypothesis assumed to be true. Then it works backwards from that to assume a bunch of other “facts” about programming with AI. There isn’t even any examples or anything to substantiate anything.\n\n\nI don’t even necessarily disagree with his stance, but it seems like an article that’s written cause it feels true to the author.",
        "score": 2,
        "replies": []
      },
      {
        "author": "RufusAcrospin",
        "body": "Who would’ve thought?",
        "score": 2,
        "replies": []
      },
      {
        "author": "wind_dude",
        "body": "I regret paying for github copilot, and then forgetting to cancel it.",
        "score": 2,
        "replies": []
      },
      {
        "author": "The_Pip",
        "body": "Shortcuts always hurt the people taking them. Putting in the work is the only way to get good at anything.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Deep_Age4643",
        "body": "I tried to incorporate AI into my programming process. I come to the conclusion that using AI slows-down my work.   \n  \nIt's hard to come to a real solution. This is because AI isn't a copilot, or pair-programmer. It just answers your questions. But often it's not the right question, or the initial idea isn't the right path to the best and cleanest solution.\n\nThe questions asked AI, or the code that it returns, does not have enough context about the whole code base, the requirements, and stakeholders. AI answers are misdirections to let you wander through a maze where time pass quickly.",
        "score": 2,
        "replies": []
      },
      {
        "author": "axl88x",
        "body": "Good article. You call this a \"problem\" but I call it \"Job security\"! But seriously, I think Copilot, ChatGPT and the like are probably a long-term problem for the field. It's not really going to hurt experienced developers who already know what they're doing, but it's going to hurt juniors. These tools help programmers solve easy problems - \"Generate boilerplate getters/setters for me\" or sorting lists or something. None of these tools are going to help you with the kinds of problems an experienced engineer should be dealing with - i.e. should we go with Kafka or AMQP for this implementation, architectural problems, stuff that happens in prod environments like \"what is causing this error in the logs\",  etc.\n\nIf your job is just solving easy problems, then sure, these tools are going to make your job way easier and require you to do less thinking. But easy tasks like that should go to juniors so they can learn something about solving that type of problem and also learn about the business logic they're trying to implement. These tools replace the work of junior engineers and are a long-term detriment to them growing their skills.",
        "score": 2,
        "replies": []
      },
      {
        "author": "dongus_nibbler",
        "body": "** old man yells at cloud ** Developers will literally spend 100k training general purpose LLMs to black box generate half baked untested boilerplate that learn lisp macros!",
        "score": 2,
        "replies": []
      },
      {
        "author": "foursticks",
        "body": "I didn't see any stats so I assume this is like every other article here making assumptions that I won't take for granted.",
        "score": 2,
        "replies": []
      },
      {
        "author": "WithCheezMrSquidward",
        "body": "Copilot is often time just a better search engine. Why do I need to parse through half a dozen forums and take half an hour when an AI model can do it for me? \n\nIt’s also great for spitting out SQL tables, CRUD procedures, classes and models based on those tables, etc. In 20 minutes I can have a skeleton set up that would have taken me hours to type out. I’ll gladly take it",
        "score": 2,
        "replies": []
      },
      {
        "author": "mcpower_",
        "body": "Is it just me or do the articles on the site look AI-generated / LLM-generated? This article follows a stereotypical \"bullet points and a summary\" format that LLMs often go for and each headline has exactly two similar-length paragraphs.\n\nThe conclusion of [this other article](https://www.darrenhorrocks.co.uk/image-recognition-with-c-ai-practical-guide/) screams LLM:\n\n&gt; By combining the power of C# with AI, you can implement image recognition in your applications, opening up a world of possibilities for visual data analysis. Whether you choose TensorFlow.NET or leverage Microsoft’s Cognitive Services, the ability to interpret images can revolutionise the capabilities of your software. So, dive in, start experimenting, and unlock the potential of image recognition in your projects!\n\nNo real person would write that.",
        "score": 2,
        "replies": []
      },
      {
        "author": "ArsenicPopsicle",
        "body": "Oh yeah, it’s kinda like how cars made people worse at riding horses.",
        "score": 2,
        "replies": []
      },
      {
        "author": "indigo945",
        "body": "Ironically, the \"bullet list of short paragraphs\" style of this blog makes the post itself read like it was generated by an LLM, especially since all the points it makes are so trite.",
        "score": 2,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Software engineer != coding.\n\nSure AI can code, but to be a software engineer?\n\nWell, github copilot never attend my sprint planning, it never meet my coworkers, it never meet our customers, it never see our figma design, it never read our JIRA tickets, it never see our database design, it never see our logs, traces and metrics (datadog, new relic, etc), it never see our notion documentation etc etc etc.\n\nHow the hell can I trust the AI to write the code for me??",
        "score": 2,
        "replies": []
      }
    ]
  },
  {
    "title": "IT WAS A REGEX?!? - Full CrowdStrike Report Released",
    "body": "",
    "score": 944,
    "url": "",
    "created_utc": 1723018856.0,
    "author": "Chii",
    "permalink": "/r/programming/comments/1em6fd6/it_was_a_regex_full_crowdstrike_report_released/",
    "comments": [
      {
        "author": "[deleted]",
        "body": "[removed]",
        "score": 1125,
        "replies": [
          {
            "author": "s33d5",
            "body": "This reads like a high school or first year of uni computer science \"how my project could be improved\" paper, where they are trying to reach the word count.\n\n\"Validate the number of input fields in the Template Type at sensor compile time  \\[...\\] Mitigation: Validate the number of input fields in the Template Type at sensor compile time\"\n\n\"Add runtime input array bounds checks to the Content Interpreter for Rapid Response Content in Channel File 291 \\[...\\] Mitigation: Add runtime input array bounds checks to the Content Interpreter for Rapid Response Content in Channel File 291\"\n\nI think because they're such fundamental comp sci ideas that you don't expect to see a paper from a massive company publish about them.\n\n[clownstrike.lol](http://clownstrike.lol) (real website that CrowdStrike tried to get taken down).",
            "score": 127,
            "replies": [
              {
                "author": "Ant-Man-420",
                "body": "It reads like they had a junior engineer write this up then had a marketing PM jazz it up.",
                "score": 25,
                "replies": []
              },
              {
                "author": "Cheeriohz",
                "body": "I mean an actual constructive response would be to acknowledge why the quality of the content delivery process they have has degraded (or was never good enough) to the point where multiple mistakes compound and are still not caught before shipping. But that likely entails acknowledging part of the sausage making in tech organizations that engineering has been complaining about for decades is actually problematic to a working product, and would actually likely be tied back to the current leadership. I could read this as a furious report from someone who knows it's not an explanation, but knows there isn't a point trying to say anything more. Or it could be symptomatic to the brain rot in their remaining engineers, that they see the bugs as the problem and not the process failure that enabled the bugs to ship.",
                "score": 14,
                "replies": []
              }
            ]
          },
          {
            "author": "JeffFerguson",
            "body": "They used a lot of words to say \"we don't program defensively\".",
            "score": 340,
            "replies": [
              {
                "author": "The_Fresser",
                "body": "Why would you need to program defensively in C++ in ring 0? Pfff",
                "score": 284,
                "replies": [
                  {
                    "author": "agumonkey",
                    "body": "so in ring N, N is the amount of precautions you should have ..",
                    "score": 135,
                    "replies": [
                      {
                        "author": "elsjpq",
                        "body": "In ring -1: absolutely no fucks given",
                        "score": 31,
                        "replies": [
                          {
                            "author": "stoops",
                            "body": "I always start my C array indexes at -1, it's like a hack for a free extra list item! For example:\n\n    #include &lt;stdio.h&gt;\n    int main() {\n        char test[5];\n        test[-1] = 'a'; test[0] = 'b'; test[1] = 'c'; test[2] = '\\0';\n        printf(\"Hello World [%s]\\n\", test); return 0;\n    }",
                            "score": 49,
                            "replies": [
                              {
                                "author": "agumonkey",
                                "body": "Ring -1 buffer",
                                "score": 5,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "spareminuteforworms",
                        "body": "Pfff",
                        "score": 14,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "lunatic-rags",
                    "body": "Developer: we might hit NPE in case we split the references\n\nManagement: bull shit.\n\nDeveloper: memory management doesn’t know what you have planned\n\nManagement: the only management around here is us. Just do it!\n\nDeveloper:  your funeral\n\nManagement: you got that wrong too.. it’s your funeral. I’ll write a bull shit report and give away $10 coupons",
                    "score": 56,
                    "replies": []
                  },
                  {
                    "author": "YaBoyMax",
                    "body": "Writing a widely-deployed kernel driver in C++ is... bold, to say the least.\n\nAlso, I don't see anything in the report about how the _hell_ a 100% reproducible crash wasn't detected prior to deployment. The majority of the report is spent talking about the parameter count mismatch and the lack of a specific test to catch this scenario (no shit), but I['m failing to understand why you _need_ a specific test beyond deploying to a test environment and _literally just checking if it crashes_.",
                    "score": 24,
                    "replies": [
                      {
                        "author": "Days_End",
                        "body": "&gt; Writing a widely-deployed kernel driver in C++ is... bold, to say the least.\n\nWriting a widely-deployed kernel driver in C++ is... ***standard***, to say the least.\n\nC++ is absolutely the goto and the expected standard in the space still. A lot of this area barely has any tooling for other languages besides C and C++. Linux is just barely starting to add some Rust.",
                        "score": 70,
                        "replies": [
                          {
                            "author": "LeberechtReinhold",
                            "body": "Yeah, while using rust for windows drivers is possible, it's quite a bit of a pain. I havent tried in the last year but last time I tried I would be very skeptical of anyone using it for prod (and yes I know MS is moving towards it and has probably written a bunch of things already in it for kernel)",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "pragmojo",
                        "body": "Or why you wouldn't do a staged rollout",
                        "score": 15,
                        "replies": []
                      },
                      {
                        "author": "OJezu",
                        "body": "In what else would you like it written, and how would it help?",
                        "score": 10,
                        "replies": []
                      },
                      {
                        "author": "Ant-Man-420",
                        "body": "&gt; Writing a widely-deployed kernel driver in C++ is... bold, to say the least.\n\nLet me guess, they should have written in an even lower level language.",
                        "score": 10,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "_teslaTrooper",
                "body": "\"We have tests! And when they fail we change the test so it passes\"",
                "score": 52,
                "replies": [
                  {
                    "author": "lunatic-rags",
                    "body": "They did not test. That’s the point…\nThey tested individually the template and calling. Not integrated..\n\nClassic agile!!\nA == good.\nB == good.\n\nA+B should also be good..",
                    "score": 52,
                    "replies": []
                  },
                  {
                    "author": "tripoka",
                    "body": "Well, they have tests and test runners on millions installations worldwide",
                    "score": 24,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Front_Help_310",
                "body": "and \"we do not test correctly\"",
                "score": 11,
                "replies": []
              }
            ]
          },
          {
            "author": "MasterLJ",
            "body": "&gt;Sensors that received the new version of Channel File 291 carrying the problematic content were exposed to a latent out-of-bounds read issue in the Content Interpreter. At the next IPC notification from the operating system, the new IPC Template Instances were evaluated, specifying a comparison against the 21st input value. The Content Interpreter expected only 20 values. Therefore, the attempt to access the 21st value produced an out-of-bounds memory read beyond the end of the input data array and resulted in a system crash.\n\nThis paragraph \\^\\^\\^\n\nHow can the Content Interpreter, who was \"expecting 20 values\", look for a 21st value and produce an out-of-bounds memory read?\n\nThe only way I can make that make sense is by assuming astronomical incompetence.\n\nAlso... how the fuck did you not instantly find that issue when you ran your actual software on an actual Windows instance with up-to-date definitions?  I mean, I know the answer, I'm just hoping the public sees this for what it is and doesn't buy the SolarWinds \"was an intern's fault\".",
            "score": 117,
            "replies": [
              {
                "author": "mccoyn",
                "body": "I think it’s two different parts of the Content Interpreter.  The load part allocates 20 values and only loads that many values.  The execute part uses the number of values specified by the template, without checking the hard-coded limit that was used in the load part.",
                "score": 45,
                "replies": [
                  {
                    "author": "MasterLJ",
                    "body": "Right, something like that where the content interpreter didn't actually interpret the content's most basic properties like, how the fuck many are you?  \n\nThen... error handling... what are we doing where we're allowing it to hard crash?    \n  \nThey basically admitted that it was an OutOfBounds exception, looking for a 20th index in a 0-19 indexed array.  This is software 101.\n\nThen to tell us that this set of conditions, that happened on 100% of affected machines, was never actually ran in their internal test suite...\n\n&gt;This parameter count mismatch evaded multiple layers of build validation and testing, as it was not discovered during the sensor release testing process, the Template Type (using a test Template Instance) stress testing or the first several successful deployments of IPC Template Instances in the field\n\n  \nThen they have the audacity to word the above quote, as if the OutOfBounds exception was sentient, evading their carefully crafted build pipeline and multiple layers of testing.  Notice how they didn't say anything about automated tests.  My very strong suspicion is that all of this were human processes, because they do not have any automated testing.,   \n  \nLike I said, I'd be happy to be wrong, but I can only make this make sense by assuming gross incompetence.",
                    "score": 41,
                    "replies": []
                  }
                ]
              },
              {
                "author": "VodkaHaze",
                "body": "&gt; How can the Content Interpreter, who was \"expecting 20 values\", look for a 21st value and produce an out-of-bounds memory read?\n\nShittily written asm/C/C++ code",
                "score": 14,
                "replies": []
              },
              {
                "author": "Ant-Man-420",
                "body": "&gt; I'm just hoping the public sees this for what it is\n\nPublic still thinks it was Microsoft's fault. \n\nThe sad part is that people who are paid to know will still go with Crowdstrike.",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "DrJib",
            "body": "Thank you. That guy in the vid is obnoxious as hell.",
            "score": 90,
            "replies": [
              {
                "author": "memtiger",
                "body": "Guy is sniffing pure cocaine before going on live.",
                "score": 22,
                "replies": []
              }
            ]
          },
          {
            "author": "Accomplished-Moose50",
            "body": "Damn, a security company uses wordpress to host a website, what could go wrong. ",
            "score": 186,
            "replies": [
              {
                "author": "PreciselyWrong",
                "body": "Don’t worry, they have installed tens of security plugins",
                "score": 201,
                "replies": [
                  {
                    "author": "breddy",
                    "body": "They even update them quarterly!",
                    "score": 34,
                    "replies": []
                  }
                ]
              },
              {
                "author": "tripoka",
                "body": "Damn, what could go wrong if you install software callled  \"crownd fucking strike\"?",
                "score": 20,
                "replies": []
              },
              {
                "author": "TheBigNorwegian",
                "body": "Wordpress runs a huge portion of the internet itself is very secure. Plugins are where you get in trouble.",
                "score": 89,
                "replies": [
                  {
                    "author": "AlSweigart",
                    "body": "Yeah. Wordpress Plugins got me years back for my blog. I eventually switched to static sites. The comments section aren't worth it.",
                    "score": 16,
                    "replies": []
                  },
                  {
                    "author": "popiazaza",
                    "body": "Wordpress without security plugin is insecure.\n\nWordpress with security plugins is also insecure.\n\nGive me a break man.",
                    "score": 59,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 30,
                        "replies": [
                          {
                            "author": "AngryGroceries",
                            "body": "are you calling me insecure?!",
                            "score": 24,
                            "replies": []
                          },
                          {
                            "author": "8483",
                            "body": "(social engineering has entered the chat)",
                            "score": 10,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "myhf",
                        "body": "Wordpress can have a little insecurity, as a treat.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "UrToesRDelicious",
                    "body": "WordPress is fine, but a security company using it is like seeing your mechanic driving a PT Cruiser.",
                    "score": 12,
                    "replies": []
                  },
                  {
                    "author": "Accomplished-Moose50",
                    "body": "Right, expect you can't do anything without 999999999.5 plugins",
                    "score": 11,
                    "replies": []
                  }
                ]
              },
              {
                "author": "hennell",
                "body": "Debatable for croudstrike, but I'd assume any competent security professionals would host their public website on a separate system to anything important. And the security professionals themselves probably wouldn't be that involved with it, being busy doing the whole security thing. \n\nWould be far more mad to see them spending time building their own site CMS when they could just use wordpress and get a very popular platform.",
                "score": 4,
                "replies": []
              },
              {
                "author": "DM_ME_PICKLES",
                "body": "Damn, a company using a CMS to run their content website, I am shook to the core.",
                "score": 7,
                "replies": []
              },
              {
                "author": "dexternepo",
                "body": "That's over generalization. WordPress itself isn't as insecure as it's made out to be.",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "iamapizza",
            "body": "IOW clickbait title, it wasn't actually regex, it was out-of-bounds.",
            "score": 10,
            "replies": []
          }
        ]
      },
      {
        "author": "BaboonBandicoot",
        "body": "Sorry for the offtopic question, but do people really watch a 51min video of a guy reading the report when I can just read it myself in 5min?",
        "score": 390,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 242,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 131,
                "replies": [
                  {
                    "author": "macrocephalic",
                    "body": "I've completed four post-top-level-comment courses and am now both highly skilled in reading secondary and sometimes even tertiary level comments. I can say with the confidence of a random internet user that I am an expert in all content defined in the top 2 levels of reddit comments.",
                    "score": 11,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "ApokatastasisPanton",
            "body": "it's the new thing now. Instead of reading the original sources, people watch a brogrammer rant milk youtube ads for 50 minutes",
            "score": 34,
            "replies": [
              {
                "author": "macrocephalic",
                "body": "It's not just programming - it's everything.  It's hard to monetise a 2 minute read column, so everything is now a 12 minute video with 2 mins of useful content.",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "ConvenientOcelot",
            "body": "No, I only clicked it to find the link to the document. Videos are almost always a waste of time for these topics.",
            "score": 33,
            "replies": []
          },
          {
            "author": "HoratioWobble",
            "body": "Primeagen is very popular especially amongst newer developers. People absolutely watch the full 50mins, I think it's from his live stream",
            "score": 37,
            "replies": [
              {
                "author": "drcec",
                "body": "Same style of comedy is very popular with my kids for game streamers. Not my cup of tea, but he’s actually funny.",
                "score": 16,
                "replies": [
                  {
                    "author": "Sceptre",
                    "body": "I’m not a huge fan of this trend of watching tech influencers read articles, but prime has grown on me quite a bit.",
                    "score": 23,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "davidpdrsn",
            "body": "I watch his videos more for entertainment than the actual information. Just like watching episodes of a TV show.",
            "score": 7,
            "replies": []
          },
          {
            "author": "JaySaw",
            "body": "What’s nice about Primes videos is that he often gives lots of additional information to better understand the article and explains his thought processes on the topic. Also lots of 69 jokes so it’s not everyone’s cup of tea.",
            "score": 13,
            "replies": []
          }
        ]
      },
      {
        "author": "redimkira",
        "body": "I used to work at a place where engineers and management would go weekly over one or two postmortems that happened within the organization. Management was very technical and they took it very seriously to ensure best practices were being followed. It doesn't really matter if you fix a bug today and another tomorrow. If bug fixing is like squashing a cockroach, best practices is like keeping your place clean and avoid an infestation.\n\nAll this just to say that that I was really disappointed to read this postmortem. In their defense, sure, it's a postmortem released to the public, but instead of tiny details like kernel dumps and whatnot, I would like to see more improvements to processes. The only that I could see is the staged rollout but that is all. Is that the best a company with such a monopoly can do? As a user (my company uses it in all computers) I find it very underwhelming.",
        "score": 45,
        "replies": [
          {
            "author": "FlyingRhenquest",
            "body": "That's the very best *most* companies can do. They frequently put very little thought into things that they should think about more. In their defense, software development takes much longer if you think about what you're doing versus just crapping some code that works in the most narrow of circumstances into an IDE.",
            "score": 9,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "phire",
        "body": "I'm not sure why people are finding \"regex\" to be funny. Seems like a valid solution to this problem, and I'm not sure how you could do better. \n\nAnd it wasn't even the regex engine which caused the crash. The actual crash happened before the regex engine, while loading the string to be tested against the regex. \nThere was an off-by-one bug, so the table only held 20 strings, and it tried to read the 21st string, past the end of the table. \n\nDuring testing, the bug was hidden because they always tested this 21st field against a wildcard, which meant there was no need to even read the string. The configuration update finally set the 21st field to match against a more complex regex, causing the string to be read and the bug triggered.",
        "score": 504,
        "replies": [
          {
            "author": "flumsi",
            "body": "So you're saying that they used wildcards to test before the update. But they didn't actually test the changes coming with the update?",
            "score": 152,
            "replies": [
              {
                "author": "s0ulbrother",
                "body": "My favorite PRs to review.\n\nMe: “Did you add your unit test “\n\nDev: “yes”\n\nLook at unit test function just asserts true through patching without checking logic.\n\nMe: “no”",
                "score": 147,
                "replies": [
                  {
                    "author": "codescapes",
                    "body": "Then you see a different team member has already approved and merged the PR 🥲",
                    "score": 133,
                    "replies": [
                      {
                        "author": "fucklockjaw",
                        "body": "I've never been bold enough on a team I'm not leading but when I start reviewing a pr I want to \"decline\" it until I'm done to prevent others from just passing it through or maybe I should start commenting (unresolved comments block merges for us)",
                        "score": 12,
                        "replies": [
                          {
                            "author": "cptskippy",
                            "body": "That's a good strategy.  There's been a couple times when I've been in the process of writing \"I have concerns...\" and the PR was approved out from under me.\n\nWe've specified multiple reviewer approvals but even that fails with smaller teams where you often grant members the ability to approve their own PRs.",
                            "score": 6,
                            "replies": [
                              {
                                "author": "oiimn",
                                "body": "What’s the point of having people approve their own PRs at that point just make approvals non mandatory to merge something",
                                "score": 3,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "s0ulbrother",
                        "body": "Fun thing when you are the full stack dev on the team and only one who can check most peoples PRs because they don’t bother learning other stacks, you are at my mercy.",
                        "score": 24,
                        "replies": []
                      },
                      {
                        "author": "spareminuteforworms",
                        "body": "LGTM",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "itsgreater9000",
                    "body": "I recently had to bring this up to my coworker-promoted manager as part of the reason why our \"regression rate is so high\". It was a tough conversation to have considering he also wrote a lot of tests that... did exactly that: mocked everything to oblivion and then asserted the mocked returned objects were exactly what they were expecting, so logic was never executed.\n\nPainful, so painful, trying to explain to someone with more seniority than me about why their unit testing practices don't give us any actual feedback about whether a defect exists (to be clear, there were bugs not caught by these unit tests precisely because logic wasn't evaluated).",
                    "score": 25,
                    "replies": [
                      {
                        "author": "_teslaTrooper",
                        "body": "&gt; logic was never executed\n\nA coverage check would make that obvious, gives management a nice metric to talk about too. In my (admittedly limited) experience code coverage is actually a pretty good metric when used with discretion.",
                        "score": 14,
                        "replies": [
                          {
                            "author": "FlyingRhenquest",
                            "body": "Do you want your management to ask you why you don't have 100% test coverage? Because this is how you get your management to ask you why you don't have 100% test coverage. Then they'll *mandate* that there be 100% test coverage, which will largely be ignored because the code as written is not testable.",
                            "score": 18,
                            "replies": [
                              {
                                "author": "_teslaTrooper",
                                "body": "That's why I said \"with discretion\". If as a dev you introduce this metric you also need to educate management on what's a realistic number to aim for. I guess I've been lucky with management in the past as they were reasonable about it and understood that writing pointless tests just for the sake of coverage was a waste of time. \n\nWe made coverage part of code review, low coverage could lead to questions but it's often obvious to other devs why a piece of code may not have high coverage.",
                                "score": 7,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "itsgreater9000",
                            "body": "We had coverage checks at 60% but it became too onerous for the organization so they got rid of them. Now each team can set standards (or not) for these checks. You're right this could have been caught earlier, but we don't fail our builds or anything in CI relating to code coverage, and if I introduced that, I'd be persona non grata even more than I already am on this team, heh.",
                            "score": 4,
                            "replies": [
                              {
                                "author": "_teslaTrooper",
                                "body": "I don't mean an arbitrary minimmum number, we made it part of code review, the main idea was that the developer should have looked at the coverage before submitting code. And if important logic wasn't tested it would come up in the review.",
                                "score": 3,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "superxpro12",
                    "body": "Does this shit actually happen with any regularity? It's borderline fraudulent",
                    "score": 5,
                    "replies": [
                      {
                        "author": "s0ulbrother",
                        "body": "Believe it or not some devs don’t like writing unit test so coverage percentage is all that matters",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "JustSomeBadAdvice",
                "body": "Honestly the problem here seems to me to be almost entirely on the testing and staged rollout.  It sounds dumb to me to parse a config file using a regex, but whatever, it wasn't precisely the cause it simply hid the problem.\n\nUsing a regex for detecting trojans sounds reasonable to me, so everyone laughing at regex is missing the point of how trojan detection happens.  CS running at ring 0 sounds, unfortunately, needed.  And having a mismatch between different codebases talking is a big problem, but it unfortunately happens in sneaky ways and is hard to totally prevent in every case where you've got different systems interfacing.  The rest of this is entertaining but not the real problem.\n\nAll of this would have been caught with thorough testing and a staged rollout.  In the absence of a 0-day vulnerability that needs an emergency rollout, stage roll out every time.  And even for a 0-day emergency, allow businesses to opt-in for emergency rapid rollout and simply do staged rollouts on a majorly accelerated timeline.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "ratttertintattertins",
            "body": "It'd be valid in user mode.  However, drivers are normally designed to be extremely simple and for good reason.  They're uniquely vulnerable to devastating bugs in a way that user mode programs just aren't.\n\nRegex can be a source of quite subtle and unpredictable bugs where code can appear to work until you give it input which causes it to misbehave.  I've fixed at least 3 bugs in my career where systems have deadlocked due to so called \"Catastrophic backtracking\" when the input varies:\n\n[https://www.regular-expressions.info/catastrophic.html](https://www.regular-expressions.info/catastrophic.html)\n\nIn my view, Crowdstrike's entire architecture is suspect.  Running a complex interpreter in kernel mode was always asking for trouble because with the best will in the world, you're eventually going to ship a bug in that code and if you do it with updates that ship live to the entire world...  that ticking time bomb is eventually going to explode.\n\nRunning an interpreter in kernel mode actually seems like a workaround for Microsoft's own strict signing and testing policies that now exist for kernel drivers.  Crowdstrike were claiming that they passed a fairly extensive set of Microsoft tests for driver acceptance but many of the advantages have been thrown away by having an interpreter which can fail at runtime. \n\nIt's worth remembering that Crowdstrike operates in an environment where many other things can change as well as their own channel files.  Windows can be updated, third party drivers can change, etc.  That's why any kernel based architecture should be offloading most of it's complexity to user mode.",
            "score": 125,
            "replies": [
              {
                "author": "txmasterg",
                "body": "&gt; Running a complex interpreter in kernel mode was always asking for trouble\n\nI've worked on a (non-AV) security product that had a similar architecture. It's almost certainly necessary for what Crowd strike does to have an interpreter in kennel. There are certain situations you need to respond without effectively pausing the request to/from the filesystem. We handled this through populating a rule set in the kernel, it was actually safe for us to \"fail open\" until our user process was ready and sent the rules so we didn't need them to be loadable by the driver directly.",
                "score": 35,
                "replies": []
              },
              {
                "author": "buttplugs4life4me",
                "body": "Linux is advertising an interpreter in kernel mode as a very good thing. \n\n\nYou know, the thing is, running OTA updates in an interpreter rather than \"bare metal\" has a lot of advantages, one of which that the interpreter *should* be tested sufficiently so that any code it runs may crash, but won't crash the interpreter or the kernel. It offers a lot of security around limiting what the code can do and reducing the blast area of any bugs, you know, sandboxing. \n\n\nThe issue is just...when you don't test the interpreter sufficiently. But any piece of code would have that problem. ",
                "score": 38,
                "replies": [
                  {
                    "author": "nerd4code",
                    "body": "Linux’s interpreter (assuming BPF, not AML which is its own mess) is designed specifically for use in a kernel environment, including timing and complexity constraints. Regexes are not, and a full regex interpreter with backreferences, and without any niceties for acceleration (e.g., SSE, which requires an extended context swap) is just begging for problems.",
                    "score": 15,
                    "replies": []
                  }
                ]
              },
              {
                "author": "swni",
                "body": "&gt; Regex can be a source of quite subtle and unpredictable bugs where code can appear to work until you give it input which causes it to misbehave. I've fixed at least 3 bugs in my career where systems have deadlocked due to so called \"Catastrophic backtracking\" when the input varies:\n&gt; \n&gt; https://www.regular-expressions.info/catastrophic.html\n\nIt is worth pointing out for people who are unaware, that regular expressions *cannot experience catastrophic behavior* when run on a correctly implemented engine. It is guaranteed that any regular expression can be tested against a string of length n in O(n) time, plus the time it takes to compile the regular expression (which does not vary with the string being tested).\n\nThe entire point of regular expressions is to achieve this guaranteed runtime performance for any possible input. It is only when you use non-regular features that bad runtime behavior can occur, which is why it is important that any programmer working with regular expressions know which extension features are non-regular, and why engines should by default reject non-regular expressions unless the user passes a flag indicating they explicitly want it.\n\nAlso the widespread use of engines that can exhibit exponential runtime for some regular expressions is a major error. For example, the documentation for the python regex library does not (as far as I can tell) give any runtime performance guarantees. Is it linear? Who knows.\n\nI blame perl for this mess.\n\nUpdate: When this article was written in 2007, perl, python, ruby, php, and java all had exponential regex engines. https://swtch.com/~rsc/regexp/regexp1.html",
                "score": 9,
                "replies": []
              },
              {
                "author": "frymaster",
                "body": "&gt; Running an interpreter in kernel mode actually seems like a workaround for Microsoft's own strict signing and testing policies that now exist for kernel drivers\n\nI disagree, it's entirely normal for an antivirus to make use of signatures and similar data files.  You might as well say graphics card drivers having an API is a workaround for Microsoft's strict signing and testing policies that games would otherwise have to go through",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "audentis",
            "body": "The regex did make the actual bug (missing input parameter, no validation) go unnoticed.",
            "score": 8,
            "replies": []
          },
          {
            "author": "elperroborrachotoo",
            "body": "&gt; I'm not sure why people are finding \"regex\" to be funny.\n\nBecause they have to read your regexes, phire.\n\nBecause every environment seems to have their own regex rules and syntax.",
            "score": 27,
            "replies": [
              {
                "author": "EliSka93",
                "body": "&gt;Because every environment seems to have their own regex rules and syntax.\n\nNow *that* is a real issue. Regex should be standardized.",
                "score": 17,
                "replies": [
                  {
                    "author": "maxximillian",
                    "body": "I remember learning regex in discrete math and thinking this makes sense, then seeing how each programming languages all seemed to do it differently and have idiosyncratic rules and then i thought this is a recipe for disaster.",
                    "score": 10,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "bah_si_en_fait",
            "body": "&gt; I'm not sure how you could do better. \n\n* Not using regexes\n\n* Using a proper parser that can be written in an afternoon\n\n* Not relying on having a wildcard returning an empty string, and doing proper error handling, field by field.\n\n* Not using a regex\n\n* Not using a regex in kernel space holy fuck\n\n* Not yoloing a `rules[21]` without doing any bounds checking IN KERNEL SPACE.\n\n* Not doing all this crap in kernel space, actually. Have your driver grab the info, and throw it to a userspace process to validate/warn/etc.\n\n* Not executing arbitrary code coming from the internet in kernel space. (Despite all of Crowdstrike's protests, data that is basically instructions for a virtual machine is... code)\n\n&gt;And it wasn't even the regex engine which caused the crash. The actual crash happened before the regex engine, while loading the string to be tested against the regex. There was an off-by-one bug, so the table only held 20 strings, and it tried to read the 21st string, past the end of the table. \n\nYou've got this swapped around. Regex reads a part of the channel file, tries to match based on its rules, and likely using capture groups. Logic is developed using a wildcard, which, even if nothing matches, `.*` will return `\"\"`. More complex regex comes in, returns `NULL` instead.\n\n&gt;During testing, the bug was hidden because they always tested this 21st field against a wildcard, which meant there was no need to even read the string. The configuration update finally set the 21st field to match against a more complex regex, causing the string to be read and the bug triggered.\n\nDuring testing, they didn't test against the actual file, but against mocks. They didn't test the file. They didn't test their validator. They didn't even run it on a Windows machine which would have exhibited the behavior. No, just tested the happy paths using mocks, and just pushed live to everyone with no staging environment or progressive rollouts.",
            "score": 6,
            "replies": []
          },
          {
            "author": "todstill",
            "body": "so what you're saying is that the regex caused this?",
            "score": 10,
            "replies": [
              {
                "author": "AegisToast",
                "body": "If I’m reading their comment correctly, it wasn’t the regex, it was the part that loaded the string just before the regex test. ",
                "score": 13,
                "replies": []
              }
            ]
          },
          {
            "author": "andreasOM",
            "body": "They have full control over their config (\"channel\") file,  \nand could use any type of safe format;  \nBut they choose to use a recursive decent regex parser in ring-0.\n\nIf you made it through University,  \nand don't get scared when hearing  \n\"recursive\" and \"kernel\" or \"security\" in one sentence  \nplease rethink your career path.",
            "score": 12,
            "replies": [
              {
                "author": "bleachisback",
                "body": "&gt;  But they choose to use a recursive decent regex parser in ring-0.\n\nThere's no evidence that this is true. They only mention that the content interpreter is regex-based. They do not mention the grammar of the language they are parsing, nor that they use a recursive decent parser to parse it.\n\nFurthermore, none of the parsing was actually what caused the issue anyway - it was an array out of bounds access.",
                "score": 21,
                "replies": []
              },
              {
                "author": "jelly_cake",
                "body": "Hell, any two of those words in a sentence would cause me panic if it's in reference to code I wrote.",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "what_the_eve",
        "body": "Imagine being a cybersecurity firm and not fuzz testing the configuration files that get handled by your kernel modules. This is insane.",
        "score": 124,
        "replies": [
          {
            "author": "moratnz",
            "body": "Imagine deploying a config file to umty tum million devices without ever running it up in the actual code that consumes it.",
            "score": 106,
            "replies": [
              {
                "author": "Nicksaurus",
                "body": "Umty tum is a number that lies somewhere between 'a handful' and 'umpteen'",
                "score": 25,
                "replies": [
                  {
                    "author": "Jonno_FTW",
                    "body": "Sounds like a number beyond the allocated size of an array.",
                    "score": 24,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 24,
                "replies": [
                  {
                    "author": "Riajnor",
                    "body": "And if someone makes a pr suggestion?\nGotta run it again just to be safe.\nThat was a hard learned lesson",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "RockleyBob",
                "body": "Even if they wanted to raw dog their clients with untested configs - why didn't they stage the rollout? Where I work we don't touch anything in prod unless it's off hours. We would have caught this in one market before rolling it out to another timezone.",
                "score": 9,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "OkMemeTranslator",
        "body": "It gets even worse; **they wrote their own regex parser and had it run in kernel**.",
        "score": 1355,
        "replies": [
          {
            "author": "Awric",
            "body": "Oh god. I remember in my first company I over engineered the heck out of a project by making my own regex parser because I thought it’d be fun. I really hope that company purged that monster by now.. I made some bold claims about performance and safety without testing it thoroughly, and I’m sure it’s super error prone.",
            "score": 536,
            "replies": [
              {
                "author": "AromaticGas260",
                "body": "That other intern or junior: i have to perfect this feature!",
                "score": 219,
                "replies": [
                  {
                    "author": "technotrader",
                    "body": "Project lead: let's make this feature mandatory for everyone so I can get a promotion!",
                    "score": 49,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "lol I fucking HATE this so much, clout and promotions are about building something new and throwing it to another team to support.\n\nTo hell with QA, support, usefulness, or if it is even a good idea. It’s resume based development where new features are rewarded and by proxy others directly punished. Happens at my current workplace and all the fangs.",
                        "score": 16,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "__Geralt",
                "body": "lol this is almost like a customer validation request i received for a contest:\n\n\"let's assume that the user doesn't cheat\"",
                "score": 81,
                "replies": [
                  {
                    "author": "Korlus",
                    "body": "Wasn't that basically the US electronic voting system in a nutshell? Here's a snippet [from Wikipedia](https://en.wikipedia.org/wiki/Electronic_voting_in_the_United_States#Security_reviews):\n\n&gt;Machines in use are not examined to determine if they have been hacked, so no hacks of machines in use have been documented. Researchers have hacked all machines they have tried, and have shown how they can be undetectably hacked by manufacturers, election office staff, pollworkers, voters and outsiders and by the public. Vulnerabilities identified at the 2019 DEFCON Las Vegas hackers convention had been previously noted and \"included poor physical security protections that could allow undetected tampering; easily guessable hard-coded system credentials; potential for operating system manipulations; and remote attacks that could compromise memory or integrity checks or cause denial of service.\" The public can access unattended machines in polling places the night before elections. Some of the hacks can spread among machines on the removable memory cards which tell the machines which races to display, and carry results back to the central tally location.\n\nWhen asked for a recount, many states simply went back to the hard drives with the vote tallies on, rather than counting physical ballot papers or other records. In some cases, the physical papers were disposed of, or were otherwise unavailable, meaning that were there ever election fraud in the US (we have no evidence to date that it has occurred), the election fraud would be easy to disguise and very difficult to trace back, with so many different vulnerabilities at almost every level of the election process.\n\n\nSo we just assume the users don't try to impact the outcome of the election themselves.",
                    "score": 24,
                    "replies": [
                      {
                        "author": "_illogical_",
                        "body": "Just like Trump's plan to get Covid numbers down; if you don't test, the number of cases goes down.",
                        "score": 16,
                        "replies": []
                      },
                      {
                        "author": "Asttarotina",
                        "body": "That's a feature, not a bug ;)",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "catchmeslippin",
                "body": "was your first company CrowdStrike",
                "score": 57,
                "replies": []
              },
              {
                "author": "oscarolim",
                "body": "I think crowdstrike is using your code.",
                "score": 23,
                "replies": []
              },
              {
                "author": "Celos",
                "body": "I was about to comment on what a terrible decision that was and then I remembered I did literally the same exact thing. And I'm pretty sure it's still there.",
                "score": 11,
                "replies": []
              },
              {
                "author": "SmokeyDBear",
                "body": "I’ll do you one better. In my first job I reverse engineered most of [Solaris’ compiled regex](https://docs.oracle.com/cd/E86824_01/html/E54766/regex-3c.html) format and reimplemented the compiler and processor on Linux for … some reason I don’t even remember now. I think I had already distributed some things on Solaris with precompiled regexes saved off and we were moving to Linux. It seemed like a good idea at the time.",
                "score": 5,
                "replies": []
              },
              {
                "author": "spareminuteforworms",
                "body": "&gt; I made some bold claims about performance and safety without testing it thoroughly, and I’m sure it’s super error prone.\n\nLOL your personal insight is hilarious.  And very relatable.",
                "score": 5,
                "replies": []
              },
              {
                "author": "fireduck",
                "body": "I remember one time doing log file reading and it was slower than you'd think.\n\nTurns out java.util.Scanner nextLine was doing regex and slow as fuck.\n\nWe made a reader that just looked for \\\\n and called that a new line and it was much faster.  It wouldn't matter for most uses, but we had many GB of logs.  This was basically a shit version of hand made splunk back before splunk or the like.  Identify a time where something interesting happened, have script download all logs related to that time window and then essentially filter the structured logs for what we are looking for.",
                "score": 3,
                "replies": []
              },
              {
                "author": "Sw0rDz",
                "body": "I disagree! Something like this is valuable and you should put it on a dating profile. Buy a custom coffee mug stating that you wrote a custom regex parser. Hell, you should get a tattoo of this accomplishment.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "bleachisback",
            "body": "I can't believe no one has pointed out that this isn't said ***anywhere***. No clue why the streamer said it and why people are believing it to be true. The only thing that is mentioned about regex in the report is that the content interpreter is regex-based, but failed before the regex step. Nowhere is it implied that they wrote their own regex engine. And even if they did - it wasn't, in the end, the problem.",
            "score": 239,
            "replies": [
              {
                "author": "8483",
                "body": "But muh sensationalism",
                "score": 47,
                "replies": []
              },
              {
                "author": "ProgramTheWorld",
                "body": "Classic clickbait",
                "score": 18,
                "replies": []
              },
              {
                "author": "RoninX40",
                "body": "True, it was basically an out of bounds error with the IPC Template.",
                "score": 9,
                "replies": []
              },
              {
                "author": "Planetzian",
                "body": "Yeah, I guess the streamer wanted to be the first on YT breaking down (rambling about) the report, regardless of whether he understood the content or not. Add a clickbait title, and post it here = views. Hope more people read the report and your comment, instead of just upvoting \"bro, it was regex bro!\"",
                "score": 14,
                "replies": []
              },
              {
                "author": "imadij",
                "body": "&gt; Nowhere is it implied that they wrote their own regex engine\n\nThey have their own regex engine called [JITrex](https://github.com/humio/jitrex). Which they mention in their [education material for Falcon LogScale](https://www.crowdstrike.com/wp-content/uploads/2023/08/crowdstrike-log-202-syllabus.pdf)\n\nTechnically, it's made by a subsidiary company but its domain https://humio.com/ redirects to Crowdstrike's Falcon platform",
                "score": 22,
                "replies": [
                  {
                    "author": "bleachisback",
                    "body": "You think they're executing Java code from C++ in the kernel? I'm skeptical.",
                    "score": 38,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "AyrA_ch",
            "body": "This can make sense though. Standard parsers are subject to all kinds of DoS attacks, so building a stripped down version might be safer. There have been all kinds of issues caused by regex parsers, one of them [taking down stack overflow in 2016](https://stackstatus.tumblr.com/post/147710624694/outage-postmortem-july-20-2016) because someone added too many spaces to their post.\n\nIn general, for security critical applications it's better to use a small library which is used fully rather than using a large library where only a small percentage of functionality is actually used.",
            "score": 181,
            "replies": [
              {
                "author": "chucker23n",
                "body": "&gt;\tThere have been all kinds of issues caused by regex parsers, one of them taking down stack overflow in 2016 because someone added too many spaces to their post.\n\nInteresting. SO is built on .NET, and .NET has long had a timeout mechanism for regexes for precisely this reason.",
                "score": 33,
                "replies": [
                  {
                    "author": "beep_potato",
                    "body": "It's extremely uncommon to see it being used. I make a habit of adding it, and explaining why, it's always a fight.",
                    "score": 23,
                    "replies": []
                  }
                ]
              },
              {
                "author": "YupSuprise",
                "body": "There are safe parsers built to convert the NFA to DFA, preventing backtracking such as  [re2](https://github.com/google/re2) by google. Writing their own seems like a very bad idea.",
                "score": 95,
                "replies": [
                  {
                    "author": "DLSteve",
                    "body": "I get your point, but it’s ironic that you say writing your own parser is a bad idea then you point to an example of where Google wrote their own parser as a safe parser. I guess in Google’s case their parser is open source at least. With that said, in the security world it’s not uncommon to write your own implementation for a lot of things to reduce outside dependencies and lower the chance of supply chain attacks. RegEx parser might have been a bit far but I don’t know what their requirements were. Might have been some restrictions with licensing or even a government restriction.",
                    "score": 44,
                    "replies": []
                  },
                  {
                    "author": "irqlnotdispatchlevel",
                    "body": "Porting this to the Windows kernel isn't going to be easy. You also have to port `absl`. At this point it is easier (and probably less error-prone) to write your own parser.",
                    "score": 35,
                    "replies": [
                      {
                        "author": "deeringc",
                        "body": "Or, don't use regex inside the kernel and solve your problem in a simpler and more robust way.\n\nWe're really leaning into the old saying:\n\n &gt; Some people, when confronted with a problem, think “I know, I'll use regular expressions.”   Now they have two problems.",
                        "score": 15,
                        "replies": [
                          {
                            "author": "irqlnotdispatchlevel",
                            "body": "As I said in another comment: I don't see the need for a full regex implementation in the kernel. Supporting a subset of glob match rules is probably enough for 95% of use cases. Sure, the people who write those rules will have a harder life sometimes, but it is absolutely worth it.\n\nAnyway, the code that crashed wasn't in the regex implementation.",
                            "score": 4,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "MatthPMP",
                    "body": "Simply doing an NFA-to-DFA conversion does not protect against exponential blowup if your regex engine will be used with user-provided regexes, as the conversion itself can take exponential amounts of time and memory. I'm not familiar enough to explain what re2 does, but it is a lot more involved.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "Kered13",
                        "body": "Was Crowdstrike using user-provided regexes? Usually regexes are statically known and can be compiled once (either at compile time or at runtime on startup).",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Sapiogram",
                "body": "&gt; Standard parsers are subject to all kinds of DoS attacks\n\nThis is an absolutely terrible reason though.\n\n* In this case, the regexp input is trusted.\n\n* Your parser is going to have worse DoS vulnerabilities anyway.",
                "score": 25,
                "replies": [
                  {
                    "author": "OldWar6125",
                    "body": "&gt;  \nIn this case, the regexp input is trusted.\n\nThe problem are certain regexp features that require backtracking with unexpected inputs. \n\nSo its either a review of every regexp you submit for these features or ship a stripped down library that errs if it encounters such features. \n\n&gt;Your parser is going to have worse DoS vulnerabilities anyway.\n\nLikely not. Writing a regexp parser without backtracking is quite simple. And it can handle all inputs in O(n).",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 7,
                    "replies": [
                      {
                        "author": "Sapiogram",
                        "body": "&gt; Never trust your inputs.\n\nIf you define \"trust\" as \"trust not to be actively malicious\", they don't really have a choice at that stage. How would they stop an attacker from adding a \"`explorer.exe` is a virus\" rule?",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "aykcak",
                "body": "&gt; Standard parsers are subject to all kinds of DoS attacks, \n\nSo make our own library without any experience about the complexity and make it subject to fascinating new kinds of attack vectors",
                "score": 6,
                "replies": []
              },
              {
                "author": "Breadinator",
                "body": "Perhaps, but this is the stuff that gives security auditors nightmares. It is far better to take the time to find a well-vetted, battle-tested library than write your own. Encryption in particular, but regex isn't far behind.",
                "score": 5,
                "replies": [
                  {
                    "author": "gefahr",
                    "body": "You must have better auditors than the ones I've worked with!\n\nI have to inventory *all* of my dependencies.. but I don't have to justify poorly reinventing the regex wheel.",
                    "score": 9,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "irqlnotdispatchlevel",
            "body": "To be fair, there's no regex kernel API. And it can make sense to implement your own parser that satisfies some concerns in terms of memory usage, time complexity, etc. \n\nI'd argue that needing support for full regex parsing is a bit overkill and you should limit your patterns in some way (maybe all you need is glob matching, or even a sub set of that?) even if that means more work for the engineers who have to write rules containing those stripped down patterns.\n\nEDIT: I've now looked through the report they put out. I don't see any clear evidence that they have a regex parser implemented in the kernel. The conclusion was probably drawn from this:\n\n&gt; In part, this was due to the use of wildcard matching criteria for the 21st input during testing and in the initial IPC Template Instances.\n\nJust because there's a wildcard it does not mean that there's a regex. Maybe all they support is wildcards in order to mean \"match anything\" or \"this is not needed now\" (I worked with similar systems that supported just wildcards and just for this).\n\nIt sounds like these rules are applied quite often, so performance is surely a concern. I doubt that they do a regex match on every IPC event they intercept.\n\nEDIT2: What is clear to me however, is that there seems to be no fuzzing for these parsers, which to me is a big red flag. I fail to see how even a dumb coverage-based fuzzer, when feed with the right templates, won't trigger the problematic code path. From their description it seems quite easy to trigger.\n\nEDIT3: Disregard my first edit, missed this line (thanks u/Skellicious for pointing it out):\n\n&gt; Rapid Response Content is delivered through Channel Files and interpreted by the sensor’s Content Interpreter, using a regular-expression based engine\n\nEDIT4: They released a new document with additional details: https://www.crowdstrike.com/blog/tech-analysis-addressing-claims-about-falcon-sensor-vulnerability/\n\nThe matching engine is quite limited, as expected:\n\n```\nKey limitations that contribute to security and resiliency:\n\nThe system can’t create or modify its own instructions. The sequence of matching operations is fixed.\nIt can’t allocate new memory or access arbitrary memory locations. It only works with its input strings and the small state variable.\nThe system can’t perform general arithmetic or complex logical operations. It’s limited to simple pattern matching.\nThis behavior resembles a specialized pattern-matching circuit more than a general-purpose computer. It’s designed to do one specific job efficiently and securely, without the flexibility (and potential vulnerabilities) of a full Turing-complete system.\n```",
            "score": 75,
            "replies": [
              {
                "author": "Skellicious",
                "body": "&gt; Rapid Response Content is delivered through Channel Files and interpreted by the sensor’s Content Interpreter, using a regular-expression based engine\n\nIt probably comes from this line, though that still doesn't say if they implemented it themselves or not.",
                "score": 11,
                "replies": [
                  {
                    "author": "irqlnotdispatchlevel",
                    "body": "Oops, missed that line. I'm pretty sure there's no ready-made regex parser that can work inside the Windows kernel with no additional patches. Given all the other limitations imposed to you by the kernel it is probably much easier to implement one from scratch than to patch an existing library. If it supports full regex matching I'm sure there are at least a few pathological inputs that can make it misbehave.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "tesfabpel",
                "body": "it makes more sense to delegate that parsing to a userspace process. I believe it's possible for the kernel to spawn a \"virtual\" killable process that communicates with the kernel. alternatively, a process in the filesystem that they control and can be verified not to be tampered.\n\nthis way, if that process crashes or misbehaves, it's possible to kill it without bringing the whole system down...",
                "score": 19,
                "replies": [
                  {
                    "author": "irqlnotdispatchlevel",
                    "body": "All AV vendors are running user mode code in what is known as a PPL process that is hard to tamper, that's not an issue. The issue is that delegating analysis to the user process can have serious performance and security implications (and isn't always possible from a design point of view anyway).\n\nDepends on what event you're intercepting. Usually, if you want to be in-sync with the event (so you can, for example, block it), doing `user -- (initial context switch done by a monitored process) --&gt; kernel --&gt; your driver -- (delegate and wait for user process) --&gt; return verdict to the kernel` is going to be sloooooow, especially for events that are triggered often. Blocking an event in this way and waiting in a driver for a response from a user mode process is a big liability. Kernel code should never trust user mode code. \n\nThere are also many situations in which you just can't do this. We don't know exactly what matching is being done. Maybe that template describes what fields to read from a kernel mode structure. Maybe matching it requires the driver to call a Windows kernel API that is expensive to call, so it is delayed until a rule absolutely needs it. \n\nSee also my edit as to why I don't think they have a regex parser in the kernel.",
                    "score": 14,
                    "replies": [
                      {
                        "author": "ArdiMaster",
                        "body": "Also, what is the driver supposed to do if its user-mode delegate crashes (repeatedly)?\n\nIt can either pass everything, effectively disabling itself and leaving the system unprotected, or it can play it safe and bring the system down after all.",
                        "score": 12,
                        "replies": [
                          {
                            "author": "irqlnotdispatchlevel",
                            "body": "A lot of people forget this aspect. The information security teams at most of these big companies will have the policy setup in such a way that an unprotected system will become an offline system as fast as possible.\n\nPeople who work for companies that force EDRs on dev laptops probably experienced this when trying to log in after a few days off and being denied access to company resources because they were behind with their updates for example.\n\nThe impact won't be as big, since your PC will at least boot, but there's not a lot that you can delegate to user mode components anyway.",
                            "score": 9,
                            "replies": []
                          },
                          {
                            "author": "tesfabpel",
                            "body": "If you launch a process to parse each Channel File, if such process crashes, the AV wouldn't be able to load that file only. In this case, only the latest Channel File wouldn't be loaded and the AV should continue to start and probably display a warning message that some \"definitions\" couldn't be loaded.\n\nAfter all, the problem would be normally fixed in a short time without bringing half the world down.",
                            "score": 7,
                            "replies": [
                              {
                                "author": "goranlepuz",
                                "body": "That's presuming that said external process failure is handled gracefully in the kernel part of the code. At this point, seeing the chain of CS blunders, ehhh...",
                                "score": 3,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "vegiimite",
            "body": "It makes sense my understanding is that because the Crowdstrike needs to run in the kernel it is a signed driver, so it can't change without having to be resubmitted to MS for review.  \n\n\nSo to run new code to find and detect new threats it implements a VM and the update files are bytecode programs that are executed on their VM. \n\n\n So if they want to support Regex they had to write their own.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "hardware2win",
        "body": "What a dumb title\n\n\"IT WAS IF STATEMENT\"? \"IT WAS LACK OF NULL CHECK\"?\n\nYes, majority of bugs can be reduced to simple constructs.",
        "score": 51,
        "replies": []
      },
      {
        "author": "nascentt",
        "body": "It was lack of proper testing.  Regex not parsing the data was just the trigger this time.  Without testing this could've happened with many triggers",
        "score": 57,
        "replies": [
          {
            "author": "todo_code",
            "body": "I didn't read the report yet but it was the step before indexing into an array.",
            "score": 7,
            "replies": []
          },
          {
            "author": "tom-dixon",
            "body": "There were so many failures on so many levels. Code reviews should have caught this, automated tests should have caught this, a QA team should have caught this, devops in a staging environment should have caught this.\n\nI cannot comprehend how a dev can ship code to millions of computers (some critical too, like hospitals, law enforcement, DoJ, stock exchanges, airports) with a bug that instantly puts the computers into a boot loop.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "MasterLJ",
        "body": "I don't think it was regex, buy holy shit there are some doozys in that report (https://www.crowdstrike.com/wp-content/uploads/2024/08/Channel-File-291-Incident-Root-Cause-Analysis-08.06.2024.pdf)\n\n&gt;The new IPC Template Type defined 21 input parameter fields, but the integration code that invoked the Content Interpreter with Channel File 291’s Template Instances supplied only 20 input values to match against. This parameter count mismatch evaded multiple layers of build validation and testing, as it was not discovered during the sensor release testing process\n\n It's not that they're trying to paper over disgustingly bad management of software, it's that there is a chance that the public will buy it.\n\nI'm not sure sensationalist titles of \"IT WAS REGEX?!\" are helpful here because it doesn't look like it had much to do with Regex.",
        "score": 32,
        "replies": [
          {
            "author": "zyxzevn",
            "body": "Yes. They added one more parameter, it is not checked and it crashes due to a later failure. \n\nI think that the biggest problem is that there were no defensive checks in the program. And in a kernel, that is extremely dangerous. Even if it did not crash, it could also be used as an entry for hacking a system.\n\nThe defense against bugs was only in the tests. They seem to have a test driven development. Which tests fail automatically when you add a new feature. So you have no defense against slightly wrong tests.  \nBut it also has no defense against hackers that find these unchecked areas and exploit them. And I suspect that these areas may have been used already before the world-wide crash.",
            "score": 7,
            "replies": []
          },
          {
            "author": "Longjumping_Feed3270",
            "body": "Finally! After skimming through the report I was wondering what regex actually had to do with it.",
            "score": 5,
            "replies": []
          },
          {
            "author": "Phinaeus",
            "body": "Am I reading this right? They had a function where you need to pass in 21 parameters. That's ridiculous, you have to count the commas to even check. Like 6+ parameters into a function is enough to make your eyes bleed.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "LeCrushinator",
        "body": "I want to know how they just skipped QA. Every machine with this update failed to boot, so you’d think with a repro rate of 100% that QA could’ve caught this before it went into production.",
        "score": 16,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "How much you wanna bet that if the VM doesn’t boot that the result is undefined and that confuses the test harness and is treated as zero?  The classic blunders of child process forking are many and myriad.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "FearAndLawyering",
        "body": "This video guy sucks, wow.",
        "score": 52,
        "replies": []
      },
      {
        "author": "wildjokers",
        "body": "An article would be better than a video.",
        "score": 19,
        "replies": []
      },
      {
        "author": "this_knee",
        "body": "I’ve always pictured regex as this classic evil villain with bar handles mustache and scheming hands. Every time you go to use it it’s like: “hee hee hee, try to use me! Just try! See how long it takes me to act unexpectedly with something you didn’t predict. Hee hee hee!” \n\nAnd … that’s pretty much how it goes. You write using them in a way that surpasses  the simple uses of regex and it’s only a matter of time until it borks on something. Gotta always carefully clean the input to any reg ex … problem is … to do that one has to use … reg ex. Thus the issue is inescapable, and thus another unfortunate imperfect reality of programming.",
        "score": 50,
        "replies": []
      },
      {
        "author": "Chii",
        "body": "i find this completely hilarious - somebody just wrote some regex to match against some things, and the tests are mocked and didn't actually properly test actual deployment conditions.",
        "score": 89,
        "replies": [
          {
            "author": "daniels0xff",
            "body": "You’d be surprised how many just test against mocks and call it a day.",
            "score": 68,
            "replies": [
              {
                "author": "Chii",
                "body": "&gt; many just test against mocks and call it a day.\n\nthey say software development is hard, but i say that these people are merely incompetent. \n\nThey needed to have the same NASA coding guidelines for kernal level software tbh: ~~https://ntrs.nasa.gov/citations/20080039927~~ Edit: https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code#cite_note-PowerOf10-1 real link",
                "score": 31,
                "replies": [
                  {
                    "author": "Sharlinator",
                    "body": "Yeah. They like to call it \"software engineering\" but want to do zero amount of *actual engineering*.",
                    "score": 43,
                    "replies": [
                      {
                        "author": "aksdb",
                        "body": "Well, we should separate between levels of criticality. So yes, I am with OP that kernel level stuff rolled out to customers we are somewhere in the ballpark of what NASA is doing. A failure on their side has small impact in relation to the amount of affected devices, but the device itself is SO damn expensive and the projects so time consuming, that even that single failing device is a BIG problem. A driver like Crowdstrike might have a relatively small individual impact, but the sum of affected devices makes it a large issue.\n\nOn the other hand something that you run on your own server to serve a few million users to show them their daily step counter ... you can probably accept a certain unavailability if that means you can save a few million/billion on intensive test rounds. Actually you are likely also fine with being able to \"fail fast\" and fix it equally fast.\n\nNow if your server is the single point of failure for a critical infrastructure like a hospital, we it's again a large issue and consequently should need high standards (or, you know, don't make it damn single point of failure in the first place).",
                        "score": 10,
                        "replies": [
                          {
                            "author": "Sharlinator",
                            "body": "Of course. In real engineering there’s this thing called risk analysis. In software dev what’s usually being done is risk guesswork, if even that.\n\nFor what it’s worth, I think your example isn’t very typical these days, as everybody thinks they need Kubernetes and five-nines availability for storing grandma’s cake recipes, just because it’s fashionable. Overengineering is also a case of failing risk analysis.\n\nOn the other hand, a couple years ago I was one of the victims of a data breach where *extremely* sensitive medical information of thousands of particularly vulnerable people was stolen because they were stored on \"your own server\" running a Postgres instance open to the internet…",
                            "score": 7,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "websnarf",
                    "body": "How are \"Coding Guidelines\" (which is about white space, and naming conventions) going to help you engineer a proper bounds-check or regex engine, or whatever it is they needed to fix this properly?",
                    "score": 4,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "moratnz",
            "body": "And the idea of 'let's actually load the channel file onto an actual falcon instance on an actual windows machine' was a bridge too far in testing rigor.",
            "score": 22,
            "replies": [
              {
                "author": "[deleted]",
                "body": "This is the only testing take here that makes sense. Everything else I feel is super… myopic? Hurr durr, they didn’t test the exact case where the bug was. Then they release a 12 page report on them adding bounds checks and 5 tests for this specific case.\n\nI’m glad they’re also adding customer control over updates because they _obviously_ aren’t doing _any_ end to end testing, where they push code to a lab machine and make sure it actually… turns on?",
                "score": 15,
                "replies": []
              }
            ]
          },
          {
            "author": "Inoffensive_Account",
            "body": "“You son of a bitch! You moved the cemetery, but you left the bodies, didn’t you? You son of a bitch, you left the bodies and you only moved the headstones! You only moved the headstones! Why? Why?” — Poltergeist (1982)",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "emperor000",
        "body": "Anybody with a (shorter) summary of what it was? Not knocking the video, I just want feel like watching it right now and figure that there's probably some more brief summary anyway.",
        "score": 6,
        "replies": [
          {
            "author": "cd7k",
            "body": "Array out of bounds exception.",
            "score": 6,
            "replies": [
              {
                "author": "emperor000",
                "body": "Anybody with a (longer) summary of what it was...? Lol.\n\nJ/k, thanks. I probably just need to watch the video or look at that report from the other thread.",
                "score": 4,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "bbrizzi",
        "body": "Hello, could I have this in a form other than a youtuber reading a PDF for 50 minutes please ?",
        "score": 21,
        "replies": [
          {
            "author": "ikea_riot",
            "body": "What, you don't like all of your videos presented in the style of a  1990s shock jock ?",
            "score": 12,
            "replies": []
          }
        ]
      },
      {
        "author": "epasveer",
        "body": "&gt; IT WAS A REGEX?!?\n\nDon't blame the tool. Blame the persons and their testing framework.",
        "score": 6,
        "replies": []
      },
      {
        "author": "DoppelFrog",
        "body": "As a wise man once wrote:\n\n&gt;  \nSome people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems.",
        "score": 21,
        "replies": [
          {
            "author": "pani_the_panisher",
            "body": "Regex isn't that bad, but you should have a very good reason/s before using it.\n\nTime ago, I wrongfully showed to a junior how to use regex for validate a complex input. Bad idea, days later I found regex in every code he had the chance to put it.",
            "score": 24,
            "replies": []
          },
          {
            "author": "s33d5",
            "body": "Nah I use regex all the time, I just don't program in ring 0.",
            "score": 4,
            "replies": []
          },
          {
            "author": "emperor000",
            "body": "See my reply to this joke here: https://www.reddit.com/r/programming/comments/1em6fd6/it_was_a_regex_full_crowdstrike_report_released/lgyecds/\n\nI get the joke. It's \"funny\". But it really doesn't have the ring of truth to it that would make it truly shine.",
            "score": 3,
            "replies": []
          },
          {
            "author": "colei_canis",
            "body": "Nah regexes are a decent tool, you just need to know when and when not to use them, and make sure anything involving them is thoroughly tested. Just because a tool is difficult to use and is often a poor choice in various situations doesn’t make it an inherently bad tool. Nobody would fault a chainsaw for being bad at driving nails into wood.",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "Constant_Event_4917",
        "body": "They forgot to add null check lol",
        "score": 3,
        "replies": []
      },
      {
        "author": "EnvironmentalCrow5",
        "body": "You could also say it was dynamic typing (sort of). Having one side of a contract expect 21 values, and another supply only 20 can only happen if your code just sort of implicitly expects some contract to be filled, but it is never compile-time validated. And even though it held in the past, it later breaks during a change.\n\nIf the contract is between different codebases, use code generation from the same definition (same source repo etc., then if you change it, one part of your build will fail).\n\nPlus of course the lack of testing and staged rollouts is just a cherry on top.",
        "score": 13,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 10,
        "replies": [
          {
            "author": "hardware2win",
            "body": "Are you really calling graph data and recursion some fancy techniques?",
            "score": 9,
            "replies": [
              {
                "author": "s33d5",
                "body": "Hahaha are you telling me that you can call a function from inside ITSELF??? That's basically AI!",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "rmrfchik",
        "body": "You have a problem and want to use regex to solve it.\n\nNow you have \\* problems.",
        "score": 15,
        "replies": [
          {
            "author": "emperor000",
            "body": "I get and appreciate the cleverness here, but it really is a horrible take.\n\nWriting some custom finite state machine or whatever every time you want to do something you could use regex for does not seem like the flex people who crap on regex think it is.\n\nBut maybe I'm taking the joke too seriously.",
            "score": 7,
            "replies": []
          }
        ]
      },
      {
        "author": "bwainfweeze",
        "body": "Well, at least it wasn’t DNS.",
        "score": 2,
        "replies": []
      },
      {
        "author": "ForgettableUsername",
        "body": "Is he live-streaming a Word document? I can’t watch this. I’ll just have to wait until this information is available in a format other than reaction video.",
        "score": 2,
        "replies": []
      },
      {
        "author": "wobfan_",
        "body": "&gt; In summary, it was the confluence of these issues that resulted in a system crash: the\nmismatch between the 21 inputs validated by the Content Validator versus the 20 provided\nto the Content Interpreter, the latent out-of-bounds read issue in the Content Interpreter, and\nthe lack of a specific test for non-wildcard matching criteria in the 21st field.\n\nimo this is bullshit. sure, the bug contributed to the bug. it was only bad testing practices that lead to this. out of bounds errors for very long functions or arrays or whatever can and do happen to everyone, there's no shame in that, not even in the best security company in the world. not testing every single of the 21 fields before, and instead only running a wildcard regex for the testing - this is the one and only reason for all this shit. it's just like i am doing my PRs sometimes. i test some of the core functionalities, and when they work, i just trust the developer and hope that the rest is probably just the same quality, because i'm lazy to think about all the possible input parameters and possibilities, even the obvious ones. but i am running a small-size app with virtually no real users, and not a internationally used security software used in high ranks running in ring 0.",
        "score": 2,
        "replies": []
      }
    ]
  },
  {
    "title": "Thomas Kurtz, Co-Creator of Computer Language Basic, Dies at 96 - Bloomberg",
    "body": "GOTO 0",
    "score": 949,
    "url": "",
    "created_utc": 1731715301.0,
    "author": "StatisticallyBiased",
    "permalink": "/r/programming/comments/1gsajxy/thomas_kurtz_cocreator_of_computer_language_basic/",
    "comments": [
      {
        "author": "andrewhy",
        "body": "10 PRINT \"RIP Basic\"\n\n20 GOTO 10",
        "score": 121,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 24,
            "replies": [
              {
                "author": "Sotall",
                "body": "I got my start copying BASIC out of an old video game magazine.  RIP.",
                "score": 9,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 5,
                    "replies": [
                      {
                        "author": "harbourwall",
                        "body": "First you learned to debug by finding the mistake you made typing it in. Then you moved onto finding typos they'd made in the listing. Then you could find bugs in the original program and improve it.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "mycall",
                "body": "&gt; 10 PRINT \"RIP BASIC\";\n&gt; 20 GOTO 10\n\n10 POKE 1024,82 : POKE 1025,73 : POKE 1026,80 : POKE 1027,32 : POKE 1028,66 : POKE 1029,65 : POKE 1030,83 : POKE 1031,73 : POKE 1032,67\n\n20 GOTO 10",
                "score": 3,
                "replies": [
                  {
                    "author": "harbourwall",
                    "body": "I thought I'd check if those values were the same with an ASCII table, but couldn't be bothered so I pasted it into ChatGPT which not only did it for me without really being asked but also suggested a better version of the code.\n\nI wonder what sort of craziness will be going on if I get to 95.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "mr_birkenblatt",
                        "body": "Gemini completely failed at it",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "ukanakelderf",
                "body": "BASIC never really dies, it just keeps running in our hearts (and old emulators)",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "baggier",
            "body": "10 X=0\n\n20 X = X + 1\n\n30 IF X &lt; 96 THEN GOTO 20\n\n40 STOP",
            "score": 3,
            "replies": []
          },
          {
            "author": "imbecility",
            "body": "BASIC programmers don't die. They just:\n\n    GOSUB WITHOUT RETURN",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "shogun77777777",
        "body": "First language I ever used as a kid in the 80s. RIP legend",
        "score": 39,
        "replies": [
          {
            "author": "JustPlainRude",
            "body": "Same here. My dad's cousin gave me a few floppies with GW-BASIC and some simple text games on them at some point in the 80's. Been programming ever since!",
            "score": 11,
            "replies": []
          },
          {
            "author": "rodrigocfd",
            "body": "Same. My father bought an old [TK95](https://en.m.wikipedia.org/wiki/TK95) which came with a huge BASIC book. I had no idea what I was doing, but I had a lot of fun nonetheless.",
            "score": 3,
            "replies": []
          },
          {
            "author": "PotatoSquisher",
            "body": "Same here, that is the language that got me started in my programming carrer.",
            "score": 2,
            "replies": []
          },
          {
            "author": "beklog",
            "body": "same here.. BASIC, Turbo Pascal, Windows 3.1, Nintendo Fam Com, etc.. damn the memories..",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "AntiProtonBoy",
        "body": "Thanks for bootstrapping me into the field of programming.",
        "score": 18,
        "replies": []
      },
      {
        "author": "Braader",
        "body": "I use a derivative of BASIC for my line of work. God speed Mr. Kurtz.",
        "score": 17,
        "replies": [
          {
            "author": "420VHS",
            "body": "What is your line of work?",
            "score": 6,
            "replies": [
              {
                "author": "jasonscheirer",
                "body": "The lucrative text-based guess a number game industry",
                "score": 12,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 2,
                    "replies": [
                      {
                        "author": "jasonscheirer",
                        "body": "I am joking. One of the canonical ‘learn Basic’ tasks is writing a guess the number game.",
                        "score": 6,
                        "replies": [
                          {
                            "author": "boli99",
                            "body": "    10 PRINT \"Think of a number\"\n    20 INPUT A\n    30 PRINT \"Wrong.\"",
                            "score": 8,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Braader",
                "body": "Building Automation. Our vendor Reliable Controls uses a form of Basic with HVAC syntax called CBAS.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Sutty100",
        "body": "EXIT",
        "score": 14,
        "replies": []
      },
      {
        "author": "RemyhxNL",
        "body": "96/0 = ♾️",
        "score": 11,
        "replies": []
      },
      {
        "author": "2050_Bobcat",
        "body": "Another REM statement applied to the list of computer heroes. RIP.",
        "score": 3,
        "replies": []
      },
      {
        "author": "sdxyz42",
        "body": "my first programming language.",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 6,
        "replies": [
          {
            "author": "coop999",
            "body": "Beginners All-purpose Symbolic Instruction Code.\n\nI remember typing in programs that were printed in books into basica and Qbasic back in the late 80s. Fun times.",
            "score": 17,
            "replies": []
          }
        ]
      },
      {
        "author": "ClimbNowAndAgain",
        "body": "My Mum used to help me type in programs from Amstrad Action. Rarely got them to work, ha.",
        "score": 2,
        "replies": []
      },
      {
        "author": "ZekeD",
        "body": "Qbasic is how I cut my teeth into programming. \n\nI remember finding computer books at the library and copying them into qbasic only for the programs to crash and burn because they were designed for slower processors, lol. \n\nQbasic was a simpler time but I have fond memories. This dude definitely changed the world.",
        "score": 2,
        "replies": []
      },
      {
        "author": "thelastcubscout",
        "body": "Oh wow. I was just using basic this week! Still have some old finance apps I wrote in basic, and I was thinking of making a simple christmas card in basic this year.\n\nRest in peace $COCREATOR, your language is my GOTO for reflecting on the joy of simple programming.",
        "score": 2,
        "replies": []
      },
      {
        "author": "idebugthusiexist",
        "body": "I had fun creating applications on my TI-82 growing up. It was probably what got me into software development eventually. RIP",
        "score": 2,
        "replies": []
      },
      {
        "author": "Carthax12",
        "body": "I wrote BASIC-A on my TRS-80 with a tape recorder to store the programs I wrote.  I occasionally play the tapes just to hear my old code scream at me.  LOL\n\nRIP, Mr. Kurtz.",
        "score": 1,
        "replies": [
          {
            "author": "StatisticallyBiased",
            "body": "DECB ftw!",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "UXUIDD",
        "body": "started with BASIC on my C64 back then.\n\nRIP Mr Kutrz, you had probably wonderful 96 years to enjoy it ..",
        "score": 1,
        "replies": []
      },
      {
        "author": "ghateyef",
        "body": "  RIP brother may god give you peace",
        "score": 1,
        "replies": []
      },
      {
        "author": "GaryChalmers",
        "body": "I remember trying to write programs in QBasic or modifying the .bas games like Nibbles or Gorillas that came with DOS.  It peaked my interest in writing code.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Rameshk_k",
        "body": "GW BASIC and BASIC, old good days of ZX Spectrum and x86 processor PC. May his soul rest in peace.",
        "score": 1,
        "replies": []
      },
      {
        "author": "alphabytes",
        "body": "RIP.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Dr_Legacy",
        "body": "BASIC enhances longevity, who knew?",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": -4,
        "replies": [
          {
            "author": "Timbered2",
            "body": "What an idiotic thing to say.",
            "score": 21,
            "replies": [
              {
                "author": "overtoke",
                "body": "\"Dijkstra was also known for his vocal criticism and absence of social skills when interacting with colleagues.\"",
                "score": 14,
                "replies": []
              }
            ]
          },
          {
            "author": "rebbsitor",
            "body": "I've always found that an odd statement.  BASIC very closely parallels the way a CPU operates.  In that sense, it similar to Assembly language.  For example: IF, GOTO, variable assignment, and mathematical operations just parallel the comparison, conditional jump, and memory/register assignment operations and mathematical operations in the CPU.\n\nConcepts like OOP, Functional programming, etc., are really far away from how a computer actually operates.  They're useful for structuring and organizing a program, but I'd argue learning old school BASIC would give someone a better intuition of how a computer functions under the hood.\n\nI learned BASIC first, and then Machine Language, Assembly, C/C++, Java, Python.  The biggest jumps are C-style functions with their own variable scope that allows things like recursion, and OOP in the other C-like languages.\n\nWhen most colleges switched from C++ to Java as a first language, that's when I started noticing interviewees had less understanding of computers and less intuition for how things work under the hood as it's mostly abstracted away.",
            "score": 14,
            "replies": [
              {
                "author": "IQueryVisiC",
                "body": "What if you have a x86 under the hood? It is low on registers, but has great support for the stack. So expressions, (recursive) functions, local variables, block scope naturally transform into x86 assembly. For small programs the stack on 6502 is quite useful, whereas it lacks registers. No idea why the original 6502 cannot push or pull X and Y .\n\nBut BASIC only has globals and GOSUB. No structure.. ah okay, for loop . But you can GoTo in and out of it!!? This corrupts the stack.",
                "score": 4,
                "replies": [
                  {
                    "author": "rebbsitor",
                    "body": "&gt; But BASIC only has globals and GOSUB. No structure.. ah okay, for loop . But you can GoTo in and out of it!!? This corrupts the stack.\n\nIn BASIC there is no stack unless you implement one, but you can. GOSUB / RETURN parallels a function call, but there are no parameters automatically put on/off a stack. If you want that (along with the ability for recursion) in BASIC, you'd just use some arrays for your stack and an another variable to track the depth for the current iteration of the subroutine.\n\nYou can GOTO in and out of functions in C / C++ and mess up your stack. You can JMP in Assembly without cleaning up the stack. If someone's writing code that does that, that's more a them problem lol.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "IQueryVisiC",
                        "body": "Oh I never used GoTo in C. Did not know that it can do that. TIL. I just meant that stack is easier in assembly than in BASIC. And then you have stack fanatics like Forth…",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "shooshx",
                "body": "I think this quote needs to be understood within the cultural context of which it was made.  \nAnother famous quote from Edgar Dijkstra  (which is also often misunderstood) is \"goto considered harmful\". The point he was trying to make in the article where that came from is that when a program contains goto statements, it's impossible to trace back how it came to the point where it is at. With any other flow control structure, if you know the state of the variables and arguments and program counter, you can conceivable know how this program counter was reached. But if your function has gotos, you can't know that.  \nBASIC was not the only language which had gotos, fortran and C also had them at the time, but unlike those, BASIC was missing some important control flow structures and that made reverting to gotos much more prevasive.  \nAnother thing about BASIC is that unlike any other language, it had line numbers. This feature made sense in an era where code was primarily first written with pen and paper, then typed to the machine when it should be already done and bug free.",
                "score": 1,
                "replies": [
                  {
                    "author": "rebbsitor",
                    "body": "&gt; when a program contains goto statements, it's impossible to trace back how it came to the point where it is at. \n\nYou could track the GOTOs in debugging info if you really wanted to trace the flow. All programs once they're in machine language are using some variant of JMP for flow control.  If you want to trace a program, you have to track the relevant info. It shouldn't matter what the high level source looks like. I know PC BASIC interpreters from the 80s at least have a Trace function that will dump every line number touched so the flow can control can be traced. \n\n&gt; BASIC was not the only language which had gotos, fortran and C also had them at the time, but unlike those, BASIC was missing some important control flow structures and that made reverting to gotos much more prevasive.\n\nThat's true it comes up more often. Like in Assembly, a conditional Jump is the main method of branching flow control. Subroutines are also available (GOSUB) to help structure programs.  \n\n&gt; Another thing about BASIC is that unlike any other language, it had line numbers. This feature made sense in an era where code was primarily first written with pen and paper, then typed to the machine when it should be already done and bug free.\n\nOff the top of my head I know COBOL and Fortran both originally had line numbers. They became less used or optional over time, the same way they're not needed in QuickBASIC / QBASIC or VisualBASIC (pre .NET).",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Fix Incoming! Empty S3 buckets won't be able to make your AWS bill explode",
    "body": "",
    "score": 918,
    "url": "",
    "created_utc": 1715629633.0,
    "author": "ryan_with_a_why",
    "permalink": "/r/programming/comments/1cr8hxm/fix_incoming_empty_s3_buckets_wont_be_able_to/",
    "comments": [
      {
        "author": "Safe_Independence496",
        "body": "Translation (Amazon PR -&gt; English): It was a good run. We knew all along, but made enough money off of it already. Patching for damage control, we are generous gods.",
        "score": 127,
        "replies": [
          {
            "author": "SittingWave",
            "body": "How is this not fraud?",
            "score": 26,
            "replies": [
              {
                "author": "technobicheiro",
                "body": "Why would it be fraud to charge a customer for a feature? Even if it's a shitty feature.\n\nThey never said they didn't charge for failed requests.\n\nIf they were the ones making the failed requests to charge customers money then it would be fraud, in this case it's just a asshole business decision.",
                "score": 20,
                "replies": []
              },
              {
                "author": "proud_traveler",
                "body": "Fraud implies they've lied to the customer, which I highly doubt was the case. Shitty behaviour yes, but not fraud",
                "score": 6,
                "replies": [
                  {
                    "author": "SittingWave",
                    "body": "Fraud is intentional deception. Not necessarily lying. Even withholding or downplaying crucial information can be considered fraud.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "ZorbingJack",
            "body": "Earnings season is over guys, fix is getting deployed\n\n*AWS*",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "x1-unix",
        "body": "Nice, what about 404 errors?",
        "score": 25,
        "replies": [
          {
            "author": "BuonaparteII",
            "body": "Looks like that is free too: https://docs.aws.amazon.com/AmazonS3/latest/userguide/ErrorCodeBilling.html\n\nGiven the variety of free error codes... I wonder if you could use this to build a free storage system: 404 == `011001`, 403 == `001001`, etc (but the overhead of TCP packet size is pretty bad, overhead of 20 bytes at least)",
            "score": 37,
            "replies": []
          },
          {
            "author": "thabc",
            "body": "How much data transfer cost can you really rack up with 404s?",
            "score": 5,
            "replies": [
              {
                "author": "AdMajor2088",
                "body": "targeted attack could rack up some real charges",
                "score": 38,
                "replies": [
                  {
                    "author": "x1-unix",
                    "body": "A lot of crawlers constantly scan websites for known vulnerabilities by checking for wordpress, .git or any well known paths",
                    "score": 17,
                    "replies": [
                      {
                        "author": "i_am_at_work123",
                        "body": "This happens as soon as your site goes live, and doesn't stop, ever.\n\nUsing a firewall solution (like Wordfence) comes in handy.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "thabc",
                    "body": "To get a 404 means they successfully authenticated but there was no content to return. Is the scenario here that a leaked key could be used for the attack?",
                    "score": 1,
                    "replies": [
                      {
                        "author": "wieschie",
                        "body": "The original scenario was a public but empty bucket.  This seems like it should be free, but anyone could make a million bogus requests and start racking up charges for you. \n\nIf your keys are leaked you have larger issues.",
                        "score": 7,
                        "replies": [
                          {
                            "author": "thabc",
                            "body": "The original scenario was a private empty bucket, where the author was surprised to have been charged for data transfer for 403 errors. They only made it public as an experiment after having been charged.",
                            "score": 7,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "ryan_with_a_why",
        "body": "Follow up in response to this post: [https://www.reddit.com/r/programming/comments/1cgmq28/how\\_an\\_empty\\_s3\\_bucket\\_can\\_make\\_your\\_aws\\_bill/](https://www.reddit.com/r/programming/comments/1cgmq28/how_an_empty_s3_bucket_can_make_your_aws_bill/)\n\nLooks like AWS took action quickly",
        "score": 283,
        "replies": [
          {
            "author": "nekizalb",
            "body": "Does it count as quick when they didn't respond to the issue when the original author brought it to their attention, but instead waiting til he published a blog on it that blew up and FORCED them to respond?",
            "score": 498,
            "replies": [
              {
                "author": "sadbuttrueasfuck",
                "body": "No one gives a shit until there is noise and bad publicity. Source: Im a dev at aws",
                "score": 347,
                "replies": [
                  {
                    "author": "SeniorScienceOfficer",
                    "body": "Former AWS here. Can confirm.",
                    "score": 47,
                    "replies": [
                      {
                        "author": "Iggyhopper",
                        "body": "BigCompany worker here. Can confirm.",
                        "score": 16,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "tehsilentwarrior",
                    "body": "Username checks out",
                    "score": 81,
                    "replies": []
                  },
                  {
                    "author": "nekizalb",
                    "body": "Exactly. That's why I disagree with OP's framing of this as a 'quick' action.",
                    "score": 32,
                    "replies": []
                  },
                  {
                    "author": "sirgatez",
                    "body": "There was plenty of noise about this for years. This was a well known problem to the AWS S3 team when I worked at AWS back on 2013.\n\nThe AWS solution was to instruct the customer to remove any buckets they did not want to be billed for access too.",
                    "score": 33,
                    "replies": [
                      {
                        "author": "sirgatez",
                        "body": "Now I am sure some of you are asking. Why would AWS bill you for rejected requests?\n\nAWS is excellent at making sure they bill a customer for any way a customer could potentially be using service.\n\nYou can technically transmit data with a rejected request. The full key of rejected request will show up in your logs. So technically if you have a lambda processing your access requests or S3 logging enabled you can use your bucket to save/relay data without actually paying for having the bucket.\n\nIt’s interesting that this behavior actually was identified as a security bug for VPCs when they were first created when I was there because technically your not suppose to be able to send data to a bucket outside of a VPC unless your bucket is white listed on that VPC.\n\nThe reason this was a security issue is that it allowed data exfiltration from within the VPC.",
                        "score": 18,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "KevinCarbonara",
                    "body": "How many hours you work a week? I was thinking of taking a job in AWS.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "sadbuttrueasfuck",
                        "body": "I'm on eu so less than 40,cya giving my life to any stupid employer that doesn't give a shit about me",
                        "score": 11,
                        "replies": []
                      },
                      {
                        "author": "theB1ackSwan",
                        "body": "Extremely, extremely team and product dependent. The rule of thumb I always tell people who ask this question - if you work on a product that has a public-facing name (e.g. EC2, S3, Q) - it's gonna suck pretty hard. If you're an internal team servicing internal customers/other teams, you're better off. \n\n\nContext: Been with AWS for four years on two different teams.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "droptableadventures",
                "body": "And he wasn't even the first to raise it - this issue has been publicly known, complained about to AWS, but not widely talked about for roughly six years.\n\nThis time the difference was that it got media coverage.",
                "score": 18,
                "replies": []
              },
              {
                "author": "ryan_with_a_why",
                "body": "I’m guessing it didn’t get to the people who needed to see it.  Sometimes a public blog is the best way to get the right visibility on an issue like this\n\nFor full transparency though I’m a PM at AWS",
                "score": 66,
                "replies": [
                  {
                    "author": "cahphoenix",
                    "body": "Thus proving the other comment's validity. \n\nIt's only cared about when publicity makes it the squeaky wheel.",
                    "score": 93,
                    "replies": [
                      {
                        "author": "ryan_with_a_why",
                        "body": "That’s part of it for sure.  When you’ve got tons of competing priorities, sometimes it takes a squeaky wheel to get enough attention to take action",
                        "score": 77,
                        "replies": [
                          {
                            "author": "SwiftOneSpeaks",
                            "body": "That's the point of the complaint though - those competing priorities obviously don't value what can really matter to the user enough, or getting a report like this wouldn't need publicity to be taken seriously. Every level involved would recognize the problem and consider it important.  Every level the issue was raised to would do the same.  Lower levels would have ways to bump attention to a large issue like this even if the immediate level above them didn't react appropriately, and would be confident that wise use of that option would be rewarded, not retaliated against.\n\nI'm guessing those other competing priorities that drown out an issue like this are NOT issues that clearly represent a big financial or data risk to the users.  Pretending this isn't a sign of a problem means things won't get better.",
                            "score": 15,
                            "replies": []
                          },
                          {
                            "author": "imnotbis",
                            "body": "Or just one competing priority, which is money.",
                            "score": 6,
                            "replies": [
                              {
                                "author": "ArgoNunya",
                                "body": "You can choose to believe me or not, your choice. But the cloud is mostly enterprise-to-enterprise sales. Reputation is huge here and happy customers don't go looking at your competitors. AWS has no incentive to screw over customers for a few bucks when there are potentially millions of dollars on the line from repeat business. Fixing this kind of thing is genuinely important to the leaders.",
                                "score": 25,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "[deleted]",
                                    "score": 18,
                                    "replies": [
                                      {
                                        "author": "ryan_with_a_why",
                                        "body": "I’m inclined to agree",
                                        "score": 7,
                                        "replies": []
                                      }
                                    ]
                                  },
                                  {
                                    "author": "Phreaktastic",
                                    "body": "Bingo!\n\nAn empty bucket bill is large for an individual but I’d really be shocked if empty bucket revenue was significant at all.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "XenOmega",
                        "body": "While I don't disagree, in my company, devs used to be exposed to customers complaints, requests,... many of us would actually take on tickets because we were small and we cared.\nBut as we grew and we added more and more layers of support, customer success, account managers, pms... I, personally, no longer have access to the customer. What gets to me depends on the priorities/interests of other people.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Worth_Trust_3825",
                    "body": "I'm confused. Wasn't this known for 20 years? Why the corporate double speak to make yourself sound like the good guys for fixing a nothingbug?",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "RireBaton",
                    "body": "https://i.imgur.com/OffEJTR.gif",
                    "score": 0,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Dragdu",
                "body": "No, it does not, but it is the reality of being individual dev and trying to get big business to fix something.\n\nI am not in a field where AWS is relevant to me directly, but for example if I run into compiler bug in MSVC, my options are\n\n1) Use the proper channel, which is devcomm. I have bugs that are 10 years old in there, this is the option when I don't care about something getting fixed.\n\n2) Use backchannels - find a dev that works on that part of the product I need fixed, ask nicely, hope that he can fit it into his schedule/push for reprioritization. The success rate on this is spotty, as I don't always have connections where I need.\n\n3) Use my outsized social media presence as a developer of widely used OSS library to start a social media shitstorm. If I do this, the PM and the relevant internal devs come to me instead. I've even seen hotfixes released IN DAYS after this.\n\n\nSo if you can swing it, the answer is obviously to do 3). But, also obviously, it hurts anyone trying to go through the proper channel, as they are no longer being prioritized rationally.\n\nSocial media driven development is a fuck, who knew :-D",
                "score": 4,
                "replies": []
              },
              {
                "author": "beinghumanishard1",
                "body": "This is “quick”. Do you think there’s an email you can email that someone reads and processes requests? I’m not saying it’s correct but there isn’t an alternative.",
                "score": -3,
                "replies": [
                  {
                    "author": "nekizalb",
                    "body": "As others noted, this has been known and discussed for YEARS. It was documented in AWS support policies as intended. It wasn't until it blew up that they addressed it. I'm not giving Amazon any points here for doing *what is arguably the obvious and correct, but less profitable* thing.",
                    "score": 20,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Not exactly https://twitter.com/cperciva/status/1785402732976992417",
            "score": 32,
            "replies": []
          },
          {
            "author": "WishCow",
            "body": "&gt;Looks like AWS took action quickly\n\nAre you shilling? This was reported in 2006  \n\nhttps://twitter.com/cperciva/status/1785402732976992417",
            "score": 28,
            "replies": [
              {
                "author": "jojozabadu",
                "body": "OP is tripping over his own dick to make Amazon the good guy here.",
                "score": 8,
                "replies": [
                  {
                    "author": "hypoglycemic_hippo",
                    "body": "OP is a PM at AWS, so it sounds about right.\n\nhttps://www.reddit.com/r/programming/comments/1cr8hxm/fix_incoming_empty_s3_buckets_wont_be_able_to/l3wf6jx/",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "WishCow",
                    "body": "It's insane. The title should read \"Amazon apologizes, refunds ~20 years of charges caused by its own incompetence\".",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Dragdu",
                "body": "OP is AWS PM, so obviously he is shilling.",
                "score": 4,
                "replies": []
              },
              {
                "author": "AdministrativeBlock0",
                "body": "Yeah, but the Jira ticket was low priority and new work kept coming in...",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "Mikeztm",
            "body": "AWS support team was super helpful for me and issues refunded pretty fast for a lot of case by case reasons. I don’t think their policy can cover everything and this is just added to reduce future support costs.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 16,
        "replies": [
          {
            "author": "imnotbis",
            "body": "These are the ones that *aren't* billed. But yes... 404 (no such object) is not on this list.",
            "score": 12,
            "replies": [
              {
                "author": "Skellicious",
                "body": "Can you get a 404 without having valid access?",
                "score": 5,
                "replies": [
                  {
                    "author": "imnotbis",
                    "body": "No, but public buckets exist and someone could just flood them with bad requests.",
                    "score": 12,
                    "replies": [
                      {
                        "author": "Perdouille",
                        "body": "If the bucket is public, can’t you flood them with the same, working request anyway ?",
                        "score": 3,
                        "replies": [
                          {
                            "author": "imnotbis",
                            "body": "You'd have to waste your own bandwidth actually downloading data.",
                            "score": 1,
                            "replies": [
                              {
                                "author": "Perdouille",
                                "body": "find an AWS request that gives a 200, spam it, but don't actually download what they send",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "caltheon",
            "body": "Do tell us what one of these ways is...it seems like a pretty comprehensive list to me.  I don't have a list of every error code AWS responds with on buckets handy, but I'm sure they did when crafting this list.  did you miss the note that this page lists all of the ones you are NOT billed for?",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "BenjaminLindberg",
        "body": "Should’ve always been like that, I feel like.",
        "score": 7,
        "replies": []
      },
      {
        "author": "belovedeagle",
        "body": "I honestly don't understand how people weren't aware of this before. I have considered many times over the past decade using S3 or another cloud service for a personal project and always decided against it because of the **obvious** (to me) danger that a misbehaving script somewhere, let alone a malicious actor, could rack up charges. I mean it was literally the first thing I thought of when considering whether it was safe to use S3.\n\nThis wasn't an \"oops we didn't realize that was an issue\", this was literally an intentional design choice for cloud services. Someone's got to pay for these errors and it was obviously going to be the customer. Maybe now, a decade later, AWS has the data to know how much this will cost them and they are willing to eat that cost now, but it was intentional before.",
        "score": -36,
        "replies": [
          {
            "author": "CAPSLOCK_USERNAME",
            "body": "&gt; this was literally an intentional design choice for cloud services. Someone's got to pay for these errors and it was obviously going to be the customer\n\nThe billing was vastly out of scale with the actual cost to handle requests though. A 403'd PUT request was being billed at the same rate as a successful PUT request that actually uploaded data to s3, which is hundreds of times more expensive to Amazon. (And over 10x more expensive than a 403'd GET, despite being the same amount of work.)",
            "score": 49,
            "replies": [
              {
                "author": "Fiskepudding",
                "body": "How do you know that that 403 PUT wasn't manually verified and declined by a paid indian worker?",
                "score": 41,
                "replies": [
                  {
                    "author": "axonxorz",
                    "body": "I assume the downvotes are because people are assuming racism without knowing [the context](https://www.businessinsider.com/amazons-just-walk-out-actually-1-000-people-in-india-2024-4)",
                    "score": 35,
                    "replies": [
                      {
                        "author": "neumaticc",
                        "body": "notably, mechanical turk",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 10,
                "replies": [
                  {
                    "author": "RICHUNCLEPENNYBAGS",
                    "body": "Well, who would pay in this scenario if you ran your own server?",
                    "score": 2,
                    "replies": [
                      {
                        "author": "droptableadventures",
                        "body": "Technically, you, with the tiny sliver of bandwidth and CPU time it takes to send back a 403 amortised across the whole cost of running the server. But this would be nowhere near the cost AWS are charging.\n\nBut if you wanted to stop this by blocking general public access and firewalling off your server from the internet, you absolutely could.\n\nUnlike S3 where you can set your bucket to deny * from *, yet someone can still (until this rolls out) call Amazon's public internet facing API endpoints for S3, and incur costs that you get billed for. And they can do this from anywhere on the internet, not just from another AWS account, so even AWS can't see where it's coming from.",
                        "score": 11,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "SippieCup",
            "body": "We got fucked by this a few years ago. was insane to me that it was the case, but by that point AWS has taken its claws into our entire process so it was impossible to swap out for another provider.\n\nAWS refused to refund us as well. just a \"haha get fucked\"",
            "score": 38,
            "replies": [
              {
                "author": "garanvor",
                "body": "And that is why I winced every time architects from my old job would come up with a new lambda for every single small piece of work. I brought up vendor locking once and it was like I said something stupid.",
                "score": 16,
                "replies": [
                  {
                    "author": "caltheon",
                    "body": "serverless functions aren't really vendor lock-in though, they all support it, so it isn't a very informed response",
                    "score": 11,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 1,
                        "replies": [
                          {
                            "author": "RICHUNCLEPENNYBAGS",
                            "body": "&gt;  Or you can just install nodejs somewhere and run it there forever and pay the same.\n\nI mean yeah but now you have to maintain that.  Or I guess you don't but then you'll run into problems that are as bad as this or worse.",
                            "score": 5,
                            "replies": []
                          },
                          {
                            "author": "caltheon",
                            "body": "you can also write all that other infrastructure as code, making migration relatively minor thing.  There is a reason why architecture is the ones making these decisions.",
                            "score": 5,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "deja-roo",
            "body": "&gt; Someone's got to pay for these errors \n\nWhy?",
            "score": 9,
            "replies": [
              {
                "author": "caltheon",
                "body": "well, resources are consumed, so someone pays for it, but AWS should be paying for it as the cost of doing business.  The actual cost to AWS is probably pennies though.",
                "score": 8,
                "replies": []
              },
              {
                "author": "imnotbis",
                "body": "Capitalism go brrr.",
                "score": -1,
                "replies": []
              }
            ]
          },
          {
            "author": "tenprose",
            "body": "r/iamverysmart vibes",
            "score": 22,
            "replies": [
              {
                "author": "BEisamotherhecker",
                "body": "Just as you'd expect from an anarcho-capitalist (check the subreddits he's active on for context)",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "imnotbis",
            "body": "Everyone knows that your own misbehaving script can rack up charges, hopefully not at too fast a rate. At $0.01 per 10000 requests or whatever it is, you have a while before it becomes more than a small \"oops\". You're going to notice if your personal project server is doing nothing but making S3 requests over and over, racking up $1 per hour, right?\n\nThe unusual situation was that this particular bucket was receiving millions of requests per second from all over the internet and these were unexpectedly charged to the bucket owner despite them having nothing to do with it.",
            "score": 6,
            "replies": []
          },
          {
            "author": "kitari1",
            "body": "Yes yes you’re much smarter than everyone else, well done, you did it.",
            "score": 1,
            "replies": []
          }
        ]
      }
    ]
  },
  {
    "title": "The shortest, strangest engineering interview I’ve ever done.",
    "body": "",
    "score": 902,
    "url": "",
    "created_utc": 1723781862.0,
    "author": "Chun",
    "permalink": "/r/programming/comments/1etfo2y/the_shortest_strangest_engineering_interview_ive/",
    "comments": [
      {
        "author": "Staik",
        "body": "But was he the best in SF?",
        "score": 318,
        "replies": [
          {
            "author": "Chun",
            "body": "I never got the chance to find out! The sad thing is from his GitHub and personal site, he did seem very solid. Was really looking forward to our chat.",
            "score": 268,
            "replies": [
              {
                "author": "Ordinary_dude_NOT",
                "body": "OP, you sound more charitable than you should be. This candidate was a clear red flag, specially when he commented like that in your interview process. He was disrespectful and condescending from the start.\n\nEven if he was extremely talented he would have been hard to manage or difficult to work with his teammates. \n\nIn my personal exp such candidates are good as individual contributors than working with large teams.",
                "score": 245,
                "replies": [
                  {
                    "author": "root45",
                    "body": "Yeah, it is bonkers how no one is interested in talking about culture fit. That's a key part of what we try to get out of our interview process, about equal with technical ability. If the person you're hiring is an asshole, they're not going to help your team, even if they are amazing technically.",
                    "score": 7,
                    "replies": []
                  }
                ]
              },
              {
                "author": "alienangel2",
                "body": "Incredible rudeness in the followups aside, even if he were the best react developer in SF, the fact that he thinks looking at someone's Git repository without talking to them is enough for people to decide whether to hire them or not tells me most of what I want to know about them. If they don't recognize being able to discuss your designs and thought process with other engineers is the actually important part of the role, I don't want to work with them at all. \n\nAt least he saved you time by making his \"I produce godly code, nothing else is relevant\" attitude clear up front.",
                "score": 57,
                "replies": [
                  {
                    "author": "ButWhatIfItsNotTrue",
                    "body": "Like what about all the really good devs who don't do open source? Or share their code? Or even code outside of work? \n\nAlso, not wanting to talk to customer success? I have to assume they don't want any feedback outside of tech because \"tech are the smartest\". That thinking annoys me because honestly tech departments are the biggest screw ups in most companies I've been at. Very rarely is there another department that fucks stuff up as much as tech.",
                    "score": 9,
                    "replies": []
                  }
                ]
              },
              {
                "author": "FancyASlurpie",
                "body": "It's funny because adam actually proved exactly why it's important to interview people you are going to be working with even if you think they're technically great.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "lIIllIIlllIIllIIl",
        "body": "At first, I routed for Adam for being against long interview processes. Then, I started to wonder if Adam was having a psychotic episode.\n\nSome people are truly unhinged.",
        "score": 604,
        "replies": [
          {
            "author": "DistortoiseLP",
            "body": "Adam is the entire reason for long interview processes. A lot of these kinds of people can hold their breath through a short one then decompress into this once they think they're in the henhouse. Long interviews are also good protection from the kind of badly raised people trying to \"fake it until they make it\" which explicitly means trying to lie your way though an interview into a job you're not actually qualified for.",
            "score": 48,
            "replies": [
              {
                "author": "tevert",
                "body": "I mean, to be fair, Adam couldn't even make it through a single vibe-check call, so it's not like you need a big process to weed out _his_ particular stink",
                "score": 22,
                "replies": [
                  {
                    "author": "root45",
                    "body": "True, but there are tons of Adam-types that can get through one interview by shutting their mouths.\n\n\nSo many people on reddit are adamant about only doing a single interview, and I always cringe so much at that. If you're not interested in talking to the people you're going to be working with, you're definitely not the type of person I ever want to work with.",
                    "score": 11,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "lightninhopkins",
            "body": "Exact same. I do understand about it being a little odd to meet the customer success person in a tech interview, but wouldn't think too much of it.",
            "score": 100,
            "replies": [
              {
                "author": "The-WideningGyre",
                "body": "It's a start-up. I'd be happy to be meeting all manner of people, especially senior people, to get a feel for the company culture, and what the odds of success are.\n\nIf you're a reasonably senior programmer, the more 'greater context' you can taken in, the better.",
                "score": 36,
                "replies": []
              },
              {
                "author": "Chun",
                "body": "In our world customer success is the person who is in charge of the relationships with our biggest customers -- the e-commerce brands who pay us and form 100% of our revenue. Many of our feature requests come directly through them. The job involves having a great relationship with them and translating what they're asking for into real world architecture and code.",
                "score": 87,
                "replies": [
                  {
                    "author": "Ethesen",
                    "body": "To be clear, they are not a product owner?",
                    "score": 22,
                    "replies": [
                      {
                        "author": "Chun",
                        "body": "We don't have dedicated product owners right now, we're still reasonably small. Product is the shared responsibility of sales, customer success, and engineering.",
                        "score": 36,
                        "replies": [
                          {
                            "author": "gergob",
                            "body": "Aren't you a bit afraid that if shit hits the fan, sales, customer success and engineering teams will just point fingers at each other due to this shared responsibility?",
                            "score": 20,
                            "replies": [
                              {
                                "author": "Chun",
                                "body": "Not really. We all need to agree on product changes before we commit to anything major. So there's nobody left to really point the finger.\n\nAnd of course we do have a CEO who can make a final call on any disputes. Then if shit hits the fan, we have one person to point the finger at, haha.",
                                "score": 44,
                                "replies": []
                              },
                              {
                                "author": "lookmeat",
                                "body": "It's understandable, but it sounds like OP has a tiny (&lt;50) startup. So there aren't separate projects, but rather the one project and the one team. When you run ac business on this level it's easy to have shared ownership. Everyone understands that if the project fails, it isn't just a post-mortem, it could very well be everyone is out of job. There's an existential reality underlying the whole thing. Similarly everyone understands that they don't get to cash out of the project isn't successful, so everyone is interested in the whole thing holistically, if a programmer sees that sales it's having some issues converting customers, this may inspire them to rethink the model or features. Marketing works closely with developers to understand how to best convince others to use the product. You want this collaboration and closeness, but you can only pull it off at tiny scales. Get the PMs on too small a company and you're just dividing roles. You don't have the manpower to adapt to new roles without a PM, you don't have enough people to catch programs that have no other technically. You don't have enough people to have someone's job be meta shit everyone's job except for 2-3 people (C-level execs for the whole company. In a tiny company the CTO takes on many PM roles. Once you go over 200 employees it's better to start getting people responsible for parts and get PMs, in between it's a matter of context, taste and company culture.\n\nPoint is let's not be like Adam, and realize that there isn't one way things should be, but rather a very ad hoc thing. This is why you want to talk to as many people as reasonable (especially once there's a very good chance you'll get the offer, i.e. you passed the filters) to see if you want to work with people.",
                                "score": 10,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "SilasX",
                    "body": "Ah so they're like the people-person, since engineers can't deal with the general public.",
                    "score": 41,
                    "replies": [
                      {
                        "author": "Chun",
                        "body": "I'M A PEOPLE PERSON. I HAVE PEOPLE SKILLS. WHY CAN'T YOU PEOPLE UNDERSTAND THAT?!",
                        "score": 120,
                        "replies": [
                          {
                            "author": "hansolo669",
                            "body": "Just remember: Reddit is entirely full of the \"best programmers in the bay area\"",
                            "score": 29,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "AbramKedge",
                        "body": "So you take the fax, and physically carry it to the engineers?",
                        "score": 24,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "gonzo5622",
                "body": "Is it? If it’s a small company you probably are getting info about what to build from a bunch of places. Good Start up engineers have a wider role than just being code monkeys. At least that’s what I’ve seen at successful start ups.",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "WallyMetropolis",
            "body": "\"rooted\"",
            "score": 12,
            "replies": []
          },
          {
            "author": "will_i_be_pretty",
            "body": "I was honestly kinda onboard with what he said in the call at first; I've done this shit for a decade now and IME anyone who wants more than two interviews tops is usually wasting my time.\n\nBut then ... the emails ... oh god, the emails. Like Hacker News was a person.",
            "score": 24,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 22,
                "replies": []
              },
              {
                "author": "dookie1481",
                "body": "&gt; Like Hacker News was a person.\n\nbrilliant",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "Godd2",
            "body": "Either he had a screw loose or is just generally insufferable.  Either way, sounds like the interviewer didn't have to deal with it for very long.",
            "score": 10,
            "replies": []
          },
          {
            "author": "Kinglink",
            "body": "From the way he was talking... I don't think it's an \"Episode\" I think that's just how he probably is... psychotic though might be the word for it. \n\nI always say an interview process is a sign how every OTHER person gets hired as well as you.  If there's no coding questions, that's great, but everyone else on the team was hired with out coding questions.. that's the red flag.",
            "score": 6,
            "replies": []
          },
          {
            "author": "augustusalpha",
            "body": "Exactly what I thought.\n\nOr chronic drug addict .....",
            "score": 17,
            "replies": [
              {
                "author": "FlyingRhenquest",
                "body": "Yeah, he does read like he's high on something.",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "lechatsportif",
            "body": "Yeah he sounds legit crazy and a little stalkery.  He didn't pass the vibe check so the interview process frankly worked.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "AssholeR_Programming",
        "body": "Wow, that guy sounds like a bigger asshole than I am",
        "score": 441,
        "replies": [
          {
            "author": "imsowhiteandnerdy",
            "body": "Didn't you know, he's the biggest and best AH in the SF bay area.",
            "score": 57,
            "replies": [
              {
                "author": "GreySummer",
                "body": "And by far.",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "Au_lit",
            "body": "obligatory username checks out comment",
            "score": 53,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 34,
                "replies": []
              }
            ]
          },
          {
            "author": "Kinglink",
            "body": "No one is a bigger asshole than you.. you're the biggest!   Don't let this guy make you second guess yourself!",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "r_de_einheimischer",
        "body": "&gt; What the fuck did i do?\n\nYou exist. I got to know plenty of Adams in my career. He might be actually a good coder technically, but he has a large Ego and is a horrible team player because he has convinced himself he is the best.\n\nOf course this is only shielding himself because probably he is quite unsuccessful (or not as successful as he’d like to be), but doesn’t really understand why and coped by telling himself that people just don’t see it. In reality he has been rejected many times and he hung up on you to prevent being rejected again. He is likely very insecure. You have a startup, and no matter how successful you are, you probably in his eyes have a form of recognition he never had. He doesn’t understand that his technical skills might be even really good, but his social skills are abysmal. \n\nAnyway I am not a psychologist and this is a total laymans opinion, source is my ass, but I know plenty of people who were exactly like this. People who are simply bad team players often craft this „misunderstood genius“ identity around themselves,  either for cope or because they don’t want to change the way they are.",
        "score": 291,
        "replies": [
          {
            "author": "EnGammalTraktor",
            "body": "This is my take as well. I think you're spot on, when he heard that the inteview process was not \"instant-hire\" he went full shield / cope mode.",
            "score": 46,
            "replies": [
              {
                "author": "bighi",
                "body": "He's so insecure that he rejects first to avoid being rejected.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "Drogzar",
            "body": "When OP brought up in the chat the \"best programmer in SF\" thing and he answered \"Ah, it was that application\", I would have ended the interview there.\n\nThe fact that OP didn't immediately pegged him as the Primest of Donnas right at that point it's surprising.",
            "score": 55,
            "replies": [
              {
                "author": "GoSailing",
                "body": "Yes and no. If you have been applying to a lot of places, it can be pretty difficult to keep track of it all. Particularly when some of the job descriptions are vague or even describing the position inaccurately. But it is definitely bad to phrase it that way.",
                "score": 14,
                "replies": []
              },
              {
                "author": "bonnydoe",
                "body": "I found it strange that he obviously in one job application only stated he was the best programmer in SF. Why not in all others when you are so sure? Or he didn't have any other job applications and wanted to come off as the most desired hire in the area.",
                "score": 2,
                "replies": []
              },
              {
                "author": "bighi",
                "body": "I would disagree. When I'm looking for a job I apply for multiple places, and it's hard to remember where I made a certain joke. And I would say something similar, like \"oh, so this is the place where I made the goose joke!\"",
                "score": 2,
                "replies": [
                  {
                    "author": "Drogzar",
                    "body": "See, that's different. You are acknowledging you made a joke.\n\nThe way this guys phrases it it's very dismissive.\n\nThat's the difference between having social skills, or not.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "CevicheMixxto",
            "body": "Right. Very intelligent with code and facts and stuff, like other programmers. But not very intelligent with interpersonal skills, also like other programmers. Sounds like a lot of coders I’ve met. In fact I’m almost not shocked by this behavior. \n\nI think [I found a vide](https://www.reddit.com/r/programming/s/eGM84kUaUn)o of the guy interviewing.",
            "score": 16,
            "replies": []
          },
          {
            "author": "Inevitable-Swan-714",
            "body": "I recently tried to hire for a FE role and the number of candidates that got upset at me for \"passing\" was astounding. Even for very soft-passes. I liked a few of them and put their GH in a note file for if I ever needed to hire more later, but man — I immediately deleted some of these candidates from my list after receiving angry emails.\n\nI get some people are stressed about being OOW for awhile, but man… be professional. If you're mad you didn't get chosen and feel the need to lash out, just go for a walk and don't burn the bridge.\n\nI totally get the \"what the fuck did I do?\" bit.",
            "score": 7,
            "replies": []
          },
          {
            "author": "syklemil",
            "body": "Yeah, insecure, professional bullshitter or narcissist was my takeaway as well. Possibly drunk or just lacking impulse control.\n\nIt's more the kind of behaviour I'd expect in some online game with a toxic culture, likely related to a lack of consequences, i.e. poor moderation / filtering tools. In a hiring situation it obviously does have consequences, which should be a pretty strong incentive to be professional. We don't have to like someone's hiring practices or [stay in the interview longer than we want to](https://knowyourmeme.com/memes/just-walk-out-you-can-leave-running-skeleton), but being professional, de-escalating and trying to nudge the general culture in a better direction is how it'll hopefully play out.\n\nPersonal attacks after the fact are just a way of getting laughed at via e.g. reddit posts; in unprofessional settings I'd expect the phrase \"the trash took itself out\" to appear.",
            "score": 23,
            "replies": [
              {
                "author": "[deleted]",
                "body": "he definitely behaved like a League of Legends player during and after the interview.",
                "score": 12,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "&gt; People who are simply bad team players often craft this „misunderstood genius“ identity around themselves, either for cope or because they don’t want to change the way they are.\n\ntheres two sides to that coin. terrible managers use this as an excuse to avoid taking blame for a failing project.",
            "score": 2,
            "replies": []
          },
          {
            "author": "puzzledstegosaurus",
            "body": "&gt; he might actually be a good coder\n\nWhat’s a « good coder » ? Someone who’ll make awesome software that’s completely unusable because it’s impossible to get him to do something barely resemblant to the specs if it ever just so happens that he wants to write something else ? I don’t think anyone can be a « good coder » in any professional capacity if they’re that bad at communicating. Especially if they’re so un-professional.\n\nWould you say House MD might be a good doctor ?",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "ianxiao",
        "body": "Sorry but it’s very strange for me to think what are the purposes of scanning github history ? Some developers must use company’s account to commit their works, or its not like they’re actively contributing to Opensource.",
        "score": 238,
        "replies": [
          {
            "author": "apf6",
            "body": "Yup there are many reasons why you can’t really trust Github as the sole information for a hiring decision.\n\n 1) Some of the best coders are not able to share their work publicallly.\n\n 2) You don’t know how long it took them to write that code.\n\n 3) You don’t know for sure if that code is actually theirs or if it’s stolen.",
            "score": 191,
            "replies": [
              {
                "author": "Nimelrian",
                "body": "4) You don't know if people have the time/interest to code privately after a full-time work week. I know I don't, instead using my time for socializing, general housekeeping tasks at home and other hobbies.",
                "score": 135,
                "replies": [
                  {
                    "author": "BrokenPaw",
                    "body": "I once worked for a CEO who would refuse to hire a programmer or engineer if he found out that the candidate had hobbies unrelated to coding.\n\nWe once had an absolutely stellar candidate, who checked all of the tech checkboxes, aced the vibe check, and was easily the best applicant we had interviewed. But the CEO put a hard pass on him, because he had mentioned in the interview that he liked to go camping and get away from tech from time to time.\n\nI worked for that CEO for nearly a decade, and the amount of raw talent that he (and the managerial environment his attitude engendered) drove away was min-boggling.",
                    "score": 58,
                    "replies": [
                      {
                        "author": "Paradox",
                        "body": "&gt; I worked for that CEO for nearly a decade\n\nEither the company, product, or money must have been incredible.",
                        "score": 16,
                        "replies": [
                          {
                            "author": "BrokenPaw",
                            "body": "The company and product were (and still are) incredible.  I designed and prototyped most of the tech in the company's flagship product, and I'm named on most of their patents as a result. \n\nThe money was good, though not outstanding, but I held significant equity, and the promise that we would sell for a jillion dollars \"in a year or two\" kept me naively hanging on. There was always a reason why we weren't selling yet and that it would still be a \"year or two\".\n\nI finally had enough and walked away.",
                            "score": 19,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Gyerfry",
                        "body": "That's *wild*. But somehow not very surprising.",
                        "score": 12,
                        "replies": [
                          {
                            "author": "BrokenPaw",
                            "body": "Same guy also would always say (in a lighthearted tone) how the company was committed to a \"strong work/work balance\".\n\nPeople thought he was joking.\n\nHe was not.",
                            "score": 25,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "spkr4thedead51",
                        "body": "not sure if you share that anecdote regularly or if I've just read a dozen other people say essentially the same thing over the years",
                        "score": 7,
                        "replies": [
                          {
                            "author": "BrokenPaw",
                            "body": "This is the first time I've written anything about it, so unfortunately I must not be the only one with a similar story to tell.",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Ranra100374",
                    "body": "Yeah, it's weird to me that you're deemed unfit for a job if you don't code after a full-time job.  \n\nThis tweet is a good representation of what it'd look like if doctors were treated the same way:  \nhttps://x.com/EmilyKager/status/1313303791186268160",
                    "score": 16,
                    "replies": []
                  },
                  {
                    "author": "zaitsman",
                    "body": "Exactly, always makes me wonder why people look at me funny when I say I’d rather not use a computer at all in my spare time. After like 14 years in the industry I feel like I’d be damned if I spend my spare time in front of that screen",
                    "score": 21,
                    "replies": [
                      {
                        "author": "dexx4d",
                        "body": "I've got kids to hang out with, and they're into way cooler things.  Dinosaurs &gt; software dev.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Krendrian",
                    "body": "I also only do this professionally. \n\nSometimes I get in the mood, make some half baked shit or try some new language which I never revisit, which I would refuse to show to any1.\n\nIt's like asking a chef to post pictures of stuff he cooked home. You would either get images of soggy microwaved pizza or get stabbed in the throat on the spot.",
                    "score": 15,
                    "replies": [
                      {
                        "author": "Paradox",
                        "body": "Some fancy 3 star restaurant is hiring a new sous chef. When he's interviewing, they ask him to bring in pictures of recipes he made as a child. (this is joke)",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Naouak",
                "body": "The code I share on my github is definitely not my best, it's only quick and dirty projects that solve issues. I don't usually bother with most quality processes for my personal project unless they start to get some kind of following.",
                "score": 23,
                "replies": [
                  {
                    "author": "thespiff",
                    "body": "Yeah same. The little bit of coding I do in my personal time is usually experimenting with an unfamiliar language, or working on something frivolous. It’s unlikely to be my best work. It certainly isn’t gonna have good unit test coverage.",
                    "score": 7,
                    "replies": []
                  }
                ]
              },
              {
                "author": "chrismasto",
                "body": "Nobody said “the sole information for a hiring decision”. But if someone has a good chunk of work on GitHub, I think it can provide some signal that they know how to computer problem. I would be so happy if an interview consisted of asking me about a project I’ve done and letting me explain the design, code, challenges, etc. I don’t think that should be required, because obviously it would unfairly exclude a lot of people. But putting them under pressure in front of a whiteboard to produce a dynamic programming solution to a graph theory problem unfairly excludes a lot of people too. So I feel like it would be nice to have multiple paths to get to “I’m confident you’re capable of coding well enough to do this job”.",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "Thiht",
            "body": "Also some of the open source work on someone’s GitHub profile is not necessarily their best work. I have a couple projects with real world use (one has ~1000 stars), but it’s not the code I’m the most proud of: just some code I put together because I needed it, and it outgrew me. I’m proud of my side projects, but it’s not necessarily code I would like to be judged on in an interview, I have different quality standards at work regarding architecture, testing and documentation.",
            "score": 26,
            "replies": []
          },
          {
            "author": "Chun",
            "body": "Well in this case he was contributing to OSS -- and I always try to do my research if a candidate does have open source repos, which he did.\n\nBut yes, generally it's a good reason to do a call or two; even candidates into open source have some not public stuff they want to talk about.",
            "score": 38,
            "replies": [
              {
                "author": "OneForAllOfHumanity",
                "body": "There's a huge difference is seeing a solution to a coding problem, and how a coding problem is solved.  GitHub captures a finished painting, talking through a problem shows the process of making that painting.  Even seeing the individual commits is misleading because they can be artificially curated.",
                "score": 26,
                "replies": []
              }
            ]
          },
          {
            "author": "xybolt",
            "body": "even if they contribute to open source code, it is not always likely that the code changes committed are in high quality. Most of the open source work is done in spare time and you usually don't have time to fix a problem in a good way. So you fix it in the time you have. That may lead to an \"acceptable\" (or worse? Like leave behind a dirty hack requiring having deep understanding of the language in use in order to comprehend it, with supporting comments to get it done) code.\n\nI have done several commits that I am not going to commit when working for a company. In that sense, it is logical to take your time when figuring out a solution and make a contribution that is comprehended (rather) immediately by your other colleagues. This approach do take more time, however, it is also time _paid_.",
            "score": 6,
            "replies": []
          },
          {
            "author": "Reverent",
            "body": "If you're on the recruitment side, the biggest green flag you can dig up in the pile of garbage (and there's a lot of garbage to sift through) is enthusiasm.\n\nI can teach our tools. I can teach our process. I can't teach people who don't want to learn or don't care about the practice. And there's a lot of them out there.\n\nPersonal projects, blogs, homelabs, githubs, even if they aren't perfect are an indicator that a person is enthusiastic, and that's who I want. Especially if they're enthusiastic about what they've done (and it will come up in the interview). Heck, at this point I immediately shortlist anyone who has applied using an e-mail that is clearly a custom domain.\n\nYeah there's rockstar people who do their 9-5 and then... whittle miniature wooden squirrels or something... so it's not a conclusive indicator. But if I had a choice of 5 people who seemed otherwise competent, and 3 who seemed competent but showed me evidence they like to learn, I'm taking those three.",
            "score": 16,
            "replies": []
          },
          {
            "author": "Ser_Drewseph",
            "body": "Yeah, every job I’ve had has me create a github account for the position, so my personal GitHub is mostly my projects from college and maybe the occasional hello world project when I learned a new language or tool",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Parasitisch",
        "body": "He almost reminds me of someone I went to college with. Kept applying to all the big companies. I was applying to various ones at the same time, although not Facebook or Google level. Listened to him talking about knocking interviews out of the park, but after a while, he would switch to discussing how the interviewer was stupid or was trying to waste his time. How the interviewers didn’t even understand the questions they were asking. Always managing to get to the second or third round but having “something against him” limiting his ability to get offers. After getting rejected by every big company he tried for, he said the market was rough and apologized for me probably going through the same thing. I happily told him I had several offers and he couldn’t believe it.   \nOne thing specifically reminds me of him; at the end of the Microsoft (if I recall correctly) interviews, he was venting about how he knew he was a good fit but they just wanted to waste so much of his time. He was glad they rejected him since their process was clearly busted and he couldn’t imagine the issues that must happen once you get in.  \n\nVery interesting read! I appreciate your approach to improving the interview experience. It really makes a difference in the overall experience, even if you’re (the interviewee) not qualified.",
        "score": 41,
        "replies": [
          {
            "author": "dr-engineer-phd",
            "body": "Maybe it is the same guy. Was his name Adam?",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "redfournine",
        "body": "lol that was some... thing. This is golden. Thanks OP.",
        "score": 38,
        "replies": []
      },
      {
        "author": "Commercial-Dark-8247",
        "body": "Great story! Unless someone was a fresh grad, it is very surprising to me that someone wouldn’t realize that the job is not just the code that you write. I have a feeling that this person is the type of person to not realize that they might be the problem in a given situation.",
        "score": 96,
        "replies": [
          {
            "author": "politerate",
            "body": "And corporate says: \"Adam is our most prolific dev, what's the problem with the 6th dev leaving the team this year?! We still have our best one!\"",
            "score": 32,
            "replies": []
          },
          {
            "author": "just_a_timetraveller",
            "body": "I think there is this elitist culture that exists with developers. A lot of smugness and evaluating people's values based off of how \"good\" of a coder they are. Annoying AF.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "TestFlyJets",
        "body": "We interviewed a guy for a React role that had this line in his cover letter:\n\n&gt; Everything I touch turns to gold.\n\nEmbarrassingly, I was the one who had recommended him to our company, having known him through a local meetup. \n\nThe COO called me into his office to ask, “WTF is up with this guy?” I had to explain that I had no idea why he would write that and that I never got that sort of vibe from him. \n\nHe ended up getting an interview, doing well, and getting the job. He worked there for several years before we were acquired by a Fortune 100 consulting firm. He decided to do his own thing at that point.",
        "score": 49,
        "replies": [
          {
            "author": "spacelama",
            "body": "Did it all, in fact, turn to gold?",
            "score": 34,
            "replies": [
              {
                "author": "TestFlyJets",
                "body": "Oddly enough, it did not. He was a solid dev, but things were not gilded.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "dr-engineer-phd",
            "body": "So the guy did not lie… sometimes u gotta trust the bragging douche ?",
            "score": 5,
            "replies": [
              {
                "author": "campbellm",
                "body": "There's a LOT of space between \"doing ok enough to not get fired\" and \"turning everything to gold\".",
                "score": 7,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "AnyJamesBookerFans",
        "body": "If it makes you feel any better, I had something similar but not as a abrupt. Told they guy from the get go there would be two interviews, had the first one and it went very well, told him I’d get back to him by the end of the week to schedule the second one. A day later (Wednesday) I get an email from him withdrawing his application and saying that the interview process was offensive and juvenile. Like you, I wrote back and asked him politely to elaborate, and he just wrote back with a dismissive email along the lines of, “You suck and need to do better in the future.”\n\nHave no idea how it went off the rails. Some people are weird. Figured I dodged a bullet, and it sounds the same for you!",
        "score": 19,
        "replies": []
      },
      {
        "author": "vincentdesmet",
        "body": "He seems very frustrated he didn’t manage to raise any money and attacks anyone who managed to",
        "score": 79,
        "replies": [
          {
            "author": "helm",
            "body": "I think this is it. He sees someone who he thinks is his peer (or lesser, big ego here) raising money to fund a startup and was only in it to attack the founder.",
            "score": 18,
            "replies": []
          }
        ]
      },
      {
        "author": "SpaceToad",
        "body": "I really want to emphasize that 'looking at their github' is the WORST way to filter candidates, because many of the best and most experienced candidates won't have any open source projects (you know, because they're too busy coding for closed source projects in their actual jobs). So this Adam guy, beyond being obviously toxic, is totally clueless about hiring practices and what makes a good candidate.",
        "score": 18,
        "replies": [
          {
            "author": "rts-enjoyer",
            "body": "The idea for looking at github isn't to filter out candidates who don't have it but to be able to see they ones that can code well because they have something cool on github.",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "0xdef1",
        "body": "I am currently in a very long interview process, like 5 steps. I can understand Adam's opinion about long interview processes, but it doesn't justify to act like an  a-hole. That guy has issues with his soft skills.",
        "score": 29,
        "replies": [
          {
            "author": "campbellm",
            "body": "&gt; That guy has issues ~~with his soft skills~~.",
            "score": 11,
            "replies": []
          }
        ]
      },
      {
        "author": "DrKennethNoisewater6",
        "body": "Well, Adam showed why exactly these interviews are needed. I have a similar experience where a candidate dropped out of our call while I was describing the agenda/plan for the call. Waited for him in the Zoom call for 10 minutes to come back. Then saw an email from him \"I don't do cases. I thought your company was different. Goodbye.\" \n\nThe case was really just a short high level description of what a customer needed and then asking how they would approach it. No right answers, no tricks or anything. Super basic (think \"customer asks for a crud application\"). The idea is just to get a discussion going. Get a sense of the tools and tech they prefer. If they understand the big concepts. What kind of clarifying questions they might ask the customer for them to make a better plan. That kind of a thing. Maybe 10 minutes in total.\n\nMaybe my mistake was even calling a \"case\" or \"exercise\". Either way, nothing of value was lost even though I was quite upset that the guy just jumped off without saying anything and left us waiting for nothing.",
        "score": 38,
        "replies": [
          {
            "author": "Chun",
            "body": "The thing is it would be so easy to just communicate this stuff up-front.\n\nIf I was job hunting I would probably publish a short post of what I'm looking for and what hoops I refuse to jump through, and make sure each recruiter or hiring manager had a link to it.\n\nFor example, if you're going to ask me algo questions it's probably not a good fit; I'm very unlikely to be writing sorting algos or whatnot in my day to day job.",
            "score": 8,
            "replies": []
          }
        ]
      },
      {
        "author": "vegetablestew",
        "body": "Is he actually good? Sounds like he's trying to intimidate and primadonna into a job because one would assume someone this cocky can back it up.\n\n\nWouldn't be surprised if he was non-technical trying to swindle into a tech job.",
        "score": 41,
        "replies": [
          {
            "author": "Chun",
            "body": "I mean, from what I saw of his work from my research prior to the call he seemed great. That's why I asked for a call.\n\nBut I don't think you can really find out without actually talking to someone. So much of engineering as a discipline is talking through problems and coming up with compromises and so on.",
            "score": 39,
            "replies": [
              {
                "author": "TheFaithfulStone",
                "body": "Honestly - the mere fact that you realize that “engineering is at least somewhat about talking to people” already puts you in the top 50 companies I’ve ever talked to - and I haven’t even talked to you!\n\nAdam is missing the boat on this one.",
                "score": 39,
                "replies": [
                  {
                    "author": "Chun",
                    "body": "I mean I'll go even further. Once you reach a certain point engineering is almost *more* about thinking, talking, communicating than just writing code.",
                    "score": 42,
                    "replies": [
                      {
                        "author": "OneForAllOfHumanity",
                        "body": "Absolutely, and this guy seems like he would have been very toxic in a collaborative environment.  I worked at Engine Yard, located in SoMa, and there were definitely examples of brilliant developers that were terrible hires.  First guy I ever had to fire tried to push a breaking change to our customers stack the day before Christmas week because it was Technically Correct, and when we pointed out to him that it would require user intervention on our clients part or their sites would go down and a lot of these sites were e-commerce sites, his response was \"That's their problem - I did my job correctly\"...",
                        "score": 17,
                        "replies": [
                          {
                            "author": "Chun",
                            "body": "That's hilarious. I can't even imagine what kind of \"Technically Correct\" that even is. Passes tests, passes type checks? Follows the spec? haha",
                            "score": 8,
                            "replies": [
                              {
                                "author": "OneForAllOfHumanity",
                                "body": "Yup, it was an issue with Monit v4.x, which contained a defect, so the solution he came up with was bump Monit up to 5.0.3, which contained a fix for the problem, but wasn't backwards compatible, so clients sites would go down if it got deployed.",
                                "score": 8,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "ucblockhead",
            "body": "People who think they are that good are never that good. \n\nAll the truly great programmers know their own limitations.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "love_weird_questions",
        "body": "I have been in the engineering space for approximately 20 years. I have become disillusioned by the dramatic change I've seen in the past 10 years for what constitutes an average developer profile.\n\nback in the day, when scrum was not yet a thing, developers somehow had to be closer to the problem, closer to the needs of the user. people were somehow forced to be in that status of elevating their communication and empathy skills because of this\n\nsince scrum came over (and I've been scrum master, agile coach, CTO, product director etc), things have gone worse.\n\nFirst of all, developers now have the impression that the \"sprint\" is the best excuse to put headphones on and work on a 2-week contract where a bureaucrat ask for updates on a daily 15' meetings. during those two weeks, do not bother me, do not tell me you need something else. it's the sprint.\n\nSecond, the role of the PM/PO has been seen as the one that talks to the customer. not me, I'm a developer.\n\nI love agility when it's the real thing but these corporate people have twisted it in a way that I see present-day engineers affected by it in a way that sets us back 30 years: they lack empathy, they lack communication skills. both things they had to develop once they were exposed to the customer in the pre-scrum era\n\n  \nMarty Cagan, product trio etc are concepts that try to flip that but it's not yet delivering results at the scale we hope we would see. the interview above is a result of that, on top of the crazy money that was flowing into engineers pockets in the last few years (ok, guilty as charged on my end too).\n\nI really miss the days of 'no process but damn, we're building great things'\n\ndisclaimer: these are anecdotes from my personal experience",
        "score": 20,
        "replies": [
          {
            "author": "Chun",
            "body": "Agreed with pretty much everything you've said; obviously not every engineer is born to be good at talking to customers, but it's a good thing to learn -- even if your customer is just a product owner or a dependent team.\n\nAlso just think that Scrum has a lot to answer for. Can't cargo-cult your way to good engineering practices.",
            "score": 8,
            "replies": []
          },
          {
            "author": "ungoogleable",
            "body": "I mean, part of what you're describing is the inevitable specialization of roles as you scale to a larger company. If you're a tailor in a shop by yourself you have to talk to customers all day. If you're a seamstress in a factory you will be heads down sewing clothes trying to make your quota and have no time to consider whether they actually suit the customer whom you'll never meet.\n\nI wonder if you were at a small company that grew to a large company over the last 10 years?",
            "score": 5,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "&gt; First of all, developers now have the impression that the \"sprint\" is the best excuse to put headphones on and work on a 2-week contract where a bureaucrat ask for updates on a daily 15' meetings. during those two weeks, do not bother me, do not tell me you need something else. it's the sprint.\n\nIf you're gonna micromanage me, at least give me the dignity of focusing on the work. \n\nI don't lack office personability, it is deliberately turned off.   Do you want me empathically communicating, collaborating within and outside the team to help everyone succeed at building the right product, and doing unscheduled work that's too high priority to wait for the next sprint? Then I have one simple ask: Every retro starts with a sincere apology for loading more tasks than could be completed, acknowledge that completed tasks don't represent the sum workload accomplished, and a promise that story points will not be misinterpreted as scheduling units.",
            "score": 4,
            "replies": [
              {
                "author": "love_weird_questions",
                "body": "bless you my friend, i wholeheartedly agree",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "lechatsportif",
            "body": "You nailed it 100%.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "detroitsongbird",
        "body": "You dodge the bullet. Be thankful. \n\nYou did nothing wrong. He wanted to bluff his way into being hired. He’d have been toxic to work with.",
        "score": 9,
        "replies": []
      },
      {
        "author": "precinct209",
        "body": "Sounded like Adam was on copioids after some serious burns and had gone on a mission to find strawpersons to fling some futile punches at.",
        "score": 25,
        "replies": []
      },
      {
        "author": "gremolata",
        "body": "The purpose of an interview is to get a feel of a candidate as a person.\n\nYou got *precisely* that. Mission accomplished, bullet dodged.",
        "score": 14,
        "replies": []
      },
      {
        "author": "chrismasto",
        "body": "That’s wild. I can’t figure out what you did either. I am interviewing with a few places now, and your process does indeed sound refreshing. I’ve thought more than a few times over the past few weeks “I wish they’d just look at my GitHub, it should be obvious I can code”.  (If I had more than 5 minutes of TypeScript experience, I’d be applying, myself.) \n\nTBH I expected to find that you would be a bozo, just because that would fit the stereotype of the average Medium article from a startup founder talking about how great they think they are. But I actually read the article and the job posting links, and I had to deal with that unpleasant moment of cognitive dissonance where reality doesn’t fit your preconceived assumptions and you have to either change your mind or dig in. I think that’s what happened here. Adam made some assumptions, maybe because the application form had a lot of questions, not just “upload your resume”. Something rubbed him the wrong way, he decided to treat it as a joke at that point, and was unable to really hear what you were saying because he’d have to discard the opinion he’d already formed.",
        "score": 7,
        "replies": []
      },
      {
        "author": "SlapBassGuy",
        "body": "I'm not in the bay area but if you are ever looking for the best product leader in Nebraska drop me a note.",
        "score": 9,
        "replies": [
          {
            "author": "tinbuddychrist",
            "body": "This seems like a much more plausible claim (I say as Elko, NV's premiere C# engineer).",
            "score": 6,
            "replies": [
              {
                "author": "-grok",
                "body": "\\#1 dev in Searchlight, NV chiming in!",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "wichwigga",
        "body": "Well dam. The sad thing is I may know one or two people who could fit Adam's character. This industry has some interesting characters",
        "score": 6,
        "replies": []
      },
      {
        "author": "funtech",
        "body": "“Adam: I mean, if I raised money for a company or something, I was hiring developers as a developer, I would probably already know who I want to hire before I was even on a call with them.” \n\nBy his logic, shouldn’t he know if he wants to work for a company before he talks to them? Why would he bother applying to your company at all? Bizarre.",
        "score": 7,
        "replies": []
      },
      {
        "author": "mighty__",
        "body": "&gt;I would do paid trial if you can’t tell I’m good \n\n&gt;Adam’s response to this was totally fair\n\nMan saw huge red flag but decided to just ignore it.",
        "score": 19,
        "replies": [
          {
            "author": "Chun",
            "body": "Acknowledged on this point.",
            "score": 9,
            "replies": [
              {
                "author": "barrows_arctic",
                "body": "While \"a little bravado\" can be something entertaining or even valuable *in person*, or after you've worked with them for a while, it's usually a red flag on a typed introductory application. It's a first impression in a relationship where they are purportedly *asking for something* (a job), so humility should definitely come before bravado.\n\nThat said, I did once see a resume that listed \"Time's Person of the Year in 2006\" and I couldn't help but laugh.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "P1gInTheSky",
        "body": "Adam can’t code. He panicked when realised there would be an actual technical interview process.",
        "score": 16,
        "replies": [
          {
            "author": "Tringi",
            "body": "I've been coding for 25 years and wrote some quite complex systems across the stacks, but if you put me in front of a whiteboard and ask me to balance a binary tree, I'll fold laughing.",
            "score": 6,
            "replies": [
              {
                "author": "P1gInTheSky",
                "body": "Likewise. But I would not panic and storm out of the room if presented with that. It’s way more likely you would be presented with a more interesting challenge than rebalancing a binary tree. OP was clear saying he would not be tested on algorithms, leet code, etc. but real world problems.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Ill-Concert-4784",
        "body": "I hope your intentions are just to document a really funny story and that you are not even remotely internalising any of Adam’s mad ramblings. You dodged a bullet.",
        "score": 23,
        "replies": [
          {
            "author": "Chun",
            "body": "That is my main intention yes. But I genuinely spend a *lot* of time thinking about what makes a good interview process. So when something goes as badly as this I at least have to ask how it might have gone better.",
            "score": 20,
            "replies": []
          },
          {
            "author": "MadhuGururajan",
            "body": "In my personal opinion... it's hard to not internalize at least a bit when something this unexpected happens. I won't blame the interviewer if this keeps them up for a couple nights.",
            "score": 8,
            "replies": []
          }
        ]
      },
      {
        "author": "Gyerfry",
        "body": "When someone is this opposed to even talking about their process, I find myself wondering if their entire GitHub is plagiarized.",
        "score": 5,
        "replies": []
      },
      {
        "author": "Paradox",
        "body": "Zoid is a pretty nice package. Braintree/Paypal use (used?) it for their embedded buttons, and it was a damn sight easier to implement than some of their competitors button systems. I've used it in the past for a hack-a-thon project, as a way to embed a comment system in another site.\n\nAs for Adam, he sounds like a twat. This company dodged a bullet",
        "score": 5,
        "replies": [
          {
            "author": "Chun",
            "body": "Hey thanks! I built zoid and those buttons.",
            "score": 2,
            "replies": [
              {
                "author": "Paradox",
                "body": "Saved me probably 40-50 hours of bullshit on a rather large, but reddit-wise, obscure, ecommerce platform. Sure beat the shit out of the first time I had to stick paypal buttons on a site in 2005ish, thats for certain.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "kidman01",
        "body": "What an entertaining read, thanks for sharing!\nYou were waaaay too nice to him. Giving him chance after chance to present himself in a better light.\n I‘d striked him off as a potential candidate right after „Oh yeah, this was that application“ 😅",
        "score": 4,
        "replies": []
      },
      {
        "author": "zaitsman",
        "body": "Doing the hiring atm and went through some very weird experiences, the craziest ones are when people straight up hang up if you try to ask them a basic technical question; or those that refuse to answer anything because they want to hear more about a role and schedule the time.",
        "score": 5,
        "replies": []
      },
      {
        "author": "One_Economist_3761",
        "body": "This candidate was an absolute red flag. Gives off a total Diva vibe and is an example of someone whose personality flaws would negatively out weigh any possible  technical skill he might have because he’s a douche. \n\nI almost feel like the guy might have a borderline personality disorder. I have known ppl like this. They’re NOT fun to work with.",
        "score": 4,
        "replies": []
      },
      {
        "author": "VeritasEtUltio",
        "body": "I empathize with Adam's frustrations -- the interview process in this field is broken; and I don't know how to fix it. Doesn't excuse him going completely crazy, of course...",
        "score": 18,
        "replies": [
          {
            "author": "Chun",
            "body": "I mean, I agree, it is broken.\n\nBut like... I feel like I'm doing a lot to try to fix it. What were my mis-steps here?",
            "score": 25,
            "replies": [
              {
                "author": "Bulji",
                "body": "None, fuck Adam. Get a dev that maybe is the second best in SF but at least has some social skills. Like holy shit, imagine having to work with a piece of shit like this guy...",
                "score": 33,
                "replies": []
              },
              {
                "author": "VeritasEtUltio",
                "body": "You? Oh, none that I can think of. I don't think Adam was \"interviewing in good faith\", and I guess didn't expect to be taken seriously - for whatever reason.",
                "score": 11,
                "replies": []
              },
              {
                "author": "Iggyhopper",
                "body": "None. Part of hiring is getting skill fit AND \"culture\" fit. He was correct about knowing who to hire based on what's already available online. I mean, that's like knowing who sounds smart based on what they tweet, or who is a good tattoo artist based on what you can literally see on their clients.\n\nFitting into a job is having a good attitude and soft skills. This guy obviously is not the right fit if he goes off on his little rant without warning.",
                "score": 7,
                "replies": []
              },
              {
                "author": "Recoil42",
                "body": "Based on your article, it doesn't seem like you did anything wrong. Guy was trying to neg your entire hiring process from step one, and didn't approach the conversation as an honest exchange of expectations.",
                "score": 4,
                "replies": []
              },
              {
                "author": "Moleculor",
                "body": "&gt; What were my mis-steps here?\n\nYou were breathing. [/j](https://toneindicators.carrd.co/)",
                "score": 4,
                "replies": []
              },
              {
                "author": "mincinashu",
                "body": "Just my two eurocents, if you're looking for someone to build your product, which nowadays basically means a SaaS thingy, then look for a builder, not a leetcoder, and make that clear.",
                "score": 4,
                "replies": [
                  {
                    "author": "Chun",
                    "body": "Agreed -- it's one of the things I try to mention prominently in my job description. I don't think this candidate really read that though; given that it also describes the exact interview process too.",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "JimJava",
        "body": "I followed along but the more Adam talked, the more bizarre the interview evolved into. He didn’t want you to know what he can do and just expected that you had conducted an OSINT on his GitHub projects and programming activities. \n\nI like interviewing people enraptured with their personal tech projects, the people that say, I can anything and everything are the most disappointing. I did hire an Adam and it was easily one of the worst decisions of my life.\n\nWhat got me was Adam felt compelled to send you an email afterwards, you know, to make sure you understood the rejection, weird and aggressive. \n\nIn that whole time he didn’t ask you anything technical, which is odd, maybe past lines of work he was hired on the spot. Just about every interview for a well paying job in my field was a multiple interview process so I don’t understand his consternation. I feel that he may have weak interviewing and people skills. I suffer from both but wouldn’t castigate a hiring manager from wanting to know more about what I can do. It’s likely he got burned on numerous multistage interviews and is apathetic of tech in general, it’s not an uncommon sentiment. The only thing consistent with technology work is long hours and at times high visibility failures.\n\nAlso, he didn’t want to bomb the interview so he gave up before trying is my read, I think you dodged not just a bullet but nuclear fallout - the kind of stuff that ends to continuity of a business. I hope you find the second best JS programmer in SF 😂 Thanks for sharing.",
        "score": 3,
        "replies": []
      },
      {
        "author": "wPatriot",
        "body": "The description of the hiring process is a 99% match with how I like to run them, with the exception being the \"inspiring\" job description. Maybe I am too much of a cynic, but I don't think I could take seriously anyone who is either inspired by a job description or thinks the way they write a job description is inspirational 😂\n\nAs for Adam... I think I could appreciate the candor in the call itself, a shame it turned petty so quickly afterwards. I've personally also bailed out of a hiring process when I felt I was being more or less strung along, but obviously not in the first meeting and I didn't feel the need to be so petulant about it.\n\nThat said, better to have it go like this than to have the bad luck of finding someone with similar thoughts but the ability to keep up a facade for a few months. Character like this almost always comes out and while it's something we *can* usually find ways to work with, let's be honest: We'd rather not.",
        "score": 3,
        "replies": []
      },
      {
        "author": "IrrerPolterer",
        "body": "That was a fascinating read... On one hand I am glad that each of you simply figured out that your not the right fit to work with each other - I mean that absolutely neutral, this is a good thing and a reason for having interviews in the first place.\n\nOn the other hand, I am absolutely stunned by Adam's behavior. The author's interview process appears fair and super reasonable to me. I 100% would want to understand who I'd be working with and thus get some face time with folks to chat. I've declined offers in the past because I didn't like the people, atmosphere and culture... Weird stuff.",
        "score": 3,
        "replies": [
          {
            "author": "azhder",
            "body": "Karen Dot Com would have been a better name than Adam",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "ericl666",
        "body": "Who the hell has tons of stuff out on GitHub unless they do a lot of open source development?\n\nThat seems like a weird way to evaluate somebody...",
        "score": 3,
        "replies": []
      },
      {
        "author": "honestserpent",
        "body": "This is a fantastic read, thank you",
        "score": 3,
        "replies": []
      },
      {
        "author": "azhder",
        "body": "Is _copy/paste corporate idiot_ a single role (like a CEO) or can there be more people doing that?",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "That interview process is the most reasonable one I’ve ever heard of. How does this guy think you get hired otherwise, if you’re not getting referred in by upper management from past work or something?",
        "score": 3,
        "replies": []
      },
      {
        "author": "BleachedPumpkin72",
        "body": "It's a good story, reminds me of my own candidate who cut his interview short by telling me that he is not interested in the position we had, but actually wants my job (head of a specific engineering department) which he described as \"sit, do nothing and boss people around\". It was hilarious.",
        "score": 3,
        "replies": []
      },
      {
        "author": "oscooter",
        "body": "This was an entertaining, bizarre read. As others have brought up, I wonder if this was someone suffering some form of mental health issue or what.\n\nEven though you point out that your interview process isn't original, it sounds like a dream. I have nothing more to add than I really do appreciate the way your organization is approaching the process.",
        "score": 3,
        "replies": []
      },
      {
        "author": "apow",
        "body": "It’s more likely this person is some sort of con artist, having cloned someone else’s portfolio, and trying to bluff his way in before getting caught. That’s how I’d read this situation",
        "score": 3,
        "replies": []
      },
      {
        "author": "satanpenguin",
        "body": "Bullet: dodged.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Kinglink",
        "body": "&gt; What the fuck did I do?  \n\nYou dodged the biggest bullet ever. \n\nDude that was exhausting just reading through it. \n\n&gt; He short circuited the interview, 5 minutes spent, no harm done.\n\nThat was the only good thing but he did waste your time at least setting it up.   Still I would appreciate him bringing his own landmine to blow himself up. \n\n\"Oh I'd just know whose a good programmer.\"  I kind of want to know his age, because it sounds like some real 16 year old thinking shit.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Tekitor",
        "body": "That was a nice read, thank you",
        "score": 5,
        "replies": []
      },
      {
        "author": "probablynotmine",
        "body": "Interviewed my fair share of “god-sent” developers, as a tech manager. They are in the end either quite good or meh at the actual job, absolute PITA in a team and for sure the less proactive people I worked with, like “get my meal ready if you want me to start eating” type",
        "score": 5,
        "replies": []
      },
      {
        "author": "larryFish93",
        "body": "My favorite interview, I ask a full stack candidate an open ended question along the lines of “tell me a time you made a technical choice that went wrong, why, and what you’d do differently?”\n\nHe stammered for a bit talking to himself, and then utters “…I’m going to pass.”\n\nInterviewing is broken and is the least genuine part of our jobs. I’m not excusing that asshole of course, but I get the sentiment. You’re just the unfortunate bystander for a guy who is so sour at the prospect of going through 5 interviews along with 10 other candidates only to get rejected in the final.\n\nYour process seems reasonable, especially when compared to the broken state interviewing is in. I wouldn’t lose too much sleep over the whole situation - I’ve worked with plenty of “Adam’s” over the year in consulting, people who have no real world context for making decisions, just the bubble of writing code and damn the consequences. And on top of it all, they believe themselves to be gods gift to man.\n\nLike, great, you can handle a DFS problem from memory and can explain scaled architecture plan for something, but can you have a heated conversation with product without getting reported to HR? Tech skills maxed are pinnacle if you work by yourself…social skills matter when working with others however, especially in this context where a wrong hire can be an albatross to your small team.\n\nGood luck - at least your recognize the brokenness - we had the same conversation and came up with something a bit interactive, we run the code, it’s broken, you pair and help us debug it - it helps us see show you actually think and thought process to run through troubleshooting steps with our stack.",
        "score": 6,
        "replies": [
          {
            "author": "InfiniteMonorail",
            "body": "I hate behavioral interview questions. \"What is your greatest strength? What is your weakness? What are you proud of?\" No normal person asks these questions to a stranger, only sick management fucks. What happened to just, \"tell me about your skills and how they relate to our business\". Why do they have to make it as awkward and inhuman as possible? Everyone is just googling STAR and memorizing fake stories. It's completely broken.\n\nIf asking this is enough to snap someone, then I guess it filters out sane people in a crazy world and a few actual crazies... but it mostly filters for people who lick anus.",
            "score": 14,
            "replies": [
              {
                "author": "Ranra100374",
                "body": "&gt; Why do they have to make it as awkward and inhuman as possible? Everyone is just googling STAR and memorizing fake stories. It's completely broken.\n\nYeah it's stupid because I think it's pretty easy to memorize fake answers. And it's like... sure I _can_ do that but it feels so dang fake.",
                "score": 4,
                "replies": []
              },
              {
                "author": "Paradox",
                "body": "My favorite is \"Why do you want to work for this company?\"\n\nThe truth is \"because I need a paycheck and you're hiring,\" maybe with a bit of \"your segment/company/product/whatever seems interesting\"\n\nBut no we all have to come up with the most contrived stories, that both parties know are bs",
                "score": 4,
                "replies": []
              },
              {
                "author": "larryFish93",
                "body": "I hate it - it’s robotic nonsense. It’s like it was introduced to handhold everyone into a specific structured response, so it’s easy to compare people.\n\nWhich, is a pretty horseshit way to hire someone to a startup — as I say that knowing that we have more behavioral interviews than tech and it grinds my gears.\n\nI guess, if you can’t normally dictate your story in a conversational way but do well with STAR (actually do better, not the self-fulfilling prophecy of STAR interviewers preferring the method since that’s all they’ve ever used), then you should use STAR.\n\nHowever, I don’t think most qualified candidates would struggle - I could be wrong, it’s happened before.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "hippi_ippi",
            "body": "&gt; He stammered for a bit talking to himself, and then utters “…I’m going to pass.”\n\nLol you can't just end there, what happened next? Did you accept that answer or not? (I'm guessing... no?)",
            "score": 2,
            "replies": [
              {
                "author": "larryFish93",
                "body": "I generally will ask questions until I have a feel for yes or no - this happened to be the second question, so I just politely moved on and asked a few other questions (that were at least answered).\n\nNeedless to say, we “passed”",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "tehmungler",
        "body": "What a total asshole. He might be a great coder (though I have my doubts) but he’s an awful human being and thoroughly unemployable.",
        "score": 5,
        "replies": [
          {
            "author": "insanelygreat",
            "body": "Don't hire brilliant assholes. What you gain from their individual contributions is more than cancelled out by the negative impact they have on their team. And that can last after they're gone.\n\nNever hire brilliant assholes. They make you regret it every time.",
            "score": 4,
            "replies": [
              {
                "author": "tehmungler",
                "body": "Absolutely. I’ve hired a lot of programmers over the years, and personality / team fit is more important than technical prowess, frankly.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "ResidentAppointment5",
        "body": "Consider the possibility of literal mental illness.",
        "score": 8,
        "replies": [
          {
            "author": "azhder",
            "body": "Had the thought while reading the written responses.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "cowinabadplace",
        "body": "Mate, that's hilarious. You meet some odd ducks in the biz, especially down here in the city. You know, I've had a couple of fun ones:\n\n1. One guy whose only question about the company / role / anything at all was \"Is there catered lunch?\"\n\n2. Another chap who came up real confident-like, easy talking, then we got into a problem and he whacked at it for 5 min thinking up a reasonable solution to be honest, and then said something like \"You know what, I don't think this is for me\" and talked out of the call.\n\nIn any case, it is what it is, mate. You've got some 4 people on LinkedIn. That means this guy was employee #5? And he doesn't want to talk to literally everyone on the team? Odd duck for sure.\n\nIf I'm being honest, nothing wrong with what you said. Some people take offence to the traditional software interview process because they feel like it betrays a lack of trust in their skill. Others are trying to pull a snow job so you hire them due to bluster.\n\nEither way, man, at your size you can't be doing Google style 5 interviews with a panel. Get those first few out of your network and fast hire, man. If you're sending people you know through a panel, I don't know what to tell you, but I'm pretty sure you're not.",
        "score": 6,
        "replies": [
          {
            "author": "Chun",
            "body": "I hear you about hiring fast -- but I actually think it can be more dangerous hiring the wrong people in a startup than at a big corp, where the relevative impact of a single employee is so much greater.\n\nWe're doing fine though -- good pipeline, and what I think/hope is a great interview process that so far we've had nothing but complements for.",
            "score": 12,
            "replies": [
              {
                "author": "cowinabadplace",
                "body": "Great to hear. Good luck! And indeed you're right about the relative impact. Looking forward to seeing your IPO one day in TC :)",
                "score": 4,
                "replies": []
              },
              {
                "author": "Paradox",
                "body": "I've got mixed opinions on startups hiring fast. I love joining earlier stage startups, and its been my biggest hurdle to growth as an engineer. I've been in many fun companies, that as soon as the money starts getting tight, I was let go. Always assured it wasn't quality of work, but rather budget cuts, but it starts to sag on me.\n\nMost recent one was I joined a friends company, leaving a somewhat posh job for a pay cut at his company. 6 months later, he'd mismanaged funds to the degree he had to terminate about 15% of his workforce, yours truly included. Needless to say I don't really consider him a friend anymore. He lured me away from a good job with emotional manipulation based on our friendship, and couldn't even keep me around for a year, or accelerate my vesting when he laid me off. Paid a pittance in severance too.\n\nWhat I've seen work rather well, if the candidate is open to it, is short term probationary employment. Term of a month, subject to early termination by either party if so desired, or extension into full employment if mutual agreement is had. Brings them into the company, lets them work with the team, actually work with the team, and deliver some real stuff. If it doesn't work out right away, you'll know, and you can end the term early. If it does work, you've now got a new employee without any of the interview dance.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "MJasdf",
        "body": "What the hell..?",
        "score": 2,
        "replies": []
      },
      {
        "author": "zippy72",
        "body": "I wonder what this guy was smoking? If I had to guess, I'd go for lavender bath salts.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Owl_lamington",
        "body": "You dodged a bullet, that is no team player.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Tolexx",
        "body": "Wowwww! What did I just read. \"Adam\" reeks of entitlement and thank God you had that call. You really dodged a big bullet.",
        "score": 2,
        "replies": []
      },
      {
        "author": "edtheshed",
        "body": "lol that guy is a psycho",
        "score": 2,
        "replies": []
      },
      {
        "author": "kur4nes",
        "body": "Why even invite someone who states he is the BEST developer? He had an axe to grind. Was probably looking for an easy way to grab startup money and some equity.",
        "score": 2,
        "replies": []
      },
      {
        "author": "CevicheMixxto",
        "body": "[Here](https://www.reddit.com/r/programming/s/eGM84kUaUn) is that same “best react programmer in SF” asking his follow up question to the interviewer.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Hot-Gazpacho",
        "body": "Dodged a bullet with that one!\n\nYou are far more charitable than this guy deserved.",
        "score": 2,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 2,
        "replies": []
      },
      {
        "author": "buster_bluth",
        "body": "I like your interview process. I interview for a larger corp, so different culture fit, but follow similar principles on the part of the interview I do. I would just consider the vibe check, communication part of the interview. We explicitly look for those qualities alongside technical ones. Some of Adam's first comments should have been a warning. You took them as a joke which is fair, and the interview was your chance to feel out of it was really meant that way. The direction the interview went showed it was not actually a joke. Don't know about your company culture, but I wouldn't want to work with someone with so little self awareness and humility. So just consider it part of the interview. Plenty of brilliant devs out there that are also assholes who will bring toxicity into your team.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Desperate-Ad-5109",
        "body": "Just be at peace with the fact that you dodged a bullet.",
        "score": 2,
        "replies": []
      },
      {
        "author": "fuzzztastic",
        "body": "\"I am the best...\" That's an instant hard pass. Anyone who even jokes like that isn't a fit for my team. I don't want any \"brilliant jerks\" or a\\*\\*holes and I don't want anyone who thinks it's funny to be one. This manager is also someone I don't want to work with knowing that he found that funny.",
        "score": 2,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "I had a variation on this. At the time I was asking people to do a postmortem on their last project. Lessons learned. What would you do different with what you know now?\n\nI must have picked this up from someone else because I remember answering once that the project went very well, I wouldn’t change much, however we did get stuck on this one part of the project because we misunderstood a vague comment in the docs, and I recalled a day when I thought to ask about it and didn’t. Would have saved us about three weeks (and some face) if I had asked questions sooner. \n\nBut this guy didn’t answer like this. What he said was, “Nothing.”\n\n“Nothing? You’d change nothing?” I give my boss the side eye (I’m the lead dev on this project, the boss could sell sand to a Bedouin, I don’t recall why we were interviewing together but I’m sure it made perfect sense at the time. He always did.). \n\nHe doubles down, and I wrap up the interview as fast as possible. \n\nThat’s the dumbest response I’ve ever heard, and I once had a guy explain the architecture of his last project by drawing two squares and repeatedly drawing over the same line between them while he talked. \n\nSome of the dumbest people I know are also the smartest. Without some wisdom, intelligence becomes a liability. Thats what all the mad scientist movies are about.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "BrianScottGregory",
        "body": "I'm not going to say you technically did anything wrong. But Adam hit the nail on the head on what happened by asking a question where it became clear to me on where your two personalities - one a collectively biased one (yours) and one a highly individual one - collided. \n\n***Adam****: This might be a little unconventional, but can we talk about your interview process first*  \n***Daniel****: Sure! So in a nutshell, we’ll do this call today, I’ll get a vibe check...*\n\nWhat you missed was made clear by Adam's first statement about his skills. He wants to be treated special because he thinks he's he best. So when you made him feel not so special by detailing your process when queried and how he's like every other candidate. Can you imagine things from his perspective now?\n\nNow I've spent a lot of time consulting in my career, and with that - managing/leading teams and doing a LOT of hiring. So first. I do think you dodged a bullet here.   \n  \nBut. There's a caveat to this. You also might out on some glaring signs and with that, you might have missed out on a real opportunity. \n\nHere's why:\n\nWhen you asked \n\n***Daniel:*** *Is a small take-home exercise ok?*\n\nAnd he says no. You now have someone you KNOW has an ego, by his preliminary statements, but is unwilling to substantiate it online. Now there's two possibilities - one - he overvalues himself and/or is being deceptive and the ego is a marketing tactic he's using to promote himself. He justifiably values his time so much so that he insists others pay for it. \n\nSo while I suspect you're smart enough to probably consider both possibilities, which is why you remained tone neutral - you have a process that you're following to a T which doesn't take into account how to 'check' raging egos like this. Which to me means - you may very well be missing out on some GREAT candidates because you're too focused on process.   \n  \nThat is. When he responded with the denial of a small at home exercise. You need a surefire way to determine is this guy being deceptive in any way, or is his ego justifiable. Now if you're of the type who doesn't like working with strong personalities or people with inflated egos - then don't change your process. But if you want rock stars on your team......\n\nIt might not be a bad idea to 'shift gears' at times like this entirely and GET that candidate into the office for a face to face interview and set it up in a way that makes it impossible for them to 'cheat' (using internet resources) when asked technical questions. \n\nFor some people in IT, my experience has been - calls just don't work. So just bring 'em in or ask to meet them at a coffee shop by them. Get out of the office. Meet them on their terms if necessary. Buy them a coffee. But be sure to have someone along if you can't ask them technical questions and make sure they don't use their phone.   \n  \nMake it about them. \n\nNow for you. If Adam refuses. Good. To me that would indicate he's toxic. While there could be ANY variety of reasons he's saying no. A no here, now from a candidate like this just tells me we don't have a team player here, or there's deception going on, or who knows - who cares. \n\nIf Adam agrees. THAT is when things can get interesting..... \n\nWho knows. Maybe Adam's ego could have been kept in check through an exception to your process like this and maybe you could have met the greatest Node/React programmer in the bay area, and you seem like you're good enough with people that you'd probably have figured out pretty quickly that Adam's fragile ego needed this. And that's ok. Maybe you missed out on that rock star who may have been emotionally immature, but boy can he code well. \n\nInstead. You got to see the antagonistic side of his personality. Which we all have, ya know?\n\nI think that should be your lesson learned. You asked at the end of your dialog... \n\nWhat did you do wrong?\n\nYou may have missed out on an opportunity. I mean, chances are you didn't. But if you'd made minor variations to your process to accommodate someone with an ego. You could have absolutely know for sure. \n\nI do think you dodged a bullet. But I don't know. Sometimes, you just need to know for sure, ya know?\n\nGood luck on future endeavors!",
        "score": 2,
        "replies": []
      },
      {
        "author": "CurtainDog",
        "body": "I suspect it was the candidate's way of asking how decisions were taken by the company, probably stemming from a frustration with the levels of bureaucracy at their current place of employment. The interview process is a nice bellwether here as if you're on the hiring panel you get to make fairly pricey calls on the basis of very limited information. Now, not only did the original interviewer involve a bunch of peripheral characters in the hiring decision, but they offered to crowdsource the process altogether.\n\n\nAll in all, the candidate does need to grow up and learn to deal with reality in a constructive way, but I also think the interviewer could afford to take a harder \"the buck stops here\" line.",
        "score": 2,
        "replies": []
      },
      {
        "author": "K3TtLek0Rn",
        "body": "That’s insane. It’s almost like he was ready to be upset about your interview process before hearing it and completely tuned out your explanation",
        "score": 2,
        "replies": []
      }
    ]
  },
  {
    "title": "Advanced ZIP files that infinitly expand itself",
    "body": "For my master's thesis, I wrote a generator for zip quines. These a zip's that infinitly contain itself.\n\none.zip -&gt; one.zip -&gt; one.zip -&gt; ...\n\nBy building further on the explanation of Russ Cox in [Zip Files All The Way Down](https://research.swtch.com/zip), I was able to include extra files inside the zip quines.\n\nThis is similar to the [droste.zip](https://alf.nu/ZipQuine) from Erling Ellingsen, who lost the methodology he used to create it. By using the generator, now everyone van create such files.\n\nTo take it even a step further, i looked into the possibility to create a zip file with following structure:\n\none.zip -&gt; two.zip -&gt; one.zip -&gt; ...\n\nThis type of zip file has an infinite loop of two zip's containing each other. As far as I could find, this was never done before. That's why i'm proud to say that i did succeed in creating such as file, which would be a world first. \n\nAs a result, my professor and I decided to publish the used approach in a journal. Now that is done, i can finally share the program with everyone. I thought you guys might like this.",
    "score": 899,
    "url": "",
    "created_utc": 1731520707.0,
    "author": "GunGambler",
    "permalink": "/r/programming/comments/1gqj1vi/advanced_zip_files_that_infinitly_expand_itself/",
    "comments": [
      {
        "author": "Pieterbr",
        "body": "This is an interesting concept. When I was young I may or not may have crashed my universities mail server by sending a mail with a hand crafted zip-attachment.",
        "score": 296,
        "replies": [
          {
            "author": "billie_parker",
            "body": "When I was in high school we had this fun little game which manipulated outlook rules:\n\n* Conspirator 1 creates a rule: when receiving an email from conspirator 2, reply to it, forward it to victim and delete it\n\n* Conspirator 2 creates the exact same rule, in reverse: when receiving an email from conspirator 1, reply to it, forward it to victim and delete it\n\n* Conspirator 1 sends an email to conspirator 2\n\nNow there is an endless loop of emails bouncing back and forth between the two conspirators, each time sending an email to the victim. Suddenly the victim's inbox would get filled with hundreds of thousands of emails and then they'd get locked out of their account for having a full inbox. Funny shit. I don't think we ever got in trouble for this.\n\nAnother fun trick was to download a huge file onto someone's desktop. Then when they log in, they have to download this entire file. So it basically locks them out.",
            "score": 174,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 89,
                "replies": [
                  {
                    "author": "CoroteDeMelancia",
                    "body": "That's so funny. It's like a schizophrenic having a breakdown and causing a shitstorm all over the office because he can't stop arguing with himself",
                    "score": 15,
                    "replies": []
                  }
                ]
              },
              {
                "author": "EverettSucks",
                "body": "I used to work as a messaging lead for this company in Redmond, one day one of our users noticed he was part of a distribution list called \"Bedlam DL3\" and he didn't want to be on the list so he emailed it asking why he was on the list and asking to be taken off of it. The list contained a third of the company (around 15,000-20,000 users). Well, once his email started hitting those other mailboxes, the other users started doing reply alls and asking to be taken off the list as well. To make sure no one mail server was overwhelmed, the list contained users from all our mail servers (it was a test list and was not supposed to even be visible but someone forgot to hide it, oops). Add to it, here came the reply all  messages telling everyone to stop using reply all which only made matters way worse. Within about an hour, 15 million messages were flying around and using up about 200 GB of bandwidth of data bouncing around between the servers which caused them all to crash. It took us days to clean up the mess.",
                "score": 31,
                "replies": [
                  {
                    "author": "billie_parker",
                    "body": "lol, I experienced a similar thing. I used to work at blackberry and I witnessed one of these reply-all disasters. The irony is that blackberry was famous as being the company that brought emails to mobile phones. You'd think that they would know better than anyone.\n\nThe funniest email was a guy that replied to all with something sarcastic and irreverent, insulting the intelligence of the people who replied to all, then ended his email with \"please remove me from this list, thanks.\" The contrast between his smug tone and the fact that he was himself contributing to the problem was so funny.",
                    "score": 6,
                    "replies": []
                  }
                ]
              },
              {
                "author": "marabutt",
                "body": "Like the old email daemons that got into a loop when there were swear words in the subject",
                "score": 18,
                "replies": []
              },
              {
                "author": "757DrDuck",
                "body": "Giving me fond memories of office prank culture that was lost from WFH.",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "shevy-java",
            "body": "Can't you reason that you were ... uhm ... helping to debug the mail server back then? They should have been very grateful for this.",
            "score": 8,
            "replies": [
              {
                "author": "bwainfweeze",
                "body": "I had a friend in college who decided some joke I made at his expense required satisfaction, and he vowed to mail-bomb my inbox as recompense. He even showed me the script he was going to use to do it.\n\nI looked at it. Paused for a moment, and only said, \"You don't want to do that.\" He interpreted this as, \"Please don't do that,\" instead of a statement of fact.\n\nHe ran it. His shell locked up. He logged out, and couldn't log back in. Why? Because he fork-bombed himself by having the script call itself, and hit the ulimit for processes per user, so he couldn't get a new login shell. He had to go talk to the admins to get them to kill his processes and promise not to do that again.\n\nI told him he didn't want to do that.",
                "score": 42,
                "replies": [
                  {
                    "author": "cat_in_the_wall",
                    "body": "I accidentally did this while on a remote session. i wanted to test some limits of i/o or some process thing, so i wrote a stupid program that would clone itself up to N times then actually do work.\n\nwell, my code was bad, obviously, and i fork bombed myself and obviously if you're on a remote session, there isn't much you can do. i had to wait until somebody on the office could forcefully power off the machine to get it back.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "bwainfweeze",
                        "body": "The only guard I know is if you sudo to root in another terminal before you run your code.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Hopeful-Sir-2018",
            "body": "I caused a school to have a panic attack with a `net send` command. Back in the 90's people were gullible. I took advantage of this. No one ever found out it was me. Once I realized the panic I kept my damn mouth **SHUT**.\n\nThat was one of the many things we did. We once managed to get Doom installed, among other games (e.g. Heretic), and convinced the teacher that it helped us understand networking better. She knew fuckall about computers and networking and was basically forced to teach the class.\n\nWe were not good kids. Some of the shit I let happen I still feel bad about. A few kids talked a teacher into letting us watch \"Half Baked\". According to my sister, who had the same teacher next year, she was a **BITCH**. I feel like we were responsible for that. I mean as the lone geek, I wasn't about to say \"hey, uhh.... that movies has a titty pop out among other things\".",
            "score": 9,
            "replies": [
              {
                "author": "SkoomaDentist",
                "body": "Ah, the good old days. Back in the early 90s when I was in junior high, I wrote a very simple virus that would keep infecting .com files on the same computer. It was harmless but printed a few choice opinions about specific teachers on startup. We installed it on all the computers in the computer classrooms at the end of the last school day when we graduated from junior high.",
                "score": 2,
                "replies": []
              },
              {
                "author": "matthieum",
                "body": "&gt; hey, uhh.... that movies has a titty pop out among other things\". \n\nMeanwhile, in France, during the Summer families (small kids &amp; all) would watch reruns of \"La 7eme Compagnie\" and \"Les Gendarmes de St. Tropez\" -- all movies with De Funes which are somehow rerun _every_ Summer. If you've never seen [\"Les Gendarmes de St. Tropez\"](https://fr.wikipedia.org/wiki/Le_Gendarme_de_Saint-Tropez), it involves the titular gendarmes trying (and failing) to chase off the nudists who keep showing up on the less frequented beaches of St. Tropez.\n\nPerfect family movie as far as the French are concerned -- it's funny, and there's little violence -- so every Summer it gets prime time on national TV.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "GunGambler",
            "body": "Ohh interesting! What kind of zip did you create? Was it something similar?",
            "score": 5,
            "replies": [
              {
                "author": "Pieterbr",
                "body": "It was a zip with multiple files of a gigabyte compressed way down. The mailserver scanned contents of zips for malware and couldn’t handle the uncompressed filesize.",
                "score": 8,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "SweetBabyAlaska",
        "body": "I tried this out and I was surprised to see that even the Linux unzip utility detected overlapping contents and refused to decompress any further without using UNZIP\\_DISABLE\\_ZIPBOMB\\_DETECTION=TRUE environmnent variable",
        "score": 111,
        "replies": [
          {
            "author": "GunGambler",
            "body": "Interesting, during my thesis I always tested with unzip/7z on Linux and Windows explorer. What i noticed was that Windows requires the CRC values to be correct. Unzip and 7z don't require it, but do give a warning. Never had to set this environment variable as far as I remember. 7z on Windows just refused because they don't read the headers fully of a zip file.\n\nDo you have some more insight into what type of terminal you are using and what Linux distro?",
            "score": 30,
            "replies": [
              {
                "author": "SweetBabyAlaska",
                "body": "I'm running EndeavourOS (functionally 1:1 to Arch Linux) using version 6.0-21 of unzip from [https://infozip.sourceforge.net/UnZip.html](https://infozip.sourceforge.net/UnZip.html) I ran the jar file without --loop and compressed an image file. It exits with exit code 2 and I get this error on the first layer:\n\n    Archive:  quine. zip\n      inflating: quine/profile.jpg       \n      inflating: quine/quine.zip          bad CRC f0647fa5  (should be 745b1a97)\n\n2nd layer deep:\n\n    Archive:  quine.zip error [quine.zip]:  missing 2 bytes in zipfile (attempting \n    to process anyway) error:\n    \n    invalid zip file with overlapped components (possible zip bomb) To unzip the file anyway, rerun the command with UNZIP_DISABLE_ZIPBOMB_DETECTION=TRUE environmnent variable",
                "score": 9,
                "replies": [
                  {
                    "author": "GunGambler",
                    "body": "Can you send me the file you are adding and the exact command you run? You did let it process the CRC calculation since I see the CRC is not 0, so i'm wondering what went wrong. Sometimes it is hard to find bugs/debug this since each file gets compressed to different bytes, so there will still be bugs in it",
                    "score": 10,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Practical_Cell_8302",
        "body": "Interesting read, i wonder have you tried to scan them with antivirus? Could it potentially crash sonething? Do you have some use cases?",
        "score": 39,
        "replies": [
          {
            "author": "edman007",
            "body": "Nah, all the virus scanning stuff has limits how deep, precisely because people have learned to hide behind this stuff.\n\nModern virus scanners will only scan 1 (or a few) levels deep, and only a certain amount of bytes decompressed. So a modern scanner would decompress this a bit and just give up.\n\nOf course that means that some files are unscannable, so they have special rules (which may range from just adding a warning that the file was not virus scanned, all the way to treating it as malicious and deleting it)",
            "score": 53,
            "replies": []
          },
          {
            "author": "bwainfweeze",
            "body": "If you go back ten years you had virus scanners that would give up after 1,2 levels of nesting and report good instead of suspish, and not long after you had DDOSes against them due to compression ratios of over 99.9% - a couple packets turning into gigabytes of memory.\n\nThat's table stakes now.",
            "score": 17,
            "replies": []
          }
        ]
      },
      {
        "author": "creativemind11",
        "body": "At work a test didn't really work out and basically became recursive. We didnt notice until after a few hours something was going wrong with our dev server. \n\nStorage space kept becoming more and more limited. We found the giga-folder which was actually too big to delete, the path was too long and would crash Explorer.\n\nOnly after running a specific command for an hour it was fixed.",
        "score": 19,
        "replies": [
          {
            "author": "QuerulousPanda",
            "body": "I've found that 7zip file manager is really good at dealing with files and folders with strange issues, like once i had a file with a space as the first character in the filename and 7z file manager was one of the few tools that would actually let me modify or delete it",
            "score": 15,
            "replies": []
          },
          {
            "author": "bwainfweeze",
            "body": "If I had it to do over again I would have taken out some of the disk space alerts on my last project and replaced them with delta checks. &gt; X per hour, &gt; Y per day, &gt; Z per minute",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Inoffensive_Account",
        "body": "ZIP bombs rediscovered.",
        "score": 212,
        "replies": [
          {
            "author": "hinckley",
            "body": "Zip bombs were just files that decompressed massively beyond the decompressed size given in the zip file's metadata. That's very different from what's being described here.",
            "score": 137,
            "replies": [
              {
                "author": "AyrA_ch",
                "body": "Zip bombs don't actually lie in their metadata. [Years ago when I created one myself](https://github.com/AyrA/ZipBomb) which is probably the largest one to this day I used 7-zip to do it without any file editing trickery. Just a bunch of batch files that recursively compress 16 identical files into one, then use the result as the next 16 bytes.",
                "score": 25,
                "replies": []
              },
              {
                "author": "masklinn",
                "body": "&gt; Zip bombs were just files that decompressed massively beyond the decompressed size given in the zip file's metadata. \n\nNo. A zip bomb is a file small enough to sling but requiring extreme amounts of space or time to decompress. Metadata lies are entirely optional and only serves to disguise the issue (poorly). \n\n&gt; That's very different from what's being described here.\n\nAlso no, zip quines [are quite old](https://research.swtch.com/zip) and they are [very much zip bombs](https://www.bamsoftware.com/hacks/zipbomb/).",
                "score": 23,
                "replies": []
              }
            ]
          },
          {
            "author": "MaygeKyatt",
            "body": "This is very different from a zip bomb.",
            "score": 76,
            "replies": [
              {
                "author": "PCRefurbrAbq",
                "body": "Zip [detcord](https://en.wikipedia.org/wiki/Detonating_cord)?",
                "score": 11,
                "replies": []
              },
              {
                "author": "Synaps4",
                "body": "This is a zip-nuclear-warhead",
                "score": 3,
                "replies": []
              },
              {
                "author": "fubes2000",
                "body": "Zip Black Hole",
                "score": 1,
                "replies": []
              },
              {
                "author": "shevy-java",
                "body": "Could it be a zip grenade?",
                "score": 0,
                "replies": []
              }
            ]
          },
          {
            "author": "GunGambler",
            "body": "If you want to learn more about it. [Here](https://www.mdpi.com/2076-3417/14/21/9797) is the paper going in more depth. I also added some [examples](https://github.com/ruvmello/zip-quine-generator/tree/master/examples) to the repo.",
            "score": 38,
            "replies": []
          }
        ]
      },
      {
        "author": "mrvis",
        "body": "Quines! GEB!",
        "score": 14,
        "replies": []
      },
      {
        "author": "0x564A00",
        "body": "Oh wow that's a lot to unpack",
        "score": 6,
        "replies": []
      },
      {
        "author": "HagedornSux",
        "body": "The Matryoshka doll zip",
        "score": 10,
        "replies": []
      },
      {
        "author": "Ok_Negotiation8285",
        "body": "Great work op. Good read and concept!",
        "score": 3,
        "replies": []
      },
      {
        "author": "whosGOTtheHERB",
        "body": "Ah yes, college code can be some of the cleanest code out there. Nice and neat with great documentation 😂.\n\nWell done OP on your discovery!",
        "score": 3,
        "replies": []
      },
      {
        "author": "Azuvector",
        "body": "Old thesis? These have been around for decades.",
        "score": 2,
        "replies": []
      },
      {
        "author": "tweiss84",
        "body": "So my first and quick initial thought was of an `xml bomb`, like the `\"billion laughs\"`  \nor the bash logic bomb `:(){ :|:&amp; };:`  &lt;- don't run this.\n\nThen noticing you got a ouroboros thing going on.\n\nThe accompanying article makes this a bit more interesting and easier to follow. Thank you for sharing u/GunGambler, very cool.",
        "score": 2,
        "replies": []
      },
      {
        "author": "shevy-java",
        "body": "ZIP up to Infinity!\n\n(Ruby also reached Infinity, but in a confusing manner: https://bugs.ruby-lang.org/issues/20811)",
        "score": 2,
        "replies": []
      },
      {
        "author": "Sese_Mueller",
        "body": "Very interesting! But quite destructive, was it tested whether some antivirus can detect and block it?",
        "score": 2,
        "replies": []
      },
      {
        "author": "pwillia7",
        "body": "Cool!",
        "score": 1,
        "replies": []
      },
      {
        "author": "zxn0",
        "body": "the  Ouroboros.zip didn't work with macOS Archive Utility. It says \n\n&gt; Error 79 - Inappropriate file type or format.\n\nAlso tried eZip, didn't work either.\n\nTried the `unzip` command, it did work.",
        "score": 1,
        "replies": [
          {
            "author": "GunGambler",
            "body": "I don't have a MacBook. I mostly tested with unzip, 7z and Windows explorer and tried to follow the zip RFC. Thanks for sharing the eZip one though, will try it out and see why it fails. Maybe I can fix it.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "backflipbail",
        "body": "Love the Red Dwarf reference!",
        "score": 1,
        "replies": []
      },
      {
        "author": "jonr",
        "body": "I put zip bomb as a /wp-admin/.env file. I have no idea if somebody falls for it.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Gwaptiva",
        "body": "Reading the title of this thread, it's about a computer virus; one that eats disk space",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "I might have one almost better for you mate: https://github.com/AzorianSolutions/passive-aggressor",
        "score": 1,
        "replies": []
      },
      {
        "author": "AlexHimself",
        "body": "**WHY?**\n\nI see what you did, what it does, etc...but why??",
        "score": 0,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "Quines are a data analysis problem, but this file would also be an excellent tool to use as a test fixture for a virus scanner, for instance.\n\nYears ago I worked on a project that validated zip files. The guy I replaced checked a 1G zip file into version control, which is just hard on svn and git, especially when running it on a small server. Plus what I really needed was to make sure we didn't blow up at 2^31 + 1.\n\nIt did not take me long to come up with a 2GB zip file that compressed down to something like 50 or 80k, which was not a big deal to put into the test data. For obvious reasons I didn't use that file to test accurate extraction. But that sort of compression ratio does uncompress pretty fast.",
            "score": 15,
            "replies": []
          }
        ]
      },
      {
        "author": "dlg",
        "body": "&gt; To take it even a step further, i looked into the possibility to create a zip file with following structure:\n&gt; one.zip -&gt; two.zip -&gt; one.zip -&gt; ...\n\nIt’s Conway’s Game of Zip",
        "score": 1,
        "replies": []
      },
      {
        "author": "G0muk",
        "body": "Tt5",
        "score": 0,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": -6,
        "replies": [
          {
            "author": "caks",
            "body": "Literally the first link OP dropped",
            "score": 11,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "a master's thesis on that?!",
        "score": -13,
        "replies": [
          {
            "author": "WeNeedYouBuddyGetUp",
            "body": "This is extremely impressive for a master’s thesis, most master’s thesises are bad and have no scientific value at all",
            "score": 14,
            "replies": []
          }
        ]
      }
    ]
  },
  {
    "title": "There should never be coding exercises in technical interviews. It favors people who have time to do them. Disfavors people with FT jobs and families.",
    "body": "",
    "score": 897,
    "url": "",
    "created_utc": 1721333842.0,
    "author": "pinkpen44a",
    "permalink": "/r/programming/comments/1e6l0ax/there_should_never_be_coding_exercises_in/",
    "comments": [
      {
        "author": "Thiht",
        "body": "When you end up on the recruiting side, you understand why coding exercises are so common. Some people can’t write code for shit and sell themselves as senior developers or architects or whatever.\n\nAt my current job the code exercise is basically writing a small API respecting good coding practice, and an endpoint requires doing a DB transaction, and there’s no time limit. I’ve not seen a single good answer to this exercise. 90% of the applicants submit an exercise that doesn’t work (ie we call the API endpoint and it doesn’t do what the specs asked)",
        "score": 1285,
        "replies": [
          {
            "author": "AnonymousMonkey54",
            "body": "At a previous company I worked at, we had the candidate call an API (given the documentation) and run some light processing on the returned data (unlimited time and google is allowed). Until the tech layoffs started happening, all of the candidates were failing at it hard despite being seniors on paper. Once the layoffs started happening, we finally started getting people who could pass and hired someone pretty quickly.",
            "score": 421,
            "replies": [
              {
                "author": "[deleted]",
                "body": "That’s 90% of what web developers do nowadays. Call and api, massage the data, then send it somewhere.",
                "score": 85,
                "replies": [
                  {
                    "author": "twigboy",
                    "body": "Web development? APIs.\n\nDesktop development? APIs.\n\nMobile development? APIs.\n\nEmbedded development? Pain... And also APIs",
                    "score": 41,
                    "replies": [
                      {
                        "author": "rulnav",
                        "body": "&gt;Embedded development? Pain... And also ~~APIs~~ Datasheets\n\nWhich isn't too different from API and specifically API documentation conceptually. Tells you how to use a thing.",
                        "score": 9,
                        "replies": [
                          {
                            "author": "PandaMoniumHUN",
                            "body": "Write to this memory mapped region and spend the rest of the day wondering why shit isn't working.",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Mrqueue",
                        "body": "It’s must be some kind of programming interface",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Wang_Fister",
                    "body": "Hell that's 90% of developers, period.",
                    "score": 99,
                    "replies": [
                      {
                        "author": "WillCode4Cats",
                        "body": "It's api's all the way down",
                        "score": 21,
                        "replies": []
                      },
                      {
                        "author": "raskinimiugovor",
                        "body": "C.R.U.D. LIFE",
                        "score": 14,
                        "replies": [
                          {
                            "author": "Wang_Fister",
                            "body": "Cash Rules Underworked Developers, dolla dolla bill y'all",
                            "score": 9,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "ctorstens",
                "body": "I love those interviews. I find them fun puzzles where I get to ponder my craft. Leet codes are designed for recent college grads. ",
                "score": 262,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 109,
                    "replies": [
                      {
                        "author": "marabutt",
                        "body": "Programming is only a small branch of computer science. Data structures and algorithms are a smaller branch of programming. Leetcode doesn't really test the ability to work on an actual app.\n\n If you're an average crud developer like most developers, knowing how to write code others can read is the most important skill. You don't really learn this in many undergrad computer science courses. \n\nFor the data structures and algorithms knowledge is only useful to the extent of knowing what the structures are, when to use them and fixing memory and CPU bottlenecks.",
                        "score": 163,
                        "replies": [
                          {
                            "author": "ctorstens",
                            "body": "Leetcode tests your ability to do leetcode. \n\nIn practice coming up with a solution to one of them on the fly should be weighted higher than those that have just memorized them. But alas, they expect you to know the answer, not figure it out. ",
                            "score": 62,
                            "replies": []
                          },
                          {
                            "author": "time-lord",
                            "body": "I got a leetcode question on matrix multiplication. I probably haven't touched matrix math in 20 years. It happens sometimes, you just need to roll with the punches somewhat.",
                            "score": 33,
                            "replies": [
                              {
                                "author": "marabutt",
                                "body": "I reckon if it wasn't relevant to the job I'd tell em to ram their eigen vector up their void matrix.",
                                "score": 20,
                                "replies": [
                                  {
                                    "author": "Headpuncher",
                                    "body": "Relevant to the job? Let me tell you a story based on true events: \n\nReact job; senior React dev asks a whole bunch of questions in the interview. I get the impression this is one of those lists got from the web, not his own work. \n\nOne interviewer steps out to take a phone call (unprofessional, this was the 3rd time in 2 1-hour interviews). \n\nSo I ask the guy if he could answer all these questions and he admits he couldn't. \n\nSo, he's asking me after his 5+ years in the job leading a team about stuff that never came up in the last 5 years. Uh, ok.   \nAnd I'd told them in the first 1 hour interview I didn't know React (this was like \\~6 years ago). So why are we testing my react knowledge on things you don't know or use on your product with a candidate that is clear about not knowing the answers?  \n\nSome people, man.",
                                    "score": 12,
                                    "replies": []
                                  },
                                  {
                                    "author": "ImNotAWhaleBiologist",
                                    "body": "I’m sorry, but I don’t think you have the same eigenvalues as this company.",
                                    "score": 10,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "tide19",
                                "body": "Lol, if I got matrix multiplication, I'd be furious. I've been a software engineer for a decade and a half almost, and have been a senior engineer for 4 separate companies now, and have not once had the occasion to implement anything involving matrix multiplication since college.",
                                "score": 51,
                                "replies": [
                                  {
                                    "author": "rm-minus-r",
                                    "body": "It's frustrating - coding in interviews I've had has basically never resembled actual on the job coding I've done.\n\nEither it's some \"gotcha\" where it's only solvable in time if you happen to know the specific technique, or it's a scenario that has absolutely nothing to do with the sort of code you'd write in the role.\n\nIn two interviews over the last eight years, I received programming problems that were identical to the sort of programming that would be done on the job. \n\nI've gone through about sixty to sixty five interviews in those eight years across five jobs. So those were incredibly rare.",
                                    "score": 21,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "WillCode4Cats",
                                "body": "Dude, you over thought the problem. Matrix multiplication implies its one matrix times another, which would be *The Matrix: Reloaded*",
                                "score": 8,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "creepy_doll",
                        "body": "I do have some mixed feelings about this. Like, I just picked up golang for a project at work and was a bit surprised that the stdlibs didn’t include a variety of collections like java. List is actually a doubly linked list, you can’t just get an array backed list(they want you to use slices for that) and things like sorted maps aren’t a thing. Of course there are libs for these but I would rather implement them myself than go over some other implementation before using it.\n\nApparently these structs just aren’t considered important enough now, but is that indicative of the users not being aware of where they can be useful?",
                        "score": 10,
                        "replies": []
                      },
                      {
                        "author": "Greenawayer",
                        "body": "&gt;leetcode is designed to suss out people that actually know computer science vs codemonkey\n\nleetcode is for people who like such silly puzzles.\n\nIt can be worked out around by memorising some basic rules and recognising patterns.\n\nIt has no place in assessing a candidates true on-the-job skills.\n\nAny company that relies on it in recruitment is a place I don't want to work at. It shows me that company not only has problems with their recruitment pipeline, they also don't think much about what they are doing.",
                        "score": 16,
                        "replies": []
                      },
                      {
                        "author": "eJaguar",
                        "body": "oh yes being able to optimally fit   n variant length palindromes into ur butthole with minimal time complexity, only a really computer scientist would know how to do that \n\nhow about this Mr science Man. start from the transistor, and end with the phenomena which I perfeive as said program outputting on my screen \n\nDon't skip any stels now or i will personally send stallman to live with you",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "adgjl12",
                "body": "Meanwhile I’m getting ghosted from several take homes despite fulfilling specs and extras like testing and dockerizing.",
                "score": 19,
                "replies": []
              },
              {
                "author": "creepy_doll",
                "body": "Steve yegge wrote a great blog on this and the idea of “we hire the top 1%”\n\nThe reality is there’s this pool of terrible programmers who are the majority of the job seekers. They apply to tens or hundreds of positions. Good devs rarely are on the open market(generally once at the start of the career, and sometimes when switching jobs, but they often just switch through word of mouth), so that 1% really is really not some super elite it’s just the devs that are actually fine",
                "score": 36,
                "replies": [
                  {
                    "author": "vytah",
                    "body": "I only found one by Spolsky: https://www.joelonsoftware.com/2005/01/27/news-58/",
                    "score": 6,
                    "replies": [
                      {
                        "author": "quanticle",
                        "body": "Dan Luu has a [great counterpoint](https://danluu.com/hiring-lemons/) to that Spolsky article, where he points out that our lived experience should tell us that a developer's current company is often *worse* at valuing him or her than a prospective employer that he or she is interviewing at. \n\n&gt; Just for example, there's someone I've worked with, let's call him Bob, who's saved two different projects by doing the grunt work necessary to keep the project from totally imploding. The projects were both declared successes, promotions went out, they did a big PR blitz which involves seeding articles in all the usual suspects; Wired, Fortune, and so on and so forth. That's worked out great for the people who are good at taking credit for things, but it hasn't worked out so well for Bob. In fact, someone else I've worked with recently mentioned to me that management keeps asking him why Bob takes so long to do simple tasks. The answer is that Bob's busy making sure the services he works on don't have global outages when they launch, but that's not the kind of thing you get credit for in Bob's org. The result of that is that Bob has a network who knows that he's great, which makes it easy for him to get a job anywhere else at market rate. But his management chain has no idea, and based on what I've seen of offers today, they're paying him about half what he could make elsewhere. There's no shortage of cases where information transfer inside a company is so poor that external management has a better view of someone's productivity than internal management. I have one particular example in mind, but if I just think of the Bob archetype, off the top of my head, I know of four people who are currently in similar situations. It helps that I currently work at a company that's notorious for being dysfunctional in this exact way, but this happens everywhere. When I worked at a small company, we regularly hired great engineers from big companies that were too clueless to know what kind of talent they had.",
                        "score": 11,
                        "replies": [
                          {
                            "author": "creepy_doll",
                            "body": "Seems very tangential to me as I entirely agree with this but it’s not really related to the “forever on the market devs”. \n\nBut yes devs that deal with self made crises in a spectacular manner often get a lot more props than the ones that just don’t cause crises in the first place :/",
                            "score": 5,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "FWitU",
                "body": "This. Every person who complains about these is someone I don’t want to work with.",
                "score": 13,
                "replies": []
              }
            ]
          },
          {
            "author": "puterTDI",
            "body": "Ours are simple.  We have several small ones.  One example is “here’s an array of strings, return it in reverse order”.  We get candidates that can’t do that.",
            "score": 37,
            "replies": [
              {
                "author": "Echleon",
                "body": "I got a candidate that had to cheat to solve “return true if any elements in an array are duplicates” lol",
                "score": 19,
                "replies": []
              }
            ]
          },
          {
            "author": "MUDrummer",
            "body": "I can’t even count the number of interviews that have ended with me or the other interviewer messaging the other with something along the lines of “this person can’t even write a for loop with the help of google”",
            "score": 20,
            "replies": [
              {
                "author": "fragglerock",
                "body": "You write 'for' then press Tab twice! \n\nEz when do I start?",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "fordat1",
            "body": "In Data Science people complain about coding exercises and they are at an even lower level (think using a hash map vs an array).",
            "score": 58,
            "replies": [
              {
                "author": "BoredGuy2007",
                "body": "I have yet to meet a data scientist who was capable of writing half decent code",
                "score": 80,
                "replies": []
              }
            ]
          },
          {
            "author": "stumblinbear",
            "body": "I had to start running interviews and completely understand the necessity of coding exercises. That said, ChatGPT has royalty fucked up the common exercises you can have people do.\n\nI ended up needing to write a really contrived exercise that no LLM could reasonably solve, and would never happen in the real world. But hey, no LLM can solve it and it requires an intermediate understanding of how the framework works, so it's good enough to move on to a conceptual technical interview",
            "score": 57,
            "replies": []
          },
          {
            "author": "Ecthyr",
            "body": "My current job’s process was very similar. I had to get tests to pass by implementing a few CRUD endpoints following basic REST standards. No leetcode. I think it was quite fair.",
            "score": 7,
            "replies": [
              {
                "author": "All_Up_Ons",
                "body": "Did they provide a working framework, or did you just have to fudge the HTTP stuff?",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Bakoro",
            "body": "&gt;I’ve not seen a single good answer to this exercise.   \n   \nIf everywhere you go stinks, check your own shoes.  \n   \nIt's hard to believe that you've never seen a good answer.   \nWhat's more likely is that either the prompt is poorly communicated and you can't understand the deficiencies of the prompt from other people's perspective, or you're convinced that how you do things is the absolute best and everything else that isn't your way is bad. Or, maybe you're offering 60% of what you should be offering, and it's only bottom of the barrel people who are shooting their shot.",
            "score": 23,
            "replies": []
          },
          {
            "author": "wvenable",
            "body": "In technical interviews, I don't give any coding exercises.  I do get people who can't write code for shit.  But I've always been very successful and asking right the questions to determine someone's qualifications.\n\nI'm not really against this kind of coding assignment but you're automatically filtering out people too good to bother.",
            "score": 51,
            "replies": [
              {
                "author": "Juvenall",
                "body": "I fully support this. While I'm still a fan a coding test at the junior level (with a pair programming session based on their sample to see if they understand it or even wrote it themselves), I've been more successful with more experienced engineers with good conversations around structure, architecture, design patterns, and other real-world topics.",
                "score": 22,
                "replies": [
                  {
                    "author": "Polantaris",
                    "body": "&gt; I've been more successful with more experienced engineers with good conversations around structure, architecture, design patterns, and other real-world topics.\n\nMy best hires have been people that you have a conversation with and only really have a side of questions. In that, the questions spark technical conversations and it almost gets to a point where the questions are forgotten in the interest in drilling into the discussion further.\n\nObviously you have to put some considerable effort into staying on point, but when you can get into a good programming debate with a candidate, especially one about practicality and other nitty gritty things like that (things that experience forms opinions on and you can argue your point with that experience to back it up), they almost always end up being a good choice to onboard.\n\nPeople act like passing a coding test means that the person is a good choice but the reality is I've met just as many people that can write stellar code but can't understand practical uses and will fight you to the death over nanoseconds of time gain in something that will gain no tangible benefit for that optimization. Alternatively, they cannot grasp business knowledge in any capacity and must have everything spelled out for them, which, quite frankly, is more detrimental than helpful. In a coding test, you *need* to spell out things to them, but for the real job it's not so simple, and as a result coding tests do not give you any insight into this.",
                    "score": 16,
                    "replies": []
                  },
                  {
                    "author": "wvenable",
                    "body": "I said in another (downvoted) comment that I find it pretty easy to determine someone's capabilities just by having that conversation and asking the right questions.  There is an art to asking a question that seems straight forward but a good answer will indicate a depth of knowledge.\n\nOne of my favourite questions to ask is just: \"What do you do to ensure that a code-base can be easily understand and worked on by other team members?\" The naive answer is *always* \"write documentation\" or \"write comments\".  Someone who actually has experience will give a much broader and more detailed answer to that.  One person I hired actually started with \"Nobody reads documentation so I would do this...\"\n\nEven asking what they like and don't like about the programming languages and tools listed on their resume can be very enlightening.",
                    "score": 29,
                    "replies": [
                      {
                        "author": "tistalone",
                        "body": "I ask about their experiences and very directly ask what were the things that went wrong and how they managed those issues. People often prep to talk big but the really valuable experience is derived from failures: you can expect they won't make those mistakes again.",
                        "score": 9,
                        "replies": [
                          {
                            "author": "Polantaris",
                            "body": "Asking about their most memorable bug tends to get some insightful answers. Anyone working in the industry a long time will have some crazy answers to that question, because the craziest bugs are also the most memorable.",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "EvaUnitO2",
                        "body": "Well said. I think the folks giving interviews which are looking for answers to coding riddles are just not experienced enough to grok when someone knows what they're talking about. They want to grade an achievement test because an achievement test gives an unambiguous score.\n\nThe problem, of course, is like any achievement test, they just don't work. People \"study to the test\" and get real good at interviewing for these tests but are bad engineers on the whole. This, in turn, has instigated a coding test arms race where interviewers give logic puzzle-style coding tests which are so far removed from the reality of the position being hired for, you have to wonder what information the test is even telling the hiring company at that point.\n\nI've interviewed for places in the past where I'm pretty sure by their coding tests, the candidate they're looking for is a Rubik's Cube champion, not a software engineer.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "cthulol",
            "body": "&gt; I’ve not seen a single good answer to this exercise\n\n\nHonestly, how? What do people get hung up on?",
            "score": 16,
            "replies": [
              {
                "author": "sweaverD",
                "body": "Because it's a bullshit question most likely",
                "score": 9,
                "replies": [
                  {
                    "author": "cthulol",
                    "body": "Yeah TBH it was a leading question.\n\n\nThere's no way a small API with a db transaction at the backend has literally never seen a good answer unless it's not actually a good question or the company's metrics for a good answer is whack.",
                    "score": 16,
                    "replies": [
                      {
                        "author": "amardas",
                        "body": "Even so, I produce code by:\n\n1. Write what I think is supposed to work\n2. Make it work\n3. Test it\n4. Make it work correctly\n\nI can't do that on a white board. I can't do that without a complete working environment. Especially, if it needs to touch various application layers, like the database. If I can't test it against an environment that is similar to the production environment, I can't make it work correctly. And, that is my professional guarantee.",
                        "score": 12,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "hiddencamel",
            "body": "We have a frontend test that includes some really basic styling with some design flats provided. I am constantly baffled by how many people just don't bother to match the design at all.",
            "score": 4,
            "replies": []
          },
          {
            "author": "I_AM_FERROUS_MAN",
            "body": "Many people can't code for shit in an interview environment, but are excellent in a job. And there are way more people than companies estimate.",
            "score": 37,
            "replies": [
              {
                "author": "Kalium",
                "body": "The problem is telling them apart from the people who talk a good game but can't do the job. I've run into enough of those that there's quite a few out there.",
                "score": 65,
                "replies": [
                  {
                    "author": "MisinformedGenius",
                    "body": "Yup. I keep hearing about all these people who crumble under the pressure of standing at a whiteboard but are apparently dynamite when there’s some massive company-endangering problem that has to be fixed immediately, and it’s like, I’m sure there’s someone somewhere out there like that but I don’t know that I’m willing to roll those dice.",
                    "score": 18,
                    "replies": [
                      {
                        "author": "Nefari0uss",
                        "body": "That's me in a nutshell. I'm terrible at interviews and being put on the spot like that but I've also been pulled into plenty of P1s and been able to diagnose and solve it. 🤷🏾‍♂️\n\nMy view is that leet code is absolutely useless. You memorize patterns for a question and then have a general idea of a solution that you have to pretend that you came up with on the fly but you have to start with a naieve implemention and in 15-30 minutes, find the optimal solution.\n\nIt's not the same as being familiar with some part of the application you're working with and having some idea of a complex code base, walking through it and finding out what's going on. If you've got a coworker with you, they're not pretending to be working with you but actually grading you - your coworker is working along side you and you both have the same goal in mind.\n\nIt's two completely different scenarios.",
                        "score": 13,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "zerothehero0",
                "body": "I appreciate that one guy at works answer to this was to have a debugging challenge instead. Give the interviewee a piece of broken code we fixed recently along with the bug report and see if they can spot and fix the error. Somehow supposed to be less stressful to do in 30 minutes.",
                "score": 17,
                "replies": [
                  {
                    "author": "Nefari0uss",
                    "body": "I would much rather have this than a leet code question.",
                    "score": 8,
                    "replies": []
                  },
                  {
                    "author": "1138311",
                    "body": "There's two questions we're looking to answer: Can you code? How well can you code?\n\n\nTo answer the \"Can you Code?\" question, we do a \"find the bugs\" style exercise. \"Here's a piece of real working code and we've injected common bugs into it, please find them and correct them\".  \n\nThere's 10 that are intentionally injected with differing levels of difficulty in discovery and remediation. Some are reeeealy tricky to spot unless you've been around the block a couple times - we don't expect juniors to find more than 6 of them and it's rare we get someone who finds all of them. A couple people have found 11 or 12 and taught us some things. \n\nThe approach the candidate takes in their solutions makes good fodder for the \"How well can you code?\" discussion.",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "dethswatch",
                "body": "if you spend every day coding and can't give me a for-loop and some minor logic, then you're not ready",
                "score": 25,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "voidox",
                "body": "&gt; Many people can't code for shit in an interview environment, but are excellent in a job.\n\nya, ppl need to not forget this part of the interview environment - the stress, anxiety, pressure, etc. can all easily hamper someone who might otherwise be able to do the job.",
                "score": 13,
                "replies": [
                  {
                    "author": "ltdanimal",
                    "body": "Yeah but what is an alternative? People despise take home assignments as well (See the topic of this post). At some point there needs to be a fair evaluation of skill.\n\nAt one job we gave people the choice of a take home or coding problem. We aren't trying to \"gotcha\" but honestly you want to be at a place that makes sure your colleague isn't just blowing smoke.",
                    "score": 14,
                    "replies": []
                  },
                  {
                    "author": "CharacterCamel7414",
                    "body": "I have a few real forehead slappers in interviews. Utterly embarrassing where I just went blank and n a really basic thing.\n\nSimilar to forgetting your lines for a bit in a play. . . Though it’s easier to cover up on the fly if you forgot a few  lines.",
                    "score": 8,
                    "replies": []
                  },
                  {
                    "author": "Echleon",
                    "body": "But that’s true of any aspect of an interview. If you interview for a public facing role and you’re too shy during an interview? You’ll also probably get rejected.",
                    "score": 4,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "JarredMack",
            "body": "&gt;  I’ve not seen a single good answer to this exercise.\n\nThat's because most of the people that can do it probably just move on and don't bother wasting their time. You're literally filtering for the opposite of what you're after",
            "score": 5,
            "replies": []
          },
          {
            "author": "markoNako",
            "body": "May I ask what kind of wrong implementations were provided? Poor exceptions handling, updating database, not applying clean code principles( like huge methods or tight coupling between classes), something with http protocols or maybe something else?",
            "score": 3,
            "replies": []
          },
          {
            "author": "Lanzy1988",
            "body": "I totally get that. At least you get unlimited time. My problem is that I get anxiety when I have to write an exam or being tested on the spot with someone looking over my shoulder. I would most likely fail because my brain shuts down my logical thinking when in fight or flight mode. But if I am able to just work on the task at home alone with no pressure I have no problem.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Headpuncher",
            "body": "90% failure rate? Maybe the problem lies elsewhere?",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "Lame_Johnny",
        "body": "This article has been written every 6 months for the last 20 years",
        "score": 48,
        "replies": [
          {
            "author": "Rockfest2112",
            "body": "Reddit overall is loaded with this now. Starting to wonder if bots are doing all this repetitious reposting…last year esp last 6 months it’s ridiculous",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "OrchidLeader",
        "body": "The better alternative is giving them some code to review. \n  \nYou get a better sense of their ability to read code, their code quality standards, their ability to deliver critical feedback, etc, all without a lot of the baggage of trying to write code (either on a whiteboard from scratch or at home).",
        "score": 416,
        "replies": [
          {
            "author": "ninja-dragon",
            "body": "this actually makes sense. especially for senior roles. I’ll definitely pass it along in my company.",
            "score": 134,
            "replies": [
              {
                "author": "Korlus",
                "body": "For what it's worth, reading and deeply understanding code is generally *harder* at a high level.",
                "score": 19,
                "replies": [
                  {
                    "author": "Mirrormn",
                    "body": "Yeah, I would definitely prefer to write my own code during an interview than to have to interpret someone else's....",
                    "score": 4,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Finickyflame",
            "body": "That's what I do when I interview candidates. I present them a small code snippet and ask them how would they review it. Instead of asking them what they are looking at during a PR.\n\n&gt; You are what you do, not what you say you'll do.\n\nSo far it worked very well",
            "score": 52,
            "replies": [
              {
                "author": "oonash",
                "body": "I'm interested in doing this, have you played around with different code snippets? Would be interested to see what you use if you're happy to share.",
                "score": 11,
                "replies": [
                  {
                    "author": "Finickyflame",
                    "body": "Mostly normal code with some problems or typos here and there. Code that has side effects or is missing some stuff (e.g. a transaction script that is missing a save at the end). Code that catches exceptions but doesn't rethrow or handle them correctly.\n\nSenior devs usually find them all, intermediate devs find some, and juniors find very few of them.",
                    "score": 22,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "FuzzyToaster",
            "body": "Yep my favourite \"coding excercise\" I did was just being sent a github PR to do before the interview. Took me 10 minutes and gave me the opportunity to show off what they needed to know. They offered me the job.",
            "score": 29,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "Live-Laugh-Fart",
            "body": "I did poorly during a technical interview a couple years ago and I pretty much stopped applying to other jobs for a bit because of it. \n\nMore recently though I started applying again and my last interview was reviewing code with the team and it ended up being a much better interview experience. It didn’t take too much time out of my day to prepare, I got a much better feel for the people I’d potentially be working with and it actually led to more small talk about different topics. Hoping the other interviews I have will be like that.",
            "score": 15,
            "replies": []
          },
          {
            "author": "Noctrin",
            "body": "I do something similar, start with a bad piece of code, ask them to review it, then ask them to improve it.",
            "score": 4,
            "replies": []
          },
          {
            "author": "mrheosuper",
            "body": "Finally years of nit-picking at coworker's PR starts paying off.",
            "score": 4,
            "replies": []
          },
          {
            "author": "foramperandi",
            "body": "Another great reason to do this is that you get to frame the scenario.  You can tell the person that the person that wrote the PR is a junior person, then see if they're a jerk, or if they're constructive.  Helps weed out unaware assholes.",
            "score": 4,
            "replies": []
          },
          {
            "author": "staplepies",
            "body": "This can be tricky for various reasons: Language issues (how do you create comparable samples and grade consistently across languages); expectation setting can be tough for the candidates (you need to be very clear on what is/isn't in bounds for them to review, etc.); and having a consistent, relatively objective rubric (otherwise different interviewers will grade reviews vastly differently). There's more but that gives you some sense of the challenges involved. I've done a lot of consulting on interview processes and I've seen way more shops get this wrong than right. With that said, when it's done well it can be quite useful.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Sensanaty",
            "body": "GitLab does this, and it was one of the best interview experiences I've had.\n\nThey do ruin it afterwards by asking you what is tantamount to BS trivia questions pulled straight off some sort of quiz website about Ruby though, which was a shame lol",
            "score": 2,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 4,
                "replies": [
                  {
                    "author": "Sensanaty",
                    "body": "Yep, that was my exact feeling too.\n\nThe question that stumped me was something like \"Does ruby support single-inheritance, or multiple Inheritance?\" To which I just straight up guessed (the wrong answer). It came out of nowhere in an otherwise nice chat about technology and what we like about Ruby and Rails et al.\n\nI could tell that me answering that wrong immediately made it a no. Despite me taking them through an in-depth code review that covered a lot of the things they were looking for, as professed by my interviewer in the prior stage. Despite the resounding success my code review was, I got flunked because I didn't know a piece of CS trivia that *never* comes up in any context, ever, in the actual job because it's *completely irrelevant*\n\nLike you said, it's just useless trivia that makes 0 difference in the real world, and the whiplash there was incredible to witness",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "ketralnis",
        "body": "Interviews are broken, definitely. But how do you test for coding ability without doing any coding? This was written by somebody that's never had a bad hire. Or maybe _is_ the bad hire. Here is their suggestion:\n\n&gt; So, what’s the alternative? How about focusing on past projects and real-world experience? Give candidates the chance to discuss their work, the challenges they faced, and how they overcame them. This not only showcases their technical skills but also their problem-solving abilities and creativity. Another approach could be pair programming sessions where candidates can collaborate with an interviewer on a real-world problem, simulating a more authentic work environment.\n\nSo (1) \"discuss their work\", again written by somebody that hasn't had to deal with people that fluently talk the talk while actually being terrible at their job or (2) do some pair programming so, uh, do a coding exercise.\n\nSo the workable solution they have is instead of doing a bad coding exercise, do a good coding exercise. Cool I guess? But if you know your coding exercise is bad then you're probably not doing it, and if it's bad and you don't know it then you think it's good so you wouldn't listen to this advice.\n\nAgain, this whole thing is broken. But not actually testing people on technical ability (or even ignoring ability, determining their focus areas) is a great way to end up with people that look good on paper but do a bad job. I've worked with those people before and it really sucks.",
        "score": 325,
        "replies": [
          {
            "author": "fordat1",
            "body": "&gt; do some pair programming so, uh, do a coding exercise.\n\nAlso FYI even FAANG interviews you should treat the coding interviews as pair programming exercises where you are leading the coding (ie code the solution and explain your logic)",
            "score": 46,
            "replies": [
              {
                "author": "ketralnis",
                "body": "This is part of why I'm reacting to this as \"pair programming _is_ a coding exercise\". I've never given leetcode questions and then walked away from the keyboard. I've only given interviews that require two-way communication between the interviewer and interviewee",
                "score": 26,
                "replies": [
                  {
                    "author": "Connect_Society_5722",
                    "body": "It took me a while to understand this and I think it's part of why people need to the industry have so much trouble with technical interviews. I used to think that I had to look like I knew exactly what to do, knew all of the syntax, and understood all of the requirements in the first go. I interviewed (sporadically) for around 2 years without an offer. Toward the end of that process I began to understand that with any good interviewer, the exercise is a discussion. \n\nThey present the requirements, you tell them what you're thinking and ask clarifying questions. You write code, tell them what you're writing and why, and they point out problems or ask their own clarifying questions. Rinse and repeat until you have your solution. Of course not every interviewer is good, and some of them have the same attitude I had when I started interviewing, but generally speaking this approach is going to go a lot farther and is a much better representation of what it's like to work with you anyway.",
                    "score": 4,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "aivdov",
            "body": "I assume when they talk about coding exercise they mean leetcode. When they talk about pair programming, it's more like actually writing code to solve some problem. E.g. you get requirements and they get increasingly more difficult. Could be: implement a simple cache. Now make it better in this and that way.\n\nYou can check whether a person understands requirements, how to communicate, how to implement them and how to progress, how deep the person's knowledge is, you know, like a simplified version of real job.\n\nOne person will implement something simple and won't be able to progress further, another will be able to implement a thread-safe cache that supports many concurrent scenarios and will do it in a clear and concise way.",
            "score": 18,
            "replies": [
              {
                "author": "fordat1",
                "body": "Also those people who can vividly BS their way like that are the worst coworkers because they will not get done but spin the most stories about it",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "Pr0Meister",
            "body": "Bro if I am the interviewer and I ask a guy about some previous snag he needed to solve at a project using a similar tech stack to what I've used, I'd definetly know if they are making things up or actually know what they are doing.\n\nInterviewers aren't exactly asking you \"what frameworks and tools you use\", but \"describe a specific case where the project had a problem and you solved it\"",
            "score": 28,
            "replies": [
              {
                "author": "No_Permission5115",
                "body": "I used to think that would work till I hired someone who gave a detailed eloquent description of their product architecture, the features they added, the types of problems they faced, how they solved them, what worked what didn't etc.\n\nOnly to have them spin endlessly on the simplest stories, make the rookiest of mistakes and submit code that they themselves couldn't explain. Eventually we had to fire them for poor performance. \n\nSome people can just talk the talk with 0 skills to back it up. It's honestly kind of impressive.",
                "score": 133,
                "replies": [
                  {
                    "author": "shizzy0",
                    "body": "This. There are people out that absolutely can talk the talk but can’t walk the walk. I didn’t believe it either, but once you’ve seen it, you know and you’ll appreciate a low-bar coding test that’ll weed out those bad candidates. It shouldn’t be a hard test. It should demonstrate coding ability. My olds employer didn’t have any C code in their product but gave a test that was code strcmp in C. It’s not hard but you have to demonstrate you know some things.",
                    "score": 46,
                    "replies": []
                  },
                  {
                    "author": "Unusual_Flounder2073",
                    "body": "Guy I used to work with was like this.  Would argue theory all day but couldn’t code his way out of a paper sack.  Only time I stormed out of the office was after a session with him.  (Sent out resumes and got new job so joke was on them).  \n\nLast I saw he was an agile coach.",
                    "score": 26,
                    "replies": [
                      {
                        "author": "No_Permission5115",
                        "body": "&gt;agile coach\n\nLOL, of course. \n\nWe know how pointing a story works, now stfu and do something productive.",
                        "score": 10,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "halfflat",
                    "body": "I had a talker make it all the way through CV screening, phone interview, presentation on prior work and free-form chatting with the developer group. Couldn't pseudo-code a factorial on a white board. I am certain his supervisor wrote his PhD thesis.",
                    "score": 12,
                    "replies": [
                      {
                        "author": "merkaba8",
                        "body": "Factorial? you mean like 2 base cases and a loop decrementing the value and storing a result?",
                        "score": 4,
                        "replies": [
                          {
                            "author": "DrunkenWizard",
                            "body": "Or perhaps the example exercise that begins any tutorial on recursive functions.",
                            "score": 4,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "iamakorndawg",
                "body": "Yeah, but that assumes people only ever move to jobs that are basically the same as their current jobs (use a \"similar tech stack\").  I agree that usually I can tell if someone is BSing even if their previous experience is not exactly my wheelhouse, but if you add in the dimension of can they actually write working code, the signal to noise ratio gets a lot better.",
                "score": 17,
                "replies": []
              },
              {
                "author": "jack-of-some",
                "body": "I have gone through all of this and still ended up with a candidate that could'nt code for shit but could talk quite well about the tech stack.",
                "score": 9,
                "replies": []
              },
              {
                "author": "ketralnis",
                "body": "\"Bro\" I have more than one lived experience that runs counter to this. If you can't relate that's fine but I'm telling you there are unqualified people that camouflage very well among qualified people, with resumes on which that is not apparent.",
                "score": 13,
                "replies": [
                  {
                    "author": "mangodrunk",
                    "body": "I agree with you. Many have this lived experience. It’s crazy how people are against coding exercises when instead they are trying to figure out their ability to code from talking. It’s like trying to see if someone knows how to ride a bike by just talking, instead of actually having them ride a bike. Sure, there are certainly issues with coding exercises and there are certainly bad questions to ask (anything requiring a trick or some esoteric trivia).",
                    "score": 4,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "syklemil",
            "body": "Given the kind of content that seems to come out of learnhub.top, ([earlier](/r/programming/comments/1e5fknh/nearly_48_of_software_engineers_prefer_working/), and [this story, which was either deleted or removed from proggit](/r/hypeurls/comments/1d0yznq/understanding_how_the_brain_reads_code_versus/), but in any case was seen as blogspam where the years-old [news.mit.edu link got a new chance](/r/programming/comments/1d0yi1j/mit_news_2020_to_the_brain_reading_computer_code/)), I wonder if it shouldn't just be classified as a blogspam site and autoremoved by automoderator.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "candelstick24",
        "body": "You’ve never been on the hiring side. I urge you to give it a try. Those 100 CVs from all star super senior developers in your inbox aren’t going to read themselves. Keep in mind, the only reliable quality check in a cv is formatting and grammar, the rest could very well be a lie. Most of the time you’ll be dealing with so called “marathon runners” who can’t tie a shoe lace.\n\nI prefer to send coding assignments to be done at home followed by a meeting to discuss. Not sure if my hiring process is good or not but I’ve yet to fire someone I’ve hired.",
        "score": 97,
        "replies": [
          {
            "author": "serviscope_minor",
            "body": "Indeed and to take their analogy further:\n\nSure you wouldn't expect a marathon runner to do a sub 10 hundred. But if you asked them to run 100 and they collapsed in a wheezing heap after getting 50m in a minute, you might reasonably suspect that they would be very bad at marathons too.\n\nWhat he also says is:\n\n&gt; Instead, we collaborate, research, and take the time needed to come up with efficient solutions. \n\nI mean kinda, but I feel you need to be able to write some stuff without resorting to the internet. Not everything needs an efficient solution, and not everything should need research. If he can't write 10 lines of workaday code without research that may be a problem. My experience lines up with Joel Spolsky here: people who struggle struggle on tiny problems.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "I can tell from these comments who has SWE hiring experience and who hasn’t.\n\nThe world is full of great looking candidates with awesome resumes/CVs and impressive degrees from reputable schools… who simply cannot program a digital computer by themselves.",
        "score": 60,
        "replies": []
      },
      {
        "author": "No_Permission5115",
        "body": "In my experience coding exercises have been the single most effective way to evaluate competence. Every single time I've seen the hiring manager/ team ignore poor performance in coding exercises, we've come to regret it fairly quickly with complete deadweight being added to the team and in many cases someone who actively creates more problems than they solve.",
        "score": 17,
        "replies": []
      },
      {
        "author": "Fungled",
        "body": "You need to have coding interviews. But the problem should not be a trick or a mystery. Yes, it must require some challenge, but a minimal amount. The exercise should be designed so that only the weakest candidates can’t solve it. For everyone else, the good stuff is really where you go afterwards, which should be a good half of the task: how would you test it? How would you extend it? How would you improve the performance?\n\nThis is much more effective for simulating on the job scenarios in a limited environment",
        "score": 83,
        "replies": [
          {
            "author": "Pr0Meister",
            "body": "Coding challenges should be language/tool agnostic. I ain't failing cause I need to check if an array of some sort has a certain number of elements before proceeding, but  the interviewer scoffs at me googling if I need size( ) or length( ) for that.\n\nJust an example, but I've seen interviewers rather focused on you knowing the exact method/function built into a certain class by heart, instead of just explaining the solution step by step.\n\nThis does not reflect every day work in any way",
            "score": 34,
            "replies": [
              {
                "author": "Zanorfgor",
                "body": "I was looking for a job two years ago and this absolutely murdered me. Even if they aren't pedantic about it, when I've got 30 minutes to get this done, having to google little syntax things can devour your time.",
                "score": 4,
                "replies": []
              },
              {
                "author": "Coda17",
                "body": "It should be pseudo-code",
                "score": 9,
                "replies": [
                  {
                    "author": "Fungled",
                    "body": "That’s going to far, because you almost always also need to check that they know a target language or two. It should not be hard to differentiate between good candidates who can’t always remember the entire standard library and those that are really faking it",
                    "score": 5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Fungled",
                "body": "Yes this is obviously a red flag. Although in my experience of doing these traditional high pressure algo tests, I don’t recall an interviewer being pedantic on those kinds of details. Pedantic on others, yes, unfortunately so",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "mailslot",
            "body": "I ask one of the most basic super easy questions on HackerRank with a near 100% pass rate (on their site). Not surprisingly, many applicants have already memorized the most efficient, yet least intuitive solution. So, after they inevitably blurt out that one, I then ask for other ways to solve it. Mind you, any competent junior can find a half dozen ways to solve it without memorization. Most “senior” applicants’ heads explode.\n\nI had applicants argue with me “But, I solved it. I gave you the most efficient answer. Next question.”\n\nI give this test as a softball to sniff people out. It includes “bad” solutions that test crammers don’t tend to memorize. I must reiterate, it’s dead simple and language agnostic. A competent engineer should take a maximum of *two* minutes.\n\nI get a fail rate of 70%+ on one of the most basic programming questions. The ones that say something like, “I wish you asked me about my database skills,” I then ask them to do the same question in SQL. 100% fail in those applicants.\n\nI encounter a lot of bullshitters in software interviews. They’ll ask if they can use some obscure language like Haskel, to which I’ll reply that I’m fluent and they can use anything they like, or just talk it out. That scares them. Some of those applicants also tend to like to use prime numbers for no particular reason, except to attempt to dazzle with bullshit.\n\nI don’t really need to ask mind benders or anything like that. A quick casual conversation is about all I need to assess an engineer’s competency. You can easily converse about a topic you know or you don’t know it.",
            "score": 19,
            "replies": [
              {
                "author": "XelNika",
                "body": "I just sat on the interviewer side for the first time recently. My colleague picked some problems off leetcode rated easy. I tried all of them, ordered them by difficulty starting with the easiest and shortest so we would have more advanced follow-up problems for better applicants. I let the interviewee pick the programming language and I made it clear that I was not looking for complete knowledge of the standard library. If they used Count() where it was supposed to be Length(), I would just fix it for them, no problem. If they could just write pseudocode, that was fine too.\n\nEveryone started with Two Sum (*given an array of integers and an integer target, return indices of two numbers in the array such that they add up to target*). The solution can be to just try all the number pairs, there were no performance requirements. I would hint that nested loops are an acceptable solution.\n\nIn my opinion this is a super basic exercise. I did it in less than 5 minutes including reading the problem. At the interviews it was still a very clear divide between the coulds and could-nots. A self-proclaimed expert with a few years of professional experience could not solve Two Sum in the 30 minutes allotted for the coding problems. An experienced lead developer crushed all the problems in 20 minutes.",
                "score": 20,
                "replies": [
                  {
                    "author": "mailslot",
                    "body": "The one I ask: Implement a function that takes a vector/array of 64-bit integers. You can code it in any language you like, or just describe it at a high level. All values are present in the array exactly twice, except one. Return the only unique value. There are no constraints.\n\nFar too many “engineers” can’t devise a single solution or even come close. Am I crazy, or is this something everyone should be able to do? Formal education or not.",
                    "score": 11,
                    "replies": [
                      {
                        "author": "XelNika",
                        "body": "You are definitely not crazy.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "NeverBackDrown",
        "body": "If you are applying for a coding job but can’t code you are not ready yet. \n\nIf you have a FT job or family, it will take you longer. Thats life. Most hires are either new grads, experienced freelancers or experienced engineers. \n\nTo break in the game you have to play by the rules. Don’t expect them to lower standards so you can make it.",
        "score": 37,
        "replies": []
      },
      {
        "author": "C0R0NASMASH",
        "body": "There should never be interviews!\n\nInterviews favor people that have time to attend these. People in FT positions are unable to do so!",
        "score": 602,
        "replies": [
          {
            "author": "flukus",
            "body": "At the very least do interviews remotely so I don't have to fake a 3 hour doctors appointment.",
            "score": 20,
            "replies": [
              {
                "author": "danishjuggler21",
                "body": "“Hey boss, I have to take this Thursday afternoon off. Yeah, my mom died. Yeah, again. Yeah, it’s been a rough month.”",
                "score": 15,
                "replies": []
              }
            ]
          },
          {
            "author": "kemiller",
            "body": "I know you are joking, but I agree with this, even as a hiring manager.  Marathon interviews are garbage. Brief interview + reference check + contract to hire is usually better for both parties.\n\nEdit: I get why people, especially in America, would not like contract to hire, but you can work around that. The point is there is no substitute for actually working with someone, and it’s not even close. Doing interviews harder, which is the current cargo cult, doesn’t change that.",
            "score": 52,
            "replies": [
              {
                "author": "ZZ9ZA",
                "body": "I was with you right up until the last sentence. Contract to hire is terrible for anyone reliant on health insurance.",
                "score": 127,
                "replies": [
                  {
                    "author": "dezbos",
                    "body": "my first corporate gig was a contract job for blue cross blue shield. no health care offered...",
                    "score": 58,
                    "replies": []
                  },
                  {
                    "author": "otah007",
                    "body": "Tell me you're American without telling me you're American...",
                    "score": 42,
                    "replies": [
                      {
                        "author": "FullPoet",
                        "body": "Im european and I agree with him. \n\nContract hire is horrendous choice for the employee.\n\nSimply do a trial period.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "adrianmonk",
                    "body": "Contract-to-hire is also bad if you just want to switch from your permanent job to another permanent job.\n\nYou're giving up stability. This whole thread started with how coding in an interview is too much of a burden for a job seeker. Giving up stability is like 100 times bigger a burden than taking a vacation day.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "cdub8D",
                    "body": "Decoupling benefits from jobs is a good long term goal for many reasons.  Contract to hire (like 6 months) is really good for both sides (when paired with improvements like better interviews)",
                    "score": 12,
                    "replies": [
                      {
                        "author": "fordat1",
                        "body": "I completely agree but currently and for the foreseeable future theyre coupled",
                        "score": 17,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Kalium",
                "body": "Contract-to-fire? No thanks.",
                "score": 15,
                "replies": []
              },
              {
                "author": "cantquitreddit",
                "body": "You're never going to get good candidates to leave their current safe job and be a contract to hire. ",
                "score": 44,
                "replies": []
              },
              {
                "author": "ivalm",
                "body": "No top candidate would join a contract to hire job. You’re basically ensuring you get low quality candidates. Top candidates have abundance of FTE offers.",
                "score": 13,
                "replies": []
              },
              {
                "author": "Maleficent_Fudge3124",
                "body": "My best interviewing experience was contract to hire\n\nQuick decision making on the employers part was key, they walked candidates every four hours\n\nInterviews and at home exercises are not like working and it’s easier to tell if an employee is gonna be complementary employee or just a “tech wiz” asshole. \n\nI just wish i didn’t have to upskill in interviewing when that skill set doesn’t overlap much with being a good team member and engineer",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "OptionX",
        "body": "For all the problems tech interviews have, a few basic coding exercises aren't one.\n\nAnd a post just signed Michael who among other this has a \"drop shipping courses\" is a good sign this is digital trash.",
        "score": 9,
        "replies": []
      },
      {
        "author": "cubej333",
        "body": "I think that there should be a certificate that you can renew every two years that you receive after passing a coding assessment.\n\nThe problem is you have to do 1-5 coding exercises per interview.",
        "score": 44,
        "replies": [
          {
            "author": "Klightgrove",
            "body": "Let’s make one. \n\nThere’s no CompTIA for coding. No way to tell employers the skillset of an applicant. No way to vet candidates.",
            "score": 8,
            "replies": [
              {
                "author": "Ranra100374",
                "body": "Sounds like a great idea, to be honest. I think it's preferable to having some sort of arms race.",
                "score": 6,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "staplepies",
        "body": "&gt;So, what’s the alternative? How about focusing on past projects and real-world experience?\n\nBecause if you actually tried this you would quickly realize it doesn't work nearly as well as coding interviews, flawed though they are.",
        "score": 9,
        "replies": []
      },
      {
        "author": "guitarromantic",
        "body": "People here are saying that they can \"tell\" if someone is bullshitting about their abilities just from a conversation about technical topics, but all this reveals is that your HR and recruitment process sucks. \n\nIf I tried to turn down a candidate because I could \"just tell\" they couldn't code properly, our HR team would pull me in for a training session on equality and fairness.\n\nGive the candidate a chance to prove their skills objectively - a demonstrable thing that they can either do, or they can't. Then, if they *are* bullshitting you, you have objective evidence to prove the rejection was fair, rather than going off vague \"vibes\" or your gut.\n\nTech tasks in interviews have helped me learn that someone who looked promising can't write an if statement, more than once.",
        "score": 40,
        "replies": []
      },
      {
        "author": "hellotanjent",
        "body": "Having done hundreds of interviews while working at a FAANG.... no. Doing \\_some\\_ coding exercises during the interview is crucial. I had way, way too many people who managed to pass a phone screen that could \\_still\\_ not code their way out of a paper bag.\n\nAnd I'm not talking about implementing Paxos here - even given an hour of time, a laptop running a simple IDE, and their preferred language, a nonzero number of candidates could not correctly implement \"move all non-zero values to the beginning of the array\".",
        "score": 35,
        "replies": [
          {
            "author": "Coda17",
            "body": "I had people arguing me in a thread about reversing a string. One dude claimed to be a senior engineer who wouldn't be able to write a function to reverse a string and blamed the bad interview question.",
            "score": 14,
            "replies": [
              {
                "author": "dreugeworst",
                "body": "I mean, reversing a string can get (more) difficult once you leave ascii-land. In some languages, the obvious solution just reverses code points and just won't work if the underlying representation is not utf-32. In others they reverse code units instead. Taking combining characters into account is sometimes impossible with just the standard library. And then, depending on the language, two or more characters might be treated as one for sorting purposes, which may or may not apply here.\n\nObviously if the applicant is aware of this the confusion could be cleared up with a simple question, but if the intent is a dead simple interview question, I would stick with reversing an array of ints",
                "score": 4,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "zhivago",
        "body": "There should always be a very short and simple coding exercise.\n\nHaving talked though a design, I generally ask \"Please implement the core algorithm. Assume a utility library provides any support code. Do not worry about trivial mistakes.\"\n\nI want to see if they can't code, and I want to see if they can abstract.\n\nThey should be able to do it in less than ten minutes.",
        "score": 9,
        "replies": []
      },
      {
        "author": "Teembeau",
        "body": "\"In the real world, developers don’t usually have someone breathing down their necks, demanding they solve a problem in 30 minutes. Instead, we collaborate, research, and take the time needed to come up with efficient solutions. Coding exercises in interviews are more like a sprint, while real-world coding is a marathon. The skills needed for each are vastly different, and it’s high time interview processes reflect this.\"\n\nIn the world I work in, you're often the only developer in the team. Or you're in a team of 3, someone went on holiday and the other guy is off sick and the sh!t hits the fan and you have to get the application back up and running.\n\nSometimes, a sprint, even if it's just to patch a problem, is required, and fast. I delivered a live change to just reject one type of transaction and send it to the reject pile so the other 99% could continue and I had it ready in an hour, but that was a lot more complicated than a simple coding exercise.\n\nI doubt whoever wrote this has any \"real world\" experience.\n\n\"So, what’s the alternative? How about focusing on past projects and real-world experience? Give candidates the chance to discuss their work, the challenges they faced, and how they overcame them. This not only showcases their technical skills but also their problem-solving abilities and creativity. Another approach could be pair programming sessions where candidates can collaborate with an interviewer on a real-world problem, simulating a more authentic work environment.\"\n\nAnd you'll get someone who might not have been the person who solved them, but maybe can tell you what other people did. I will talk to developers about their work, but I want to see some code.\n\nI've met people who are graduates with supposedly 2 years of experience, who couldn't code Fibonacci in 30 minutes. That's not like getting a web application back to life. That's a simple problem.",
        "score": 15,
        "replies": []
      },
      {
        "author": "Party-Cartographer11",
        "body": "Unless the people with full-time jobs are coding in those full-time jobs and can demonstrate the skills they learned.",
        "score": 7,
        "replies": []
      },
      {
        "author": "0x44554445",
        "body": "This is for a 6 figure job not a burger joint. So yeah, I do kind of expect you to be able to code in the language you put on your resume under mild amounts of pressure, and if you have to take a Saturday to brush up on your leetcode then so be it. \n\nI'd love to just be able to hire based on a resume, but some people think they have imposter syndrome when in fact they're just imposters.",
        "score": 26,
        "replies": []
      },
      {
        "author": "scodagama1",
        "body": "What alternative do you propose?\n\nBecause there are some which we could draw from other industries: i.e. doctors don't have anatomy interviews to prove they know their stuff. Or lawyers probably are not asked about civil code. However these guys have lengthy and extremely difficult professional exams to pass - that take waaaaaaaaaaaay more time than grinding leetcode once in your lifespan (once, because once you do it once then you only have to skim through cracking down coding interview to refresh).\n\nFrankly I prefer our way - a person who has full time job and a family and doesn't already know basics of their craft should just recognize that maybe it's time to backfill gaps in their knowledge, maybe instead of next vacation take 2 weeks off and learn. Otherwise how do you expect to be competetive with someone who actually spend their 3-5 years in college on learning? Also let's be honest - memorizing Dijkstra algorithm or inverting binary tree or doing some prefix sums/sliding windows algo is basic, a lawyer or doctor would laugh at us if they heard we complain on \"too much\" material while pointing at a *single* 500 pages book full of examples. IMO even grinding 100 leetcode hard problems is not even close to what other professionals need to learn before they are considered to have **basic** qualification that qualifies them for **entry-level** jobs.\n\nI just don't get why this industry is so whiny. Learn your craft, doctors learn anatomy, lawyers memorize case law, why can't we expect that **professional** software engineer should have a basic command of \\~20 simple algorithms and data structures?",
        "score": 6,
        "replies": []
      },
      {
        "author": "spartanstu2011",
        "body": "There are plenty of people that can talk the talk, but when put in front of a keyboard, they can’t actually write software. There are also a large segment of developers that claim credit for a large project, but all they did was develop a few basic CRUD endpoints. Just talking about projects is not enough.\n\nWhile doing coding interviews suck, I don’t know of an alternative. I’m sorry, software engineering is a profession. You should know your standard algorithms and data structures. You should be able to take a set of requirements and translate it into code drawing on your knowledge and experience. \n\nMaybe we should start licensing software engineers - similar to other professions?",
        "score": 27,
        "replies": []
      },
      {
        "author": "stackered",
        "body": "I disagree, they should just be less time intensive, not recorded/live, and reasonably related to the job.  Leetcode nonsense or recorded platforms are a total joke and waste of time/bad talent filter.  That followed by a code review, then another round of normal interviews seems perfect to me.  If you don't include coding tests, you get bunk candidates who can't code. Its just that 99% of companies do them wrong.",
        "score": 5,
        "replies": []
      },
      {
        "author": "acroback",
        "body": "So, what should we ask? \n\nHow is life? All good? Come on in. \n\nWhat a bunch of baloney.",
        "score": 78,
        "replies": [
          {
            "author": "No_Permission5115",
            "body": "Terrible developers hate coding exercises. Understandably.",
            "score": 58,
            "replies": [
              {
                "author": "4THOT",
                "body": "These people are told the exact types of questions to get a six figure job in an industry that is *INCREDIBLY* flexible on work life balance, degree requirement, high demand, and they're fucking *whining* that they know what's on the test.\n\nThese people deserve to be homeless.",
                "score": 8,
                "replies": []
              },
              {
                "author": "LookIPickedAUsername",
                "body": "Ton of truth to this.\n\nI’ll be the first to admit that leetcode questions are stupid and have absolutely nothing to do with the day-to-day requirements of a real programming job.\n\nBut… they’re also not hard to get good at if you actually know how to program. A few basic algorithms you should already be familiar with and some pattern recognition will get you through most of them, and even if you’re completely and utterly stuck, “Sorry, can I get a hint here?” and being quick and your feet should generally let you at least put in a reasonable showing.\n\nSo no, they’re not a good representation of real world programming, but you damned well ought to be A) smart enough to learn how to do them, and B) willing to put in a few hours studying and practicing. If you’re unable or unwilling to jump through these hoops, then the sad truth is that you probably don’t deserve the job.",
                "score": 7,
                "replies": [
                  {
                    "author": "markoNako",
                    "body": "But the tricky part is how to know whether  the candidate actually memorised the most common easy/medium solutions from Leetcode or it's good enough to solve some algorithms never seen them before..",
                    "score": 6,
                    "replies": [
                      {
                        "author": "LookIPickedAUsername",
                        "body": "The companies I’ve worked for don’t actually use leetcode questions, just leetcode-*style* questions. Once they leak and end up out in the wild (generally on leetcode), they’re banned.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "notjim",
            "body": "A firm handshake and a look in the eye is all I need /s",
            "score": 18,
            "replies": [
              {
                "author": "WeWeDe",
                "body": "Whoa you're asking for eye contact? You're dealing with engineers here",
                "score": 8,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Ives_",
        "body": "As a interviewer and candidate, I think writing a showcase project and then presenting it is way better than coding challenges. We wanna people who can develop real life applications instead of shitty reordering arrays skills",
        "score": 8,
        "replies": [
          {
            "author": "supermitsuba",
            "body": "I can see both.  Being on the clock to show an efficient way to do something sucks.  But having time to prep for an interview gives more time to think about those problems and attempt to explain them in an interview.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "trkeprester",
        "body": "Yeah I'm not convinced you can really get away from some kind of coding test at least a fizz buzz style basics test for your field. So many candidates look good on paper and talk the talk but then can't reason through simple basic loop/if statements, or get defensive and deflect solving the problem.  \n\nI think that seeing how the person reacts to a question is as important as solving it, if they can accept the challenge to think critically for a bit and follow some guidance and reasoning to get to the solution it's a good sign, if they think your question is invalid and refuse to do it they're probably not going to be easy to work with.  If they can't debug their own 5 line simple program without running it I'm not feeling good about their capability to manage thousands of lines of code\n\nI feel like this is sort of click bait but maybe there are people who can truly assess skill and attitude without real problem solving in the mix.",
        "score": 4,
        "replies": []
      },
      {
        "author": "mascotbeaver104",
        "body": "Ok, sure, except the only remotely challenging question I've ever had was at Amazon, where they asked some array union question that I'm sure a motivated undergrad would knock out in a second but never appears irl.\n\nThe thing these arguments never want to admit, at least in my experience, is that interview questions (note: not projects, questions) tend to be _so fucking easy_. Like, fizzbuzz, maybe make a command line calculator or something easy.\n\nFrankly, if you can't solve fizzbuzz immediately, I do not want to work with you. Maybe that makes me insensitive, but I don't blame companies for trying to have some bare minimum standards given the low quality some devs bring to the table. I feel like I end up being a 10xer on many teams just by having bare, bare minimum competence, and spending more than 15 minutes a day at work, but I also work in enterprise so maybe that just comes with the field.\n\nI have worked with multiple devs who did not understand loops, variable scopes, hell, one guy didn't even know how to write a function, who would have been immediately weeded out by just a basic interview question.",
        "score": 34,
        "replies": [
          {
            "author": "ResidentAppointment5",
            "body": "I will never in my life forget asking one in-house recruiter why the company used a bullshit test like Fizzbuzz, and he said “to weed out candidates who lie about knowing how to program.” I thought he was exaggerating, and said so.\n\nHe wasn’t.",
            "score": 12,
            "replies": [
              {
                "author": "syklemil",
                "body": "&gt; Fizzbuzz […] “to weed out candidates who lie about knowing how to program.”\n\nYep, that is [Fizzbuzz' whole raison d'etre](https://blog.codinghorror.com/why-cant-programmers-program/). Tech/coding has been attractive jobs for a long time, and will attract a lot of people who are interested in a high-paying desk job but not the actual work. Preferably they should be detected and weeded out before the interview stage, but that's obviously not the case.\n\nUnfortunately it seems like nobody has yet created a Fizzbuzz for managing positions.",
                "score": 10,
                "replies": []
              },
              {
                "author": "serviscope_minor",
                "body": "I'm also convinced that quite a few people have never written anything from scratch. \n\nThey rock up at a company with an existing crappy code base. Some grizzled old lifer says \"well, son, here's how you run the code\", and that's it. A ticket comes in, and they permute the code at random until it parses and the until the ticket appears resolved. And this is repeated forever.\n\nGiven a blank editor, they are completely at sea.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "ketralnis",
            "body": "They're so easy because they have to be reliably solveable in an interview time span with a \"right\" answer recogniseable by people that are potentially less qualified than the interviewee.\n\nAll of the hard problems you've solved probably took you multiple days. They did for me. And many of those problems were solved by zooming out of the problem and solving a different, easier problem instead. (\"GC is taking too long. I could rewrite the GC. Or I could just generate less G to C.\") That's very difficult to replicate in an inteview environment that doesn't support having more than one right answer, or concluding that in fact the problem is unsolveable and needs a different approach. Most of my wins in my career have been identifying high reward per effort ratio problems and solving those.\n\nBeing good at your actual job is very difficult to replicate in an interview on both the giving and receiving side. It's certainly not replicated by leetcode problems no matter how easy or hard they are.",
            "score": 22,
            "replies": [
              {
                "author": "mascotbeaver104",
                "body": "But that's what I'm saying: fizzbuzz is hardly an elite level leetcode challenge, and yet I'm convinced I have worked with people who would fail it. The goal isn't to replicate a real world problem, the goal is to see if you know basic programming, because yes, there are people working who only operate by copy/pasting from stackoverflow and have literally no fundamentals. \n\nI'm not arguing for harder problems, I'm saying in the real world these difficult leetcode problems that would weed out a competent full time dev are just not that common, and the interview questions we do see are serving a perfectly valid purpose",
                "score": 16,
                "replies": [
                  {
                    "author": "ketralnis",
                    "body": "Yep I'm not disagreeing with you. That is the _only_ problem solved with leetcode style questions. There exist good coding questions that exercise more practical skillsets, but leetcode isn't one of them.\nBut I agree that solving that problem is still important. My team does interview people with 0 coding skills that fail out on that check (which we put early in the process).",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Where do you work that hires devs that don’t understand loops and variable scope? On these types of threads people aren’t talking about fizzbuzz, they’re talking about questions that need a fenwick tree plus dynamic programming to solve, not to mention your Amazon union question.",
            "score": 3,
            "replies": [
              {
                "author": "mascotbeaver104",
                "body": "I would rather not state my specific employment history to avoid getting doxxed, but I have worked with devs who have been in the industry longer than me who were missing basic programming fundamentals (loops, variable scopes, functions in one case) at a botique ag tech company, a major auto manufacturer, and at a regional insurance company.\n\nIn the case of the ag tech company, the guy had been an engineer but talked his way onto the software side without actually learning anything before getting the job. The auto company he actually had seniority on the team and was the one who hired me, idk how he got the job (to be fair to him, he had a lot of knowledge about the CRM the company used, but almost nothing about coding, which is what the actual job was), and the insurance guy was a contractor who presumably came from some shady recruiting company that skimped on checking credentials.\n\nMy current job has some pretty shaky coders too, but I currently work in DevOps so I cut them some slack since it's not their area of focus",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Claudius_Maxima",
        "body": "I sort of agree; programming exercises on the spot is too much pressure.  It may reveal bad hires, but it will also hide many good hires.  But I still want to see some programming!  My hiring process:\n\n1. Anti-spam.  I don't even read the CV. I reply with 3 simple questions via email, such as work-visa status, current location, etc. Around 50% of candidates never reply.\n2. Assess the CV.  If they look good, send them three programming problems that are relatively simple (a few hours work at most) and ask them to answer just one in a language of their choice.\n3. Interview anyone who submits a solution. As well as regular interview questions, their solution is used as a topic.  Why did you do it this way?  What alternatives did you consider?  Explain this part to me.  Etc.\n\nSadly, I've had mixed success.  But it is the least worst solution I've found.",
        "score": 9,
        "replies": []
      },
      {
        "author": "GBcrazy",
        "body": "Honestly I hate this kind of articles. This is someone who wants to get attention by being controversial and feeding on top of people who are bad at interviews, instead of encouraing them to develop their skills.\n\nCoding exercises are there for a reason. You need to prove you can code before they hire you to code.",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Fuck no. Keep having them to keep away the ones who talk through their ass but cant code",
        "score": 3,
        "replies": []
      },
      {
        "author": "Affectionate-Aide422",
        "body": "We always do coding interviews when hiring software devs. It’s important to test people in a way that approximates their job. A good kata takes 30 mins to 2 hours to do, has a high failure rate for mediocre devs, a low failure rate for good devs, and provides good grist for a conversation. Don’t have time to take the kata? No problem. Go somewhere else.",
        "score": 3,
        "replies": []
      },
      {
        "author": "AndorinhaRiver",
        "body": "Is.. is this ChatGPT? (Not to mention, the whole website seems off lol)",
        "score": 3,
        "replies": []
      },
      {
        "author": "Fearless_Imagination",
        "body": "&gt;In the real world, developers don’t usually have someone breathing down their necks, demanding they solve a problem in 30 minutes.\n\nYour \"real world\" doesn't have any Project Managers in it?\n\n  \nMore seriously. I used to think coding excersizes where unnecessary. Insulting, even, to someone with my level of experience. *Of course* I know how to code, I've been doing it for more than 10 years!\n\nSo last year I got involved for the first time into *hiring* a senior developer and did some of the interviews. We started without any coding test because, well, we thought we could get by just asking about their past work. And in fairness I think that worked for *most* candidates. But we had a few we had to reject because our takeaway from the interview was \"we're not sure if this person is bullshitting us or not\". \n\nSo, we introduced a live coding excersize as part of the interview as an experiment. We're not asking for leetcode. It's something *slightly* more complicated than FizzBuzz. There's no \"gotcha\" and we're not looking for any specific solution. \n\nWhat we *are* looking for is people who can - and this sounds dumb - *actually understand the assignment.* It didn't start out that way. We had *very different* expectations of how people would do on this test - we thought most people would write something that'd meet the requirements and we'd mostly talk about why they did things the way they did, and we'd end up concluding that the technical test didn't really add any value to the interview process and we'd stop using it. Boy were we wrong about that.\n\nApparently a lot of people who have 10+ years of experience as software developers do not only fail to read requirements correctly, but also *do not ask questions* about requirements they find unclear. Even when prompted at the start that they should do so. And also still don't get it when we try to explain that they've misunderstood something and try to coach them to the correct solution. \n\nI don't think it's strange to expect a *senior developer* to be able to understand simple (they are *much* simpler than what we deal with in our actual work) requirements and ask some clarifying questions where needed. In fact I think that's *more* important than them being able to write good code - my team can teach them how to write better code. We can't teach them how to understand things. \n\nAnd most people who *do* understand the assignment also write code that is fine or even really good. But I think the only way to check if they *actually* understood is to make them write the code.",
        "score": 3,
        "replies": []
      },
      {
        "author": "panenw",
        "body": "\"**Alternatives to Coding Exercises: What Could Work Better?**\" this is SO ai generated",
        "score": 5,
        "replies": []
      },
      {
        "author": "tjsr",
        "body": "I absolutely disagree. There should never be large *take home* exercises thst require more time from the candidate than the interviewer is willing to invest. But you absolutely need to see a person code and you need to see thst happen in real time, not asynchronously.\n\nIve see plenty of code supposedly written by a candidate who absolutely could not write code in a pairing situation, or on the spot.\n\nThr problem with take homes is both that companies give BS time expectations and estimations, and that to get the code to a \"production\" level is often days worth of work for sht they're asking, not hours - or, if you're putting thst crap in to prod, you have a nicely insecure whipped together thing with none of the practices we expect.",
        "score": 4,
        "replies": []
      },
      {
        "author": "ganja_and_code",
        "body": "Hot take apparently: *If you write code at your FT job, you damn well better be able to solve a coding exercise.*\n\nThe real issue with coding exercises isn't that they exist; it's that they're often the wrong ones. Don't tell a candidate to write quick sort from memory. Do give a candidate a realistic scenario and some constraints, then evaluate their ability to ask clarifying questions, come up with a valid solution, identify and mitigate edge cases, evaluate performance tradeoffs, and tell you what they'd have liked to do differently if given more time.",
        "score": 5,
        "replies": []
      },
      {
        "author": "BigTimeButNotReally",
        "body": "Bad take.\n\nCandidate can choose if it is worth it or not.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Mittop",
        "body": "So, as a lapsed coder, now manager and business development person I am honestly curious what this group thinks the best way to ensure the candidate can actually produce code well without making them write some in some sort of controlled way?\n\nI’ve interviewed candidates and asked theoretical white board style problems, asked what sort of challenging problem they were proud of their solution to, and many others. \n\nThen you hire someone, spend months training them up, giving them a chance to ease into things only really find out they can’t really do the job. \n\nWhat is the right way? I want to respect the candidates life, work, and time. But I also have a  responsibility to the current team to spend our limited budgets wisely and fairly as we grow. \n\nWould love to hear/read your thoughts.",
        "score": 2,
        "replies": []
      },
      {
        "author": "LUV_2_BEAT_MY_MEAT",
        "body": "There was a coding interview I had a few years ago that I really liked. They started you off coding fizzbuzz. This would immediately end the interview for people who had no business being there and gave a quick confidence boost to those who did. Then they would say \"great, now you have a requirement to print 'zing' when its divisible by 7\". Then something like \"call this REST API that returns a dictionary of numbers and the word they should print if its divisible by that number\". And it would keep getting more complex like that until they got a feel for what your abilities were. This also proved you could write at least somewhat maintainable code and could refactor existing code. Some of the requirements were intentionally vague too to see if you'd just guess or ask questions.",
        "score": 2,
        "replies": []
      },
      {
        "author": "remmyman36",
        "body": "Here we go. Everyone wants to have their needs met for an interview. Companies don’t have time to accommodate for everyone. There are plenty of candidates that do have time, and unfortunately the world isn’t fair. This would only happen if candidates started running dry, but they aren’t.",
        "score": 2,
        "replies": []
      },
      {
        "author": "NoPlenty3542",
        "body": "With a family and a full time job, I hate coding challenges which require me to work on it at a stretch. Like a company asked me to do a test for a 100 minute time limit. When I submitted, instead of giving me a clear result they moved on to give me another test that would require me to sit for 200 minutes in order to finish it. I told them that with family(I work remote) and full time job, it is nearly impossible for me to sit and finish this in one go and asked for an alternative. They didn’t reply. In the end I understood that I dodged a bullet. The communication part from them was legit shit and would have been a problem had I continued.",
        "score": 2,
        "replies": []
      },
      {
        "author": "LordAmras",
        "body": "As a father of two that recently did interview for a job change I rather have those than random quiz questions.\n\nI don't have the time to study random question on edge cases do programming, that in any work environment I would research before implementing.\n\nGive me something to actual show my skills, I can find a couple of hours at night or during the weekend to do it.\nWhat I don't have the time fkr is reading books of interviews quizzes that will be completely useless as soon as I get a the job.",
        "score": 2,
        "replies": []
      },
      {
        "author": "DawnIsAStupidName",
        "body": "For 25 years, my question has been to code an ordered insertion into a linked list.\n\n\nIts 5 lines of code if you do it elegantly and about 15 if you don't\n\n\n Only about 10% code it correctly initially. Amusingly enough, it's usually those students who just finished uni, or hands on very senior devs.\n\n\n(my pass rate is at about 30%. I don't fail people who don't get it right the first time. I fail people who don't know how to reason about it, or fail the rest of the interview ).\n\n\nThere's a strong correlation between peoe who get it right, and who generally do well on the rest of the interview.",
        "score": 2,
        "replies": []
      },
      {
        "author": "ProjectInfinity",
        "body": "Hard disagree. Without them we'd have made the wrong hire multiple times. However if you have made an exercise so complicated and convoluted that they cannot finish it then that's a failure on your part.",
        "score": 2,
        "replies": []
      },
      {
        "author": "rco8786",
        "body": "I have a full time job and a family (2 little kids) and have absolutely no problem with a coding test.\n\nI think it’s totally bonkers that anyone thinks you should get a coding job without demonstrating your ability to code.\n\nThe exact argument laid out in the article can be used to say that companies just shouldn’t interview people at all. ",
        "score": 2,
        "replies": []
      },
      {
        "author": "ASVPcurtis",
        "body": "This is how people who cheated their way through university slip through the hiring process",
        "score": 2,
        "replies": []
      },
      {
        "author": "curious_but_dumb",
        "body": "What of all bullshits is this? They should just hire the author before asking any questions, no?",
        "score": 2,
        "replies": []
      },
      {
        "author": "Pad-Thai-Enjoyer",
        "body": "Coding interviews are fine, I’ve had some really nice experiences during them. The problem is most coding interviews have just gone to the “I’ll just throw a leetcode question on the board and call it a day” and it’s a question where if you haven’t seen it before or one similar to it, you’re likely not coming up with it on in the time frame given + added stress of the interview environment. The worst is when I specifically ask if the interview format will be leetcode and the recruiter says no, and then it is anyway. \n\nMy ideal format is being given some requirements for a small system and then implement that. No algo bs that no one actually uses, tests modularity and knowledge of your preferred language, opens up the floor for discussion on how to best build it, and functions better as pair programming.",
        "score": 2,
        "replies": []
      },
      {
        "author": "dayDrivver",
        "body": "I don't hate coding exercises on technical interviews, i hate them as way to filter initial candidates, it is a waste of both of our times because either i move to the next round were i will get another tech interview... i mean you are not a FAANG company were i will get \"social credit\" just to be an a \"ex-something\", m not going to waste time doing them.\n\nAlso hate those that state \"we allow google, you are fine\" and its just a freaking tiny window inside a leetcode clone UI that doesn't allow you to copy and paste because it will start saying \"cheating detected, your submission will be flagged, thank you for interested you may continue attempting but you have been automatically discarded\" (looking at you fkng coderbyte UI).\n\nIs easy being pedantic when you are on the other side of the table and haven't been looking in a while, modern coding assessments are wild.",
        "score": 2,
        "replies": []
      },
      {
        "author": "gustad",
        "body": "If I ever interviewed at a place that didn't include a coding exercise in the interview, I would not accept an offer from them unless I was truly desperate. That's likely to be a company filled with poor developers. No thanks.",
        "score": 2,
        "replies": []
      },
      {
        "author": "gregsapopin",
        "body": "If you already have a FT why are you applying?",
        "score": 2,
        "replies": []
      },
      {
        "author": "tigerllort",
        "body": "Hiring people right now and can’t disagree with this take more.\n\nNot giving a coding test would have allowed us to hire some people who really can’t code well.\n\nThe tests aren’t perfect but it’s obvious when someone doesn’t have the skillset.",
        "score": 2,
        "replies": []
      }
    ]
  },
  {
    "title": "The Great Experience Hoax: Why “5+ Years Required” is Killing Tech Innovation",
    "body": "",
    "score": 898,
    "url": "",
    "created_utc": 1726920077.0,
    "author": "TerryC_IndieGameDev",
    "permalink": "/r/programming/comments/1fm1evl/the_great_experience_hoax_why_5_years_required_is/",
    "comments": [
      {
        "author": "[deleted]",
        "body": "[removed]",
        "score": 560,
        "replies": [
          {
            "author": "BiteFancy9628",
            "body": "Pseudoscience to justify the preferred candidate or the gut instinct of the hiring manager in the first 100ms they met you.",
            "score": 182,
            "replies": [
              {
                "author": "psaux_grep",
                "body": "Having hired people against my gut instinct a couple of times have taught me that my gut instinct is pretty good. \n\nYMMV.",
                "score": 105,
                "replies": [
                  {
                    "author": "caltheon",
                    "body": "I know it's not super scientific, but I tend to agree with you.  I'm not talking about first impressions, but after taking with someone for 5-10 minutes, I can predict how well they will do in a job.  It's not infallilable, as there are people who are really good at manipulating people, but suck at the job, and there are people who are very knowledgeable, yet lack the drive to do the job past the interview.  Usually in those cases though, there is something else these people can do in a medium to large organization, so it's not a total waste.  9 out of 10 interviewees are pretty basic when it comes to emotional skills though.  The GOTCHA with this is it doesn't scale, and can't be applied systematically, which is what larger companies need for a multitude of reasons (legal ones being near the fore-front) .  For every person that is great at intuitive assessments, there are many more that are absolute trash at it.",
                    "score": 38,
                    "replies": [
                      {
                        "author": "BiteFancy9628",
                        "body": "There is excellent evidence that better hires in both skills and fit come from referrals instead of cold applicants. Makes sense. Trusting already good employees who don’t want to damage their reputation by referring idiots is logical. Still a bit nepotistic, but if not a requirement, just a bonus I see no ethical problem.\n\nThis however is very different from saying… this guy my boss wants is the chosen one because the boss is doing a favor for somebody. Or trust me… my gut says this guy is going to be awesome even though this other candidate is obviously way more accomplished. I mean why waste everyone else’s time applying and interviewing in either case? And why should anyone else trust your unscientific gut if you can’t clearly articulate your reasons in words? Hiring should be a team sport.",
                        "score": 22,
                        "replies": [
                          {
                            "author": "TheCuriousDude",
                            "body": "On a macro level, like you, I don't even get the point of interviewing if guys like psaux_grep and caltheon think they can evaluate competence from \"gut instinct\" or \"talking with someone for 5-10 minutes\".\n\nOn a micro level, I support this delusion of evaluating competence, because a large part of why I've gotten my software developer contracts/jobs is because of my sociability. Because of all the time I spend in subreddits like r/programming, I can talk your ear off about programming concepts I barely have experience with.",
                            "score": 24,
                            "replies": [
                              {
                                "author": "retro_owo",
                                "body": "I've never had to hire anyone so take it with a grain of salt, but I feel like if you're evaluating someone 'in 5-10 minutes' what you're probably doing is assessing their poor communication/social skills, which is fair enough.",
                                "score": 16,
                                "replies": []
                              },
                              {
                                "author": "superseriousguy",
                                "body": "This is probably location dependent but if you have enough curiosity to spend time reading about programming you are almost certainly better than 95% of candidates in my area.",
                                "score": 3,
                                "replies": []
                              },
                              {
                                "author": "psaux_grep",
                                "body": "Way to misread my comment. Not sure if you’re doing it on purpose or not, but hey, way to be obnoxious. Re-read it context and you might get what I was trying to communicate.",
                                "score": 2,
                                "replies": []
                              },
                              {
                                "author": "caltheon",
                                "body": "oftentimes, you aren't deluding people like us though.  The fact that you have a surface knowledge of the technology, and can talk through it in a way that makes sense to someone else is way more useful than someone who is an expert in one thing but ignorant of everything else.  I know you are passionate about learning about new technologies, which means you can likely skill up on those techs when needed to dive deeper.  Calling it gut instinct is a bit of a disservice though.  You wouldn't say the same thing about a car mechanic who can point out the problem right away without having going through all the diagnostics, you would call them a great mechanic.  There are a LOT of queues that people give off that are being analyzed by someone who is experienced in reading them, even if sometimes, the person doing the reading doesn't consciously acknowledge them all.  This does lead to bias pitfalls, which is why a good interviewer is trained to avoid implicit biases, but that isn't really what the point of the \"gut instinct\" is.",
                                "score": 3,
                                "replies": [
                                  {
                                    "author": "Camel_Sensitive",
                                    "body": "A car mechanic who can point out problems can do so because there is a feedback loop for when he is right or wrong. Hiring managers have no feedback loop, because it's fundamentally impossible to learn that you've been duped, by definition. \n\nThere's also a lot of queues people intentionally give off because they know you're going to \"pick up on it,\" and again, no feedback loop exists to create real improvement because you've been deceived.\n\nI also support the illusion of competence, as I personally benefit from it as well. It's still a disservice to the company.",
                                    "score": 11,
                                    "replies": [
                                      {
                                        "author": "caltheon",
                                        "body": "I assume you are misunderstanding what a hiring manager does.  A recruiter, sure, they can't be trusted to do anything other than basic fact checking and telling me if a candidate can show up on time and speak the required language.  Hiring managers are just that, managers that are hiring.  They have a feedback loop on candidates they hire, and their peers hire. There isn't as much of a feedback loop on unhired candidates unless you choose to check their bios later.",
                                        "score": 7,
                                        "replies": []
                                      }
                                    ]
                                  },
                                  {
                                    "author": "BiteFancy9628",
                                    "body": "You’re making up some other bullshit scenario to redefine gut instinct as something it isn’t. Congrats you just did a tech screening and nicely articulated the differences between candidates. I’m talking about the proven fact that interviewers know within the first few seconds whether or not they will hire someone and the rest of the interview or write up is often to justify that feeling. That feeling is also proven to be frequently wrong, even for the best interviewers. Psychology has studied this a lot. No matter how confident they are of their gut, it’s misleading.",
                                    "score": 5,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 2,
                            "replies": [
                              {
                                "author": "BiteFancy9628",
                                "body": "Anecdotes. Yes bad referrals happen. Studies and surveys have shown in the aggregate referrals work better.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "elprophet",
                        "body": "&gt; after taking with someone for 5-10 minutes, I can predict how well they will do \n\nAnd then I spend the next 35 minutes trying to get them to prove me wrong. About 1 time in 10 (out of... more than a hundred less than a thousand?) I'll find something to change my mind. But \"importantly\" for HR, I now have a document with my reasoning.",
                        "score": 9,
                        "replies": [
                          {
                            "author": "tiplinix",
                            "body": "Confirmation biais is a hell of a thing.\n\n\nOne thing that helps is taking notes of what's actually being said (within reason) and not the impressions — e.g. avoid writing \"the candidate seems good at X\" but \"the candidate said X when I asked Y\" — so that you then read your notes a few hours after the interview and compare with other candidates.\n\n\n\nI had some candidates that sounded quite convincing in the moment but after reading the notes it was clear they were bullshitting they way through the questions.",
                            "score": 12,
                            "replies": []
                          },
                          {
                            "author": "robotrage",
                            "body": "&gt; I'll find something to change my mind\n\nso you already made up your mind?",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Worsebetter",
                    "body": "Did you pass up someone better because they were not as good on your “gut” only to hire someone adequately mediocre who gets the job done, because they remind you of an old friend from college.",
                    "score": 21,
                    "replies": [
                      {
                        "author": "barrows_arctic",
                        "body": "A bad hire is 100 times more costly than missing out on a good hire.",
                        "score": 25,
                        "replies": []
                      },
                      {
                        "author": "757DrDuck",
                        "body": "People forget the wide gulf between adequately mediocre and annoyingly incompetent. The mediocre but adequate guy is probably losing the business money, but he’s not a detriment to team morale.",
                        "score": 16,
                        "replies": [
                          {
                            "author": "MassiveInteraction23",
                            "body": "Depends on the caliber of the team.  \n\nIf you’re into (or used to) a team that energizes you and has your back (“A-Team” style, to borrow from Bryan Cantrill) then “mediocre” will likely be very bad for team morale.\n\nIf you’re into (or used to) a team of people that firstly just want to collect a paycheck, then it may not be so bad for morale, but … I dunno, probably not a ton of morale there to begin. 🤷",
                            "score": 4,
                            "replies": []
                          },
                          {
                            "author": "Worsebetter",
                            "body": "Yes, perfectly mediocre. All else be damned.",
                            "score": 8,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Shookfr",
                    "body": "I trust my gut instinct only on good profiles.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "josluivivgar",
            "body": "software engineer interviews are maddening....\n\nthey make no sense, they want 5+ years of experience on specific things, which is a random arbitrary number, then test you on basically college problems in the actual interview....\n\ncollege problems that 99.99% of the time have nothing to do with actual work you will do, on an environment that's time limited and basically makes anyone nervous, much more someone who IS a nervous person at a job filled with introverts.",
            "score": 27,
            "replies": [
              {
                "author": "st4rdr0id",
                "body": "&gt; they want 5+ years of experience\n\nI have double that, my CV matches requirements almost 1:1, I often get past several technical interviews and and I'm still not getting anywhere in 99% of the applications.\n\nThis is not really about wanting experienced employees. The biggest tech corporations have laid off thousands of random engineers overnight, experienced or not. There is no logic behind it.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "That is not true, r/cscareerquestions told me that it is entirely meritocratic and fair.\n\nEdit : Hiring makes no sense, it is a game, but nonetheless a game worth practicing and improving for now unless the market gets real, real bad.",
            "score": 102,
            "replies": [
              {
                "author": "redactedbits",
                "body": "To be fair, that sub just perpetuates many of the problems in our industry and doesn't give very good advice in the first place.",
                "score": 59,
                "replies": [
                  {
                    "author": "mightymonarch",
                    "body": "One of the participants in a work-related sub I'm in made a reputation for himself in the work-sub for constantly being actively hostile towards IT/developers (so, he's not a developer himself), and he's started posting advice in cscareerquestions recently. You can guess the quality and relevance of his advice. \n\nI suspect he jumped to cscareerquestions because he exhausted the patience of every developer in the work-related sub, and he decided he needed a newer, bigger audience to spout his nonsense at. My point being, not everyone posting in cscareerquestions is even there to help; some are just stirring the pot for their own jollies.",
                    "score": 20,
                    "replies": [
                      {
                        "author": "SakishimaHabu",
                        "body": "Name him? ( don't do the u/&lt;user-name&gt; mark up cause I don't want to summon the goblin)",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "dotnetdemonsc",
                    "body": "That sub views anything less than FAANG as not worth the time of day. To them, there are no other organizations that need programmers.",
                    "score": 24,
                    "replies": [
                      {
                        "author": "hashtagdissected",
                        "body": "Actually that sub is full of people in denial that good roles exist",
                        "score": 12,
                        "replies": [
                          {
                            "author": "FuckIPLaw",
                            "body": "When in reality boring jobs at banks, insurance companies, and various industrial suppliers are the backbone of the industry. The flashy silicon valley stuff is impressive, but most developers don't ever work there.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "hashtagdissected",
                                "body": " But they exist, and are very real",
                                "score": 2,
                                "replies": []
                              },
                              {
                                "author": "[deleted]",
                                "body": "[deleted]",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "FuckIPLaw",
                                    "body": "All over LinkedIn last I checked. Are you looking locally or just in Sillicon Valley (you know, assuming that isn't what local means for you)? You should also make sure your LinkedIn page is up to date and set it to open to work if you're looking. I got my current job (definitely not FAANG, but fully remote, well paying for my area, and much lower stress than a FAANG job would be) through a recruiter there, and as far as I know it wasn't actually listed anywhere, they went entirely through recruiters. I still get the occasional e-mail from a new recruiter, too, so I know there's still companies hiring that way.\n\nThe job market is *shit* for fresh grads these days, but if you've got some experience there's companies hiring. I will say you've been in a lot longer than I have, though. Maybe you've got too much experience or you're at least expecting higher pay than I am because of that experience and having a harder time finding jobs that line up with it.",
                                    "score": 1,
                                    "replies": [
                                      {
                                        "author": "[deleted]",
                                        "body": "[deleted]",
                                        "score": 1,
                                        "replies": [
                                          {
                                            "author": "FuckIPLaw",
                                            "body": "Well there's your problem. You don't have to use it like Facebook and make posts. It's also a job board and digital resume with room to go into much deeper detail about your skills and experience than a paper one. That's where all the jobs in this field are posted these days, and searching for keywords in those resumes is how the recruiters find people for the ones that aren't posted. \n\n\nIf your only experience with it is screenshots of start up CEOs and marketing people making dumb blog posts in their feeds, I get why you'd be averse, but that part of the site is irrelevant to us. For them it's kind of part of the resume, because their jobs are bullshit like that. Ours are a lot more concrete and involve less posturing and more doing.",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "That sub is also mostly college students or new grads LARPing as actual people in the field. It's exhausting dispelling all of the nonsense espoused by the children in there.",
                "score": 13,
                "replies": [
                  {
                    "author": "hashtagdissected",
                    "body": "IME it’s actually mostly people working at non tech companies who for some reason don’t want to believe that there are well paying roles with good WLB out there (which they too have a chance at)",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "Meritocratic. Haha, fuck no. \n\nOut of all the hiring processes, tech hiring has the most disjointed set of interview experience and actual job requirements. \n\nIt’s actually relatively very easy to crack this “meritocratic” hiring process, you just gotta approach it like the SAT or GRE. Heck, entire books and websites are dedicated to exactly this. \n\nBut look at other places (actual job boards and communities), and not this sub full of college students who think of life as “FAANG (as a millionaire)” or nothing. \n\nIf tons of actual senior level devs are coming out and saying they probably cannot pass tech interviews today, it’s broken at some level. Yes, tech hiring tries to be unbiased…but the things they’re testing you on has become disjointed with what a job needs. Because these questions are mainly Math puzzles at this point…not the kind of product or systems design that the job would actually entail. \n\nTons of places in tech now give you take home assignments that replicate the job better. White-boarding interviews are now focusing more on how you think, instead of if your code passes 115 arbitrary tests. But, there are still long ways to go.\n\nThis is all assuming you got an interview in the first place.",
                "score": 4,
                "replies": []
              },
              {
                "author": "janyk",
                "body": "Unless?  The market already is real, real bad and the fact that you have to practise strictly for hiring is evidence of that.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Big_Combination9890",
        "body": "&gt; Create standardized, practical tests that actually reflect job requirements\n\nAmazing idea. Meanwhile, what will happen if this was actually implemented, is what I like to call the \"Leetcode Effect\":\n\nPeople will rote-memorize your standardized tests. Note that I haven't used the word \"learn\" in this sentence. Because they will not \"learn\" anything. They will memorize the test questions, and then regurgitate them in your face when asked. And, ofc, very soon some \"revolutionary\" AI system vendor will also \"demonstrate\" that his \"close to AGI\" system does better than 89% of human applicants in \"solving\" your hiring process.",
        "score": 62,
        "replies": [
          {
            "author": "CyberWank2077",
            "body": "&gt;And, ofc, very soon some \"revolutionary\" AI system vendor will also \"demonstrate\" that his \"close to AGI\" system does better than 89% of human applicants in \"solving\" your hiring process.\n\nlove it when people say how smart AIs are coz they solve actual problems. Then you invent your own extra section to the problem that does not exist on the internet and the AI starts shitting itself.",
            "score": 11,
            "replies": []
          }
        ]
      },
      {
        "author": "lechatsportif",
        "body": "You need a healthy junior pipeline, but you also need experience running the ship.  Less experienced people will fall into every time sucking trap imaginable, while they wouldn't even show up on experienced devs range of possibilities.  \n\nIt's not a reflection on the intelligence of the talent.  I would argue the most damaging inexperienced devs are actually the smartest and most ambitious.  They'll have enough influence through charisma and pedigree to do the most damage.  They'll also leave for just that reason after they realize what happened.  More often than not they'll pivot to leadership as soon as they can.",
        "score": 31,
        "replies": []
      },
      {
        "author": "davecrist",
        "body": "The real problem is that for some segments of software application development there is almost no correlation of years of experience and ability to do the work. I make web applications and I’ve got some senior devs that are great and I’ve got devs in their first job out of undergrad that run circles around some of my devs with more than a decade of experience.",
        "score": 477,
        "replies": [
          {
            "author": "BellacosePlayer",
            "body": "There's defeinitely a general correlation, but I've worked with 20 year devs who couldn't find their ass from a hole in the ground, and currently work with a really young guy who is really fuckin good.\n\nSadly, outside of him, I have not had much luck with coworkers significantly younger than me.",
            "score": 65,
            "replies": [
              {
                "author": "davecrist",
                "body": "My perspective is mostly based on their resume, site unseen. 20 year devs actually can jump into something completely unknown and *throw down* but that my base level expectation for a professional developer with 20 years of experience.",
                "score": 12,
                "replies": [
                  {
                    "author": "b0w3n",
                    "body": "You tend to get pigeonholed as a senior dev sometimes.  I've been working with integrations and restful apis in server/desktop environments for something like 12 years.  It'd take me a bit to get comfortable with angular or cloud based shit.  But if you need some esoteric file parsing I'm your dude.  The problem is I don't even get the time of day since I haven't touched it, they make their snap judgement 30 seconds into an interview (look at some of the top level comments about that).  Heaven forbid it take me a week or two to get up to speed.\n\nNo FAANG in your resume?  Good luck.",
                    "score": 30,
                    "replies": [
                      {
                        "author": "fdar",
                        "body": "&gt; No FAANG in your resume? Good luck.\n\nStill some of this issue with FAANGs, specially since *some* use their own versions of everything so then you don't know the tools they're talking about even if you've worked with very similar versions of them.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "bundt_chi",
            "body": "You need a mix. I'm dealing with smart young devs that while they write clever code and use latest and greatest libraries and frameworks. They're still very green to the multitude of ways shit can go sideways in prod.\n  \n\n* Consistency in error reporting \n* Useful information to trace issues in a distributed microservice environment\n* The plethora of ways your clever feature can be misunderstood or confusing to users\n* Planning and thinking through soft requirements that come out as you think through how an app will be used or O&amp;M processes that might need to handle certain  situations\n\n\nI could keep going. Senior devs don't always have these learned battle scars and younger devs aren't always ignorant to these types of considerations but that's overwhelmingly the case IMHO.",
            "score": 59,
            "replies": [
              {
                "author": "davecrist",
                "body": "I absolutely agree with all of this",
                "score": 5,
                "replies": []
              },
              {
                "author": "pheonixblade9",
                "body": "yup, this is how I describe myself.\n\nmost of the juniors I work with are likely better coders than me, in terms of productivity and getting features out. but I have fewer blind spots and can save people around me a LOT of trouble. I'm the \"no drama when it hits prod\" guy. My skillset is pretty uncommon, so I do okay, but it definitely is more specific than the average fungible senior IC. I can throw down and ship code quickly, for sure, but it's just more draining for me.",
                "score": 6,
                "replies": []
              },
              {
                "author": "n3phtys",
                "body": "I'm even stricter: I think developers who have few years at a very large software company are often even worse, because those companies have incredibly specialized teams and processes to interface between those teams. Most companies with less than 10000 employees do not have those. Most systems are thrown together and sub-optimal, and sometimes require looking up old documentation yourself. If you spent 5 years only coding CRUD REST endpoints but actually never had to deploy or monitor your app in production, you will never have seen the prod issues. The same goes for bureaucracy issues.\n\nI had an ex-FAANG developer who was unable to build a Docker image of the project they have been coding in for a year within a few hours. It blew my mind.\n\nI don't need someone who can do anything. But if you are a senior web developer, have at least once set up a website yourself in your life. For seniors, I think it's even important to witness a DoS attack in action once. And to fully get the stamp of approval, tell me how you DDOS-ed yourself once. Every web developer does in their first 5 years. If you do not have a story about that, you either never even went to production deployment, or you stopped caring after that moment and never even knew.",
                "score": 15,
                "replies": [
                  {
                    "author": "brainchrist",
                    "body": "&gt;I had an ex-FAANG developer who was unable to build a Docker image of the project they have been coding in for a year within a few hours\n\nMaybe they haven't used docker before? I don't know I guess I'm just frustrated because as a senior dev people have really specific asks related to the domain they are familiar with. Like give me some time to research the process and I could do it? But a couple hours? For someone who hasn't been previously tasked with making docker images? Why is that an expectation?\n\nAlso I'm taking the bait - how do you DDOS yourself? If someone asked me that in an interview I'd definitely admit I have no idea how I'd fuck up that badly and definitely haven't had enough resources at my command to do that.",
                    "score": 15,
                    "replies": []
                  },
                  {
                    "author": "b0w3n",
                    "body": "Not exactly a DoS per se, but I remember bringing down a webserver because my log files didn't have limits and an error didn't have rails to make sure it didn't endlessly log itself.\n\n200 gigs of the same error over and over pulled down the server.  (This was back when colos/shared servers and 50mb accounts were common).  I got a tongue lashing that day by my boss.\n\nThose were the days.",
                    "score": 5,
                    "replies": []
                  },
                  {
                    "author": "Easy-Bad-6919",
                    "body": "The specialization thing is true. When I worked at smaller companies I had to code the projects, and deploy them, and do the networking, and server maintenance and pretty much everything conceivable to get projects working.\n\nAt the big company I work for now, I just code and everything else is handled by someone else.",
                    "score": 4,
                    "replies": []
                  },
                  {
                    "author": "munchbunny",
                    "body": "&gt; I had an ex-FAANG developer who was unable to build a Docker image of the project they have been coding in for a year within a few hours. It blew my mind.\n\nThis part is absolutely true, and entirely due to needing highly specialized tooling to operate at tech-giant team sizes. I started in tiny, early startups, and have spent the last few years in a tech giant. In my opinion the part that matters is whether you are willing to learn the systems end to end. Some people are, some aren't. Those that aren't will need to stay in big-tech.\n\nIt would take me several days to set up a new repo with CI/CD because I just haven't needed to do it for several years, despite having done it plenty of times in my previous roles.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "stahorn",
                "body": "+1 for the mix. Young employees with a burning desire to learn and prove themselves with a mix of oldies that prevent the young ones from burning themselves (and the team) in bad ways. Just make sure the young ones still get to burn themselves a little. When it comes to learning, it's one thing to hear someone say that something is a bad idea and another to experiencing why. Once in a while also, someone figures out a great idea that you didn't think was possible, only because you let them take a chance.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "KSRandom195",
            "body": "I’d bet a dollar to a donut those “first job out of undergrad” have been doing personal projects for several years, possibly even the 5+ described.\n\nYou don’t just run circles around good senior devs with no practical experience.",
            "score": 323,
            "replies": [
              {
                "author": "jdehesa",
                "body": "Tbh there are senior devs that are senior simply because they have been on some role for a number of years but shouldn't be so. I have seen people with many years of experience make huge mistakes in terms of code structure and quality. They usually can \"get the job done\" but don't know or don't care that there are better and worse ways to do things. They also tend to insist on doing things in the style of the language or framework that they got the most experience with and refuse to adapt to the different ways of working that different projects or tools require.",
                "score": 187,
                "replies": [
                  {
                    "author": "awj",
                    "body": "Some people have five years of experience and others have repeated one year of experience five times.",
                    "score": 137,
                    "replies": [
                      {
                        "author": "zelphirkaltstahl",
                        "body": "That is such a great way of putting it, that I will steal it. Thank you.",
                        "score": 10,
                        "replies": [
                          {
                            "author": "awj",
                            "body": "That’s only fair, I stole it too.",
                            "score": 10,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "aeric67",
                    "body": "That’s mostly because of the value of always be shipping. A junior dev may not grasp that importance yet and wants to tinker in engineering utopia for longer. Especially since they are learning more still. A senior dev has seen lots of shiny in their life. They just want to produce now.",
                    "score": 46,
                    "replies": [
                      {
                        "author": "rollingForInitiative",
                        "body": "It's not really an absolute, and the entire span exists. Great senior developers stand in the middle. They're skilled and talented and care a lot about building good stuff. But they also know that sometimes you simply don't have the time, and then they know how manage and communicate the technical debt that the rush will accrue. This can be someone that's worked for 5 years, or for 35. \n\nBut there are definitely people who've worked for 20+ years that don't care much and will just do things the way they've done them for 20 years even if it's not really great, or if it makes maintenance worse for everybody else. They might be \"good enough\" but have no interest in improving, or having the way things work change.",
                        "score": 27,
                        "replies": [
                          {
                            "author": "Space-Dementia",
                            "body": "Depends on the product for me. I pushed for a tech refresh of our core cash-cow product (20 years old) and we've built the foundations for that solid as a rock, as I know its going to have a long lifespan.\n\nIf the business pitches me some new loony idea from the director I'm developing that in the quickest way possible to get it done and out the door to see if it becomes a question mark, or more likely a dog.",
                            "score": 6,
                            "replies": [
                              {
                                "author": "rollingForInitiative",
                                "body": "All depends on context. Like I said, a good senior developer knows when it's fine to cut corners and when it's not. And they also know how to lay out the consequences of cutting corners to the one that makes the decision. What you say works fine sometimes as well. It's mostly a matter of knowing when which approach is the best ... which isn't always easy.\n\nBut some junior developers are pretty good at it, and some very old developers are terrible at it.",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "Space-Dementia",
                                    "body": "Absolutely. I've spent many years trying to break down the barriers between the business and development. Primarily that's been convincing senior management to never re-hire IT middle management positions.\n\nNow I work directly with the general manager. I would urge everyone to try to try and structure their businesses like this. It requires both a high level of trust and communication though, which needs to be built up over time.\n\n&gt; lay out the consequences of cutting corners to the one that makes the decision\n\nYes! I usually present 3 options, fast and dirty, middle of the road, and fully engineered tank of a system.\n\nWith those 3 options, I typically go with very agile for the first, and tending towards waterfall for the last. A good example of the latter was an integration with a fuel forecourt controller. We simply need to power through and get all the protocol layer/integration with the API written and done - there is zero need for it to be agile, it can just literally be someone sat in a room for 2 months doing it.\n\nPeople are always looking for some panacea (typically management) in software development. Its mostly making common sense decisions in good faith from all parties, that's it. Once you start to get middle management evangelists involved everything goes to shit I find.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "putin_my_ass",
                        "body": "It's also that new projects are presented with an immediate \"how long?\" question.  Hard to estimate when you are tinkering, easier if it's a platform and a language you're very familiar with.  It's easy to see how people get entrenched in their preferred environment and miss out on more recent developments.",
                        "score": 17,
                        "replies": [
                          {
                            "author": "b0w3n",
                            "body": "I see a lot of folks miss the mark on jr devs too.  In my experience, they typically \"get lost in the sauce\" and pre-optimize.  So what seems like shitty code structure is just habit of delivering a proof of concept or \"getting it working\" without spending 2 weeks on something that should take a day or two because you want clean and perfect code.\n\nI've seen junior devs pre-plan their project for months and miss schedules because they're trying to design infrastructure half a decade out.  How many times have we had discussions about \"you don't need to design your web app to handle a million concurrent users when you have 3\"?  With that said.. yes senior devs fuck up often as well.  That's okay, we're all working together nobody is perfect.",
                            "score": 7,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "BiteFancy9628",
                    "body": "OMG I felt like you were describing where I work.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "wgrata",
                "body": "I've found it's grit that matters, people that won't quit until they understand and can fix the issue. People that get frustrated and lost so they give up, they just can't hang. ",
                "score": 14,
                "replies": [
                  {
                    "author": "Markavian",
                    "body": "+1 Lots of people can write code; but the ones who are willing to stick it out and diagnose/debug code all day are the ones who stay programming.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "kaeptnphlop",
                        "body": "This. I’ve had my share of issues that took a lot of head vs wall bashing until they were resolved. Sometimes only to find the issue in a 3rd party library that then required reaching out via GitHub issues or fixing it myself and entering a PR.\n\nNot the most pleasant of times, but in the end it’s very satisfying and you get some good stories out of it. ",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "andarmanik",
                "body": "I agree with what ur getting at. There this unfortunate fact about software which differentiates it from say physics or chemistry which is that you don’t need large expensive equipment to get “experience”. When it come to software, everything in terms of experience can be obtained with close to zero cost.\n\nThis is striking because the experience you gain while unemployed is not valued, even though it very well is the exact same experience.\n\nIn theory if I wanted to do chemical engineering, for me to get experience with equipment I either have to work or get some sort of internship because there is no way for me to obtain that experience otherwise.",
                "score": 23,
                "replies": [
                  {
                    "author": "edgmnt_net",
                    "body": "&gt;This is striking because the experience you gain while unemployed is not valued, even though it very well is the exact same experience.\n\nYou're otherwise correct, but I'd say it is valued, yet in a lot of cases it just isn't good or easily verifiable experience. That being said, you can freelance, contribute to open source or work on a really good personal project with good visibility, but most don't and only have one or a few toy projects to show, which isn't very compelling. We can argue that's a high bar, but I think it works. I myself pretty much skipped juniorship, at least considering more traditional jobs.\n\nAlso in high cost of employment areas, employers tend to shy away from giving anyone a chance, despite requirements being relatively low. They have plenty of candidates to choose from at the lower end and in very popular fields. Interviewing also focuses on proxy indicators more than anything, and that's not really absurd considering most candidates probably won't pass an actual hands-on interview and require extensive ramping-up, hence leetcode and other insanities. Lastly, company staff may also lack the experience to filter candidates appropriately beyond those things or there may be internal procedures which are harder to bypass. Anyway, it's not very hard to end up with devs which underperform even when they do pick and choose.\n\nThis is a distinct and real advantage in software development, but I'm not sure many people leverage it appropriately.",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "davecrist",
                    "body": "I go back and forth wondering about ‘professionalization’.  Should there be a certification for someone to be called an engineer?  In some cases, maybe. But I know that for the vast majority of web applications, even ones with a global reach with hundreds of millions of profit, the average consumer would be *shocked* with how utterly brittle and adhoc much of enterprise software is built.\n\nEdit: I meant software engineers as in enterprise software developer. ‘Real’ engineers are certified with a minimal level of rigor that, ostensibly, means something. At least I assume because I’m not one.",
                    "score": 15,
                    "replies": [
                      {
                        "author": "KSRandom195",
                        "body": "A lot of the other engineering fields don’t consider software engineers to be “engineers”.\n\nIf you want to see that kind of rigor in software, look at [how NASA does it](https://www.fastcompany.com/28121/they-write-right-stuff).",
                        "score": 12,
                        "replies": [
                          {
                            "author": "Sage2050",
                            "body": "Software Engineers exist but the title is definitely over prescribed in the industry.",
                            "score": 11,
                            "replies": []
                          },
                          {
                            "author": "iNoles",
                            "body": "It is funny how Margaret Hamilton cointed the term for \"software engineer\" for the Apollo missions. Also, she felt that Software Developer have a right to be called software engineer. \n\n  \n[https://www.hackreactor.com/resources/the-history-of-coding-and-software-engineering/](https://www.hackreactor.com/resources/the-history-of-coding-and-software-engineering/)",
                            "score": 3,
                            "replies": []
                          },
                          {
                            "author": "davecrist",
                            "body": "Of course. I was absolutely overloading engineer when what I really meant was ‘enterprise developer’",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Patriarchy-4-Life",
                        "body": "Almost all \"real\" engineers don't have PE licenses and will never qualify for being allowed to apply for one despite relevant degrees and careers. PE licenses are for a small niche group of engineers. So very unlike doctors and lawyers who must have relevant licenses.",
                        "score": 2,
                        "replies": []
                      },
                      {
                        "author": "Markavian",
                        "body": "But that's the difference between a programmer and an engineer. I'm an engineer in part because I have a software engineering degree. I could program for five years before I started my degree. I didn't start thinking like an engineer until my fourth job in my mid-twenties.",
                        "score": 5,
                        "replies": [
                          {
                            "author": "davecrist",
                            "body": "The threshold is still different than being an engineer. I mean, can you imagine if bridge builders were able to just call themselves engineers?  I’m sure there are some brilliant folks that could build a heck of a bridge through some school and self learning but in general I probably wouldn’t drive my car over bridges built by those kinds of folks.",
                            "score": 4,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "lqstuart",
                        "body": "It’s actually been a while since I saw this debate get rehashed on the internet\n\nThe answer is 1) “real” engineering is easy as fuck and that’s probably why it pays dick, and 2) the only acceptable term should be “computerman”",
                        "score": 3,
                        "replies": [
                          {
                            "author": "13steinj",
                            "body": "I prefer [hackerman](https://i.ytimg.com/vi/KEkrWRHCDQU/maxresdefault.jpg).",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "JarateKing",
                        "body": "At least in Canada, \"engineer\" is a protected title for people who are licensed with some specific organizations.\n\n\nIt's not just that my work isn't held to the same standard as, say, structural engineers where people will die if they mess up. It's that I don't even share the same responsibilities over my work -- my license isn't on the line if I do something bad, there is no license.\n\n\nI just call myself \"programmer\" for that reason.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "caltheon",
                            "body": "I mean...technically, but nobody follows or cares about the POE's regulation unless someone starts trying to use the title for purposes that a certified engineer should be doing.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "au5lander",
                        "body": "https://www.hillelwayne.com/post/are-we-really-engineers/",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "awitod",
                    "body": "Working in AI/ML can be very expensive",
                    "score": 2,
                    "replies": [
                      {
                        "author": "andarmanik",
                        "body": "I’d say otherwise unless you are trying to do vision or NLP. But 90% of the ML/DS career is not neural nets/transformers but rather small decision models you could create by yourself with tensor flow and public data.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "hitchen1",
                    "body": "&gt; This is striking because the experience you gain while unemployed is not valued, even though it very well is the exact same experience.\n\nFor writing code sure, but that is only half of the job",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "robby_arctor",
                "body": "&gt;You don’t just run circles around good senior devs with no practical experience.\n\nI don't think the other commenter was talking about good senior devs.",
                "score": 4,
                "replies": [
                  {
                    "author": "KSRandom195",
                    "body": "Ah, on re-read that’s fair.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "No_Indication_1238",
                "body": "Yeah, but since it wasn't official work experience, it doesn't count. ",
                "score": 2,
                "replies": []
              },
              {
                "author": "dongus_nibbler",
                "body": "I've worked at two companies now where full stack senior developers couldn't grasp SQL and didn't understand database normalization. I've lost all faith that titles are merit based these days.",
                "score": 2,
                "replies": [
                  {
                    "author": "Tasgall",
                    "body": "I think the problem is that every role is lumped into \"software engineer\" at this point regardless of specialization, and \"full stack\" isn't much better (what stack?). Systems Administrator? Database Engineer? Nope, \"Software Developer\", \"Full Stack\" if there's a chance they'll need you to do JavaScript at some point. You can do a lot without having to directly manage a SQL database.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "dongus_nibbler",
                        "body": "I totally hear you on that - there's definitely niches that don't require relational database knowledge to be useful. I wouldn't expect senior frontend developers or Unity game devs to know how to design a relational database.\n\n\"Full stack\" IMO implies a generalist who knows how to be useful in the whole web stack, from persistence to rendering. It's specifically a web development role. If those full stack developers only use nosql or persistence is an external service or the application is stateless, that's great, but I'd still expect my senior devs to know how to efficiently organize schema if the need ever came up, lest we find ourselves with myriad performance problems, data redundancy and deletion anomalies.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "janyk",
                    "body": "Titles havent been merit based for a long time but what in the absolute mother of fuck?  Fullstack seniors not knowing SQL or normalization?  That's an extra level of crazy, something is going wrong with those companies",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "davecrist",
                "body": "Again, there’s no correlation.  Some, yup: they are the kind of folks that code at home ( though oddly this is way more rare than when I was in the thick of it) and there are some that development is just a job that they show up and do and then leave and never think about at home.",
                "score": 2,
                "replies": []
              },
              {
                "author": "bazooka_penguin",
                "body": "Kids learn faster than guys in their 30s, speaking as a developer in my 30s who's worked with rotating groups of new grads. College grads are still young enough to pick things up nearly instantly, and they aren't very opinionated about technical stuff, so there's no barrier for learning. I've seen far more ego and arrogance from older folks who are really entrenched in, not only their technical knowledge, but their seniority and the codebase they worked on.",
                "score": 2,
                "replies": []
              },
              {
                "author": "13steinj",
                "body": "There exist Senior devs simply due to being at the same company for a certain number of years.\n\nThere exist great Juniors who are legitimately just talented (and statistically, high-functioning autism spectrum disorder) that don't have personal projects.\n\nThere are also those who put in the effort, whether it be personal projects or not, whether those personal projects be public, or not.",
                "score": 1,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "Started programming at 8. First paid dev job was 21. Walked in the door with over a decade of experience. Looks can be deceiving.",
                "score": 1,
                "replies": []
              },
              {
                "author": "CreativeGPX",
                "body": "Absolutely. I got a computer science degree and maybe 2/3 of the students were kids who, when they were high school senior, decided maybe computers was interesting and entered that degree. They had zero computer experience. The other 1/3 (that I was a part of) were people who had been installing OS, writing programs, configuring servers, building computers, etc. in middle and high school for fun. By the time they entered their CS program they had a ton of experience and were really just rounding out the corners of their knowledge. It was a night and day difference.\n\nHowever, web dev is definitely more extreme than general software engineering in terms of how much the skillset changes over the years. There was a time in my career, in the prime of IE6, when I would have said that one of my biggest differentiators from a new, inexperienced dev was how deeply I knew all of the quirks and workarounds for each browser. Between HTML5, Chrome, the death of IE6, etc. that skill is now relatively useless. Things I might have spent days working on back then are now basically solved problems because of how much the tools, languages and browsers have developed. So, in that sense, as a person who has worked both in web dev and application dev, it definitely feels like web dev has a much higher rate of your experience becoming completely obsolete and so in that sense it's a lot easier for a person with decades of legitimate experience to be comparable to a person with only a few years of experience if all of that experience is in obsolete things.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "syklemil",
            "body": "There's also the classic split between those who have n years of experience, and those who have 1 year of experience repeated n times. \n\nI suspect the people who are just repeating the little they already know would be happier in another field or company, if it only paid as well and was as comfortable as their current job. That doesn't mean they're bad employees or people or anything, they might be suitably productive and so on, but it does come off as low job satisfaction, and quite possibly an organizational problem.",
            "score": 13,
            "replies": [
              {
                "author": "davecrist",
                "body": "This is a good point and one of the reasons why I weigh applicants who seem to move around a lot. Sometimes it’s because they are great and leverage it to fuel large salary increases, quickly. And sometimes… it’s not.",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "I have my doubts that fresh devs can run circles around devs with more than a decade experience in exactly the same stack...except if those seniors got comfortable and stopped learning or have been horrible to start with...Its also worth noting that growth in the old days was slower than now, purely based on how easy it is to find good learning material or other experts on the subjects. It probably takes less time to git gud today than 15 years ago",
            "score": 24,
            "replies": [
              {
                "author": "davecrist",
                "body": "Being able to pick up new things remains just as uncorrelated. Some breeze through it. Some never quite get it.",
                "score": 17,
                "replies": []
              },
              {
                "author": "zabby39103",
                "body": "Where do you work?  Sounds nice.\n\nThere's a lot of people who just plain suck at my workplace (a big corporation).  No joy, only in it for the money, do as little as possible.  Haven't learned anything new since they graduated, seemingly incapable of learning any new paradigms.  \n\nHave a guy that just won't stop using global variables everywhere, when he commits to git he just erases everyone's changes if there's a conflict, has no concept of basic things like race conditions but writes multithreaded code anyway.  Gets all prickly when you try to help him because he's 20 years older.  He's the only one who knows how to maintain a bunch of undocumented legacy crap though so they keep him around.  Yes he gets paid 30,000 dollars more than me.  He's just the worst, there's more.",
                "score": 4,
                "replies": [
                  {
                    "author": "Rakn",
                    "body": "That's big corporations for you. I didn't learn anything new myself working for one of these. A clear indicator that I needed to switch workplaces again.\n\nRegarding junior devs running circles around senior devs? Maybe for some random web framework / tech stack.. But at some point you run into issues (especially with larger scale systems) where experience starts to matter. You need to have broken / botched this in your past life to know the good from the bad decisions long term.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "zabby39103",
                        "body": "OK, I agree with you on that.  I work with a very large 20 year old Java EE codebase and another newer very large Spring Boot codebase.  I don't think you can wrap your head around massive projects like that without putting your time in.  You can't teach that scale in University, it's not practical, but I think you can get most of the way there in &lt;5 years or so if you're a certain type of person.  So we have 26 year olds that can run circles around people in their 50s. \n\nI'm just saying some people never get it, or they used to get it and the tech moved on without them.  There's two types of Senior devs... people who just got old and are mentally junior devs (and got promoted anyway), and people who learned and made a commitment to continuous improvement.  Yes, there's a lot of people who suck at my work, and the junior devs run circles around them, but there's a few old timers that just blow me away with their talents.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "I had a good chuckle 😅 There is always that 1 person that is just bad at their job, also where i work",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "n3phtys",
                    "body": "&gt; Haven't learned anything new since they graduated\n\nhow do you know?",
                    "score": 1,
                    "replies": [
                      {
                        "author": "zabby39103",
                        "body": "I talk with them regularly about their code?  I see their commits? Look if they learned anything new they must have graduated knowing nothing.  I know the paradigms they are thinking in, they are old and from a specific time period.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "n3phtys",
                            "body": "Problem is, what new things are good to learn (and also adapt)?\n\nTDD and agile development was developed in the 60s. Distributed high-availability systems in the 70s and 80s. State management on the web was solved in the 90s. Hell, 20 years ago was the big AI hype.\n\nIt's only that the industry keeps reinventing the wheel. Once you see those cycles a few times, you become way more selective on what trends to follow.\n\nAlso, for company developers, often time technology and knowhow is not the limiting factor. Politics and bureacracy are way more important. Therefore learning something new rarely leads to applying this in your current job.\n\nI've known countless developers like the ones talking about. I've also thought them unable to learn or even stay informed, until I've seen some of their open-source projects, or work for other companies.\n\nThere is a reason we're not rewriting everything in Rust.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "munchbunny",
                "body": "Definitely agreed here. There's definitely some exchange rate for energy and enthusiasm vs. experience, but fresh-out-of-college devs almost always lack too much experience to close the gap. Where I see junior devs outrunning (poorly performing) senior devs is almost always on engagement, work ethic, and a desire to learn new things.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "READMYSHIT",
            "body": "The real problem is a lack of actual formalized training across nearly all industries. It's been offloaded onto academic education institutes. \n\nYears past my grandparents generation talk of every job they'd ever had involving initial training. My grandfather was an aircraft mechanic and his employer paid for all of his training. My grandmother was a bookkeeper and same story. \n\nFeels like today you have to lie your way into a job and hope you pick it up along the way. Universities have become vocational training as best they can and devalued any notion of academic pursuit.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Cute_Suggestion_133",
            "body": "New minds, fresh ideas.",
            "score": 2,
            "replies": []
          },
          {
            "author": "mailslot",
            "body": "It totally depends on the code base. Not putting a junior on embedded work for industrial robotics controllers.",
            "score": 2,
            "replies": []
          },
          {
            "author": "Chii",
            "body": "&gt; devs with more than a decade of experience.\n\nspending a decade making the same mistakes and never learning!",
            "score": 1,
            "replies": []
          },
          {
            "author": "Easy-Bad-6919",
            "body": "Really? I have encountered my share of poor senior hires, but I have never met a young/fresh dev that didnt struggle with the following problems:\n\nCommon problems with new devs:\n1. Obsessed with hype and thew newest whatever\n2. No thought to the maintainability of what they make.\n3. Tend to over architect/overcomplicate every task.\n4. Poor self testing and tons of simple mistakes",
            "score": 1,
            "replies": []
          },
          {
            "author": "drawkbox",
            "body": "That is why projects you do in app/web and shipped titles in games matter more than experience really. Shipping and doing beats everything. Always go into a job or applying process with at least prototypes in their target market or similar.\n\nApplying to a game studio that does 2d animated fighting games? Do a 2d animated fighting game... then apply and land the job just discussing that project.",
            "score": 1,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "And those first job devs at this point it time will look terrible against their 5 year in the future self. A bad dev will always be a bad dev but a good dev will always be moving towards being a better dev.",
            "score": 1,
            "replies": []
          },
          {
            "author": "PiotrDz",
            "body": "Thats true. U can find inly one point in favour of using years worked: maturity. Unfortunately when deadline approaches the young age can show itself, it is that when people get older they are less emotions-driven. But I wouldnt see it as a major blocker",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "jase12881",
        "body": "I think the problem in a lot of this is the amount of time and effort that other methods would require.  I mean, I can see that it would ultimately be worth it, but most hiring managers I've ever known kind of just want to get the process over with.\n\nIt's way easier to say: \"I want someone with 5+ years experience\" than to actually test for proficiency. \n\nAlso, most of the time, the hiring manager wouldn't recognize proficiency if it slapped them in the face.  They simply don't have the knowledge of the thing they are hiring for to even begin to test for it.  \n\nThat's not to say I disagree with this article. I'm just saying that I think it will be difficult to change the process.\n\nIn my experience, though (and admittedly, I'm not a developer), I almost always prefer to work with a person who's intelligent, interested, and willing to learn over a person who has more experience but thinks they know everything about everything.",
        "score": 56,
        "replies": [
          {
            "author": "happyscrappy",
            "body": "Yes, being easier is a big part of it, I think you nailed that.\n\nBut the bigger part is they just are looking to cut down on the number of resumes they get. The recruiter is. So here's the secret:\n\nJust apply anyway. And if the manager sees your resume and likes it you'll still get the interview. What other way do they have to find out about you? Their interest is piqued, they have no other way to solve that.",
            "score": 6,
            "replies": []
          },
          {
            "author": "TerryC_IndieGameDev",
            "body": "Yes I 100% agree with you. I do not think things will change, I just wish they would. Thank you for taking the time to read my article.",
            "score": 8,
            "replies": []
          },
          {
            "author": "Kinglink",
            "body": "&gt; test for proficiency.\n\nDefinitely easier, but I'd like to see a test to prove someone's a \"Senior\" or a \"junior\"  We already have people bitching that it's a 4 hour test to get a job.  We have people who are angry they're asked any questions on an interview.   But how do you test for proficiency in soft skills?  In leadership, in writing a design document that others understand, in reviewing others design documents, in communication with outside source? \n\nThe thing is both proficiency in languages, and proficiency in soft skills is stuff leetcode would easy invalidate in discussions quickly, but more importantly 5+ years experience also talks about confidence, and the ability to do more.  \n\nThe special junior who is able to act like a senior/lead a team/ handle that work load and more exists, but they are the unicorns.   You could spend your time testing 1000 programmers to find one.\n\nOr you find someone who has 5+ years experience in the industry, and now instead of 1000 programmers, hopefully you have to search through 5-10 at most.",
            "score": 1,
            "replies": []
          },
          {
            "author": "aragost",
            "body": "HR might not recognize proficiency, but I sure hope the hiring manager does, otherwise they have a much bigger problem",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 132,
        "replies": [
          {
            "author": "fordat1",
            "body": "Its the same in a lot of the supposedly professional subreddits for in demand roles that are flooded with people trying to “break in”. The folks dont seem to understand or want to understand the point is to fill a role as quickly as possible so it isn’t feasible to interview everyone",
            "score": 35,
            "replies": [
              {
                "author": "sprcow",
                "body": "I think it's especially true for fields that are viewed as lucrative, because the job market is flooded with people who are trying to get a job even if they DON'T have the requisite skills or experience, making it all the more important to have some way of filtering them out.",
                "score": 12,
                "replies": []
              },
              {
                "author": "FocusedIgnorance",
                "body": "And with somebody who can ramp up as quickly as possible. There's a kind of irony that not understanding the other side of this is likely due to inexperience, and having not seen how badly a hiring miss on a senior role can fuck up a team.",
                "score": 18,
                "replies": []
              },
              {
                "author": "caltheon",
                "body": "I'm so grateful that I'm at the point in my career where the jobs I apply to, they are lucky to get 5 candidates.  Some jobs, even the bullshitters know to avoid.  I've got 20 years of experience getting there though, and I know just how rough that road was.  Think it's bad now, try graduating right before 9/11",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Hopeful-Sir-2018",
            "body": "I think part of the problem is \"entry level\" and \"5+ years of experience\" don't mix.\n\nI had a cheap-skate toxic ass company hire a dude with a Masters and another dude with a PhD in CS. Yeahhh they didn't stay very long.\n\nThen there's the obvious \"needs 5+ years of experience\" in something that's only been out for 1.5 years.\n\n&gt;  Including a minimum YoE saves you time and potential candidates\n\nAnd potentially throws away candidates that would have been a better fit.\n\nLook, I get what you're saying - but the problem is companies have abused it so much - no one believes them anymore.\n\nYou could have Intel advertising for someone to work on direct processor stuffs and people would still be like \"uh huh, it's an unpaid internship, huh?\" - there's a **HUGE** trust problem that exists right now.\n\nYoE is one of those that's simply been abused. They'll want 5+ years on what's really an entry level position with entry level pay and wonder why they can't fill the role and seriously think they have to consider H1b.\n\n\"But how else will we know if the person is good?\" - the same way that person knows if you're going to be a healthy work environment - you don't. Arbitrary cutoffs are just that... arbitrary.\n\n&gt;  just like most companies / teams include a bachelor’s degree in something as a lower bar.\n\nA bar you put in place and still wonder why you seem to have hire \"good\" people. You could also ask for a PhD as *something* as a lower bar. Or is that too high? Oh right... see how that works? You picked something... and when it's dumb, companies are still doubling down because \"it's something\" is the very best excuse they have.\n\nKind of like WFH and return to office mandates. \"It's something\" right?\n\nAnother problem is the \"please type in your information\" and then later \"please add your resume\" - mother fucker, are you stupid? It's all in the damn resume. If you're **THAT** lazy then you shouldn't have that position. If the company is asking you to do all that and is cutting you that lean on time - then clearly that's not a healthy company to work for.\n\nI get these conversations bother some of you.. .. but you fail to grasp - managers violated trust first and for years. This is the natural consequences of it. More and more folks are just going to go \"nah\" and you'll be mad wondering why you can't fill the position with someone you want. Or, worse, you'll have someone play your game and in a year they really weren't what you wanted. You got played the same way you played.",
            "score": 14,
            "replies": [
              {
                "author": "PublicFurryAccount",
                "body": "My first memory of the second thing was back in 2008 when every web developer job suddenly wanted 5+ years of HTML5 experience.\n\nEverything you’ve said is exactly right. The people defending this crap are just telling on their incompetence.",
                "score": 9,
                "replies": [
                  {
                    "author": "Hopeful-Sir-2018",
                    "body": "&gt;  The people defending this crap are just telling on their incompetence.\n\nA small handful of them are wrong. Some positions you want that experience and are willing to pay for it. I get it. You may want someone experienced in .Net or, more specifically, someone experienced in either something older or something newer for a specific thing. But the fact that they can't put forth the literal 15 minutes to make sure their request is sane and reasonable... while also crying about having so many candidates they need \"some\" filter is, like you said, telling on themselves.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "PublicFurryAccount",
                        "body": "And now they complain that they're swamped with AI-generated resumes which, my dudes, is more effort collectively than was put into job listings and hiring practices.\n\nI'm not entirely convinced that simply forbidding everyone who's ever made a hiring decision in tech from even *commenting* on another--and I mean on pain of death that's only less immediate for the sake of being painful--to be replaced by people randomly selected by the worst dating program the 1980s could produce would result in worse outcomes.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "Hopeful-Sir-2018",
                            "body": "I know managers who are using AI to do annual reviews because of how company policy is. Basically he's told \"you can only give 1x 5 star, 3x 4 star, and the rest can be 3 or lower\" reviews. So basically if *everyone* went very above and beyond - only one gets it. What's worse? He's also not allowed to tell them about this limitation in case it \"impacts performance\".\n\nIt's..fucking..stupid. They specifically hamstring middle management.\n\nSo this dude I know just said \"fuck it, I'll just use AI to generate the reviews so both I and my dudes look smarter and better\". Apparently upper management doesn't like it because it can create an HR nightmare for some mysterious reason no one understands.\n\nI swear to fuck - companies are sabotaging themselves and it's just *embarrassing*.\n\nIMO it should just be COLA's for everyone average or better. Raises for those who went above and beyond. Bonuses for total work reward distributed as manager sees fit - or assign percentages to the department. This way no one is getting fucked, people who go above and beyond are well rewarded and people who are lazy can still be skipped if absolutely necessary.",
                            "score": 1,
                            "replies": [
                              {
                                "author": "PublicFurryAccount",
                                "body": "People have been doing this for years. I forget where it comes from, some poorly researched management book.\n\nThe fact that all these people read stuff that's at the level of motivational speaking and think it's amazing is the thing that most pushes me to advocate for total communism. I'd much rather they spend their time purging each other.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "munchbunny",
            "body": "In my experience (just north of 10 years in the industry, having hired and managed for more than half of that) requiring 5+ years of experience with any particular technology or stack is BS, and that number requirement pretty much never needs to be more than 2 years. If you need more than 2 years at minimum, the thing you are looking for, subject matter expertise, is probably not measurable in year counts.\n\nAsking for 5+ years of experience as a practicing software engineer in general, however, I think that's a reasonable requirement if you're explicitly looking for senior engineers. It often takes years to get repetitions of seeing how your future-proofing engineering decisions played out in hindsight. Also it takes a few years to mature in temperament and soft skills - just think about how much people mature between their early twenties and late twenties.",
            "score": 2,
            "replies": []
          },
          {
            "author": "Kinglink",
            "body": "This guys BIG discovery is \"We had Five year+ experience people who couldn't solve Fizz buzzs\"  Either Look at your hiring practices, or realize that some people.... I don't know.. LIE on resumes?     Imagine that. \n\nI think this subreddit is at the point we should consider banning medium articles.\n\nEdit: Just saw this guy's post history, all he does is spam his BS.",
            "score": 2,
            "replies": []
          },
          {
            "author": "1s4c",
            "body": "Someone with 25+ years in industry should understand that his anecdotal evidence is not supported by big numbers. Yes, I have seen some young and brilliant developers, but that's probably far from an average job applicant. Companies could spend their time looking for hidden gems, but it would take a lot of time and money. Without some HR prefiltering I would spend years talking to bootcamp graduates even for medior/senior positions.",
            "score": 5,
            "replies": [
              {
                "author": "PublicFurryAccount",
                "body": "The problem is really that there isn’t that big a pool of developers with 5+ years experience looking for whatever job you’re posting unless you’re in the top decile for salaries.",
                "score": 5,
                "replies": [
                  {
                    "author": "1s4c",
                    "body": "Why not? The industry is quite old at this point. It's not eighties anymore. 5+ years of experience is 75% of all developers based on the Stack Overflow survey.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "PublicFurryAccount",
                        "body": "&gt;looking for whatever job you’re posting unless you’re in the top decile for salaries*.*\n\nAnd, yes, it's not the 1980s anymore: no one is just looking for generic developers with experience on anything, they're looking for specialist developers with experience on their stack.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "CathbadTheDruid",
        "body": "Nobody wants innovation. They want to fill a high tech ditch digging seat that's open.",
        "score": 13,
        "replies": [
          {
            "author": "TerryC_IndieGameDev",
            "body": "Yes you are correct. Thank you for taking the time to read my article and comment. I appreciate you.",
            "score": 0,
            "replies": [
              {
                "author": "CathbadTheDruid",
                "body": "That's probably sarcasm, but IDC.\n\nThe days of anybody but huge companies hiring devs are pretty much over.\n\nThere's a reason why Microsoft Dynamics made MS $5B last year.  It's because every SME can't afford to roll their own anymore.\n\nIf I had a kid I'd get them a plumbing apprentice job and keep them the hell away from tech jobs of any sort.",
                "score": 2,
                "replies": [
                  {
                    "author": "TerryC_IndieGameDev",
                    "body": "Not sarcasm at all. I really am thankful when people take the time to read my work and respond. Yeah I am a parent and it is rough, as my son also programs. He also loves robots too, all I can do is love and support him.",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "UniversityEastern542",
        "body": "Good article. A lot of tech management practices are stuck in the mindset of the first dotcom bubble LAMP stack projects.\n\nModern tech stacks are ever-changing and disjointed. Finding unicorn candidates with experience with exactly your tech stack and 5+ yoe might be a good indication they are proficient in contributing to their project... but the fact that someone went through the entire second dotcom bubble without picking up significant new tools or encouraging their employer to adopt some, is a pretty good indication  that person isn't going to be bringing in a lot of new ideas. \n\nThat doesn't mean that 1x, \"I just work to get paid\" devs can't be valuable contributors (in fact, they're the backbone of the industry), but it's weird to see HR at big N or startups bend over backwards to seek these people out, not realizing that they're contributing to the calcification of the industry and the reason that tech has gone from a cool, think-outside-the-box industry, to the boring corporate machines that dominate the rest of the economy.",
        "score": 8,
        "replies": [
          {
            "author": "TerryC_IndieGameDev",
            "body": "Man I could not have worded this better if I tried. Thank you so much for you comment!",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Chris_Codes",
        "body": "I was curious why someone with 25 years of experience would be motivated to write such an article, especially with the line; “Whether you’re a fellow freelancer feeling discouraged by these requirements”. If you’ve got 25 years of experience, and especially if you’ve “worked for countless clients” blah blah blah … then why would you be frustrated by such metrics? As someone who also had been freelance for 25 years and then decided to look for a staff job, I was thrilled when I saw postings asking for 10+ years of experience. \n\nIf it’s a question of “I don’t have the years of experience in the specific tech” then I’d ask; is it because you changed tech specialties every two years or is it because you’re looking at the wrong job postings? It must be one of the two. If I came across a posting that listed 5 required technologies and I had 5+ YOE in 4 of them, then given my background and proven track record, I’d feel pretty confident in my ability to convince someone that I had enough experience with the 5th. \n\nLastly, and perhaps most importantly, there’s a huge piece to being a software developer that has nothing to do with writing software. Being able to go into meetings with non-technical senior managers and gently steer them away from bad ideas, being able to ask the right questions to figure out the disconnect between what a user wants and what they’re asking for - these are skills that are hard to learn until you’ve been on the job for a while.",
        "score": 16,
        "replies": [
          {
            "author": "caltheon",
            "body": "because we've been through it.  We also are starting to have kids who are interested in getting into the career that are about to have to go through it.  Once you get 20+ years of experience, if you did your career right, the job postings often don't bother listing it, because the job requirements themselves require 10+ years to have learned.",
            "score": 6,
            "replies": []
          },
          {
            "author": "CathbadTheDruid",
            "body": "&gt; Being able to go into meetings with non-technical senior managers and gently steer them away from bad ideas\n\nI was too stupid to do that. It turns out that most of the big deals involve kickbacks or blackmail or nepotism and the meetings were just for show.\n\nLost 2 jobs like that.\n\n\"Why did you leave your last job?\"\n\n\"Because I stood up in a meeting and explained that a big new vendor didn't exist until  a week ago\"",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "Pharisaeus",
        "body": "&gt; Focus on demonstrable skills and problem-solving ability, not years served\n\nSince you haven't interviewed for \"junior\" positions in 25 years you might not know, but people tried that. Leetcode-like tasks were supposed to assess \"problem solving skills\". It turned out people simply grind leetcode and memorize solutions, which quickly made those tests pointless.\n\n&gt; Create standardized, practical tests that actually reflect job requirements\n\nLet me introduce you to https://en.wikipedia.org/wiki/Goodhart%27s_law\n\nAny such test will inevitably become useless once people start \"gaming the system\". \n\n&gt; Value diverse experiences and non-traditional backgrounds\n\nCompanies want to make money. Having experience in exactly what the company does, allows to \"hit the ground running\". Non-traditional background is a gamble - it might work out great, or it might not work out at all. Most companies can't afford such gambles.\nNot to mention that many domains have very specific standards and regulations, so training someone from scratch is significant effort. It's not a coincidence that aerospace or banking value \"domain experience\".\n\n&gt; Implement mentorship programs to grow talent rather than expecting to hire perfection\n\nSame as above - the costs are a problem. It takes months if not years to \"grow talent\" and you don't have any guarantee that it's going to stay with you. There is very little \"loyalty\" on the tech job market. People jumping between jobs every year is nothing unusual. That's why big-tech companies push large part of the total compensation to stock options instead of salary, and have some vesting delay to create incentive for people to stay around at least 2-3 years.\n\n&gt; Be transparent about the real skills needed, not an arbitrary number of years\n\nA very risky idea, because people will simply lie on their CVs and memorize some trivia to get past recruiters. Paradoxically you will get better results if you provide no details about the tech stack.\n\nYOE is a poor metric, no one denies that, but at the very least it gives you some minimum insight into what to expect. It's the same story as education. Having a degree doesn't necessarily prove much, different universities or countries might have different requirements etc, but there is some common denominator.\n\nIf you really wanted to make a \"proper\" job interview, you'd have to hire someone for a couple of weeks and see how they handle the work. But that's just not realistic, because it would take too much time and cost too much money.",
        "score": 12,
        "replies": []
      },
      {
        "author": "RiftHunter4",
        "body": "The problem with experience requirements is that they don't say anything about what that time was spent doing. You have to call references and read job experience on the resume to find out anyway.\n\nAnd even then, it doesn't tell you if they'll actually be a good fit in your organization. It is fully possible that someone with 8 years of management experience has spent most of that time doing a bad job. But with the way job requirements are done, that person will be eligible for an interview over a team lead who just got an executive MBA and maybe 2 years of experience.",
        "score": 15,
        "replies": []
      },
      {
        "author": "Berkyjay",
        "body": "Tell me about it.  I've been trying to transition from VFX into a more traditional tech role.  Things like \"5 years of Kubernetes experience\" are killing me.",
        "score": 6,
        "replies": []
      },
      {
        "author": "burtgummer45",
        "body": "I've been a developer for 30 years.  I have at least 1 year of experience x30",
        "score": 4,
        "replies": []
      },
      {
        "author": "bwainfweeze",
        "body": "I knew how much having a software job junior year and a programming job senior year put me ahead of the curve but it's only this year that I realized how much tutoring my roommate and randos in the computer lab put me on a lead dev path at an age that was 'too young' to most people's standards. \n\nI looked my roommate up on LinkedIn a couple weeks ago to reminisce. \n\nGood mentors are a level skip as well.",
        "score": 5,
        "replies": []
      },
      {
        "author": "saijanai",
        "body": "I\"ve seen \"5+ years experience required\" in advertisements looking for programmers for the Apple Vision Pro, just a few weeks after it was announced.",
        "score": 4,
        "replies": [
          {
            "author": "TerryC_IndieGameDev",
            "body": "Right!! This was the sort of behavior that sparked me to write this article. It's crazy huh? Well thanks for taking the time to read my article and comment here on reddit. I appreciate you.",
            "score": 2,
            "replies": [
              {
                "author": "saijanai",
                "body": "Well, I'm the exact opposite. 50+ years working with computers (my first programming class was in FORTRAN IV in 1973but no-one would ever hire me due to personality and adhd issues unless they had personally interacted with me outside of interviews.\n\nSo I know a tiny bit about everything and learn fast, and could never hold a job long enough to qualify for social security, despite having many decades experience.\n\nat age 70 I'm on permanent disability because I never qualified for social security. \n\nAnd still see the stupidest programming mistakes make it into the wild by people who should know better, but \"fit the culture\" better or wrote a resume better.\n\n.\n\nI'll stop venting now.",
                "score": 3,
                "replies": [
                  {
                    "author": "TerryC_IndieGameDev",
                    "body": "This is more common than you may think. MANY programmers are neural divergent. In my humble opinion, that makes you a better programmer. I know the world may not see it that way. Kudos to you for sticking it out so long. :)",
                    "score": 2,
                    "replies": [
                      {
                        "author": "saijanai",
                        "body": "I still dabble.\n\nMy youtube video series, _Squeak from the Very Start_, gets a nod on the squeak.org website, and I even once got an email from oe of the Gang of Four authors [_Design Patterns_] saying that if anyone asks how to learn Smalltalk, he sends them to my youtube videos.\n\nBut at age 69+, making money in the industry is no longer an option.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "TerryC_IndieGameDev",
                            "body": "Heck at age 41 its harder than ever to work in the industry. You are not missing much my friend.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "saijanai",
                                "body": "Perhaps, but I'll see you difficult at age 41 and raise you living on SSI ($628/month) at age 69. The only saving grace is the family business is property rental, so I have a roof over my head and utilities and internet paid for.",
                                "score": 3,
                                "replies": [
                                  {
                                    "author": "TerryC_IndieGameDev",
                                    "body": "yes you win for sure. 628 a month is SUPER hard to live on. That would not even pay my rent. Thank goodness for your family business!!",
                                    "score": 2,
                                    "replies": [
                                      {
                                        "author": "saijanai",
                                        "body": "Yeah. Sigh.\n\nBut as I said, I still dabble. Currently researching both spreadsheets and game engines with an eye to trying to implement both in the Squeak IDE (turns out that there is a lot of overlap in capabilities, especially in the context of designing a game that is implemented via an engine).",
                                        "score": 3,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "OnlineParacosm",
        "body": "It’s killed software sales as well. I’ve been overlooked for many jobs despite having a murderous performance record, all because I didn’t get into tech during the bubble period.",
        "score": 4,
        "replies": [
          {
            "author": "TerryC_IndieGameDev",
            "body": "I am very sorry to hear that. I also experience my resume being tossed in the trash. This is a common thing and personally I hate it. The sad truth is that is wont change any time soon, but we can hope and dream! I have found the key is to just not give up. Every no is one step closer to a yes. If you are persistent, you will eventually find what you are looking for.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Deathnote_Blockchain",
        "body": "Meanwhile tens of thousands of 15+ year experience engineers are being forced into the job market where they will likely be unemployed.for a year or morw",
        "score": 7,
        "replies": [
          {
            "author": "tjsr",
            "body": "I've been out of work since April - had some trouble getting work before getting really sick and now I actually can't work.  Crazy thing is, throw a junior engineers salary and I'd have been more than happy.  In my opinion, tech salaries are completely and utterly cooked for the amount of work some of us do, and for the calibre of some engineers I've worked with over my career - you look at them and think \"how in the hell are you worth $150k/year when you can't even string a coherent sentence together and my dog could regurgitate less buggy code than I've had to maintain of yours?\"\n\nIf someone turned around and said to me \"we'll give you the $120k we were going to pay this junior engineer as a 20YOE senior, and we're going to hold you to the same standards as that junior\", do you actually think I wouldn't be happy to just come in and do 3 days worth of work a week for the level I've seen produced by many juniors?",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "Obie-two",
        "body": "Who is ever going to be a 5+ year required dev anymore when we offshore all of the entry level jobs to india?",
        "score": 7,
        "replies": []
      },
      {
        "author": "bitparity",
        "body": "These proposals are all well and good, but naive if they presume that what companies want in posting said requirements is what they actually want.  Often times those job posting exist for the meta-game (of company positioning), not the game (of hiring).\n\ni.e. Either they really want to pave the way for a specific internal candidate while fulfilling the requirements of posting or they're trying to position the company as in an expansion phase as business communication strategy.\n\nNot to mention that most often times, companies hire (and lay off) not on the basis of levels of capability, but head counts for whole division (i.e. both good and bad are hired simultaneously, just as they're laid off simultaneously).",
        "score": 7,
        "replies": []
      },
      {
        "author": "zelphirkaltstahl",
        "body": "5y says nothing. 10y says nothing. You can work for 10 years on some legacy Java enterprise service or app and can have your brain rot away, dreaming of AbstractValidatorProxyFactory, or stay a PHP script kiddie forever. You can become a JS hype driven development junkie. You can also have varied and rich experience with various technologies and areas of expertise and domain knowledge. You can learn about many basic topics, that these days many developers don't know well any longer. How to build a parser? How to build a type checker? Data structures? Algorithms? Parallelism and concurrency? Distributed computing? Fault-tolerance? How to do FP, while most of the world chases OOP patterns? Relational programming? It all depends on what you worked on and what you do off the job. What challenges you take on and how much you think for yourself.",
        "score": 7,
        "replies": []
      },
      {
        "author": "deblike",
        "body": "I'd second this with those companies with an overly specific field and niche institutional knowledge collected over decades looking for people to \"hit the floor running\". Dude, not even your seniors can change teams with extensive KT and training time involved. Stop asking for what can't be delivered.",
        "score": 3,
        "replies": []
      },
      {
        "author": "tjsr",
        "body": "You're not going to get rational discussion about this topic on reddit, where the cs careers subs are dominated by junior developers.\n\nLook, I've said it over and over:  The candidates I've interviewed in the last 2 years have been absolutely terrible.  The quality of candidates that is coming out of universities is just disgusting.  Universities should be ashamed of themselves both giving pass marks and degrees to many of the students I've had to interview, but also allowing many of them to enter or continue in those degrees past various checkpoints.\n\nThe sad fact is that the attitude that \"everyone deserves an education\" combined with nearly unconditional access to loans for education has enabled universities to both increase the prices of their courses unchallenged, and also for them to just accept as many students as they want to take on regardless of and prediction indicators of success that aren't met by those applicants both prior to entering those programs and at various points throughout the degree, combined with a gradual reduction of the bar to achieve a pass mark.\n\nThe only true way to combat this is to change the way student loan debts are repaid, such that Universities don't see a cent of those course fees until the student passes a particular income threshold, at which point they're required to pay a percentage of their salary towards that loan (which is how it works in Australia, with the exception that the Universities get their money up-front - that needs to change here).\n\nWhile it's true that there are many developers that are absolutely terrible even with \"5 years of experience\", it also means we end up with hundreds of thousands of devs who will end up way below that bar we expect at the 5 year mark.\n\nThe massive over-supply of graduates in a saturated market where there are not enough jobs, combined with a severe reduction in quality of the average graduate, has meant that the average developer with \"5 years of experience\" is now at the level of the average junior and graduate we were hiring 10 years ago.  That's why \"5 years of experience\" has become a thing.",
        "score": 3,
        "replies": [
          {
            "author": "yubario",
            "body": "I have been noticing the same. Bootcamps and colleges have disappointed me so much, I've seen people with degrees that fail at simple concepts that I learned in less than two weeks self taught. And the code they show is much worse than just using chatGPT.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Few-Understanding264",
        "body": "why should it bother you if a company wanted x number of years of experience? that is their problem not yours.\n\nif i see a job post that says 10 years (or whatever requirement i don't have) i just don't apply, simple as that. \n\nthere are thousands and thousands of tech jobs, and every day new one pops up and plenty looking for entry level only. hell, if you can't find one you can make your own tech company.",
        "score": 3,
        "replies": []
      },
      {
        "author": "rkesters",
        "body": "What I don't  get is wanting a senior engineer but setting the exp at 5 years. I have 25+ years experience, current job calls me principal engineer.  But 5 years seems light for senior. \n0-2 associate engineer \n2-5 engineer \n5-8 mid engineer \n8-10 journey engineer \n10-15 senior engineer \n15+ no longer care about title. Just want to work with smart, communication friendly people solving interesting problems. \n\nBut according to aws, we were no longer needed ,their AI can solve all coding, design, implementation,  and operational problems with a 10 year old typing in prompts.  Just wait until they combine AI with quantum computing. Why have just AI when you can have qAI.",
        "score": 5,
        "replies": []
      },
      {
        "author": "SmallMacBlaster",
        "body": "It just so happens that I have 5+ years of experience at everything.",
        "score": 2,
        "replies": [
          {
            "author": "TerryC_IndieGameDev",
            "body": "That's because you are a super star. :)",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "gelatineous",
        "body": "5 years is not a lot lol. That filters out 20 yos.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Uristqwerty",
        "body": "Measuring experience in years is like measuring code by lines. A few are necessary (e.g. the empty program won't do anything, and golfed or one-liner programs generally aren't good), but what you do with them *quickly* starts to dominate over plain quantity, and in some edge cases more is actually worse.",
        "score": 2,
        "replies": [
          {
            "author": "TerryC_IndieGameDev",
            "body": "Great analogy! I really enjoyed reading your comment, puts in a great perspective. Thanks!",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Kinglink",
        "body": "Years of experience IS a good metric.  \n\nYears of experience IN X is not. \n\nGood companies hire programmers and train those programmers in language.  Can you program in C?  Great, here's rust.  Can you program in Python?  Here's Javascript   If you find a great programmer... they are a great programmer regardless of the language. \n\nI fear the \"guru\",  the guy who mastered a single language  because most of that time the Guru is a carpenter who only knows how to use a Hammer.  A screw?  Let's hammer it in.   Wood starting to bend?  I'll hammer it some more.   Glass?   Well good thing I have my glass hammer! \n\nThere's a time and place for Python, JS, C++, SQL...\n\n\n&gt;  I’ve witnessed “senior” developers with 5+ years of experience stumble over this elementary challenge.\n\nI have had people struggle with \"Reverse a string\" guess what?  I don't want to hire them.  I'm sorry, no, you're coming into an interview and can't write a simple program?   \n\nAnd guess what?  We hired juniors who could do that and exceeded our expectations, why are we supposed to pay more for an old \"20 year warhorse\" when they struggle with fizzbuzzs.  We're not talking \"Leetcode\"...  If they haven't written code in a while... Yikes.   \n\nThat failure IS A failure... If they can't pass that test with 5 years experience... they either lied about their experience or suck.  That's why you look for years of experience (for experience) + You still test their skills.   You don't ignore the years of experience when you're trying to hire a senior level programmer.\n\nListen, I've seen all junior programmers at one company (They're cheaper!) I've seen all Seniors (no one wants to leave and they promote too fast).  Both are a bad sign... but \"Years required\" should be about mentorship and more.  If you're a senior you're supposed to be able to fully lead, but also bring the next generation around.  If you're a junior and can already lead... that's not a bad thing, but most juniors need to learn and gain that confidence that will help them get to the next step.\n\nEdit: This guy just spams this subreddit with his posts.  Mods, get 'im!",
        "score": 3,
        "replies": [
          {
            "author": "suddencactus",
            "body": "&gt; why are we supposed to pay more for an old \"20 year warhorse\" when they struggle with fizzbuzzs. We're not talking \"Leetcode\"... If they haven't written code in a while... Yikes. \n\n\nYeah at least two companies I know of in Aerospace do coding problems, but they'd be \"easy\" on Leetcode. I think it's generally a good idea to do that, but as you point out, testing basic programming skills is very different than trying to only hire people who've grinded hard algorithm problems. Companies need to drop that in favor of more application-specific questions.\n\n\nI have been asked on the job to do things like traverse a JSON tree, transform recursion into iteration on a stack, or explain why some code was running slowly.  But I've never had to do something like the rainwater problem or minimum refueling stops in 30 minutes and O(1).",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Years of Experience matter. More than any other metric.",
        "score": 2,
        "replies": []
      },
      {
        "author": "EmperorOfCanada",
        "body": "The vast majority of people with a huge amount of experience in most technologies have the same few months over and over. 10 years experience is rarely more than a competent person with a few months in the same tech.\n\nOften this is because you just use the tech in a simple way and sort of forget about it. Docker would be a great example. I have been using docker for years. I would not consider my self to have \"years\" of experience. I set up a container and move on. Rarely do I spend more than a few minutes in a month with it. Do I have 6 years experience? I have nothing that someone spending a week doing docker would have.\n\nSomething like C++ would be a bit of a longer chore for someone coming in to it fresh to equal my \"experience\". But, I would suggest a competent programmer with a few other languages under their belt and a solid understanding of memory, algos, etc would be roughly in line with my experience within a year or so. And, of course, if they super specialized in something like networking code, would exceed my abilities in fairly short order in that domain. \n\nIn the world of tech highly capable people are choosing the best tech to solve a given problem. Thus are prepared to move on to newer better, or just different technologies. I'm not talking about fad chasing; there are just so many cases where you need to choose the correct tool for a given job. C++ is great for certain things, python is the best for others, etc.\n\nPeople who have 10+ years experience (or even 5) in a single tech are either trapped in some weird job, or are entirely inflexible and not willing to adapt.\n\nWith the exception of C++, there's hardly a single tech I haven't changed at least once in the last 10 years and in the last 5 it would be python and C++ which have remained in my toolkit. But, I've switched DBs, etc many times.\n\nEven to say a specific area such as \"embedded\" could range from someone who is bit bashing at the ASM level, to someone with a fairly kick ass android OS processor in a device. \n\nMy favourite is that if I made a list of the absolute best damn programmers I've ever worked with exactly zero had even a CS degree. Almost all came from art backgrounds. They were doing cool art and realized they needed to write software to make their art better; then after a while they were a kick ass programmer. A classic example of someone needed to use the correct tool for the job, but in this case they were using code as a medium and math as their pallet. \n\nThe worst programmers I have the displeasure of working with were PhDs in ML, stats, or \"Data Science\"\n\nOn this last, there is a rule: It is not a science if it has the name \"Science\" in it.",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "Software is Way Less Performant Today",
    "body": "",
    "score": 889,
    "url": "",
    "created_utc": 1734153602.0,
    "author": "BlueGoliath",
    "permalink": "/r/programming/comments/1hdvtpy/software_is_way_less_performant_today/",
    "comments": [
      {
        "author": "aboy021",
        "body": "Performance should be a feature.\n\nIn my work I routinely make things faster, both my code and that of others. I find it a really satisfying problem domain and customers love it.\n\nAt one job I was profiling some code and noticed some inefficiency in the spell checker. Nothing major, a few imperceptible fractions of a second on my development machine, but the issue was clear so I just fixed it and moved on. At the next user group meeting everyone was saying \"I don't know what you did but the app is so much faster and it’s just wonderful\". I really like it when customers are happy like that.",
        "score": 495,
        "replies": [
          {
            "author": "Tringi",
            "body": "In the corporate world I left behind you'd often get punished for doing this.\n\nSuch improvement could've been billed to the customer, or it could've been presented as a major feature of a paid upgrade.\n\nYour action basically cost the corporation a lot of money ...or so I was told multiple times.",
            "score": 250,
            "replies": [
              {
                "author": "ryobiguy",
                "body": "Thou shalt not add value without revenue.",
                "score": 169,
                "replies": [
                  {
                    "author": "DynamicHunter",
                    "body": "It’s like they forgot that an actually good customer experience and satisfaction retains customer loyalty. But they only care about next quarter’s profits",
                    "score": 63,
                    "replies": [
                      {
                        "author": "Zombie_Bait_56",
                        "body": "Because their bonus is tied to next quarter's profits.",
                        "score": 13,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Avedas",
                "body": "Everywhere I've worked such improvements would be accepted but would do nothing to help a promo case or improve comp, so you're not really incentivized to make things better.",
                "score": 38,
                "replies": []
              },
              {
                "author": "looksLikeImOnTop",
                "body": "At my job, I'd be scolded for the potential of breaking things. \"If it works, don't touch it\"",
                "score": 48,
                "replies": [
                  {
                    "author": "Resource_account",
                    "body": "Most of our in-house tooling consist of binaries written c more than 30 years ago and a GUI written in Perl and Tk wrapping around it. Even if wanted to make it more efficient. It’s essentially an impossible task since the documentation has long been gone. The same mentality exists in my shop too but it’s more subtle, and trying to improve things is an uphill battle since no one wants to lend the support.",
                    "score": 9,
                    "replies": [
                      {
                        "author": "looksLikeImOnTop",
                        "body": "That's reasonable. For some of our products I get it, because they're the same situation as your stuff. But man....I couldn't improve the code I wrote a few months ago. I finally came up with an excuse of \"oh that new feature? Impossible to implement unless I do XYZ first\"",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "DefMech",
                "body": "At my job I’d be fussed at for doing work that doesn’t have a ticket associated with it. Also slipping in little peripheral fixes like these can be a problem when bundled with other bigger tasks. Code review might examine and approve them, but QA won’t know to test your changes unless you spell out every detail and provide a test plan for them.",
                "score": 9,
                "replies": []
              },
              {
                "author": "silence9",
                "body": "You've highlighted exactly how, when finance teams are the decision makes it kill companies, in a very succinct way",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "YetiMarathon",
            "body": "I breathed a sigh of relief knowing there are still devs out there who care about this stuff",
            "score": 60,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 10,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[removed]",
            "score": 19,
            "replies": [
              {
                "author": "PM_Me_Your_Java_HW",
                "body": "I could have gone the rest of my life never hearing Fox Pro again and would have been content.",
                "score": 14,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "donalmacc",
        "body": "What is actually slowing incredibly poor design decisions, combined with building on abstractions built on abstractions built on abstractions without ever understanding that anything you’re doing underneath is doing too. \n\nI work in c++, and a few years ago, I worked on a project where I added support for dumping the current state to a file in json. 2 years pass and it takes about 10 seconds to start the app up. \n\nI run the profiler, turns out that someone had been tasked to make it restore previous state, and someone else had been tasked to return a “scratch” if unsaved. The implementation involved loading the entire last project, and the entire “last know state”, diffing the result, and then re-loading the entire state that we wanted to use. The bottleneck in it? Parsing 200MB of floats from json because someone else had stored height map data and chosen a default size that resulted in each save file being 200MB. It was also mostly  “0.0”, “0.0”\n\nI replaced the “save height map” and “load height map” to JSON functions with a base64 encoded blob (the values were integers between 0 and 256), which reduced the size by a factor of 5, and brought the loading time back down to sub second. \n\nAnyone could have done this, anyone could have looked into it, but we bolted features on top of features and built something “maintainable” that wasn’t fit for purpose.",
        "score": 204,
        "replies": [
          {
            "author": "MisterFor",
            "body": "This reminds me 100% of the GTA V loading problem. For me it was taking 2-3 mins to load and it was because the json parsing was crap.",
            "score": 108,
            "replies": [
              {
                "author": "Ameisen",
                "body": "https://nee.lv/2021/02/28/How-I-cut-GTA-Online-loading-times-by-70/",
                "score": 52,
                "replies": []
              }
            ]
          },
          {
            "author": "-Niio",
            "body": "I’m still junior, can you explain how base64 encoding helped here? I see if you base64 encode the file, then comparison to check for changes is much faster. That makes sense for the scratch case. How does this benefit the restoring to previous state?",
            "score": 22,
            "replies": [
              {
                "author": "donalmacc",
                "body": "JSON only has one numeric type - double. So the parsing of the gigantic array was parse, then string to double and double to int. the range of values were only between 0 and 255, so we were storing (and parsing and converting) way more than we needed it to. I changed it from that to putting all of the values in a vector&lt;char&gt;, and then base64 encoding that vector (because json is human readable - it’s a simple transformation) lets us just write out the string\n\nSo the data goes from\n    data: [“0”, “,0”, “1”, “0”]\nTo:\n    data: “AABA”\n\n(Except at 200MB of data). It also decodes really easily into vector&lt;char&gt;, which was helpfully the format that we wanted to pass onto the heightmap.",
                "score": 46,
                "replies": [
                  {
                    "author": "slazy",
                    "body": "&gt; JSON only has one numeric type - double.\n\nThis isn't precisely true. _Javascript_ numbers are doubles, but in JSON they're just arbitrary-precision decimal numbers. JSON libraries have to decide how to handle them that works best for their language; while double may be the default for some libraries, others also have special support for integers or even the full arbitrary decimal range (e.g., GSON uses [this](https://github.com/google/gson/blob/gson-parent-2.11.0/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java) as its generic type, though if it knows the target is a particular kind of integer it can just read directly into that too). It's not a given that you'd ever need to convert string -&gt; double -&gt; int or that there would be inefficient overhead, that's entirely dependent on the implementation.",
                    "score": 12,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "bro just use jQuery, smh!\n\n(Obvious /s, but I'd like to just keep this here as a reminder that the argument it's education / culture based is 100% real. Any question on SO asking about anything remotely HTML DOM / JS / CSS related would always be met with \"just use jQuery\" even in situations where the OP specifically would ask how to do it in plain old, vanilla JS. It was infuriating to come across all those posts.)",
            "score": 4,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "This has been my experience with C++ as well. Most devs just cannot work with it. I've seen harebrained shit like sending 3mb of unitialized memory over a TCP socket just to send one uint16 of data, and people sending pointers over a network and wondering why dereferencing them on the other end causes a crash. \n\nIf you need to use C++, and you probably don't, hire an electrical engineer or a post-grad.",
            "score": 16,
            "replies": [
              {
                "author": "Ameisen",
                "body": "... Why would you want an *electrical* engineer to work with C++?\n\n&gt; I've seen harebrained shit like sending 3mb of unitialized memory over a TCP socket just to send one uint16 of data, and people sending pointers over a network and wondering why dereferencing them on the other end causes a crash.\n\nThis isn't C++-specific.\n\nI can confirm that a lot of programmers - especially GenZ-on (in my experience) - seem to have difficulty writing C++ well.",
                "score": 20,
                "replies": []
              }
            ]
          },
          {
            "author": "F3z345W6AY4FGowrGcHt",
            "body": "Reminds me of my work.  Where a lot of my coworkers essentially don't know what they're doing.  They can barely get the final result to do what the requirement said and they don't even know why.\n\nThey'll use a loop to get the first or last item in an array just cause.\n\nAnd if I'm doing the code review and send it back as trash, their project manager complains because somehow it's me who's affecting the deadlines.\n\nThis is why a lot of modern software is shit.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "brunhilda1",
        "body": "If I press the windows button on my 16 core 64gb laptop, Windows 11 pauses for half a second before rendering the start menu. This was a solved problem 25 years ago.\n\nI'm tired, boss.",
        "score": 1301,
        "replies": [
          {
            "author": "PlainSight",
            "body": "HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search\n\nMake a new DWORD (32-bit) called: BingSearchEnabled\nSet the value = 0",
            "score": 614,
            "replies": [
              {
                "author": "Thotaz",
                "body": "PS oneliner for convenience: `sp HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search BingSearchEnabled 0`",
                "score": 245,
                "replies": [
                  {
                    "author": "Worth_Trust_3825",
                    "body": "`sp`?",
                    "score": 22,
                    "replies": [
                      {
                        "author": "Thotaz",
                        "body": "It's an alias for `Set-ItemProperty`. In the future if you see an unknown command in PowerShell you can look it up with `gcm` or `Get-Command` to get more details.",
                        "score": 81,
                        "replies": [
                          {
                            "author": "Worth_Trust_3825",
                            "body": "so why not use `set-itemproperty` in original comment? Powershell is notorious for having sparse alias and feature support across versions, and unlike bash, it's obtuse in helping you with anything. For example what i got using `get-command sp`\n\n\tget-command sp\n\n\tget-command : The term 'sp' is not recognized as the name of a cmdlet, function, script file, or operable\n\tprogram. Check the spelling of the name, or if a path was included, verify that the path is correct and try\n\tagain.\n\tAt line:1 char:1\n\t+ get-command sp\n\t+ ~~~~~~~~~~~~~~~\n\t    + CategoryInfo          : ObjectNotFound: (sp:String) [Get-Command], CommandNotFoundException\n\t    + FullyQualifiedErrorId : CommandNotFoundException,Microsoft.PowerShell.Commands.GetCommandCommand",
                            "score": 63,
                            "replies": [
                              {
                                "author": "AyrA_ch",
                                "body": "Or just use the reg command that works cmd and powershell\n\n    reg add HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search /t REG_DWORD /v BingSearchEnabled /d 0",
                                "score": 97,
                                "replies": [
                                  {
                                    "author": "Worth_Trust_3825",
                                    "body": "Honestly, this should be the canonical answer.",
                                    "score": 35,
                                    "replies": []
                                  },
                                  {
                                    "author": "WarWizard",
                                    "body": "    reg add HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search /t REG_DWORD /v BingSearchEnabled /d 0\n\nthe last /v should be /d for 'data to assign'. you can optionally add /f to force the value to be written.",
                                    "score": 12,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "SoCuteShibe",
                                "body": "Lol, and if you try to Google it, all of the results are convinced you are abbreviating SharePoint by typing 'sp' which absolutely nobody ever does, but here we are.",
                                "score": 21,
                                "replies": []
                              },
                              {
                                "author": "Thotaz",
                                "body": "Because a common complaint about PowerShell in the developer community is that the commands are too long because people aren't aware of the aliases and positional parameters.\n\n`sp` is a default alias that should work on any Windows 10/11 PC out of the box unless the user has modified the config somehow. Try running PowerShell without a custom profile: `powershell -noprofile` and see if that helps. If you have a profile that removes all of the default aliases: `Remove-Item alias:\\* -Force` then I don't think you can blame anyone but yourself for this error.  \nAs for Bash somehow being more helpful than PowerShell, I don't see it. The error message in bash is: `sp: command not found` which is just a shorter version of the error message you posted. What do you expect Bash and PowerShell to show you when they can't find the entered command?",
                                "score": 18,
                                "replies": []
                              },
                              {
                                "author": "zellyman",
                                "body": "oatmeal spectacular fragile fanatical roof library knee worthless abounding humorous\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
                                "score": 9,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "shevy-java",
                "body": "It's not just one value in registry. There are too many options that by default are nonsensical. Microsoft lost the plot some time ago here.",
                "score": 62,
                "replies": [
                  {
                    "author": "therealmeal",
                    "body": "The plot was always \"make more money\". Now they do it through ads, tracking, and dark patterns in interstitials getting you to accidentally sign up for one drive or whatever.\n\nI switched fully to Linux a few weeks ago. Super happy with the decision. I will never install windows 11+.",
                    "score": 31,
                    "replies": []
                  }
                ]
              },
              {
                "author": "agumonkey",
                "body": "don't forget\n\nHKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\FastMode\n\nand \n\nHKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\DisableLag",
                "score": 19,
                "replies": [
                  {
                    "author": "Jonathan_the_Nerd",
                    "body": "I remember an old joke that recommended adding `bugs = off` to CONFIG.SYS.",
                    "score": 21,
                    "replies": [
                      {
                        "author": "agumonkey",
                        "body": "hehe, much vintage",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Coffee_Ops",
            "body": "When Windows 10 was released, The start menu was limited to 512 items. \n\nThat, too, was a problem solved 25 years ago. I don't even know how you build in that kind of limitation, somebody got to eight bits and then thought, \"maybe just one more.\"",
            "score": 117,
            "replies": [
              {
                "author": "alinroc",
                "body": "Another problem solved ~~25~~30 years ago: Vertical taskbar. Windows 11 doesn't allow you to do it. In the initial release you could change a registry value but that stopped working 2 years ago (you were also forced to have everything centered in the initial Win11 release, they allowed shoving everything to the left with a later release). There are some 3rd-party hacks you can install that will make your taskbar vertical but seriously Microsoft, WTF? There's no excuse for this.",
                "score": 28,
                "replies": [
                  {
                    "author": "enbacode",
                    "body": "You also cannot move the task bar to the top, which really grinds my gears as I had it at the top position for almost 20 years.",
                    "score": 16,
                    "replies": []
                  }
                ]
              },
              {
                "author": "RageQuitRedux",
                "body": "No one knows why they chose such an oddly specific number. \n\nIn all seriousness though, why 9 bits?",
                "score": 7,
                "replies": []
              },
              {
                "author": "bikeridingmonkey",
                "body": "This limit was by design. It has to be.",
                "score": 16,
                "replies": []
              }
            ]
          },
          {
            "author": "bogz_dev",
            "body": "that start menu uses React Native lmao",
            "score": 47,
            "replies": []
          },
          {
            "author": "hubbabubbathrowaway",
            "body": "try running Windows 2000 in a VM. Give it 512 MB of RAM, because why not, we have plenty. See it run. Crazy how good Windows used to be...",
            "score": 38,
            "replies": [
              {
                "author": "SirToxe",
                "body": "Windows 2000 was the best Windows has ever been (in its time context).",
                "score": 35,
                "replies": [
                  {
                    "author": "Silhouette",
                    "body": "Windows 7 was also good. It was the last version we routinely used at work - for daily use on main workstations instead of just for testing or on a specific computer to run a specific Windows-only application.",
                    "score": 21,
                    "replies": []
                  }
                ]
              },
              {
                "author": "wh33t",
                "body": "Yeah, I remember XP SP3, running on garbage HDDs. It was lightning.",
                "score": 15,
                "replies": []
              }
            ]
          },
          {
            "author": "tes_kitty",
            "body": "Back in the 90s, when I used an Amiga with a single 68030 @ 25 MHz, the GUI felt more responsive than current Windows on a multicore system running at 3 GHz.\n\nYes, the Amiga is of course a lot slower and can't do a lot of things current PC can do, but it felt faster to the user since a mouse click got you an immediate reaction. That should be possible on a modern OS as well.",
            "score": 48,
            "replies": [
              {
                "author": "MisterFor",
                "body": "But they need to spy on you now. \n\nDo you expect any keystroke to not be logged and sent somewhere? Are you a crazy barbarian? /s",
                "score": 19,
                "replies": []
              }
            ]
          },
          {
            "author": "I_JuanTM",
            "body": "Same with the Windows 11 context menu, it is so slow... Reverting back to the Windows 10 one makes it 10x faster, as well as being just a better context menu overall...",
            "score": 18,
            "replies": [
              {
                "author": "Jim_84",
                "body": "It's the craziest fucking thing that I can right-click something and see the options load in like I'm on some shitty JS heavy website.",
                "score": 17,
                "replies": []
              }
            ]
          },
          {
            "author": "FeliusSeptimus",
            "body": "Here's the one I hate. Click to start Windows Terminal:\n\n    Windows PowerShell\n    Copyright (C) Microsoft Corporation. All rights reserved.\n    \n    Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows\n    \n    Loading personal and system profiles took 4457ms.\n    ┌  feliusseptimus@CATHOUSE \n    └ $\n\nNearly 5 seconds to start up. Every. Single. Time.\n\nIt's even worse at work where they have the system configured to store the personal profile on a network share. In that case it takes about 15 seconds to start up, so slow that PowerShell brings up a progress window.\n\nI am running OhMyPosh which slows down startup quite a bit (a -noprofile start is pretty quick), and I haven't spent a lot of time tracking down the issue, but in the past I've found that part of the problem is just that Windows process startup time is pretty slow compared to Linux (so fetching git details for the OMP prompt is slow).\n\nMostly it's just frustrating that I have to spend my time optimizing stuff like this that should be pretty darn fast by default.",
            "score": 17,
            "replies": []
          },
          {
            "author": "Waterwoo",
            "body": "Yep, I know MS stock might be doing the best ever but their quality has just gone so to shit.  Between ridiculous defaults like this, a file explorer app that lags very visibly navigating folders on an SSD, and most 'desktop' software now being shitty webapps in a web view, it's pathetic.  Not that apple is much better but what will it take to bring a focus back to realtime performance? \n\nIt's like everyone internalized that computer speed doubles every 18 months so no need to even try anymore, but didn't notice the fact that it's been like 20 years since that was really true and actually most new progress is lowering power consumption for the same compute, and allowing more compute in parallel, neither of which help when you just want to do basic UI on your laptop.",
            "score": 14,
            "replies": []
          },
          {
            "author": "antiduh",
            "body": "Install power tools and use their spotlight clone. It's instant.",
            "score": 20,
            "replies": [
              {
                "author": "-IoI-",
                "body": "Yeah Powertools Run is doing a great job for me, some of the early performance issues have been seemingly resolved",
                "score": 9,
                "replies": []
              },
              {
                "author": "Asyx",
                "body": "Annoying thing with that though: it spawns processes as a subprocess of power tools so if you update power tools it kills whatever you started via power tools including your IDE or browser or whatever.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "Pepito_Pepito",
            "body": "The first thing I do with every fresh windows machine is to disable all the graphic effects that comes with the OS UI",
            "score": 62,
            "replies": [
              {
                "author": "OffbeatDrizzle",
                "body": "The first thing I do with every fresh windows machine is delete windows and install linux",
                "score": 158,
                "replies": [
                  {
                    "author": "0xffaa00",
                    "body": "But you have paid for the Windows license, and for nolla. Just try to get no OEM os next itme and save some cost.",
                    "score": 28,
                    "replies": [
                      {
                        "author": "A_for_Anonymous",
                        "body": "Even if you paid for it, it's a sunk cost. The best decision may be not to use it.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Pepito_Pepito",
                    "body": "Maybe one day. I barely have time to play games, much less time to mess around with distros. For now, linux will be for work only.",
                    "score": 24,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Finchyy",
            "body": "It then adds ~0.8s animations to every interaction because fuck you",
            "score": 25,
            "replies": [
              {
                "author": "Jim_84",
                "body": "Ubuntu is full of animations too yet it feels insanely snappy compared to Windows 11.",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "vindarnas_hus",
            "body": "It's actually pretty fast considering all the telemetry",
            "score": 175,
            "replies": [
              {
                "author": "Coffee_Ops",
                "body": "It's really not. \n\nWe're talking about less than a kilobyte per second sent over an encrypted tunnel. \n\nImagine it was SSH, would you expect a few KB per second it to have an appreciable impact on system performance?",
                "score": 93,
                "replies": []
              },
              {
                "author": "BlueGoliath",
                "body": "\"all the telemetry\" is kind of the point. But even *with* telemetry it shouldn't perform that bad.",
                "score": 155,
                "replies": [
                  {
                    "author": "axonxorz",
                    "body": "A joke, sir!",
                    "score": 66,
                    "replies": []
                  }
                ]
              },
              {
                "author": "goda90",
                "body": "Imagine if they actually wrote telemetry transmission as a blocking call. Just waiting for the server to acknowledge before opening the start menu. I wouldn't put it past Microsoft...",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "MinMaxDev",
            "body": "all them copilot screenshots",
            "score": 17,
            "replies": []
          },
          {
            "author": "eikenberry",
            "body": "[https://web.archive.org/web/20190304153147/https://dilbert.com/strip/1995-06-24](https://web.archive.org/web/20190304153147/https://dilbert.com/strip/1995-06-24)",
            "score": 9,
            "replies": []
          }
        ]
      },
      {
        "author": "RobertVandenberg",
        "body": "MS Teams is the most counterproductive software I have ever used",
        "score": 223,
        "replies": [
          {
            "author": "Rhed0x",
            "body": "Teams is garbage in every way. Performance, UX, buggyness, design, etc",
            "score": 44,
            "replies": [
              {
                "author": "rom_romeo",
                "body": "My personal favourite: Pretending to be smart on copy/paste. Just fucking treat it as a text! Who the fuck even asked you to do some stupid formatting.",
                "score": 29,
                "replies": []
              }
            ]
          },
          {
            "author": "Getabock_",
            "body": "I hate Teams. It never works properly and every time I try to do *anything* in it, it screws up in some way.",
            "score": 63,
            "replies": [
              {
                "author": "UristMcMagma",
                "body": "They have 0 tests or QA. On Thursday a coworker and I were having the same problem: it wasn't picking up our voice when we spoke. Literally the one thing that is absolutely critical in that app was broken. It's disgusting how little they care about their users.",
                "score": 15,
                "replies": [
                  {
                    "author": "AloneInExile",
                    "body": "Holy shit, last week I had the same bug, first meeting was okay, then next meeting the mic crapped out, reset headphones, restart teams, next meeting okay, the meeting after, again mic crapped out.\n\nI thought teams was trying to tell me to stop with meetings.",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "primarycolorman",
                "body": "God help you of you ever need to cross reference anything in it across groups.",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "rom_romeo",
            "body": "What was really mind boggling to me was a moment when I tried to switch between two MS accounts, and Teams was stuck on a single account. My friend told me: “Dude, let’s get real. There is no way they didn’t think about that. 5 mins later, he was scrolling his phone and all of the sudden: “Wtf… even MS says that you have to delete some cached files on your OS”\n\nFucking unreal…",
            "score": 6,
            "replies": []
          },
          {
            "author": "breddy",
            "body": "What's our favorite videoconference tool these days? We're a G Suite shop Meet is mostly OK but I'm curious if any of them are really any good. Zoom's UX is a horror show.",
            "score": 6,
            "replies": []
          },
          {
            "author": "Faakhy",
            "body": "« Everything can be done with web! »",
            "score": 12,
            "replies": []
          },
          {
            "author": "federiconafria",
            "body": "All the Microsoft chat clients have always looked and worked like they have been ported to windows...",
            "score": 4,
            "replies": []
          },
          {
            "author": "mattjouff",
            "body": "The thing that kills me with teams is if you are using it to brows files for a group project, and you get a notification for an IM, checking the IM closes the file and the directory you were previously browsing. Like how is that even allowed? Who could possibly want this behavior.",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "ScrimpyCat",
        "body": "It’s the same issue with Xcode. Over the years it’s gotten progressively slower (and buggier too, but that’s a separate rant). It got to the point where I’d have a better user experience working on the same projects on my old 2014 MacBook Air using an older version of Xcode, than I did on my 2018 Mac Mini (3.2GHz 6-core i7, 32GB RAM) using a later version of Xcode. And the problem is that it’s not just new features, the performance regressions are seen in the old features, like having to wait +10s (sometimes seemingly forever) for autocomplete suggestions to appear, or even noticeable input latency (hit a key and see a delay before the character appears in the code). Yes, upgrading to a more recent machine (“new” base model M3 MacBook Air) has sped things up again, but you shouldn’t need new hardware just to make old features work well again and even then I still see features in macOS that runs slower than it used to.\n\nI think a big part of this problem is just how modern software is developed and what the incentives are. The focus tends to be on getting features out for a new release because that’s where the business incentive is, whereas improving what is already there isn’t given as much attention. Users will put up with buggy slow software. And since many things are kind of slow, it doesn’t really stand out as being slow. Now this isn’t to say that optimisations aren’t being done, or that everything is slow, but there is so much that is.",
        "score": 147,
        "replies": [
          {
            "author": "2m3m",
            "body": "Im on a 2013 mbp so I cant upgrade a lot of tools and software because of deprecated xcode",
            "score": 14,
            "replies": [
              {
                "author": "idebugthusiexist",
                "body": "https://dortania.github.io/OpenCore-Legacy-Patcher/ ?",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "goda90",
            "body": "Your experience with Xcode sounds a lot like my recent experience with Visual Studio 2022. I was chalking it up to how much more typescript I'm working on these days as opposed to plain JavaScript, but I feel like recent updates must be doing something inefficient. Probably making calls to GitHub copilot or something even though it's turned off...",
            "score": 16,
            "replies": []
          },
          {
            "author": "sombrastudios",
            "body": "we have long crossed the point of having hardware that is just so utterly, chaotically, comically, aggressively performand and good, that really almost any software that ever where to be made again should \"just work\".\nNow, I'm not trying to say gpt should run on 2008 hardware; \nwhat I am trying to communicate is that literally all of the software i am using day to day should easily be possible to do with instantanous feedback on the machine I owned 10-15 years ago.",
            "score": 7,
            "replies": []
          },
          {
            "author": "Butiprovedthem",
            "body": "I have a 1 year old Mac silicon for work and if I accidentally double click the wrong file, I have to wait 1 minute for xcode to even open.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "pfc-anon",
        "body": "https://en.wikipedia.org/wiki/Wirth%27s_law\n\nWe will never see fast software. My employer uses crowdstrike, this pos is hashing each file and sharing it to a common database to identify potential risks. Every node or pip install is a nightmare because it eats up all the compute resources.\n\nMy M4 Pro, 36Gig MBP pro is apparently too slow to run, vscode, crowdstrike and yarn install together.",
        "score": 298,
        "replies": [
          {
            "author": "smiling_seal",
            "body": "I also had this problem with employer’s crowdstrike. Any git clone or build of a large C++ code base was slow as a f*ck on M2 Pro. Thus, I created a VM solely for development, so it effectively walled crowdstrike from accessing my dev files.",
            "score": 102,
            "replies": [
              {
                "author": "pfc-anon",
                "body": "🤫 Shhhh... Don't do it please, the ITs who'll read this will enable VM sensors and ruin the party. Stupid fact, I wrote an entire paragraph on how to beat this by always developing inside a container. Ended up deleting it because it will removed.",
                "score": 44,
                "replies": [
                  {
                    "author": "Klightgrove",
                    "body": "I wish more devs did this. EDR fires off on devs changing binary files all the time, please use a VM for that kind of work to reduce all the noise.",
                    "score": 11,
                    "replies": [
                      {
                        "author": "Ameisen",
                        "body": "You... want me to do all of my C++ and rendering work - usually on *massive* projects and in Visual Studio - on a VM just to satisfy poorly-implemented security stuff?\n\nOne of the projects is literally &gt; 1 TiB. That's going to be a *huge* VHDX.",
                        "score": 13,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "ParsonsProject93",
            "body": "Isn't that how almost every EDR works?",
            "score": 15,
            "replies": [
              {
                "author": "schlenk",
                "body": "It is still ridicioulus. You have fast SSD with 12GB/s throughput and millions of IOPS. Installing an EDR should not put that back into spinning rust level performance as it does right now.",
                "score": 33,
                "replies": [
                  {
                    "author": "OMGItsCheezWTF",
                    "body": "Even running zsh takes seconds because of crowdsrike. An M3 pro MacBook should open zsh instantly.",
                    "score": 13,
                    "replies": []
                  }
                ]
              },
              {
                "author": "pfc-anon",
                "body": "Sure it does, but does it need to hog on all resources to do what it does? I'm sure there's a better way to batch these hashing tasks. Moreover, we have our own internal package registry. So maybe secure that registry instead of screwing all terminals. MITM is not possible because we're zerotrust.",
                "score": 22,
                "replies": []
              }
            ]
          },
          {
            "author": "Tux-Lector",
            "body": "&gt;We will never see fast software. \n\nhint: **Geany**",
            "score": 17,
            "replies": []
          },
          {
            "author": "teodorfon",
            "body": ":-(",
            "score": 9,
            "replies": []
          },
          {
            "author": "syklemil",
            "body": "&gt; https://en.wikipedia.org/wiki/Wirth%27s_law\n&gt;\n&gt; We will never see fast software.\n\nSome of us _are_living with fast software, but we have made some choices; either tradeoffs or lucky personal preferences. E.g. tried Eclipse once 20 years ago and ran away to vim, with a rather nice &amp; powerful neovim experience today. Not having used windows since Windows ME. That sort of stuff. But until Steam &amp; Proton got to a certain point, it meant nearly no gaming. And the only electron apps I run are Steam and Signal.\n\nIt is, also, likely part of the draw of rust tooling: It tends towards being both correct, fast, and memory lean.",
            "score": 15,
            "replies": []
          },
          {
            "author": "hubbabubbathrowaway",
            "body": "What Andy giveth, Bill taketh away",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "frnxt",
        "body": "The thing that grinds my gears more than anything at work is that Windows 11 still can't manage to eliminate typing lag (and by typing lag I mean massive 4-5s lag for each key I type, typewriter-style) in the terminal windows when under high load, which... does happen pretty often when you're compiling stuff, running multithreaded computations etc. _It's a terminal for christ's sake_, why is that not a solved problem.",
        "score": 71,
        "replies": [
          {
            "author": "TheTrueBlueTJ",
            "body": "Is that not a result of unfair scheduling?",
            "score": 13,
            "replies": [
              {
                "author": "frnxt",
                "body": "Most likely, yes, and also of the fact that the Windows terminal goes through way too many layers of indirection and IPC... But it does seem solvable - after all it's never an issue in Linux or OSX.",
                "score": 27,
                "replies": []
              }
            ]
          },
          {
            "author": "thefpspower",
            "body": "The terminal basically is bottom of the barrel in priority for the scheduler and that's extremely obvious when your script runs much faster in silent mode, each line has to wait for priority to print and then continue execution while in silent mode (or multithreaded) it just runs.",
            "score": 8,
            "replies": []
          },
          {
            "author": "ventuspilot",
            "body": "You may be interested in Casey's rant where he wrote a terminal app that was a couple magnitudes faster followed by a discussion with M$ engineers that told him that what he has just done was not possible.",
            "score": 7,
            "replies": []
          },
          {
            "author": "nyctrainsplant",
            "body": "It turns out the same person (Casey) had a row with Microsoft [directly](https://github.com/microsoft/terminal/issues/10362) before, too.",
            "score": 7,
            "replies": [
              {
                "author": "vytah",
                "body": "I remember that, it was glorious. Casey then proved them wrong:\n\nhttps://www.youtube.com/watch?v=hxM8QmyZXtg\n\nand Microsoft finally gave in: \n\nhttps://devblogs.microsoft.com/commandline/windows-terminal-preview-1-13-release/#new-rendering-engine",
                "score": 9,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "pythosynthesis",
        "body": "IIRC, in an interview John Carmack said the biggest pressure for them to churn out games was not from the players themselves, but from chip vendors. Because that would justify buying new CPUs and GPUs. And so, he was saying, they would spend very little time on optimizations vs just pushing out software.\n\nNew, fast chips are extremely forgiving of much dog code. You can write severely subpar code, but it doesn't matter because the new super fast chip will do the heavy lifting instead of you.\n\nThe really interesting thing can be observed with consoles. When it first comes out the HW is new and fast, so people can code like dogs and it's all good. But you cannot upgrade the CPU/GPU on the console, so over time you see much more impressive graphics and performance with the same HW. People are forced to optimize.",
        "score": 46,
        "replies": [
          {
            "author": "i860",
            "body": "&gt; But you cannot upgrade the CPU/GPU on the console, so over time you see much more impressive graphics and performance with the same HW. People are forced to optimize.\n\nAnd they eventually learn interesting and novel solutions along the way. Healthy limits are constructive and we've been given way too much rope.",
            "score": 18,
            "replies": []
          },
          {
            "author": "ironhaven",
            "body": "I feels like we are still there with nvidia and raytracing.\n\n\"Don't waste you time manually lighting scenes when you can just enable the ray tracing hardware to do the lighting 'objectively better' in all ways compared to what you can do. If performance suffers upscale with dedicated upscaleing hardware!!!!\"",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "Raunhofer",
        "body": "I'm fully aboard the dread train about how inefficient many apps today are, but at the same time, I get it. We are leveraging the excess resources to provide value faster. There used to be a time when this was not possible; if it had been, people back then would have done exactly the same. After all, the goal is to provide value, not programming itself.\n\nMy personal pet peeve is lackluster UX design. UI/UX designers sorely need a stronger software background, and programmers sorely need a stronger UI/UX background. Look at MS Teams. What an abomination from a multi-trillion-dollar company. I really don't care if it eats 1% or 5% of my excessive system memory, but holy crap is it pain to use, despite the growing memory usage.",
        "score": 84,
        "replies": [
          {
            "author": "metaltyphoon",
            "body": "&gt; We are leveraging the excess resources to provide value faster\n\nThats the problem ain’t it? Everyone thinking there is excess and perhaps the only thing running on a system.",
            "score": 26,
            "replies": [
              {
                "author": "privatetudor",
                "body": "Exactly this. \n\nI've heard people say so many times shit like \"free ram is wasted ram\" to justify web browsers' memory bloat. \n\nMeanwhile I'm constantly checking which processes I need to shut down because I'm running an old laptop.",
                "score": 13,
                "replies": []
              }
            ]
          },
          {
            "author": "donalmacc",
            "body": "Completely agree. I’m not from the camp of “everything needs to be instant and anything else is bloat” but when I close my IM program to compile instead of my editor, you know something is fucked along the way. Teams takes longer to start up than windows does.\n\nIronically, the fastest way I’ve found to launch teams is to have slack running with the outlook plugin, and to click “join teams call” on the message you get. It skips all the extra shit and puts you straight into the call. ",
            "score": 16,
            "replies": []
          },
          {
            "author": "ventuspilot",
            "body": "&gt; We are leveraging the excess resources to provide value faster.\n\nIMO we're beyond that. Most updates that are forced on me contain \"value\" that I hate and would rather not have. Mostly looking at M$ for renaming/ moving around stuff for no reason at all, but I also stopped using Firefox when I no longer could just launch it but rather had to wait for it updating itself on pretty much every single launch.",
            "score": 9,
            "replies": []
          }
        ]
      },
      {
        "author": "Hand_Sanitizer3000",
        "body": "The problem is not enough leetcode style interviews in software engineering roles. We're just a few more leetcode questions away from identifying true talent that will resolve this.",
        "score": 127,
        "replies": [
          {
            "author": "Klightgrove",
            "body": "I had my 2nd coding interview *ever* a few weeks back with a large company. This was for a senior position and the guy was disinterested and asking me about sorting lists instead of discussing the actual job. \n\nWe just interviewed an applicant for a similar position on my own team and we talked about the actual role without wasting time with esoteric trivia about Python functions lol",
            "score": 14,
            "replies": []
          },
          {
            "author": "vacantbay",
            "body": "At big tech we have a revolving door of pro leetcoders who can’t actually read or write bug free code.",
            "score": 35,
            "replies": []
          }
        ]
      },
      {
        "author": "Demonchaser27",
        "body": "I think the most recent thing that baffles me is how effin' slow File Explorer is.  It sometimes gets loading locks, then you close and reopen and it's fine.  Then sometimes you make changes to the folder and it doesn't refresh so you're not sure that it made the file until you try again and it asks if you want to overwrite (or you exit and re-enter the directory).  That's NEVER happened before Win11, so what the hell?\n\nAnd the final and probably worse one in Win11.  If you have an large external backup HDD that (logically) goes to sleep to preserve itself.  Windows File Explorer will literally FREEZE ALL OPERATIONS for like 15 full seconds if ANYTHING tries to access it while it's in sleep, even other applications or other file explorer windows doing something completely different.  Because everything is apparently tied to one thread or something somehow I guess?  Or it operates like a DB now with locks or something.  I don't know, but it's atrocious, and just shouldn't be a thing.\n\n  \nOh and on the topic of the video, VS Code is actually really sad.  It was more or less designed ENTIRELY because apparently \"Visual Studio\" is too slow.  But... but it didn't need to be.  So we got this whole other product just because they couldn't be bothered to actually fix Visual Studio (a PAID FOR program, btw, if you want all of the features).  I think some of the fault of this is tying web services to software now.  Web shit is hella slow and just shouldn't be there by default (and it should warn you when you go to enable it how it will affect performance).",
        "score": 12,
        "replies": [
          {
            "author": "FeliusSeptimus",
            "body": "Explorer is surprisingly terrible considering how central a component it is.",
            "score": 7,
            "replies": []
          }
        ]
      },
      {
        "author": "leogodin217",
        "body": "\"It's enterprise software. It's meant to be robust and secure not fast.\" ~ A programmer friend of mine.",
        "score": 12,
        "replies": [
          {
            "author": "IkalaGaming",
            "body": "That’s probably a joke, but we can have all three. Most of the slowness isn’t a lack of some magic hotspot micro-optimization, it’s gross negligence.\n\nArchitectural mess causing tons of redundant calculations and network requests, complete disregard or even disdain for all forms of cache, using wild O(n^4) algorithms instead of taking 5 seconds to go “well that could be O(n), and it would be easier to read”, etc.",
            "score": 16,
            "replies": [
              {
                "author": "leogodin217",
                "body": "I assure you. It was not a joke. This is what the team believed. Performance had zero consideration. I even got a laptop upgrade approved, because their JS-heavy apps would hang for minutes at a time.",
                "score": 11,
                "replies": [
                  {
                    "author": "Ameisen",
                    "body": "Given that performance is a *part* of robustness...\n\nSoftware that takes 5 hours to load a file is not robust.",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "MrChocodemon",
        "body": "I have searched but not found it, but could anyone link to the stream that he was talking about? I would like to see that video of the comparison.",
        "score": 10,
        "replies": [
          {
            "author": "ScrimpyCat",
            "body": "https://youtu.be/GC-0tCy4P1U\n\nAt 25:12 he does a debugger comparison between current VS and RemedyBG. Then at 36:00 is when he shows the old VS debugger.",
            "score": 21,
            "replies": [
              {
                "author": "MrChocodemon",
                "body": "Thank you very much &lt;3",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "jacenat",
        "body": "&gt; Software is way less performant today\n\nYes. And the following is also true:\n\n* Software is **way** easier to write today\n* Software is way more secure today\n* Software is way more flexible today\n* Software is way more modular today\n* Collaborating on software is way easier today\n\nAll of these have costs. It's like people only see the bad parts of how software works today, and not the good parts that make most of the industry tick.",
        "score": 458,
        "replies": [
          {
            "author": "Saint_Nitouche",
            "body": "And let it not be forgotten that most software can now encounter non-ASCII text and 'just work'",
            "score": 224,
            "replies": [
              {
                "author": "Ok-Scheme-913",
                "body": "Hey man, I preferred when èn�odîng resulted in unreadable shit everywhere!",
                "score": 133,
                "replies": [
                  {
                    "author": "Saint_Nitouche",
                    "body": "I have considered putting \"fluent in mojibake\" on my resume from time to time.",
                    "score": 15,
                    "replies": []
                  }
                ]
              },
              {
                "author": "jacenat",
                "body": "Holy shitballs, wrangling Unicode into Python 2 even was an atrocious experience, and that wasn't even that long ago.",
                "score": 38,
                "replies": []
              },
              {
                "author": "ScrimpyCat",
                "body": "🤔Someone should tell Reddit 🙃 `then`.\n\nAnd there is some irony there as old Reddit could handle it correctly, whereas new Reddit does not handle surrogate pairs correctly and hasn’t for a long time (some operations do such as length or index of character, but then some other operations such as certain insert or substitution operations then incorrectly treat the UTF-16 as being fixed length). \n\nThis also isn’t unique to Reddit, plenty of software has Unicode related bugs. I really don’t know where some of you are getting this idea that it’s easy or that there aren’t issues nowadays. \n\n.And no I haven’t been forgetting the first letter of each paragraph either :). Note this latter point only applies if you’re on the Reddit mobile app (at least iOS), but the first bug (html tags being inserted into a surrogate pair and splitting them) affects both web (new) and mobile.",
                "score": 20,
                "replies": [
                  {
                    "author": "timpkmn89",
                    "body": "Not like we want to encourage people to use New Reddit anyway",
                    "score": 12,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "binheap",
            "body": "* Software is way more secure today\n\nLet us reminisce in the days when the sandboxes on applications were so bad that there was a weekly flash update to fix another zero day. It's a serious miracle that the modern web has so many features and is somehow still a relatively difficult to attack vector.",
            "score": 142,
            "replies": [
              {
                "author": "CrownLikeAGravestone",
                "body": "I miss Flash. It's like that rusty old car you used to drive around which *might* have killed you on any given day but somehow you survived.",
                "score": 38,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 9,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Pseudoboss11",
            "body": "Are these responsible for the orders of magnitude reduction in performance? or it is from the massive boat in software, giving us features that we don't even want, let alone use? \n\nThe reply to the current top comment is to diable Bing search, a feature that I feel most of us don't use, yet has a huge performance impact.",
            "score": 14,
            "replies": []
          },
          {
            "author": "archialone",
            "body": "But i think what allowed all of the above points, is a good performant tools that do the job right.\n\nImagine a world where git would be invented as a bloated js application with UI that cannot be compiled to rpi. Collaboration would be imppossible, slow and frustrating.",
            "score": 27,
            "replies": []
          },
          {
            "author": "NeuralFantasy",
            "body": "Very good points! You can add at least this to the list:\n\n- Software is way more portable today\n\nFor example, it is very common to bash Electron based software nowadays. True, it might be a bit slower and more resource hungry. But it meakes it easier to port the application to different platforms with it. Not to mention that the barrier of entry to develope with it is very low for any web developer (your 1st point). And if done right, it can be very fast like VSCode.\n\nOne of the biggest thing slowing things down is also a big plus: internet. We have automatic cloud storage/backups, automatic updates, real-time collaborating and other features which fetch data from the internet. This always adds a lot of latencies everywhere which is not about software performance per se but rather something you can't avoid when operating over the internet.",
            "score": 60,
            "replies": [
              {
                "author": "jacenat",
                "body": "&gt; Software is way more portable today\n\nYes, I definitely forgot that. Good point!",
                "score": 12,
                "replies": []
              }
            ]
          },
          {
            "author": "AntiProtonBoy",
            "body": "&gt; All of these have costs\n\nBut the things you listed are not the true costs behind shitty performing performance. The reason is there less economic incentive to write efficient and performant software, because \"hardware is fast enough\" to mask those deficiencies.",
            "score": 4,
            "replies": []
          },
          {
            "author": "adh1003",
            "body": "Except I'd argue:\n\n* Easier to write: The extraordinary complexity and hyper-abstracted layers-upon-layers does not make code easier to write - in fact if I were learning today, instead of a few decades ago, I'd possibly just give up at the sheer *size* of all the APIs and toolkits. Hell, even the dev environments are incomprehensibly huge.\n\n(Aside: I mean, are you comparing to the 1970s here or what?! Let's compare to, say, the early to mid 1990s where IDEs existed, graphical UI designers existed, UIs-as-code existed too if you wanted it, object orientation is old news and so-on.)\n\n* Security: Is software truly more secure? We still seem to get zero-days on drive-bys and the like, for all the technologies that are supposed to make that impossible. And is the \"cost\" in performance - the horrendous bloat and performance issues we have in modern software - down to security? Does it even really have that big an impact _at all_?\n\n* Flexible in what way? Computers execute instructions just as they always do. If you mean more RAM and CPU, then that *ought* to mean we can do way more stuff than we used to. The difference in hardware is very many orders of magnitude - but the difference in what we can do with sofware on top is far, far less. In fact, a modern computer will manage to lag behind my typing speed quite often. That's just **insane**.\n\n* Modularity: What \"today\" compared to \"yesterday\" are we talking about with modern software? Smalltalk is on the phone; it says you don't know your computing history.\n\n* Collaboration is easier, yes, but why should that lead to shit code?\n\nThese are all just excuses from _my industry_ and I find it embarassing to even tell people I'm in software now. All I hear is complaints. Computers are so slow! Why does it crash all the time? Why is it so janky? And so-on.\n\nWe, as an industry, are writing shit code. We're writing wildly over-complicated, bloated crap. And it's not even got a low defect count. We blame everyone else but ourselves, even though we're writing it. It's the manager's fault. It's a bad product description. The customer doesn't know what they want. The testers aren't good enough. Whatever.\n\nOwn it. We're just writing way, way more shit code than we ever did before. But we have our collective heads very, very far up our asses and keep screaming that it's somehow anyone's fault but ours. So no wonder it just keeps getting worse.\n\nA worldwide-recognised professional qualification for software development skills is hopelessly overdue.",
            "score": 58,
            "replies": [
              {
                "author": "BLOZ_UP",
                "body": "&gt; We, as an industry, are writing shit code. We're writing wildly over-complicated, bloated crap. And it's not even got a low defect count. We blame everyone else but ourselves, even though we're writing it. It's the manager's fault. It's a bad product description. The customer doesn't know what they want. The testers aren't good enough. Whatever.\n&gt; \n&gt; Own it. We're just writing way, way more shit code than we ever did before. But we have our collective heads very, very far up our asses and keep screaming that it's somehow anyone's fault but ours. So no wonder it just keeps getting worse.\n\nThe blame I think is at least two-fold:  \n  1. Way more software engineers, since it's more accessible than it used to be.  \n  2. Way more layers out of your control.  \n\nFor 2, I have this theory that since no software is bug free, adding layers compounds bugs in a way similar to compound interest:\n\nGiven the average layer of software is 95% bug free (this is being very generous, but the actual number doesn't matter), and you have `n` layers, you get `0.95^n`. In other words, the more layers the less stable your software is.",
                "score": 5,
                "replies": []
              },
              {
                "author": "jacenat",
                "body": "&gt; The extraordinary complexity and hyper-abstracted layers-upon-layers does not make code easier to write\n\nI fundamentally disagree here. I have seen younger people pick up scripting and coding than my peers when I was young. Yes, platforms for users are hiding away a lot of ways to tinker and \"slide\" into it. But once people are exposed, they have a much easier time.\n\nI remember setting up an IDE for Pascal when I was 15. It was horrible. Compared to now when you download VS Code, Python and have a hello world up in literal minutes.\n\n&gt; Is software truly more secure?\n\nI was talking to a colleague the other day and said:\n\n&gt; All software is broken the moment it is written. It just takes us time (sometimes more, sometimes less) to find out how and why.\n\nThis goes for security as well. The difference is that by using libraries, you \"offload\" security evaluation for a portion of your functionality. This makes scaling up functionality of your program much less cumbersome **AT A COST**. And this cost can be monetary, but it can also be risk (as intrusions into widely used basic libraries have shown). The point is that you **can** make a decision to take this risk, instead of being forced to do security for all aspects of your program yourself.\n\nAnd I remain: this makes software more secure in general becaue many programs rely on functionality and security of libraries, making libraries more valuable, freeing up resources to maintain them (yes I know there are huge problems with the last parts of this, but not enough to shoot down my opinion for me).\n\n&gt; Flexible in what way?\n\nI am playing windows game on an arch linux derived handheld. Games that were compiled for windows. This fact still rips my mind clean in half years later.\n\nAt work we are writing and deploying code on Windows and Linux with an incredibly small team and it **works**. If you had told me this in 2000 I'd have you committed (not to git!).\n\nI can set up and CDN a website worldwide in under an hour. I do not have webdev education or work experience.\n\nWhen I write stuff for my D&amp;D campaign in Obsidian, I can store it online and access it on multiple devices on basically every OS under the sun without breaking content or styling.\n\nMaybe I am really getting old. But all of these keep blowing my mind daily. I do know they have a cost, but this cost is so small (currently) that the added flexibility in accessing functionality barely registers for me.\n\n&gt; n fact, a modern computer will manage to lag behind my typing speed quite often. **That's just insane.**\n\nWhile I do agree that all of the above conveniences have cost, I don't understand what you are saying here. Here is what I am running:\n\n* Ryzen 7 7600\n* 32gb 6000MT\n* 3060 12GB\n* 2TB NVME SSD\n* TUF Gaming B650\n* Win11 (Win10 in a VM for some testing)\n\nHardly top of the line, but passable. I don't experience any slowdown on the system, let alone while typing. Yes, I don't get stable frames in MSFS 2020 in VR (which is because they rely too much on the CPU for terrain streaming). Yes, I have a long-standing problem that capturing with my 1080p60 capture card drops single frames every couple of seconds that I couldn't track down.\n\nOn the other hand, I also run display fusion and fancy zones on 2 monitors with different:\n\n* refresh rates\n* resolutions\n* **ORIENTATIONS**\n\nAnd all of that takes so little performance that playing games, you just do not notice it. Let alone any impact on the desktop. I am very satisfied with the general performance of my machine and the OS. So it's really jarring for me to hear people say they have a 200ms delay when pressing the action button to when the windows menu appears. That would not work for me at all, but it also doesn't happen to me.\n\nAnd at work, we also do not experience this. My work machine is an 8th gen i5 with 16gb of 2666MT DDR4. Still running Win10 there, but OS performance is great, and I do not get slowdowns when typing or opening programs (I am running from a SATA SSD, so yes programs take longer to load, but not to start).\n\nI really don't understand where this performance gap is coming from.",
                "score": 30,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "I think a lot of us see the good, it's that we don't dismiss the bad.",
            "score": 3,
            "replies": []
          },
          {
            "author": "sombrastudios",
            "body": "&gt; Software is way easier to write today\n\nDon't get me wrong, I love the UI space. It's roaring with innovation.\n\nBut honestly, writing plain html and js to accomplish even complex things felt way easier and was just as bug-prone.\n\nI don't think you're points can be asserted as true just like that.\n\n\n&gt; Collaborating on software is way easier today \n\nBiggest part of that was Linus Torvald pretty much singlehandedly\n\n&gt; Software is way more modular today \n\nIs it? Every now and then 2 webapps from different companies play well together, yeah. I like when that happens, but it feels special to this day.",
            "score": 3,
            "replies": []
          },
          {
            "author": "_Pho_",
            "body": "I'm convinced software trends are cyclical. We write stuff in low-abstraction languages like C, which inevitably trends toward something less pure and far more bastardized like C++, which after a decade or two becomes some unknowable eldritch cacophony of \"features\". People build wrappers on them (Node/Python) and then try to do configuration as code / wysiwyg / low code, it sucks, and we go back the other direction. \n\nStuff like WordPress comes around to make thing approachable for business users, which is basically the furthest abstraction from \"performant software\" imaginable, but ends up owning the lion's share of the market because you're not going to teach a marketing director how to use Spring or Microsoft Server 2000 or whatever. Then we spend basically the next two decades trying to go from WordPress to more performant, less horribly abstracted alternatives, and end up reinventing it via NextJS with a headless CMS or whatever. \n\nAnd I'm not saying its bad. This is all a game of tradeoffs. This is what we do. You can still write everything in C if you want. But most companies are not going to pay for it. I would love a perfectly optimized performant software world where we were all monastic builders doing gods work. But it just aint it. \n\nI wish people remembered how bad things were in like 2000. React/Node and the litany of SAAS to support it has spoiled us. People say \"orders of magnitude worse in performance\" but ultimately nothing developers have done has increased the digital experience of the everyman as much as internet infrastructure getting ridiculously good. \n\nWhat most engineers are complaining about are things like UI glitches, large bundle sizes, and 200ms of load times - rarely is performance justifiable. \n\ntl;dr market forces",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "wildjokers",
        "body": "We need to stop building apps with web tech which requires bundling an entire browser rendering engine with each app. The text based DOM was simply not designed or intended for rich client apps. It is no surprise modern apps are slow.",
        "score": 30,
        "replies": [
          {
            "author": "retro_and_chill",
            "body": "It’s because JS developers are a dime a dozen.",
            "score": 14,
            "replies": [
              {
                "author": "-Y0-",
                "body": "Not JUST that. It's that all other cross-device UI libs suck donkey balls, and Electron gives a lot out of the box.\n\n- You want a Teams-like apps? Electron can do that.\n- Want screen recorder? Electron can do that.\n- 3D CAD? Sure.\n- 2D Image editor. Electron provides.",
                "score": 6,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "TheCritFisher",
        "body": "I feel like JetBrains IDEs have been getting faster. They even made lightweight versions that can open near instantly and then you can \"turn on\" the heavyweight IDE features later.",
        "score": 9,
        "replies": []
      },
      {
        "author": "Antypodish",
        "body": "Inefficient to the point, that displaying simple thing as clock (windows right bottom corner (default)) on some laptop, can take around 1% of the battery life time.",
        "score": 9,
        "replies": []
      },
      {
        "author": "regular_lamp",
        "body": "I had a bit of a meltdown at some point when I was installing a 64bit ubuntu on a raspberry PI 4 for which there wasn't a vscode package at the time. So I figured I'd just build it from source. The build refused to even start on a machine that had less than 8GB of ram (as in there is literally a check in the build script). The rpi had 8GB but some of it was reserved for the GPU. So I figured I'd just comment out the check... Surely the threshold isn't exactly 8GB and 7.5 will do.\n\nTurns out the threshold should have been higher. Only after creating a swap file and letting it run over night did it finish the build.\n\nBut that wasn't really what I had the meltdown about. I just commented on this somewhere on here and was so surprised how many people basically said \"well, that makes sense. it's a very capable IDE!\"\n\nDUDE IT'S A TEXT EDITOR! The same functionality but in less pretty existed decades ago where that RPI4 would have been a literal supercomputer. It does nothing that justifies this level of bloat. Of course the bloat is in the underlying frameworks because apparently the most sensible way to write a text editor these days is to implement it as a web site and then ship it together with a browser (that is in turn a notorious resource hog). But so many people defended this as being an \"expected amount of bloat for the functionality provided\".\n\nThis made me realize there is now entire generations of programmers out there that never wrote native code and have no mental compass about how much (or little) this COULD take if we didn't default to building everything on top of five layers of \"frameworks\".",
        "score": 193,
        "replies": [
          {
            "author": "badsectoracula",
            "body": "I had a somewhat similar experience, except instead of trying to run VSCode on a RPi4 i was trying to run Geany on RPi2 :-P.\n\nYou see, Geany *is* available for RPi's OS but it uses Gtk3 and Gtk3 is *incredibly* slow on RPi2 - i'm talking \"press a key and wait half a second for the letter to appear\" slow.\n\nSo i decided to just download the last version of Geany that used Gtk2 and compile that. It took *AGES* to build but the Gtk2 version was much faster and responsive. Except it was also buggy - scrolling would leave behind artifacts, making it kinda unusable in a different way :-P.\n\nEventually i decided, screw it, i'm using Nedit. Nedit is built on Motif which is very fast as it had to work on 35 year old systems. And finally that worked fine - it was fast, responsive and without any issues.\n\nWell, except one: one of the reasons i used Geany was that i want to have a sidebar with the files alongside the editor and Nedit doesn't have that. So i wrote a Tcl/Tk script (guess what, Tk is also very fast) that does exactly that and doubleclicking on a file would open it in Nedit - as a bonus i added a couple of extra features for opening a terminal, running make, etc.\n\nThat was 3-4 or so years ago, since then [said script](http://runtimeterror.com/tools/projfiles/) has evolved a little and it is basically how i work on C/C++ projects even on my main PC. I do use Kate instead of Nedit though as it has LSP support with clangd, etc, and i do find that stuff useful. [This video from last year](https://www.youtube.com/watch?v=gQpK6eX-04M) shows the Kate+projfiles (the script) for working on homebrew stuff for the original Xbox using the opensource nxdk SDK.",
            "score": 43,
            "replies": [
              {
                "author": "stianhoiland",
                "body": "This guy softwares.",
                "score": 15,
                "replies": []
              }
            ]
          },
          {
            "author": "gimpwiz",
            "body": "Slack uses like three gigabytes of ram. IRC used like three hundred kilobytes. And frankly IRC was better. It's twenty five years later and our chat program is worse in almost every way other than animated fucking emoji.",
            "score": 41,
            "replies": [
              {
                "author": "alinroc",
                "body": "&gt; Slack uses like three gigabytes of ram\n\nWhen your app is just a wrapper around Chromium and a web server that's just running a bloated web page/app, that's what you get.",
                "score": 11,
                "replies": []
              },
              {
                "author": "flexosgoatee",
                "body": "Hey but the support guy says they lazy load ~20 messages (and apparently don't cache them) at a time for \"significant performance\" reasons. Well, scrolling through a few hundred messages takes minutes!",
                "score": 16,
                "replies": [
                  {
                    "author": "gimpwiz",
                    "body": "Not caching fucking plaintext gets my goat. It takes no time or space at all to cache a book's worth of it. Compared to all the other stuff anyways.",
                    "score": 6,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "OffbeatDrizzle",
            "body": "yeah it's crazy how fucking dog shit slow every piece of shit software is these days because everyone's using electron or some other bullshit. apps like teams and outlook are barely usable because of it. you used to be able to press the windows key and start typing straight away into the search (which is another level of bs at how bad that is now as well), but if you start typing too fast then it misses your first few keys. windows 10 and beyond have become unusable unless you have an SSD or NVME drive - it's completely unacceptable",
            "score": 52,
            "replies": []
          },
          {
            "author": "hgwxx7_",
            "body": "I understand the frustration, but they made a text editor for folks like you -&gt; [zed.dev](https://zed.dev). Renders at 120 FPS. Extremely responsive.\n\nMe personally, VS Code is fast enough for me so that's what I use. But I don't know why people who want performance above all don't just use zed. If the answer is \"I have 3-4 plugins that I really need\", that's fine too. But then performance isn't the _highest_ priority for you is it?",
            "score": 21,
            "replies": [
              {
                "author": "loozerr",
                "body": "How is rendering at monitor refresh rate a feature?",
                "score": 8,
                "replies": []
              },
              {
                "author": "regular_lamp",
                "body": "It's not even that I \"need\" more performance. I at first didn't realize this when using vscode on PC. Only this attempt at building it made me realize the sheer excess of bloat involved. I typically use sublime text. Still as a developer myself that often needs to be efficient about memory this kind of use blows my mind. I feel there is just a complete loss of perspective. Is vscode more powerful than say emacs or vim? probably (although I guess someone would want to disagree with that I'm sure).\n\nThe thing is those are capable tools and they existed as early as the 1980s... a time when computers had less than 1MB of memory. Like how can anyone look at this and go \"yeah... of course text editing these days takes 1000x the memory... that makes sense!\"\n\nThink of any other engineering discipline where you are given 1000x the resources to solve a similar problem and you end up at roughly similar practical performance. It's just this complete loss of perspective that drives me mad.",
                "score": 19,
                "replies": []
              }
            ]
          },
          {
            "author": "axonxorz",
            "body": "&gt;DUDE IT'S A TEXT EDITOR!\n\nnah it isn't.\n\nIt's an Electron application. You're not compiling a text editor, you're compiling nearly all of Chromium and NodeJS, and the running a large collection of .js/.ts files.\n\n&gt; if we didn't default to building everything on top of five layers of \"frameworks\".\n\nThat's a bit silly. Next to nobody is developing a framworkless UI application. We use QT, or GTK, or WinUI, or Flutter, etc etc. You don't want to deal with the ungodly complexity that is raw X11 or Wayland.",
            "score": 109,
            "replies": [
              {
                "author": "sacheie",
                "body": "True, but the electron stack is a mile high compared to Qt (at least, assuming your Qt app is not using Webkit..). You could probably compile KDE on the Raspberry machine he mentioned.",
                "score": 39,
                "replies": []
              },
              {
                "author": "regular_lamp",
                "body": "&gt;nah it isn't.\n\n&gt;It's an Electron application. You're not compiling a text editor, you're compiling nearly all of Chromium and NodeJS, and the running a large collection of .js/.ts files.\n\nI literally said that later on. Of course if the implemented functionality is a text editor then it's a text editor?\n\nNot sure how the underlying choice of framework/runtime justifies... itself?",
                "score": 58,
                "replies": []
              }
            ]
          },
          {
            "author": "Bakoro",
            "body": "&gt;DUDE IT'S A TEXT EDITOR! The same functionality but in less pretty existed decades ago where that RPI4 would have been a literal supercomputer.\n\nIf all you want is text editing, then why aren't you using VIM or Emacs?\n    \nI'm guessing that there is some feature, or set of features for which you want VSCode specifically, since you went through the trouble.\n      \nI suspect you are taking a whole mountain of things for granted here, which gets you your features.",
            "score": 47,
            "replies": []
          },
          {
            "author": "cac2573",
            "body": "Flatpak",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "Girgoo",
        "body": "Tell me the system requirements for a music player. And what is the requirements for Spotify?\n\nYes! Many applications should be better written. Stop building electron applications. Dont build applications like the calculator in electron. I dont care if the calculator is cross platform.\nYes, Visual Studio Code should not have been built in electron either. What happened to native applications?\n\nYes Microsoft you have the money to build Microsoft Teams in none electron applications. I guess they will soon port Office 365 to webbased applications as well. Wait, they have already started the work with new Outlook... Tell me why I should use that over a normal webbrowser... Best is native applications.",
        "score": 11,
        "replies": []
      },
      {
        "author": "seekfitness",
        "body": "I think part of the problem is the Knuth quote, “Premature optimization is the root of all evil”, has been bashed so deeply into the head of every CS student that people have lost all sense. There is some truth to it, you don’t want to be writing confusing code for the sake of an optimization that isn’t actually a bottleneck.\n\nBut I think this quote mostly makes sense when considering the implementation of a single function in isolation, not in overall system design, but junior engineers hear the quote and lack the experience to see the nuance. It gives them a mindset to think less about performance, when the truth is that with experience you can often write performant code that isn’t harder to maintain and can be delivered on time.\n\nYou run into a lot of issues down the road if you don’t think a lot about performance at every stage of development when working in a large software system. You can end up in a “death by a thousand cuts” type situation where there are few clear ways to gain significant performance gains without a major rewrite. You fire up the profiler on a large project and almost nothing sticks out as a big bottleneck. Do you tackle the top 50 hot functions in the profiler and hope for a measly 10% improvement, or do you just throw your hands up in defeat and assume the user won’t care enough to stop using your product?",
        "score": 11,
        "replies": [
          {
            "author": "PhysicalMammoth5466",
            "body": "&gt; I think part of the problem is the Knuth quote\n\nI had hundreds of coworkers, guess how many I would hire if I ever ran a business? not even 10 of them. Somehow &gt;9/10 people who can't program are programmers",
            "score": 4,
            "replies": []
          },
          {
            "author": "somebodddy",
            "body": "Knuth wrote that in the 1960s, when optimizing compilers were still relatively new and assembly languages were still hot. I was not born back then, let alone programming, but I can only assume the optimization he was referring to was things like instruction reordering and register packing - things that can really mess up your code's readability if you try to implement them yourself instead of letting the compiler do what it can.\n\nModern optimization is quite different. It's more about parallelization, proper caching, and peeling up layers of abstraction to expose inefficiencies that affect the big O performance. These are optimizations you can do without compromising the code's readability and maintainability too much - especially if you are willing to pay the cost of some glue abstractions, something that was unacceptable performance-wise half a century ago but nowadays is so cheap that its performance cost can might as well be ignored.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "llama-lime",
        "body": "This is why I use Emacs. It's always been the same speed.",
        "score": 11,
        "replies": [
          {
            "author": "syklemil",
            "body": "Neovim is also a pretty neat platform to build a light IDE on. With LSP and some async stuff it doesn't feel _sluggish_, even if the language server is kinda slow to start.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "jwhat",
        "body": "I forget where I heard it but I've been repeating it forever:\n\nHardware is getting better, we call that Moore's law. \n\nSoftware is getting worse at an equal pace, and we don't have a name for that because it's embarrassing.",
        "score": 23,
        "replies": [
          {
            "author": "bitbytenybble110",
            "body": "We have a name for that - Wirth's law.\n\nPeople also phrase it as \"What Intel giveth, Microsoft taketh away.\"",
            "score": 39,
            "replies": []
          },
          {
            "author": "uCodeSherpa",
            "body": "Softwares quality decline is outpacing hardware, which is why even computer illiterate are noticing it. ",
            "score": 11,
            "replies": []
          }
        ]
      },
      {
        "author": "Ok-Armadillo-5634",
        "body": "Sublime Text and Sublime Merge",
        "score": 6,
        "replies": []
      },
      {
        "author": "JoelMahon",
        "body": "I'm only part way through the video but I want to mention: idk when we count the good old days, but I've watched enough of the Mario 64 guy to know how damn non-performant the code is. I consider Mario 64 old enough.\n\nI do strongly believe they should focus on performance WAY more.",
        "score": 3,
        "replies": [
          {
            "author": "PhysicalMammoth5466",
            "body": "Mario 64 had a very good excuse. It was the first n64 game, 3d which game devs never really did, had a cache which SNES and other systems didn't have and was a 64bit CPU while many devs were use to 16bit. There was near 0 chance of getting half of the performance the n64 could do",
            "score": 7,
            "replies": []
          }
        ]
      },
      {
        "author": "Probable_Foreigner",
        "body": "Is my PC just cracked or is the debugger fine even on VS 2022? Stepping through my C# program it updates instantly.\n\nAlso the project loads in like 10~ seconds. I know they make fun of this but honestly that is perfectly acceptable. How many times are you opening and closing your projects?",
        "score": 4,
        "replies": []
      },
      {
        "author": "n3phtys",
        "body": "We also have a lot more software that does not make money from customer satisfaction but instead from lock-in.",
        "score": 3,
        "replies": []
      },
      {
        "author": "ematipico",
        "body": "The wrong tool for the job: JavaScript",
        "score": 25,
        "replies": []
      },
      {
        "author": "Economy-Beautiful910",
        "body": "Haven't watched the video but as someone who is new enough into their career, the amount of external dependencies some places have is crazy. I always thought everything would be in house etc but nope.",
        "score": 8,
        "replies": []
      },
      {
        "author": "MysticNTN",
        "body": "This guy is my litmus test. If someone thinks he’s dumb, they’re dumb.",
        "score": 9,
        "replies": []
      },
      {
        "author": "BitterGovernment",
        "body": "We optimize towards mediocrity.. everyone is just solving a problem in the fastest way possible.. everything is python or javascript and the only metric is did it solve the problem.. Same goes for AI basically an automated way to copy-paste random code. \n\nShit in, shit out.\n\nYes, Im an old grumpy fucker. Sorry.",
        "score": 13,
        "replies": []
      },
      {
        "author": "spennnyy",
        "body": "When software works instantaneously it is intrinsically joyful because you do not leave whatever mental flow state you were in due to a delay. The computer then just becomes an extension of your mind.\n\nFor anything that is going to be used frequently and/or has a lot of users, I think it is an ultimate virtue to not waste their time, and so performance is paramount.",
        "score": 5,
        "replies": []
      },
      {
        "author": "MyCuteLittleAccount",
        "body": "It is how it is when people like electron shit",
        "score": 3,
        "replies": []
      },
      {
        "author": "Alexander_Selkirk",
        "body": "I remember that day in 1998 when a PhD student in our lab convinced me to try Linux, which he had on his PC. The three years before, I had been working on a SunOS box which had, perhaps, 1MB of RAM. I was using Emacs which took e few seconds to start.\n\nSo, I logged in into the box and opened a larger text file. It opened instantly. It was so quick that I thought something must be broken. How could a 800$ PC be so much faster than a $20000 workstation?\n\nI am still using Emacs today. I can't stand the lag and I don't need an IDE.",
        "score": 3,
        "replies": []
      },
      {
        "author": "RedditNotFreeSpeech",
        "body": "Why is he shouting?",
        "score": 3,
        "replies": []
      }
    ]
  },
  {
    "title": "NetBSD bans all commits of AI-generated code",
    "body": "",
    "score": 891,
    "url": "",
    "created_utc": 1715915719.0,
    "author": "pyeri",
    "permalink": "/r/programming/comments/1ctvfh9/netbsd_bans_all_commits_of_aigenerated_code/",
    "comments": [
      {
        "author": "__konrad",
        "body": "Also Gentoo: https://www.osnews.com/story/139444/gentoo-bands-use-of-ai-tools/",
        "score": 236,
        "replies": [
          {
            "author": "slash_networkboy",
            "body": "So where is this line drawn?  VS IDE for example (yes yes I'm aware I'm quoting a ms product) is integrating NLP into the UI for certain things.  Smart autocomplete is an example.  Would that qualify for the ban?  I mean the Gentoo release says:\n\n&gt;It is expressly forbidden to contribute to Gentoo any content that has been created with the assistance of Natural Language Processing artificial intelligence tools. This motion can be revisited, should a case been made over such a tool that does not pose copyright, ethical and quality concerns.\n\nI get that the motion can be revisited and presumably clarified, but as it reads I would say certain IDEs may be forbidden now.\n\nDon't get me wrong, I understand and mostly agree with the intent behind this and NetBSD's actions... just we're programmers, being exact is part of what we do by trade and this feels like it has some nasty inexactness to it.  \n\nAs I think about this... has anyone started an RFC on the topic yet?",
            "score": 172,
            "replies": [
              {
                "author": "nierama2019810938135",
                "body": "In effect, what they are saying is that if you push code generated by AI - which may be copyrighted - then **you** break the rules.\n\nThis means that the burden of verifying the providence and potential copyright of that snippet that the \"AI autocomplete\" gave the programmer is the programmer's burden.\n\nAnd if that is taken too far then AI might inadvertently make programmers less efficient.",
                "score": 72,
                "replies": [
                  {
                    "author": "KSRandom195",
                    "body": "Except this is unenforceable and doesn’t actually mitigate the legal risk.\n\nIf I use CodePilot to write a patch for either, Gentoo or NetBSD will never know, until a lawyer shows up and sues them over the patch I wrote that was tainted with AI goop.",
                    "score": 27,
                    "replies": [
                      {
                        "author": "shevy-java",
                        "body": "Not sure this will hold up in court. \"AI\" can autogenerate literally any text / code. There are only finite possibilities. \"AI\" can use all of that.\n\nIt actually poses a challenge to the traditional way how courts operated.",
                        "score": 6,
                        "replies": [
                          {
                            "author": "KSRandom195",
                            "body": "[What Colour are your bits?](https://ansuz.sooke.bc.ca/entry/23) is the read I usually recommend when presented with “math” answers to legal questions.\n\nIn this case if the claim can be made that the AI generated output was tainted a certain Colour by something it read, then that Colour would transfer with the output up into the repo.",
                            "score": 22,
                            "replies": [
                              {
                                "author": "jameson71",
                                "body": "This argument reminds me of Microsoft’s argument that the “viral” GPL license Linux uses would infect businesses that chose to use it back in the beginning of the millennium.",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "KSRandom195",
                                    "body": "I was pretty sure the newer versions of GPL and more activist licenses are designed to be viral exactly like that?",
                                    "score": 6,
                                    "replies": [
                                      {
                                        "author": "Hueho",
                                        "body": "If you use the source code, yes. But this is now, not then.\n\nMost importantly, Microsoft argument was fearmongering about using GPL software in general, including just as a final user of the binaries.",
                                        "score": 3,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "rich1051414",
                            "body": "Not entirely true. If AI was trained on copyrighted material, it could produce that same copyrighted material, or equivalent enough that a human would be in big trouble if they produced the same code. Additionally, since copyrighted code trained the model, a model that is later used for profit, this opens a whole pandoras box of licensing violations.",
                            "score": 6,
                            "replies": []
                          },
                          {
                            "author": "PhroznGaming",
                            "body": "What the fuck are you talking about? Do you think because of the sheer volume that it somehow modifies what would happen in the court of law? No.",
                            "score": 5,
                            "replies": [
                              {
                                "author": "SolidCake",
                                "body": "more like, “using ai” is an unfalsifiable pretense..",
                                "score": 0,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": -6,
                            "replies": [
                              {
                                "author": "dxpqxb",
                                "body": "You underestimate the point of power structures. AI lawyers are going to be licensed and price-tiered before even hitting the market.",
                                "score": 9,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "[deleted]",
                                    "score": 0,
                                    "replies": [
                                      {
                                        "author": "s73v3r",
                                        "body": "&gt; We keep hearing how good ai is at the bar exam \n\nOpenAI apparently lied about that. It didn't score in the 90th percentile. It scored in the 48th https://link.springer.com/article/10.1007/s10506-024-09396-9#Sec11",
                                        "score": 2,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "author": "josefx",
                                "body": "&gt; Imagine if ai could be a cheap lawyer.\n\nSome actual lawyers already tried to offload their work to AI. As it turns out submitting imaginary legal precedents is a good way to piss of the judge. \n\nThere are cheaper ways to loose a case.",
                                "score": 8,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Iggyhopper",
                    "body": "&gt; is the programmer's burden.\n\nProgrammer: I am just doing the needful. \\**pushes AI code*\\*",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "SharkBaitDLS",
                "body": "Seems completely unenforceable. It’s one thing to keep out stuff that’s obviously just been spat out by ChatGPT wholesale but like you noted there’s plenty of IDEs that offer LLM-based tools that are just a fancy autocomplete. Someone who uses that to quickly scaffold out boilerplate and then cleans up their code with hand-written implementations isn’t going to produce different code than someone who wrote all the boilerplate by hand. ",
                "score": 134,
                "replies": [
                  {
                    "author": "lelanthran",
                    "body": "&gt; Seems completely unenforceable. \n\nI don't think that's relevant.\n\nTLDR - it's about liability, not ideology. The ban completely removes the \"I didn't know\" excuse from any future contributor.\n\nLong version:\n\nIf you read the NetBSD announcement, they are concerned with *providence* of code. IOW, the point of the ban is because they don't want their codebase to be tainted by proprietary code.\n\nIf there *is no ban in place* for AI-generated contributions, then you're going to get proprietary code contributed, with the contributor declining liability with \"I didn't know AI could give me a copy of proprietary code\".\n\nWith a ban in place, no contributor can make the claim that \"They didn't know that the code they contributed could have been proprietary\".\n\nIn both cases (ban/no ban) a contributor might contribute proprietary code, but in only one of those cases can a contributor do so unwittingly.\n\nAnd that is the reason for the ban. Expect similar bans from other projects who don't want their code tainted by proprietary code.",
                    "score": 158,
                    "replies": [
                      {
                        "author": "Plank_With_A_Nail_In",
                        "body": "Legislators are going to have to abandon copyright if they want AI to take over our jobs.",
                        "score": 15,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 2,
                            "replies": [
                              {
                                "author": "gyroda",
                                "body": "I don't see what advantage signatures add here over, say, just adding a \"fuck off LLMs\" field to robots.txt. You can sign anything, that doesn't actually mean you own it.\n\nBad actors will ignore the signatures just like they will ignore robots.txt",
                                "score": 3,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "[deleted]",
                                    "score": 0,
                                    "replies": [
                                      {
                                        "author": "gyroda",
                                        "body": "Again, how do the signatures actually work to prevent untrusted sources? You still need a list of trusted sources, at which point what is the signature doing that a list of domains isn't? \n\n&gt;And AI's can also digitally sign their output,\n\n*Can they*? I'm genuinely asking, because with the way the really pro AI people describe it, I don't think that's the case.",
                                        "score": 5,
                                        "replies": [
                                          {
                                            "author": "[deleted]",
                                            "body": "[deleted]",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "esquilax",
                        "body": "Provenance, not providence.",
                        "score": 22,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": -6,
                            "replies": [
                              {
                                "author": "fishling",
                                "body": "If only there was some way to find out the meaning of words...",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "gyroda",
                                    "body": "We can always ask chatgpt, though I don't know what the province of the answer would be.",
                                    "score": 3,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "sameBoatz",
                        "body": "This does nothing, if i work for oracle and i take proprietary code from the kernel scheduler used in Solaris and contribute it to NetBSD it’s not going to matter. NetBSD still has no right to that code and any code owned or based on code owned by Oracle needs to be removed. \n\nSame with any AI generated code that is (but in reality never will be) encumbered by copyright.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "ThankFSMforYogaPants",
                            "body": "Of course. The point is to avoid that situation in the first place. And secondarily to avoid being liable for  monetary damages by having a policy in place to ban vectors for copyrighted code to get into their codebase.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "[deleted]",
                        "body": "If that is the reasoning you'll also need to ban anyone that works somewhere with proprietary code, because they could write something similar to what they've written or seen in the past.\n\n\nAnd people do actually do this. We've hired people who know how to solve a problem, where they are basically writing a similar piece of code to what they've written before for another company.",
                        "score": -9,
                        "replies": [
                          {
                            "author": "lelanthran",
                            "body": "&gt; If that is the reasoning you'll also need to ban anyone that works somewhere with proprietary code, because they could write something similar to what they've written or seen in the past.\n\nWell, no, because as you point out in the very next paragraph, *people* are trusted to not unwittingly reproduce proprietary code verbatim.\n\nThe point is not to ban proprietary code contributions, because that already exists. It's to ban a *specific source* of proprietary code contributions, because that *specific source* would result in all the people involved not knowing *whether* they have copied, verbatim, some proprietary code.\n\nThe ban is to eliminate one source of excuse, namely \"I didn't know that that code was copied verbatim from the Win32 source code!\".",
                            "score": 57,
                            "replies": [
                              {
                                "author": "slash_networkboy",
                                "body": "Your and prior poster's statements are not mutually exclusive.\n\nThere are famous examples of people (same or different) creating the same code at different times, hell I've done it  Giant project, re-wrote the same function because I literally forgot I did it \\~8 months ago; nearly identical implementation.  Not coding, but my ex was popped for plagiarism... of herself.  The issue was she did her masters thesis on an exceptionally narrow subject and had prior written papers on that subject in lower classes (no surprise).  But because the problem domain was so specific they were close enough to trigger the tools.  It was resolved but it wasn't pretty.  There was zero mal intent, but it was still problematic.\n\nNow I'm confident we all agree banning the flow `prompt to LLM -&gt; generated code -&gt; commit` is the right thing to do, and I'm equally confident we don't mean to ban super fancy autocomplete or really smart linters... Somewhere between these two relatively simple examples is a line. I don't know how sharp or fuzzy it is, but it's there and should be explored and better defined.\n\nTo the point about CYA that also is absolutely a valid input to the discussion IMO, and again the world is littered with legal landmines and CYAs like this that effectively auto-assign blame to the offender and not the consumer (and I think that's fine TBH).  If that's part of the project's reasoning then let's put that out there in the discussion.  Right now the way both projects come off in the OP and the GPP link is:  \\[*See edit below*\\]\n\n\"ZOMG We can't (trust|understand|validate) AI at all so we shall ban it!\"\n\nAgain I am actually in agreement with (my interpretation/assumption of) the core intent of these bans: to maintain project and code integrity.  AND I think we do need to start somewhere, and this really is as good a point as any.  Now let's start a discussion (RFCs) of what that line looks like.\n\n  \nED:\n\nwent and actually read the BSD post and not just the link in OP quoting here because it makes u/lelanthran 's statement much more relevant than I initially posited:\n\n&gt;Code generated by a large language model or similar technology, such as GitHub/Microsoft's Copilot, OpenAI's ChatGPT, or Facebook/Meta's Code Llama, is presumed to be tainted code, and must not be committed without prior written approval by core.\n\nYeah, that totally makes sense... it also doesn't cause an issue with smart autocomplete/linter type tools IMO (though the Gentoo language in GPP is still problematic).",
                                "score": 32,
                                "replies": [
                                  {
                                    "author": "lelanthran",
                                    "body": "You posted a balanced and nuanced opinion (and thoughtfully refined it even further) along with a good plan of action for proceeding from this point on in a fair manner.\n\nAre you *sure* you belong on reddit? /s\n\n:-)",
                                    "score": 11,
                                    "replies": [
                                      {
                                        "author": "slash_networkboy",
                                        "body": "I can froth at the mouth instead with the best of them if that's preferred ;) lol.",
                                        "score": 3,
                                        "replies": []
                                      },
                                      {
                                        "author": "slash_networkboy",
                                        "body": "So... I had a shower thought on this that I would love your thoughts on:\n\nIn the same way that Maxwell's Demon is a magic dude that takes particles of higher that average energy from one chamber and passes them to another let's posit Slash's Daemon is a magic entity that allows a LLM to learn all about the syntax and grammar of a language without retention of any example code.  That is to say it can be trained to understand C++ as well as Stroustrup does, but can not reference a single line of extant code the end user has not specifically shown it.  (like I said, magic).\n\nThis model is then plugged into an IDE (vis a vie intellisense or similar tool) where it has access to whatever project is currently loaded.  The code of the project is it's only reference code at all, so if you have the uniform style of\n\n    if (foo){\n    frobnicate;\n    }\n\nThen that is the only style it's going to use for a prompt like\n\nmake me an if statement that tests foo and if it's true frobnicates.\n\nand if the only code style you have is \n\n    if (foo)\n    {\n    frobnicate;\n    }\n\nThen that's what it will do.  We will assume that since it knows what's legal and what's not it won't do wrong things even if you have a bug and did something wrong like\n\n    if (foo)\n     frobnicate;\n     frobnicateMore;\n\nit won't provide that as generated code because it's not legal C++ (and ideally the linter would find it).\n\nWith such a tool the code provenance would be known (it's all sourced by the contributors to the project) so would such a tool be a problem to use then?  Obviously such a tool is not likely at all to exist but thought experiments are great for dialing in where that proverbial line is.",
                                        "score": 1,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "author": "[deleted]",
                                "body": "People need to move on from the idea that LLMs repeat anything verbatim. This isn't 2021 anymore.",
                                "score": -18,
                                "replies": [
                                  {
                                    "author": "lelanthran",
                                    "body": "&gt; People need to move on from the idea that LLMs repeat anything verbatim. This isn't 2021 anymore.\n\nOnce again, that's irrelevant to the point of the ban, which is to reduce the liability that the organisation is exposed to.\n\n**Even if** the organisation agreed with your take, they might be sued by people who *don't* agree with your take.",
                                    "score": 6,
                                    "replies": []
                                  },
                                  {
                                    "author": "f10101",
                                    "body": "They still do occasionally, especially for the sort of stuff you might use an llm directly for. Boilerplate or implementations of particular algorithms that have been copied and pasted a million times across the web, etc.\n\nWhether that kind of code even merits copyright protection is another matter entirely of course...",
                                    "score": 2,
                                    "replies": [
                                      {
                                        "author": "[deleted]",
                                        "body": "Could it be there are a limited number of ways to sanely write boilerplate and well known algorithms. Hmmmm.",
                                        "score": 1,
                                        "replies": [
                                          {
                                            "author": "f10101",
                                            "body": "Nah. Apart from the very simplest of algorithms, there are always plenty of reasonable ways to skin a cat.\n\nIt's more due to the source material in its training data containing one implementation of an algorithm that has been copied and pasted verbatim a million times.",
                                            "score": 2,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "author": "s73v3r",
                                    "body": "When the LLMs themselves move on from doing that.",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "double-you",
                "body": "&gt; certain IDEs may be forbidden now.\n\nNo IDE forces you to use its AI features. But sure, you might be using it for those features and that'd be a problem.",
                "score": 18,
                "replies": [
                  {
                    "author": "zdimension",
                    "body": "Some IDEs don't really present it as AI. Recent versions of VS have built-in AI completion and it's just there, it's not a plugin, it doesn't yell AI at you",
                    "score": 9,
                    "replies": [
                      {
                        "author": "sandowww",
                        "body": "The programmer has to educate himself on the editor that he is using.",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "meneldal2",
                        "body": "Yeah but autocompletion wouldn't rise to the level of copyright violation if it's just finishing the name of a function or variable.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "FlyingRhenquest",
                            "body": "I've heard a few different sources, one being a talk from an AI guy at the Royal Institution, that GPT/LLM is just a fancy autocomplete. Where is that line drawn? \n\n\nWell, there are lots of lines to be drawn here, I suppose. Suppose hypothetically that an AI gets to the point where it can do anything a human can do, only better. Is its work still tainted by copyright? It just learned things, just like we do, only just a little bit differently. Would a human programmer with a photographic memory be any different?\n\n\nOne thing is for certain, there are interesting times ahead and our lawmakers are not prepared or preparing for the questions they're going to have to answer.",
                            "score": 5,
                            "replies": []
                          },
                          {
                            "author": "zdimension",
                            "body": "Often, it only finishes the line, which can include function calls or expressions. The hard question is where's the threshold that separates \"this is obviously not copyright infringement\" from \"this is risky\"",
                            "score": 1,
                            "replies": [
                              {
                                "author": "meneldal2",
                                "body": "A single function call, unless it starts having nested calls or something is probably fine, but obviously that doesn't mean I'd want to try my chances in court.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "zdimension",
                                    "body": "I agree with you, however NetBSD prohibits all code generated with the aid of AIs. If I write code from my phone and GBoard uses a small neural network to enhance the precision of my finger presses, it counts under their conditions.\n\nAll of this to say blanket bans like this are counterproductive",
                                    "score": 2,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "slash_networkboy",
                                "body": "That is exactly the point I'm driving at.  And in the case of the Gentoo post they state even the \"assistance\" of NLP AI tools is forbidden which seems a bit silly if the autocomplete is using the results (locally or remotely) of such a tool.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 1,
                            "replies": [
                              {
                                "author": "fishling",
                                "body": "&gt;But how they're going to detect and effectively reject that code\n\nThey aren't. The burden is still on the contributor, as it has been before to not manually copy proprietary or incompatibly-licensed code into the codebase.\n\nThe policy makes it clear that this isn't allowed.",
                                "score": 6,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Tiquortoo",
                "body": "The purpose is to say they banned it so if they can identify it they reject it but if they can't then they have cover and most likely no one can tell. Something like that at least.",
                "score": 5,
                "replies": []
              },
              {
                "author": "QuantumMonkey101",
                "body": "I'm so confused. What does using an ide that has AI tools or was created using AI tools have anything to do with the ban? The ban is against AI generated code from being pushed and merged with the main/master codebase/branch. Also it's more concerned with not attributing credit to the correct sources or owners. \n\nOn the other hand, it's about time. We already banned generative AI where I work and most of the code that was produced by these tools was already mostly garbage anyway",
                "score": 2,
                "replies": [
                  {
                    "author": "slash_networkboy",
                    "body": "I was commenting more about Gentoo's take on it where they're banning code that's been touched by AI: \"created with the assistance of\" with that part of the comment.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "gormhornbori",
                "body": "IDE \"generated code\" is (even before AI) a concern when it comes to copyright.   Same with code generated by yacc/bison etc.  You can't use such code blindly without assessments when it comes to copyright.",
                "score": 1,
                "replies": []
              },
              {
                "author": "Kautsu-Gamer",
                "body": "If it is autocomplete, you can always say no to it. A proper programmer takes AI shit, and fixes it just like translators do to the AI machine translation.",
                "score": -2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "dethb0y",
        "body": "How would they know?",
        "score": 285,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 176,
            "replies": [
              {
                "author": "jck",
                "body": "Right. This isn't gonna stop the idiot kids who send bullshit PRs as an attempt to pad their resume but I don't think it's about them. It's about getting the serious contributors on the same page and avoiding copyright drama in the future.",
                "score": 47,
                "replies": [
                  {
                    "author": "gyroda",
                    "body": "That, and the discussion was going to come up sooner or later when someone admits to some of their code being helped by chatgpt or whatever. Might as well get ahead of it and have a known stance rather than reacting and causing a war over a particular PR. Now they can just tap the sign that says \"no AI\".\n\nIt's like how, when you enter a country, sometimes they'll ask if you're a spy. The reason they ask you isn't because they expect actual spies to say yes, it's so they can kick out anyone they find to be a spy without a fuss, even if they can't prove that the spy did anything illegal.",
                    "score": 9,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "recursive-analogy",
            "body": "AI code reviews",
            "score": 156,
            "replies": []
          },
          {
            "author": "gormhornbori",
            "body": "If you submit code to any open source project (or commercial closed source project for that sake), you basically have to say \"I wrote this code. I allow it to be used using ... license (or I assign copyright for this code to ...)\"\n\nIf you work for company A, and steals code from company B (maybe your ex-employer) and pretend to your employer (A) that you wrote (have the rights to) this code yourself, you are in legal trouble.   Basically the same if either A or B is a open source project.",
            "score": 2,
            "replies": []
          },
          {
            "author": "Kenny_log_n_s",
            "body": "They won't, this is pure posturing. \n\n90% of generated code is indistinguishable from non-generated code. Either it does what it's supposed to, or it doesn't. 0% chance of determining something is generated. \n\nFor the most part, copilot should just be auto-completing what you already wanted to code.\n\nEither they're claiming this for legal reasons, or they're just posturing.",
            "score": -128,
            "replies": [
              {
                "author": "VanRude",
                "body": "&gt;Either they're claiming this for legal reasons, or they're just posturing.\n\nThey literally said it's for copyright reasons",
                "score": 129,
                "replies": [
                  {
                    "author": "u0xee",
                    "body": "It's the same reason other projects want to know the provenance of code a person is offering as a PR. If it turns out somebody else owns it, now they're in weird territory legally. AI is no different, just extra unclear who may lay legal claim to it in 10 years.",
                    "score": 39,
                    "replies": [
                      {
                        "author": "Chii",
                        "body": "&gt; If it turns out somebody else owns it, now they're in weird territory legally. \n\ncouldnt they force a contributor agreement by which they shed the liability of any copyright infringement of the contribution to the contributor?",
                        "score": 5,
                        "replies": [
                          {
                            "author": "lelanthran",
                            "body": "&gt; couldnt they force a contributor agreement by which they shed the liability of any copyright infringement of the contribution to the contributor?\n\nCopyright infringement typically doesn't work like that. If someone makes a successful claim against *you*, then *you* have to make legal remedies, and *then* chase the contributor for your damages.\n\nNo different from buying a stolen car: if you are found with a stolen car that you bought in good faith from a dealer, the car is removed from *you* and *you* have to make your claim against the dealer for the costs.",
                            "score": 24,
                            "replies": [
                              {
                                "author": "Chii",
                                "body": "&gt; If someone makes a successful claim against you\n\nright, i see. \n\nCould this be worked around, if you ensure that the 'you' here is the original contributor, rather than the organization?",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "lelanthran",
                                    "body": "&gt; right, i see.\n&gt; \n&gt; \n&gt; \n&gt; Could this be worked around, if you ensure that the 'you' here is the original contributor, rather than the organization?\n\nUnfortunately no - the organisation is distributing the copyrighted material, so *they* are liable as first contact.[1]\n\n*Even if* there was no CLA with copyright reassignment in place, and the individual contributor claimed all copyrights to the material, the *distributor* is still the first point of contact.\n\n\n[1] Hence the ban, to reduce their liability.",
                                    "score": 12,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "KimPeek",
                "body": "As someone with a coworker dependant to ChatGPT, it is absolutely distinguishable. If it's only a line or two, maybe not, but people who use AI to write code aren't using it for single lines. It's always blocks of garbage code that they copy/paste.",
                "score": 26,
                "replies": [
                  {
                    "author": "Berkyjay",
                    "body": "&gt; As someone with a coworker dependant to ChatGPT, it is absolutely distinguishable.\n\nHow exactly?",
                    "score": 2,
                    "replies": [
                      {
                        "author": "KimPeek",
                        "body": "Some giveaways are:\n\n- explicitly assigning configuration settings the default value\n- not following the style of the codebase\n- duplicating imports\n- using different code styles within the same block, like single and double quotes mixed together\n- accessing class attributes or methods that don't exist\n- unreachable code blocks\n- unnecessary function/method parameters\n- unnecessary conditionals\n- obscure techniques that I've never seen them use before\n- excessively commented code\n\nHere is a concrete example. The code in this image actually did what he wanted, but there is an undefined, uninitialized variable that ChatGPT just made up:\n\nhttps://i.imgur.com/61pRwnx.png\n\nIt's often a combination of things but it's usually obvious. It may help that this is a regular behavior, so I am already on the lookout for it.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "Berkyjay",
                            "body": "&gt; Here is a concrete example. The code in this image actually did what he wanted, but there is an undefined, uninitialized variable that ChatGPT just made up\n\nYeah I've run into that before.  Sounds like they are asking the coding assistant to do too much and they're just using that code verbatim.  Basically you have a lazy coder on your hands.  \n\nUsing coding assistants is a skill unto itself.  It's like owning a sharp knife.  That knife is very useful in certain contexts.  But if you decide that it's also good for opening cans of soda then you're gonna have a bad time.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "I will use AI to write code, but I always have to tweak or clean it up. It's great for a first draft on a new feature/task to get past the ocassional mental inertia I'm sure we all experience sometimes.",
                    "score": -3,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "why don't you just... write it though? that's what i don't understand. it seems way more annoying to have to like generate code and then go back and verify that it actually works and doesn't do random extra shit and is actually efficient when you could just not worry about any of that and write the program. that will likely produce better code anyway if you are reasonably skilled, because llms don't understand how programming actually works, it's just mashing a bunch of shit together",
                        "score": 13,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "I'm a fast programmer compared to most people I work with, but using LLMs can save me time. I'm a lot faster reading code than writing it. I understand that being able to fluently read and interpret code is something juniors can struggle with, but for me I can read it faster than I can type (even with using vim key bindings).\n\n\nUsing an LLM is like having a junior whose work you can review. Some tasks or easy boring work, so it's fine to trust a junior to do it well enough and then fix/guide the code after.",
                            "score": 1,
                            "replies": []
                          },
                          {
                            "author": "Berkyjay",
                            "body": "&gt; why don't you just... write it though?\n\nSo you never use calculators?  Any time you have to do math, it's always by hand right?  When it boils down, this is what coding assistants are.  Calculators aren't solving large differential equations for you.  But they certainly can assist in that task.  \n\nThis whole idea that they're just pumping out incorrect code and the only way it's useful is for the user to debug it is incorrect and hyperbole.  This only happens if you ask it to do too much and don't give it the correct context.  If you ask it to write you a pyqt gui from scratch, then yes you're gonna have a bad time.  But if you ask it how to create a drop down element from a list of items, it's going to be very helpful.",
                            "score": 0,
                            "replies": []
                          },
                          {
                            "author": "mrdj204",
                            "body": "I don't know what yall are doing, but I been using chatgpt to generate large python, powershell, and js scripts and rarely have any issues with the code it gives. And it's saved me a countless amount of time.",
                            "score": -2,
                            "replies": [
                              {
                                "author": "mxzf",
                                "body": "I've seen Python code generated by AI.  It was absolute garbage.  \n\nLike, it *worked* when run (as-in it wrote the expected output), but it was also outputting a JSON file to disk using sequential manually formatted line writes; like `output_file.writeline('{')`, `output_file.writeline('    \"'+key+'\": '+value+',')`.  Utter garbage code where I, would reject the PR and question the employability of anyone who submitted it, even though it technically worked.",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "I've written python for 20+ years. The python it writes is generally fine. Not sure what you're doing wrong. If it does something wrong like your example just reply \"use the stdlib json module\" and it fixes it.",
                                    "score": 2,
                                    "replies": [
                                      {
                                        "author": "mxzf",
                                        "body": "It's not code I got from it personally, I was just seeing code someone else had gotten from it.  It's stuff like that which sticks in my head as to just how untrustworthy it is.  Ultimately, it's no different from StackOverflow and other similar things where you get a chunk of code that may or may not actually do what you need it to do, so you've gotta be able to read the code and understand it and fix its issues yourself.  \n\nIt's not a magical codewriting intelligence, it's just a tool for generating some boilerplate code you can fix to do what's really needed.",
                                        "score": 1,
                                        "replies": []
                                      }
                                    ]
                                  },
                                  {
                                    "author": "mrdj204",
                                    "body": "Lol, I can't speak for your experience, but the worst thing it's done to me is produce a function that doesn't work, which it corrects like 95% of the time if told to.\n\nYou are basically saying, \"I'm my experience I got bad results, so it's impossible for anyone to get good results.\"\n\nI'll enjoy completing projects in a fraction of the time they use to take while you die on the hill of LLM bad.",
                                    "score": 2,
                                    "replies": [
                                      {
                                        "author": "mxzf",
                                        "body": "No, I'm saying I've seen way too much crappy code come out of it for me to trust it at all.  \n\nWriting code has never been the hard part, figuring out the algorithms for how to solve a problem is, and AI really can't do that to begin with.  When I can type boilerplate code almost as fast as an AI can write it, in my own coding style, without needing to check and make sure that it's actually what I wanted to write, an AI doing some typing for me doesn't really make a meaningful difference.",
                                        "score": 2,
                                        "replies": [
                                          {
                                            "author": "[deleted]",
                                            "body": "You shouldn't ever trust code written by an LLM, just like you shouldn't ever completely trust code written another person. That's why any sane development process includes code review.",
                                            "score": 1,
                                            "replies": []
                                          },
                                          {
                                            "author": "mrdj204",
                                            "body": "No one said anything about difficulty, it's a time saver, and a finger saver. And yes, if you use LLM improperly, you would probably waste more time using it than you would save.\n\nIt works very well for me, saved me countless time, and enabled me to finish multiple projects I had on the shelf.\n\nIn fact, I dare say it's been so reliable in my experience, that I wouldn't trust people who aren't able to reliably get good code out of it. /s",
                                            "score": 0,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Maykey",
                    "body": "Jetbrains uses llm to [auto complete lines](https://www.jetbrains.com/help/idea/full-line-code-completion.html), not blocks.\n\nNot sure if they support C yet, it just a matter of time",
                    "score": -2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "dada_",
                "body": "&gt; 90% of generated code is indistinguishable from non-generated code. Either it does what it's supposed to, or it doesn't. 0% chance of determining something is generated. \n\nI don't use AI generation that much, but whenever I've experimented with it I've found it absolutely distinguishable. Just like prose written by AI, it has specific tropes and characteristics it likes to use.\n\nUnless you just use the AI to generate something as a first draft, and then you basically rewrite it or very significantly edit it, but at that point it's a different thing entirely.\n\nIt's obviously hard to be 100% sure, but at least having this rule also makes it easier to ask questions if there's a suspicion.",
                "score": 9,
                "replies": []
              },
              {
                "author": "jakesboy2",
                "body": "Are we using different copilots? I’ve used it basically from day 1 but recently turned it off. I’d say it had a 20% hit rate, and half the time I was waiting and reading its suggestion I could have just finished typing what I was typing faster.",
                "score": 5,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "faustoc5",
        "body": "This is a disturbing trend. The AI kids believe they can automate software engineering with AI chatbots yet they not even know what the software development process of software is. And they are very confident of what they don't have experience about\n\nA call it the new cargo cult programming",
        "score": 151,
        "replies": [
          {
            "author": "GayMakeAndModel",
            "body": "It’s not a problem just for programming unfortunately. /r/physics is now filled with ChatGPT word salad. Either that or people have gotten crazier since the pandemic.",
            "score": 47,
            "replies": [
              {
                "author": "gyroda",
                "body": "There's a SFF magazine that pays out for short stories that they publish. They had to close submissions for a while because they were swamped with AI stories from people trying to make quick money.\n\nApparently the AI stories were easy to dismiss upon reading, but the sheer *volume* made it impossible to read each submission.",
                "score": 18,
                "replies": []
              },
              {
                "author": "Worth_Trust_3825",
                "body": "Both. Honestly both.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Unbelievr",
            "body": "And the AI is trained on old, faulty code written by humans.",
            "score": 57,
            "replies": [
              {
                "author": "Swimming-Cupcake7041",
                "body": "Humans all the way down.",
                "score": 24,
                "replies": []
              },
              {
                "author": "cgaWolf",
                "body": "Trained on Stack Overflow questions.",
                "score": 19,
                "replies": [
                  {
                    "author": "jordansrowles",
                    "body": "Sometimes it feels like they were fed the questions and not the answers",
                    "score": 7,
                    "replies": [
                      {
                        "author": "Omnikron13",
                        "body": "Or the answer to a different question. In a different language. That doesn't exist.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "tyros",
                "body": "[This user has left Reddit because Reddit moderators do not want this user on Reddit]",
                "score": 10,
                "replies": [
                  {
                    "author": "Full-Spectral",
                    "body": "An ever constricting mobius strip of faulty provenance.\n\nI think I'm going to change my band name to that...",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "drcforbin",
                    "body": "This is an overlooked point....I won't be surprised if it has already peaked in general/overall quality, and from here only extremely expensive targeted improvements are possible",
                    "score": 3,
                    "replies": [
                      {
                        "author": "binlargin",
                        "body": "I think the \"tending to the norm\" is a problem for neural networks, you need mechanisms that push to the boundary of chaos and order.\n\nI suspect that's the biological function of emotions like curiosity, disinterest and boredom, while confusion, frustration and dissonance help to iron out the inconsistencies. Agents that don't have similar mechanisms will tend towards the middle of the bell curve unless there's tons of entropy in the context, and models that don't filter their training data will have a context that's an average of averages, and destroy performance in the long run.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "U4-EA",
            "body": "I've said this for a while now when talking to other devs - there is a problem here that people who don't know how to code will think *they know how to code* because they will ask the AI to do something and not have the knowledge to know if it is correct... *a little knowledge is a dangerous thing*. I've literally cringed looking at Co-Pilot producing SQL insert statements in VSCode with zero safeguards against injection attacks.\n\nYou shouldn't be coding (whether freehand or AI) *unless you know how to code*. If you know how to code, what use is AI? As its capability stands right now, is it much more than advanced intellisense?\n\nExample - you want a JS function that generates a random number between 2 numbers. Your options: -\n\n1. Code it yourself, presuming you are good enough of a coder to be able to produce optimal and bug-free code (granted, the func used as an example is very basic).\n2. Type \"javascript function generate random number between 2 numbers\", get the first result that comes up (which will be to stackoverflow) and get a function. I just did this - it took me about 10 seconds to type in the search string, submit it and [find an answer on SO with 3341 upvotes](https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript).\n3. Ask AI to generate the function then: -\n   1. Review it and confirm it is correct, which you can only do if you are good enough to code it to begin with, negating the use of AI.\n   2. *Assume* the AI generated solution is bug-free and optimal and you would only *assume* that if you know so little about coding and AI that you do not realise it may not be optimal and/or bug free.\n\nI think scenario 3.2 is the phenomena that has lead to this: -\n\n[https://www.gitclear.com/coding\\_on\\_copilot\\_data\\_shows\\_ais\\_downward\\_pressure\\_on\\_code\\_quality](https://www.gitclear.com/coding_on_copilot_data_shows_ais_downward_pressure_on_code_quality)\n\nUntil we get to the stage where we can *guarantee* AI can produce optimal and bug-free code, I think AI is either: -\n\n1. An advanced intellisense only to be used by advanced coders as a way to save time on key strokes\n2. A liability used by cowboys or the naïve.\n\nA self-driving car that doesn't crash only 99.99% of the time is useless to everyone and will lead to recalls/legal action. I think we are seeing that scenario in the link above.",
            "score": 5,
            "replies": []
          },
          {
            "author": "bekeleven",
            "body": "&gt;The AI kids believe they can automate software engineering with AI chatbots yet they not even know what the software development process of software is. And they are very confident of what they don't have experience about\n\nWas this comment written by AI?",
            "score": 5,
            "replies": [
              {
                "author": "faustoc5",
                "body": "Maybe, maybe yes, maybe no. Maybe I am replying to a AI generated comment. Maybe this reply is AI generated too\n\nI think we will never know for sure",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "OvenBlade",
            "body": "as someone who works in software engineering, AI is super useful for generating example code for a specific algorithm, say you have a CRC algorithm in C and you want some equivalent in python, its pretty effective at that.  I've also seen it used quite effectively at writing code to parse log files, as the regex parsing is really well done.",
            "score": 3,
            "replies": [
              {
                "author": "milkChoccyThunder",
                "body": "Or you know, fuck parsing log files with Regexes, my PTSD just came back  oof",
                "score": 3,
                "replies": []
              },
              {
                "author": "binlargin",
                "body": "Unit tests are another good example. They're boilerplate and easy to write, and they depend on your code being readable and obvious. An LLM not being able to generate tests for your code is a pretty good sign that your code is confusing for other humans.",
                "score": 1,
                "replies": [
                  {
                    "author": "__loam",
                    "body": "Generating tests is one of the worst applications for these things. It's supposed to be about you verifying the behavior of the code, AI can't do that.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Kinglink",
            "body": "Have you ever done a code review of someone's code?   Was the code bad?  \n\nWith AI code you start with a code review.  If it's as bad as you say, that's ok, you just write the code from scratch, you waste maybe ten seconds to see what a AI writes.   \n\nIf the code is acceptable but has some defects, you do a code review and fix it, and you save some portion of dev time.  \n\nIf the code is good, you wasted the time of a code review, but you already should be reviewing the code you write yourself before you submit it so it's not even extra time. \n\nYes people trust AIs entirely too much, but I could say the same thing about Junior Devs straight out of college.  Most companies train them up with a Senior teaching them (as they should, that's part of being a senior).  Give AI the same expectations, and they actually start performing decently well.",
            "score": -17,
            "replies": [
              {
                "author": "kinda_guilty",
                "body": "Reading code is harder than writing it. And no fucking way I am telling my coworkers I wrote code when I didn't (by committing code as myself).",
                "score": 14,
                "replies": []
              },
              {
                "author": "faustoc5",
                "body": "I don't find value in automating the coding phase of software development. It is the most fun. I don't believe AI can solve a complex problems. It can and is very useful in writing a specific function or small specific program tool.\n\nBut to fix a bug or add a new feature to a already complex problem from a complex system, involving many mutually interacting applications, services, middleware, dbs, etc. I think I would waste a lot of time trying explain to the AI what is going on.\n\nSo for AI I find the most usefulness as an assistant for writing specific functions. For creating stubs: write me a stub for a java program with 3 classes. For generating content. It could be useful for generating unit tests. Generation of E/R and UML diagrams. And all these uses together and more they help increasing your productivity.\n\nAlso I prefer not (as well as many companies) to upload code to chatGPT, a local ollama is preferred.\n\nAI should not replace programming. Also AI is not capable of replacing programming that promise is pure hype. But what happened to the promise of augmentation that AI had years before? For the older ones what happened to the bicycle for the mind idea? Opium for the mind it is now it seems.\n\nWe should be empowered by AI not disempowered\n\nGoing back to you after my soliloquy. Generating the code with AI to save time in the coding phase and then doing a code review by peers I think it is a disrespect and a waste of the peers time. The AI generated code before going to code review by peers it should be : read, checked, bug tested, unit tested, add comments, write technical documentation about the fix, create diagrams, etc. Because by enriching the code with all these other documentation then the code is easier to understand and maintain, and easier for the code reviewers to review and accept the code and they become more knowledgeable. And for the future it helps a lot to have so many specific technical documentation.\n\n&gt;The ones that need learning and training are the people not the machines  \n--Some guy whose job was automated",
                "score": 26,
                "replies": [
                  {
                    "author": "Kinglink",
                    "body": "&gt; Generating the code with AI to save time in the coding phase and then doing a code review by peers I think it is a disrespect \n\nI think you misunderstand. YOU do the code review of AI code (At least the first one) Not peers.",
                    "score": 4,
                    "replies": []
                  },
                  {
                    "author": "s73v3r",
                    "body": "&gt; I don't find value in automating the coding phase of software development. It is the most fun.\n\nThis is what I really, really, really don't get about all the AI generative crap. They're trying to automate things like drawing, making movies, writing books, writing code. Things that people find FUN. As if they honestly believe that people shouldn't be having fun creating.",
                    "score": 8,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "aanzeijar",
        "body": "Note that this is not over quality concerns but over licencing.\n\nI find it hilarious that it doesn't matter that AI code is hallucinated broken mess, it matters that it stole the primitives from stackoverflow and github. A lot of real programmers should start sweating if that is the new standard.",
        "score": 44,
        "replies": [
          {
            "author": "jugalator",
            "body": "We already have this problem of human beings writing crappy code since the dawn of computing and have developed safeguards around it. The contributors themselves are supposed to test it thoroughly, next you have code reviews at commit time, next you have QA and alpha, beta periods etc. AI contributions should be treated in the same way and I think it can begin to be argued by now which of the human or the AI would write sloppier code on the very first draft.\n\nHowever, if the code snippet comes from the AI having trained on code with an incompatible license, this is way more likely to slip through as it wouldn't trigger any special safeguards unless someone just happens to recognize the code.\n\nSo, I think it's natural that they focus on this issue first and foremost. And obviously, then this secondary problem is moot because that kind of code is already banned anyway.",
            "score": 25,
            "replies": []
          },
          {
            "author": "syklemil",
            "body": "Open source projects have been doing code review for ages. Torvalds' might be the only ones that garner much attention, but the practice is common. \n\nSO code I suspect wasn't added to the paragraph this time, but earlier. The point is that the code will be licensed as free software, and the submitter must actually have the rights to do that. \n\nAs it is, LLM code is like those open air markets where you have no idea whether the thing you want to purchase was actually donated (free software) or stolen (proprietary). Preferably the goods should all be legal, otherwise the police usually shut the market down, but there may also be consequences for you if you bought stolen goods. \n\nAnd while private individuals may be fine with piracy, free software organisations aren't and don't want to be tainted with it. \n\nBut if you're yoinking some unclear-licensed code off SO and stuffing it in a proprietary box that only insiders will ever see … there might be a greater chance of that actually being accepted behaviour? And there have been some court cases over copylefted software being included in proprietary programs.",
            "score": 12,
            "replies": []
          },
          {
            "author": "Kinglink",
            "body": "&gt; it stole the primitives from stackoverflow \n\nActually this wouldn't matter that much.  Stack overflow has an open license... well technically it's attribution but let's be honest... no one follows that.",
            "score": -5,
            "replies": [
              {
                "author": "gyroda",
                "body": "The attribution very much matters, especially in open source communities where not adhering to the license terms has a much higher chance of getting caught (whereas in smaller, closed source shops nobody outside the company will ever see any violations).\n\nAnd that's without going into the values of the open source projects and those who maintain them.",
                "score": 4,
                "replies": [
                  {
                    "author": "Kinglink",
                    "body": "&gt;  where not adhering to the license terms has a much higher chance of getting caught \n\nThat's kind of my point though, it's really hard to catch someone copying and pasting from Stack Overflow.    Versus typing in something very similar.   \n\nMaybe people do attribute to stack overflow, but I don't think I've ever seen that, and I've seen enough corporate OSS attribution pages to at least say most corporations don't really attribute from stack (or they don't use it, which is laguhable)",
                    "score": 1,
                    "replies": [
                      {
                        "author": "binlargin",
                        "body": "The people writing code for stack overflow are largely writing it to help other developers and only really care about plagiarism, they expect their prose or large things to be licensed but their snippets are kinda expected to be fair game.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "uniformrbs",
        "body": "One of the big dangers of AI generated code is the licensing. \n\nGPL or AGPL code is licensed such that any derivative work is also GPL or AGPL. Anything linked against GPL code or part of the same service as AGPL code must be released on request. \n\nSo the question is, if an LLM is trained on GPL code, when is the output a derivative work?\n\nFor example, I could train an LLM solely on one piece of software, like the Linux kernel. Then I enter the first letter of the kernel and it “autogenerates” the rest. Is that a derivative work, or a wholly original version that I can license however I see fit? Where is the line?\n\nSome GenAI maximalists are arguing that LLMs learn from their inputs in a similar way to humans, so using any text to train an LLM model should constitute fair use. But humans can also commit copyright infringement.\n\n There is not a legal framework to decide these licensing issues yet, so if you want to avoid the potential of having to rip all LLM output out of your codebase, or release all of your code as AGPL, you should use an LLM that’s only trained on properly licensed source code, or just avoid using an LLM for now.",
        "score": 10,
        "replies": [
          {
            "author": "meneldal2",
            "body": "&gt; Some GenAI maximalists are arguing that LLMs learn from their inputs in a similar way to humans, so using any text to train an LLM model should constitute fair use. But humans can also commit copyright infringement.\n\nAlso all the stuff about reverse engineering and clean implementation, like how you can't work on Wine if you have touched Windows source code. Exactly because humans might remember stuff they saw before.",
            "score": 10,
            "replies": []
          }
        ]
      },
      {
        "author": "jugalator",
        "body": "I was wondering why but I think their reason is actually a good one - to avoid contributions of code with an incompatible license due to this may be part of the training set. It's not an ideological reason, but because an AI can't infer the license from the code.\n\nA defender of AI might say that their knowledge is an amalgam of the training set and no more infringing than a human contributing, but I believe this is in fact false.\n\nWhen I've used it as coding assistance, I've noted AI can in fact recite answers that have been digested from e.g. a specific Stack Overflow question (with adjustmenets for my scenario), especially when it's a niche subject... as it would easily become during operating system development like here. While that's alright in the case of Stack Overflow, nothing is saying it could come from a wholly different source.",
        "score": 15,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 8,
            "replies": [
              {
                "author": "gyroda",
                "body": "&gt; it should generate suggestions in a different panel with an explanation so you can learn from the sample.\n\nYou can add chatgpt to visual studio like this. The guy on my team who has it will just copy the code wholesale sometimes.\n\nI think he's doing it less now, which is good, after some feedback (not specific about AI tools, but about making sure he understands what his code is doing in general).",
                "score": 4,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "krum",
        "body": "Good luck enforcing that.",
        "score": 81,
        "replies": [
          {
            "author": "Strus",
            "body": "Enforcement does not matter. They want to be secured from the law perspective, not the practical one - so they cannot be sued if someone put the propertiary code that LLM generated into the codebse.",
            "score": 95,
            "replies": [
              {
                "author": "Brillegeit",
                "body": "&gt; so they cannot be sued\n\nOf course they can be sued.",
                "score": -4,
                "replies": [
                  {
                    "author": "BounceVector",
                    "body": "Yes, but they'll win the case and whoever is suing will have to sue the contributor of the AI code, not the project itself.",
                    "score": 12,
                    "replies": [
                      {
                        "author": "tsimionescu",
                        "body": "They would 100% lose the case if they got proprietary code in the kernel, and have to remove the code. However, thanks to this policy, they would likely have to pay very little in punitive damages, since it makes it clear they made an effort to avoid this situation.\n\nThe more important point is to rely on trusted contributors to just not do this, and thus avoid the legal headache altogether. Without this policy, completely well intentioned contributors might be unwittingly pushing tainted code in the kernel, without even considering it. With this policy, they should all be aware, and, if they are well-intentioned, as most comitters are, they will just respect the policy.",
                        "score": 10,
                        "replies": [
                          {
                            "author": "gyroda",
                            "body": "Also, it forestalls most of the arguments about this when someone tries to make a contribution in the future. \n\nSomeone is going to try to do it at some point and either they'll see the rules and scrap it/stop working with AI, or the reviewers can tap the sign with the rules and reject with no need for a prolonged debate.\n\nSure, someone might try to sneak something through, but a filter that blocks 50% of the problems is better than no filter at all. Especially when generative AI means lowering the barrier to having something to submit, which can lead to a *lot* of overhead for anyone trying to keep on top of submissions.",
                            "score": 3,
                            "replies": []
                          },
                          {
                            "author": "BounceVector",
                            "body": "Makes sense, thank you!",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Brillegeit",
                        "body": "&gt; sue the contributor of the AI code, not the project itself.\n\nThe would of course be suing the distributor of the software, not the project, and they would win.\n\nAgainst the project they would issue DMCA claim (or whatever the term is for those) and similar to have it removed.\n\nAgainst the developer they wouldn't do anything, it's the distributor that's doing the infringements.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Skaarj",
        "body": "sdf.org ... wow, I haven't heard that name in a long time. Nice to see they are still up and running and even able to run modern things like Mastodon.",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Good!",
        "score": 31,
        "replies": [
          {
            "author": "Waterbottles_solve",
            "body": "You know, if you really want high employment, we can get rid of digger trucks and we can give everyone spoons!",
            "score": -10,
            "replies": [
              {
                "author": "thethirdmancane",
                "body": "I heard there used to be a lot of jobs making buggy whips.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "blancpainsimp69",
        "body": "sharp lads",
        "score": 16,
        "replies": []
      },
      {
        "author": "Andriyo",
        "body": "What they say is that if there is some serious issue in code, no one can blame LLMs. Not that it's realistically to tell apart LLMs from simple autocomplete or detect LLM generated code",
        "score": 4,
        "replies": [
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 10,
            "replies": [
              {
                "author": "GayMakeAndModel",
                "body": "Holy shit, that was in the 90s? 😳Damn, I’m old.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "model-alice",
        "body": "IMO Copilot and related models are the closest we have to actual copyright infringement (since if the weights are found to be derivative works of the input data, there's GPL-licensed code in the model that was not properly credited.)",
        "score": 4,
        "replies": []
      },
      {
        "author": "pbacterio",
        "body": "This is the way",
        "score": 3,
        "replies": []
      },
      {
        "author": "RedWhiteAndChaos",
        "body": "How does it know? And also someone could ask chatgpt for the code and manually type in what chatgpt said",
        "score": 1,
        "replies": []
      },
      {
        "author": "downvoteandyoulose",
        "body": "based",
        "score": 0,
        "replies": []
      },
      {
        "author": "Kinglink",
        "body": "I would consider not contributing then.  But admittedly I don't contribute to NetBSD so it's a moot point. \n\nHaving worked with AI-generated code, I don't think I want to go back.  Yes the code can be wrong, but so can code written by a human.  As a programmer with AI Code, you're doing a code review (And fixing the defects).  If the AI completely fails, you write the code from scratch, if the AI even partially succeeds, it should make your life easy.\n\nIn my experience any repetitive task, (designing data inputs/unit tests) or boiler plate code is perfect for AI.\n\nI know we're going to be fighting over it for the next couple years, but in 5 years from now it's going to be like Assembly language.  Yeah people still can write in it, but most people like higher level languages.  Hell there was a time that people looked down on Java (ok we still do) because it was compiled at run time, but many of those same programmers probably use Python. \n\nBasically the future has arrived, it's going to be a question of when, and how we accept AI code... not if, and anyone who wants to take a Wait and See approach is going to fall behind.\n\nEdit: To those going \"Licensing\".... What stops me from just copying and pasting the code from Stackoverflow/github myself?  What protects them in those cases as well?   Either they already have tools for it, or they don't.  Whether it's an AI's hand or a humans doesn't matter because ultimately the code gets into the code base and that's that.",
        "score": -13,
        "replies": [
          {
            "author": "coincoinprout",
            "body": "&gt; What stops me from just copying and pasting the code from Stackoverflow/github myself?\n\nNothing, but then it becomes your responsibility.",
            "score": 11,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "it's just so they don't get in trouble for it. it's literally not about actually preventing the code from getting into the source at all",
            "score": 2,
            "replies": [
              {
                "author": "hippydipster",
                "body": "They're pushing the risk onto the individual contributors, which is why I'd agree with /u/Kinglink.  Not contributions from me then!  (Not that I was going to, but if Apache did the same...)",
                "score": -6,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "i mean, do you really think they should be held responsible if someone submits llm generated code? especially considering it's not exactly easy to distinguish it from human code",
                    "score": 4,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "IhateDropShotz",
        "body": "sooo based",
        "score": -16,
        "replies": []
      },
      {
        "author": "rameyjm7",
        "body": "Lame.",
        "score": -4,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": -15,
        "replies": [
          {
            "author": "oeboer",
            "body": "I do.",
            "score": 6,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 1,
                "replies": [
                  {
                    "author": "Commercial-Ranger339",
                    "body": "I do",
                    "score": 4,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "headhunglow",
            "body": "[Except NASA](https://en.wikipedia.org/wiki/NetBSD#Uses)...",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "evalir",
        "body": "This seems unenforceable? Even if it’s due to licensing, they just can’t know what code was written by an LLM. Sorry but I don’t see the point here.",
        "score": -11,
        "replies": [
          {
            "author": "gyroda",
            "body": "You'd be surprised at how much easier it can make things if you have a rule you can point to. \n\nPeople will argue less and people will try to do the thing less, even if it's technically unprovable. A lot of generative AI users will happily say that they used it and those people will be caught.\n\nImagine they don't have this rule, someone raises a PR and during the review process they say \"I don't know - chatgpt wrote that part\". Without the rule, they'd have to have a discussion over whether this was allowed, then the person who submitted it might get upset because they didn't know this was a problem and a big argument gets started over it. \n\nWith the rule? The moment it becomes known that this AI-generated then they can tap the sign, reject the PR and if the would-be contributor gets upset they can take it to the people in charge of the rules, not the reviewers.",
            "score": 10,
            "replies": []
          },
          {
            "author": "1bc29b36f623ba82aaf6",
            "body": "Its not about enforcement, the honor system is the point. LLM code will make it into the codebase to some degree. And some of it will be plagiarising stuff with an incompatible licence. What this is is risk management and liability shifting. If this ever comes in to play it is because you are already screwed and being sued as a project... Now with your legal team you can argue it was a specific contributor defrauding the project (stating the code was not sourced from propriatary sources by an LLM while it in fact is) and your liability is much more limited. \n\nThe opposing council could indeed argue that a rule without enforcement isn't much good, shifting blame back towards the project. Still you changed the starting point, shifted the path of least resistance for your legal opponent. Another angle is the project suing the individual contributor for any damages the original lawsuit caused them. The hope is that, potential for being stuck holding the bag, causes a chilling effect for people to check themselves. But people casually familiar with human psychology know we love misinterpreting personal risk in all areas of life so I doubt it changes much. Humans in all kinds of professions already commit career ending amounts of plagiarism, before we had LLMs, every day.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": -21,
        "replies": [
          {
            "author": "josefx",
            "body": "&gt;  source? human history.\n\nStill waiting for bitcoin to become mainstream, it was supposed to be the standard payment method that completely replaced everything else roughly 10 years ago. Maybe I should bridge the time until then by checking how NFTs are doing on my Google Glas while I take a relaxing stroll through town on my Segway.",
            "score": 19,
            "replies": [
              {
                "author": "hippydipster",
                "body": "Bitcoin isn't failing due to being fought.",
                "score": -2,
                "replies": []
              }
            ]
          },
          {
            "author": "orthecreedence",
            "body": "It's not just the technology, it's the techno-fascist baggage that comes with it. If you want to be myopic, sure people are just luddites. But thinking about this in a greater context, some people don't want a portion of their brain replaced by a plagiarizing black-box corporate entity fueled by profits and returns. I know I don't.",
            "score": 2,
            "replies": []
          },
          {
            "author": "danted002",
            "body": "They can and won’t enforce this. However by stating this they are covering their asses. \n\nWhen you commit to open source projects you deliberately relinquish the rights to your code you wrote to the project. If you commit LLM code that later turns out it’s proprietary then you as a committer are responsible for committing stolen code and you are the one that will get sued, not the project that has your code.\n\nThis basically ensures, from a legal and ethical standpoint, that every person that contributes to the project is the legal owner of the code it contributes. If you commit LLM code you broke the contract so you pay for the damages. \n\nNow remind me in 1 year if your job got replaced by AI.",
            "score": 2,
            "replies": []
          },
          {
            "author": "Uristqwerty",
            "body": "Human history tends to cherry-pick the things that were notable, and success is a key factor in that. The changes that failed or were blocked aren't usually interesting to anyone except domain experts in the relevant field. When fighting a technological change succeeds, the technology doesn't get further development, so fades into obscurity. Imagine if \"computers\" were fought back when it was ticker-tape batch processing, and never developed further outside of research labs and hobbyist tinkering. Our very idea of what a \"computer\" *could* be would have no concept of a GUI or interactivity, nor being small and cheap enough to have one in every office building, much less every home, much less most people's pockets and countless IoT devices. The technologies that were fought against successfully never got to grow into ubiquity, they died in a niche nobody cares about and few even know of anymore.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "JoJoeyJoJo",
        "body": "LOL why are you even working in tech if you're anti-tech?",
        "score": -11,
        "replies": []
      },
      {
        "author": "duckrollin",
        "body": "It's kinda funny seeing techno-luddites. \n\nThere is no way this will be possible to track and most devs use AI for boilerplate code nowadays.",
        "score": -12,
        "replies": []
      },
      {
        "author": "versaceblues",
        "body": "Idiots",
        "score": -96,
        "replies": [
          {
            "author": "dagbrown",
            "body": "But enough about the AI bros.",
            "score": 33,
            "replies": []
          }
        ]
      },
      {
        "author": "LegitimateBit3",
        "body": "This is why BSD is the best Linux-type OS",
        "score": -11,
        "replies": [
          {
            "author": "Zwarakatranemia",
            "body": "Did you just call Unix a Linux-type OS?\n\nYou might like [this](https://youtu.be/HADp3emVABg?si=B0QZuC3O2hDzK8Vj) history video.",
            "score": 5,
            "replies": [
              {
                "author": "LegitimateBit3",
                "body": "Yeah I know. Just that it doesn't really matter anymore. They both run the more-or-less the same software and are more-or-less the same. Linux has a far wider reach and is an umbrella term that refers to Linux, UNIX and their derivative OSes.",
                "score": -3,
                "replies": [
                  {
                    "author": "Zwarakatranemia",
                    "body": "Afaik the umbrella term used is [*nix](https://en.m.wikipedia.org/wiki/Unix-like)",
                    "score": 0,
                    "replies": [
                      {
                        "author": "LegitimateBit3",
                        "body": "I never liked that term. Linux-like is what almost everyone understands. \\*nix is a weird looking programmer made term.",
                        "score": 0,
                        "replies": [
                          {
                            "author": "Zwarakatranemia",
                            "body": "It's not a type of food to like or dislike.\n\nIt's called like that due to historical reasons.\n\nUnix came before GNU/Linux, hence *nix or Unix-like OS.",
                            "score": 1,
                            "replies": [
                              {
                                "author": "LegitimateBit3",
                                "body": "Na, I prefer Linux-like. I am well aware of the history of UNIX",
                                "score": 0,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "I do love how humans are so precious about thinking they are special snowflakes.",
        "score": -61,
        "replies": [
          {
            "author": "Feisty-Page2638",
            "body": "everyone in this sub just doesn’t want to believe there job can disappear when all they do is make some modals and buttons and can’t think creatively. \n\nif your job is doing what your told then your going to be replaced. the more you have to think creatively the less at risk you are",
            "score": -24,
            "replies": [
              {
                "author": "[deleted]",
                "body": "a computer will never be able to write code better than a human. programming is a deeply creative discipline if you're doing anything worthwhile",
                "score": 6,
                "replies": [
                  {
                    "author": "Feisty-Page2638",
                    "body": "i’m new to the workforce but the internship and now full time position i have i just literally take my sprint requirements and put it into gpt4 with the relevant file and it does it and then i make minor tweaks. \n\nfor most people coding is not a deeply creative discipline and those are the at risk jobs. like anyone whose job is here is this design for a landing page (creative part out of the way) now make it functional (literally just turning it into components and adding proper assets) GPT can do very well already and in a year probably won’t struggle with at all.",
                    "score": 1,
                    "replies": []
                  },
                  {
                    "author": "mxzf",
                    "body": "It's one of those things where there are some assorted truths from different directions depending on how you look at it.  \n\nFrom one perspective, compilers and interpreted languages can write more efficient binary code than the average coder.  \n\nBut from another perspective, a sufficiently skilled programmer can write better and more performant code than a compiler.  \n\nI think that in the long run we'll end up in a position where AI chatbots act more as a super-high-level language, \"compiling\" more natural phrasing into programming languages which are further compiled into bytecode.  \n\nThat said, on the flip side you have the massive glaring issue that LLMs aren't deterministic.  The same input doesn't always produce the same output, unlike a true compiler.  So there's a finite upper limit to how much you can trust it to actually output reliable code.\n\nUltimately, it shifts the minimum threshold of being able to program a bit by acting as a super-high-level language, but experienced coders in *any* language can still produce significantly better code in a given language.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "Also the people that follow crowd behaviour and sentiment without approaching problems or opportunities from first principals tend to be the least creative. They need to think the same thing as everyone else to feel comfortable.\n\n\nAI is a tool, and it's getting better every month. You can't trust it blindly but I'm already using it to do rote and easier programming tasks, after initially being very sceptical. I'm usually considered a high performing developer, but clinging to my skills being special is just asking to be made obsolete. The only constant is change.",
                "score": -7,
                "replies": [
                  {
                    "author": "Feisty-Page2638",
                    "body": "will be funny looking back on this in a few years when they can’t argue anymore about AI not being good enough",
                    "score": -5,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Microsoft dusts off ancient MS-DOS 4.0 code for release on GitHub",
    "body": "",
    "score": 890,
    "url": "",
    "created_utc": 1714296146.0,
    "author": "Franco1875",
    "permalink": "/r/programming/comments/1cf2aq6/microsoft_dusts_off_ancient_msdos_40_code_for/",
    "comments": [
      {
        "author": "rtds98",
        "body": "someone really loved their pascal:\n\n```\n#define BEGIN    {\n#define END      }\n```",
        "score": 164,
        "replies": [
          {
            "author": "JigglyWiggly_",
            "body": "Huh, so that's why Verilog uses begin and end...",
            "score": 22,
            "replies": [
              {
                "author": "DrRedacto",
                "body": "Algol is why Pascal uses begin/end",
                "score": 6,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "roastedferret",
        "body": "Amazing comment from one file:\n\n    7/13/83 ARR BECAUSE IBM IS FUNDAMENTALY BRAIN DAMAGED, \n    AND BASCOM IS RUDE ABOUT THE 1CH TIMER INTERRUPT, \n    THE TIMER HANDLER HAS TO GO BACK OUT!!!!!  \n    IBM SEEMS UNWILLING TO BELIEVE THE PROBLEM IS WITH \n    THE BASCOM RUNTIME, NOT THE DOS.  \n    THEY HAVE EVEN BEEN GIVEN A PATCH FOR BASCOM!!!!! \n    THE CORRECT CODE IS COMMENTED OUT AND HAS AN ARR 2.15 ANNOTATION.  \n    THIS MEANS THE BIOS WILL GO BACK TO THE MULTIPLE ROLL OVER BUG.\n\nARR, whoever you are, know that IBM is still fundamentally brain damaged. You're seen.\n\n(Edit: fixed formatting)",
        "score": 326,
        "replies": [
          {
            "author": "tao_of_coffee",
            "body": "That was possibly [Aaron R. Reynolds](https://en.wikipedia.org/wiki/AARD_code)",
            "score": 80,
            "replies": [
              {
                "author": "strencher",
                "body": "What a legend!",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "lackofVintageTech",
            "body": "Someone at my internship showed me this and I am laughing still.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "tolos",
        "body": "I'm so glad to see this. I watch a lot of retro pc content and I'm involved in some reverse engineering console projects, having access to source code makes a huge difference, especially when trying to decipher error codes or trying to find the right command line switch.  \n\nSo much of this old content is lost forever or only exists in binary form, really nice to see this released, and released under MIT, even though it's only 4.00. Hopefully more software from the era gets released like this ...",
        "score": 90,
        "replies": [
          {
            "author": "emperorOfTheUniverse",
            "body": "Like tears in the rain .",
            "score": 17,
            "replies": []
          },
          {
            "author": "rootpseudo",
            "body": "How does one get involved with reverse engineering console projects?",
            "score": 2,
            "replies": [
              {
                "author": "strencher",
                "body": "Not from a jedi.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "ratttertintattertins",
        "body": "I was only 7 when this was released but I recall at the time I was using MS DOS 3.3 and then I skipped from that to 6.22 when I was more like 10.  I can’t recall much about the differences between the two except that QBasic was a thing in 6.22 and I had a program called QEMM that could let me get back much more of the 640k of “conventional memory.” so important for playing games.\n\nI’m not really sure why I’ve retained this info but I bet I could still have a fair stab at editing a config.sys and an autoexec.bat.  I could probably get your sound blaster card working too…",
        "score": 205,
        "replies": [
          {
            "author": "tylerpestell",
            "body": "QBasic was a lot of fun making simple games growing up. Remember riding my bike back and forth from a friends place carrying a floppy disk with our latest version. We would always try to one up each other.\n\nNot sure if those were genuinely better times because of the simplicity of it all or its just nostalgia….",
            "score": 80,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 17,
                "replies": [
                  {
                    "author": "mccoyn",
                    "body": "I cut my teeth on QBasic.  Somehow, I didn’t know about arrays, so I had lists of variables like element1, element2, element3… and lots of if statements.\n\nMy snake game actually stored state on the screen using get_pixel/set_pixel.  Therefore what something did was literally determined by its color.  That’s good UI.",
                    "score": 13,
                    "replies": [
                      {
                        "author": "Andriyo",
                        "body": "That's actually the most cost effective way to implement it memory wise.",
                        "score": 9,
                        "replies": []
                      },
                      {
                        "author": "Pussidonio",
                        "body": "I did the same w/ spectrum games.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "ratttertintattertins",
                "body": "I wrote a password sniffer in QBasic that pretended to be the novel netware login prompt at my school…. \n\nGot caught in the end because I stupidly shared it with my friends are we were all stealing passwords (including those belonging to teachers) so it became obvious.\n\nOf course, I went legit around age 16 😂",
                "score": 32,
                "replies": [
                  {
                    "author": "tylerpestell",
                    "body": "Lol nice, my school had the novel netware as well, I didn’t do anything as fancy but I figured out how to spam the entire school district popup messages… I was smart enough to use someone else’s login (they didn’t log off from the previous class) the kid sitting next to me copied what I was doing and sent even more messages. \n\nShortly after some school administrators pulled him out of class… there was some confusion on where the other “culprit” was but that kid ratted me out. Good times.",
                    "score": 18,
                    "replies": []
                  },
                  {
                    "author": "tooker",
                    "body": "Are you from Boise, Idaho?  This is almost exactly what we did when I was in HS except we didn't get caught.  The password was \"this is the system administrator\" and it worked for every computer on the school's network.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "chucker23n",
                        "body": "Not so bad!\n\n    password:\tthis is the system administrator\n    guesses_log10:\t18.5303\n    score:\t4 / 4\n    function runtime (ms):\t7\n    guess times:\n    100 / hour:\tcenturies\t(throttled online attack)\n    10  / second:\tcenturies\t(unthrottled online attack)\n    10k / second:\tcenturies\t(offline attack, slow hash, many cores)\n    10B / second:\t11 years\t(offline attack, fast hash, many cores)",
                        "score": 7,
                        "replies": [
                          {
                            "author": "Pussidonio",
                            "body": "...or 1 week to 1 month for highly motivated high schoolers",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "VeryOriginalName98",
                    "body": "Found Kevin Mitnick’s ghost",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "rebel_cdn",
                "body": "You can use QB64 to do it again, if you'd like! Same syntax as QBasic, but compiles for any OS and uses SDL for graphics so it performs quite well. I've been having a lot of fun with it. ",
                "score": 7,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "Kids nowadays make cloud hosted AAA games with version control, they are really missing out",
                "score": 0,
                "replies": []
              },
              {
                "author": "ThomasMertes",
                "body": "&gt;QBasic was a lot of fun making simple games growing up.\n\nQBasic was a successor of GWBasic. GWBasic programs had line numbers. The programs looked totally different to todays Basic programs. Later I wrote a [Basic interpreter](https://thomasmertes.github.io/Seed7Home/scrshots/bas7.htm) to run old Basic programs from the line number era. The source code can be found [here](https://thomasmertes.github.io/Seed7Home/prg/bas7.htm).",
                "score": 0,
                "replies": []
              }
            ]
          },
          {
            "author": "He_Who_Browses_RDT",
            "body": "and [dosshell.com](http://dosshell.com) :) Amongst other little beautiful \"pearls\"",
            "score": 11,
            "replies": [
              {
                "author": "ratttertintattertins",
                "body": "Haha, I remember that :-)  Also Norton commander…",
                "score": 3,
                "replies": []
              },
              {
                "author": "Dwedit",
                "body": "Dosshell had the Task Swapper.  You could suspend and resume another DOS program!",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "danker",
            "body": "lol. Pretty much the exact same thing. Fiddling with IRQ ports and such. Different batch files for different games because they all wanted memory treated slightly differently. Those were the days. :)",
            "score": 7,
            "replies": [
              {
                "author": "twigboy",
                "body": "Something about `himem.sys` if you needed more ram",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "Vwburg",
            "body": "But could you get the sound blaster emulator running on a Gravis Ultrasound? ;)",
            "score": 3,
            "replies": [
              {
                "author": "mailslot",
                "body": "Yes",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "TheStoicNihilist",
            "body": "That stuff doesn’t leave you!",
            "score": 2,
            "replies": []
          },
          {
            "author": "AndyTheSane",
            "body": "How about my Sound -Blaster-Almost-Compatible card that never quite played nicely with anything else...",
            "score": 2,
            "replies": []
          },
          {
            "author": "rootpseudo",
            "body": "This comment resonates so much with me, but it was windows 95. Learning whatever I could to get my parents computer to be able to run my games.",
            "score": 2,
            "replies": []
          },
          {
            "author": "ZirePhiinix",
            "body": "You can have a try using DOSBox. I literally have Windows 3.1 running on my Windows 10 computer for some classic games lol.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "player1dk",
        "body": "What’s the reason for not releasing DOS 6.xx there as well?",
        "score": 79,
        "replies": [
          {
            "author": "GuyOnTheInterweb",
            "body": "Probably the old [DoubleSpace vs DriveSpace](https://en.wikipedia.org/wiki/DriveSpace) legal issue.",
            "score": 65,
            "replies": [
              {
                "author": "vytah",
                "body": "&gt;Hanselman has said that MS-DOS 3.3, 5, and 6 are next on the list, although some of the utilities in the latter would need to be stripped out.",
                "score": 5,
                "replies": []
              },
              {
                "author": "NocturneSapphire",
                "body": "6.2 added the ability to disable DoubleSpace. I wonder how hard it would be for them to just rip out the DoubleSpace code and force it to be always disabled. Disk space is cheap these days anyway.",
                "score": 15,
                "replies": [
                  {
                    "author": "DanTheMan827",
                    "body": "That wouldn’t really be representative of the original product then.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "NocturneSapphire",
                        "body": "It would be better than nothing",
                        "score": 14,
                        "replies": []
                      },
                      {
                        "author": "mczero80",
                        "body": "Then just give some boilerplate code for it to let the open source community fill in the rest",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "omniuni",
            "body": "According to the article, they're working on it.",
            "score": 11,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "It's probably still a core part of Windows.",
            "score": 72,
            "replies": [
              {
                "author": "[deleted]",
                "body": "It was removed in winxp",
                "score": 22,
                "replies": [
                  {
                    "author": "__konrad",
                    "body": "Also fake-removed in Windows ME",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "Logicalist",
                    "body": "That's what they say, but I'm pretty sure .bat files are still a thing.",
                    "score": -2,
                    "replies": [
                      {
                        "author": "Nobody_1707",
                        "body": "This release doesn't even include the shell.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "SpaceMonkeyOnABike",
            "body": "If its too recent it may reveal malicious exploits that are still part of the current os.",
            "score": 3,
            "replies": [
              {
                "author": "Booty_Bumping",
                "body": "Thankfully the Windows 2000 and XP source code already has been leaked.",
                "score": 24,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "Nt is not built on dos",
                "score": 19,
                "replies": []
              }
            ]
          },
          {
            "author": "Innominate8",
            "body": "It's telling that the versions being released are the least used, or even only released on a limited basis.",
            "score": -1,
            "replies": []
          }
        ]
      },
      {
        "author": "clearlight",
        "body": "Nice, I remember using DOS. The GitHub repo is here https://github.com/microsoft/MS-DOS/tree/main",
        "score": 81,
        "replies": [
          {
            "author": "haby001",
            "body": "Damn it's about 90% assembly code",
            "score": 36,
            "replies": [
              {
                "author": "recurse_x",
                "body": "That’s why nobody would ever need more than 128k of RAM",
                "score": 32,
                "replies": []
              },
              {
                "author": "lt_Matthew",
                "body": "Well, yea",
                "score": 44,
                "replies": []
              },
              {
                "author": "psychometrixo",
                "body": "🌎 👨‍🚀🔫\n\nAlways has been",
                "score": 14,
                "replies": []
              },
              {
                "author": "NilacTheGrim",
                "body": "What's the 10% non-assembly? It seems to me to be 100% assembly aside from a few batch files used to build it..",
                "score": 6,
                "replies": [
                  {
                    "author": "haby001",
                    "body": "If you click the langauge on the metric it takes you to a search for the relevant files in the repo. In this case the 13% C files are... c files and headers lol\nhttps://github.com/search?q=repo%3Amicrosoft%2FMS-DOS++language%3AC&amp;type=code",
                    "score": 4,
                    "replies": []
                  },
                  {
                    "author": "evoactivity",
                    "body": "    Assembly 85.0%\n    C 13.1%\n    Pascal 0.6%\n    SourcePawn 0.6%\n    C++ 0.4%\n    POV-Ray SDL 0.1%\n    Other 0.2%",
                    "score": 10,
                    "replies": [
                      {
                        "author": "Hixie",
                        "body": "SourcePawn and POV-Ray SDL seem extremely unlikely.",
                        "score": 12,
                        "replies": []
                      },
                      {
                        "author": "vytah",
                        "body": "That \"C++\" code is miscategorised assembly include files (.INC)",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "agumonkey",
                        "body": "and one makefile",
                        "score": 1,
                        "replies": []
                      },
                      {
                        "author": "NilacTheGrim",
                        "body": "That doesn't answer my question. You just copy-pasted what was on github, wise guy.",
                        "score": -18,
                        "replies": [
                          {
                            "author": "evoactivity",
                            "body": "If you know it was from the GitHub then your question was answered twice.",
                            "score": 11,
                            "replies": [
                              {
                                "author": "wrosecrans",
                                "body": "They were asking because Github is clearly wrong about what some of that is.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "fungussa",
        "body": "With the challenge of creating a responsive application that ran on DOS, I created my own implementation of fibres that C++ functions were cooperatively 'threaded' with other functions, which significantly improved performance. At various points within the code a switch() function would be called, which saved the current registers on the stack and then switched to another fibre, popping it's saved register state. In the days of single-threaded app it was a bit of magic seeing functions run concurrently.",
        "score": 29,
        "replies": [
          {
            "author": "Cheezerts",
            "body": "JigC++",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "tonefart",
        "body": "MS-DOS 5.0 is the one that is the last hottest release and also the one most people would be interested in.",
        "score": 18,
        "replies": []
      },
      {
        "author": "Doctuh",
        "body": "I wonder if any code Bill Gates wrote is in this.",
        "score": 19,
        "replies": [
          {
            "author": "[deleted]",
            "body": "Nah he was a Basic guy",
            "score": 9,
            "replies": []
          }
        ]
      },
      {
        "author": "emotionalfescue",
        "body": "MS-DOS was written in assembly language so anyone with an IDE could have inspected the code on a running system.  Although admittedly having access to the MASM code with symbol names, as the Microsoft team did, would've made a lot of things easier.\n\nThere were authors like Ray Duncan, Peter Norton, and Andrew Schulman who wrote books about what they gleaned from reverse engineering, along with reading the official docs from IBM and Microsoft.",
        "score": 15,
        "replies": [
          {
            "author": "[deleted]",
            "body": "What?  Assembly is very different from machine code.  True that programs written in assembly tend to result in machine code that can be neatly disassembled, but still assembly source code contains thing like functions and their names and typicaly a lot of comments that go after the \";\" sign.   \n\nIt is not about the symbol names, just look at the released asm files of the DOS source code, there are a lot of commets. Those are not preserved in any way during compilation.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Electrical_Ingenuity",
        "body": "Fuck. MS DOS 4.0 was shipped with the PC I bought when I went to college. \n\nI’m ancient.",
        "score": 4,
        "replies": []
      },
      {
        "author": "NotStanley4330",
        "body": "Hope they'll open source 6.22!",
        "score": 3,
        "replies": [
          {
            "author": "[deleted]",
            "body": "In few years I guess they will.  The Dos 4.0 is from 1988, so in 5(?) years?",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "DrRedacto",
        "body": "The 2nd hardest working newsman in open source says it doesn't even compile due to a corrupt USA.INF file, if I remember the extension correctly.",
        "score": 1,
        "replies": []
      },
      {
        "author": "agumonkey",
        "body": "I wonder how they organized their work. Did they use github or gitlab ? kanban vs agile ?",
        "score": 1,
        "replies": []
      },
      {
        "author": "Alexander_Selkirk",
        "body": "What would be nice to have is source code and build tools for current Windiws with instructions so that one could yank out advertising, \"telemetry\", and user tracking.",
        "score": 1,
        "replies": []
      },
      {
        "author": "Alexander_Selkirk",
        "body": "In contrast, the Apple II designed by Wozniak came with a manual that had the commented assembly code for its OS printed in the appendix. Most people who use Apple products today would be astonished how open its culture was at the start. Depending on what was loaded, pressing the reset button would bring you into the machines monitor where one could view, type in, and run machine code by hand.",
        "score": 1,
        "replies": []
      },
      {
        "author": "lowlevelmahn",
        "body": "the TOOLS folder contains more of less the full version of \"Microsoft C 5.1\" and \"MASM 5.1\"\n\nthe binaries, includes and libs are binary equal to installed versions of them",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Is this objectively better than freedos in any way?",
        "score": 1,
        "replies": [
          {
            "author": "rtds98",
            "body": "no",
            "score": 13,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "No, but more interesting, history-wise.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "KT_KT",
        "body": "Why does he talk like nityanada lol..",
        "score": -2,
        "replies": []
      },
      {
        "author": "NilacTheGrim",
        "body": "Umm.. this is ASM. This is not much different than just disassembling the shipped binaries.\n\nAlthough you do get comments and explanations in the source files and useful human-friendly symbol names.. still pretty insignificant tbh.\n\nWould have been cooler had it been written in a higher-level language like C.. then maybe it would be actually useful and easier to modify. This is just a tiny step above just looking at the raw binary tbh.",
        "score": -28,
        "replies": [
          {
            "author": "falconfetus8",
            "body": "It's also going to be organized better than decompiled code would be, since it won't have gone through a layer compiler optimization.",
            "score": 5,
            "replies": [
              {
                "author": "NilacTheGrim",
                "body": "There's no optimization on asm code.",
                "score": 1,
                "replies": [
                  {
                    "author": "falconfetus8",
                    "body": "Exactly.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Bypassing airport security via SQL injection",
    "body": "",
    "score": 884,
    "url": "",
    "created_utc": 1728600702.0,
    "author": "alexeyr",
    "permalink": "/r/programming/comments/1g0vic1/bypassing_airport_security_via_sql_injection/",
    "comments": [
      {
        "author": "Brilliant-Sky2969",
        "body": "The craziest part:\n\n&gt;We did not want to contact FlyCASS first **as it appeared to be operated only by one person** and we did not want to alarm them.",
        "score": 378,
        "replies": [
          {
            "author": "SuitableDragonfly",
            "body": "[Even the government](https://xkcd.com/2347/)",
            "score": 130,
            "replies": [
              {
                "author": "heavyLobster",
                "body": "`left-pad` has entered the chat",
                "score": 42,
                "replies": []
              }
            ]
          },
          {
            "author": "dtrebbien",
            "body": "The very next sentence makes it crazier:\n\n&gt; ... On April 23rd, we were able to disclose the issue to the Department of Homeland Security, who acknowledged the issue and confirmed that they “are taking this very seriously”.\n\nSo they didn't want to notify the vendor and instead decided to *first* notify the Department of Homeland Security?! They had to know that DHS would contact FlyCASS at some point anyway. I would guess that it was not a pleasant conversation.",
            "score": 42,
            "replies": []
          }
        ]
      },
      {
        "author": "More_Particular684",
        "body": "That's a well known security problem. Is there somewhere an estimation on how much SQL injection is present nowadays?",
        "score": 155,
        "replies": [
          {
            "author": "goflamesg0",
            "body": "You basically learn about SQL injection on day two of any intro level security class. I am surprised but not surprised at the same time that this is still possible today.",
            "score": 175,
            "replies": [
              {
                "author": "IAmTaka_VG",
                "body": "The thing that’s so odd about SQL injection is that it’s almost impossible now with modern packages. Entityframework for example Makes it nearly impossible to sql inject so the question is why are developers not utilizing these tools, especially when they aren’t dealing with the traffic that warrants store procs or raw sql for speed.",
                "score": 88,
                "replies": [
                  {
                    "author": "Pure-Huckleberry-484",
                    "body": "Because these systems are 20 years old.",
                    "score": 60,
                    "replies": [
                      {
                        "author": "matthieum",
                        "body": "Only?",
                        "score": 7,
                        "replies": [
                          {
                            "author": "Enerbane",
                            "body": "Spoiler, around 20 years ago is when airport security got more serious.",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "CowMetrics",
                    "body": "You have never worked on an enterprise sized code base that was started in the early 90s it seems",
                    "score": 35,
                    "replies": [
                      {
                        "author": "hoovermatic",
                        "body": "ex Army contractor here - did buttloads of SQL Injection mitigation on code that had comments from the early 80's",
                        "score": 16,
                        "replies": [
                          {
                            "author": "CowMetrics",
                            "body": "Haha love it. How was it? \n\nDo you think If it wasn’t critical for national security, how likely would money have been thrown at this problem?",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "RedAlert2",
                    "body": "At least in my experience, there are lots of educators in the computer science field who are \"anti-framework\", for lack of a better word. They insist that students code everything from scratch, and so many younger programmers don't know anything about modern programming paradigms.",
                    "score": 71,
                    "replies": [
                      {
                        "author": "bleachisback",
                        "body": "Well computer science degrees kind of got co-opted as software engineering degrees. Makes sense to teach a scientist from first principles, but it also makes sense to teach engineers the tools they might use in the field.\n\nUnfortunately for software engineers, universities are more often than not research oriented and there is much less research opportunity in software engineering than computer science.",
                        "score": 42,
                        "replies": [
                          {
                            "author": "AquaeyesTardis",
                            "body": "I got half and half, and have no idea what to even do for further study other than youtube tutorials.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "MoreRopePlease",
                                "body": "Read real code. Pick an open source project and look at how it's made.",
                                "score": 6,
                                "replies": [
                                  {
                                    "author": "GayMakeAndModel",
                                    "body": "Or just start a fun project. Doesn’t have to be useful.",
                                    "score": 3,
                                    "replies": []
                                  },
                                  {
                                    "author": "AquaeyesTardis",
                                    "body": "Truee, my main issue with this has been all the stuff left implicit so far, like build toolchains that are just inscrutable to me.",
                                    "score": 1,
                                    "replies": [
                                      {
                                        "author": "MoreRopePlease",
                                        "body": "chatGPT is a great resource to ask questions of, and learn stuff. \"How does the command 'make' work to produce a runnable executable program?\". Or whatever.",
                                        "score": 2,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "author": "bleachisback",
                                "body": "Honestly the problem with universities offering computer science degrees as software engineering degrees is that, like art, all one really needs to become a competent software engineer is practice. Just write code and eventually you’ll get better at it. Study only what you need at any one given time to overcome a hurdle. There’s no general course of study that will make you a better general programmer.",
                                "score": 5,
                                "replies": [
                                  {
                                    "author": "AquaeyesTardis",
                                    "body": "I'm at a weird kind of midpoint- I can write more basic scripts and programs like stripped down webservers, database stuff, yada yada well enough, but I'm kind of middling on anything more advanced - one thing at a time seems a good plan though, I guess I'm overwhelming myself.",
                                    "score": 1,
                                    "replies": [
                                      {
                                        "author": "IntelligentSpite6364",
                                        "body": "Those skills might be well beyond another Deb who only has front end experience from a few years at code camps.\n\nDon’t think you need to be good at every aspect before you can qualify to start",
                                        "score": 2,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "HirsuteHacker",
                        "body": "I absolutely agree with students being taught fundamentals over frameworks. Once you have the fundamentals down, frameworks are easy to learn.",
                        "score": 21,
                        "replies": [
                          {
                            "author": "IntelligentSpite6364",
                            "body": "Agree but disagree on the second part. Some frameworks are so fundamentally against the patterns established by fundamental education that it can be difficult to make the leap without guidance.\n\nImagine learning pure php or js and jumping into react with hooks",
                            "score": 1,
                            "replies": [
                              {
                                "author": "HirsuteHacker",
                                "body": "&gt;Imagine learning pure php or js and jumping into react with hooks\n\nWell yeah, I did that. It wasn't that hard",
                                "score": 5,
                                "replies": [
                                  {
                                    "author": "Proof_Zebra_2032",
                                    "body": "Same and then you get people that can't debug low-level JS errors inside their hooks. There has to be a balance of both.",
                                    "score": 2,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "RedAlert2",
                            "body": "Sure, but there's nothing fundamental about SQL or PHP - they're just older tools. There comes a point in most CS classes where they transition from being purely theoretical so students can get hands on practice, and that usually manifests as using whatever tools and frameworks were common when the professor was coding more seriously.",
                            "score": -1,
                            "replies": [
                              {
                                "author": "cbzoiav",
                                "body": "SQL is absolutely fundamental.\n\nWhat happens when your code crashes out and you need to look at the underlying data? When you need to migrate to a new DB and move the data?\n\nMeanwhile the framworks are built on top of SQL and often offer a subset of its functionality. When you hit an edge case you'll potentially still need to use SQL and by understanding it / how the actual DB works you'll be able to structure your data in a better way. It also works accross toolsets vs your framework is likely specific to the language/runtime you're using.",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "IntelligentSpite6364",
                                    "body": "Sql is a critical skill yes. But calling it fundamental implies other skills are built on top of it but sql really is its own thing that other solutions may rely on it but are not fundamentally based on",
                                    "score": 1,
                                    "replies": [
                                      {
                                        "author": "cbzoiav",
                                        "body": "If you don't understand how the underlying DB operates you'll not be able to use it as efficiently. Using the framework efficiently depends on it.\n\nIt's the same way a basic knowledge of assembly, algorithmics, memory models, underlying CPU infrastructures, VMs etc isnt a hard requirement for writing a java codebase, but those who do understand them will generally write better code.",
                                        "score": 1,
                                        "replies": []
                                      }
                                    ]
                                  },
                                  {
                                    "author": "RedAlert2",
                                    "body": "Being useful or widely used doesn't make something fundamental. The fundamentals of relational databases have nothing to do with SQL.",
                                    "score": 0,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "bobsbitchtitz",
                        "body": "Are you actually employed as a software engineer?",
                        "score": 11,
                        "replies": []
                      },
                      {
                        "author": "cat_in_the_wall",
                        "body": "doing it from scratch has benefits. you get to see how the sausage is made.\n\nbut any responsible class will then immediately follow it up with \"and here's why we don't do it from scratch because &lt;garbage dump of how things go wrong that you didn't think about&gt;\".",
                        "score": 1,
                        "replies": []
                      },
                      {
                        "author": "not_a_novel_account",
                        "body": "You're giving the educators too much credit.\n\nThey're dumb. They're not against frameworks, they do not know about or understand them, are fundamentally incurious, and do not require or desire to keep up with developments in their field of \"study\".\n\nCS is a field where those who cannot do, teach. So the schools are filled with the absolute bottom of the bucket, at least at the undergraduate lecture level.",
                        "score": -23,
                        "replies": [
                          {
                            "author": "lurco_purgo",
                            "body": "Man, these dumb professors teaching easy stuff like algorithms and data structures or asm... They wish they could understand the compexity of making a form in React!",
                            "score": 19,
                            "replies": []
                          },
                          {
                            "author": "darkpaladin",
                            "body": "What are you even talking about?  Maybe give a concrete example?  CS is all about concepts and frameworks are all about abstraction and implementation.  That's like saying you're mad that your calisthenics class didn't prepare you to shoot a basketball.  \n  \nI'll openly admit that I've barely used any of my CS education through most of my career but in the 10% of use cases where it has come in handy?  I'd be royally fucked without it blindly following whatever fotm blog post I last read to solve a problem I couldn't properly grok.",
                            "score": 10,
                            "replies": [
                              {
                                "author": "not_a_novel_account",
                                "body": "I've worked full-time at 2 major CS universities and lectured at a couple more. Every department I've worked at had a core of like two or three talented associated professors and grad students and a massive anchor of completely worthless tenured faculty that haven't updated their tooling or practices in decades.\n\nInevitably those talented few maintain all the infrastructure, things like grading system, submission portals, VMs for students, and also designed most of the labs and curricula.\n\nFor example, at NYU [the Anubis environment](https://about.anubis-lms.io/) now used ubiquitously was initially designed and built by a single undergrad who couldn't believe how incompetent the department was at providing a dev environment for students (and that they had no way to teach students to setup their own). The [Submitty](https://submitty.org) system at RPI has a similar story. As do a couple other less sophisticated efforts I've seen.\n\nWhen tenured CS faculty actually need software to be written and maintained they rarely do so themselves, they turn to their students and associate professors because by and large they cannot write software. This is not universally true, but it's more true than not.",
                                "score": -4,
                                "replies": [
                                  {
                                    "author": "sonobanana33",
                                    "body": "You know once a theorem is proofed it won't change right? :D",
                                    "score": 3,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "HimbologistPhD",
                            "body": "Oh god lol this sounds like the shit dudes at 48 hour game jams in college would say to each other at 4am in the campus computer labs to gas each other up",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "tesfabpel",
                    "body": "the weird thing is that it was impossible even before ORMs. \n\nevery (most?) SQL driver supports prepared statements that allow you to put placeholders to values instead of values directly in the query string.\n\nso for example you go from (pseudo code):\n\n```\n$res = $db-&gt;query(\"SELECT * FROM flights WHERE id='$id'\");\n```\n\nto:\n\n```\n$stmt = $db-&gt;prepare(\"SELECT * FROM flights WHERE id=?\");\n$res = $stmt-&gt;execute([ $id ]);\n```\n\nthis doesn't simply replace the question mark in the query string but it's treated as an \"isolated\" value by the driver, so SQL injection is impossible. also, it increases performance if executed on a loop, because the query is already prepared and optimized, so you just need to call execute with different parameters.",
                    "score": 16,
                    "replies": [
                      {
                        "author": "oceantume_",
                        "body": "But it's so much more fun to do things like this and then forget about escaping once in a while. Keeps me on the edge and lets me spend more time writing repetitive comments in reviews:\n\n    $result = $db-&gt;query(\"SELECT * FROM flights WHERE id={$db-&gt;escape($id)}\");",
                        "score": 5,
                        "replies": []
                      },
                      {
                        "author": "Worth_Trust_3825",
                        "body": "It's easy to concatenate or template strings. It's \"hard\" and \"verbose\" to use prepared statements. Honestly, every user of templating feature deserves getting injected once in a while for not rejecting the feature.",
                        "score": 3,
                        "replies": []
                      },
                      {
                        "author": "MrDilbert",
                        "body": "&gt; if executed on a loop\n\n... which is an anti-pattern in itself. Ever heard about N+1 Query problem?\n\nAlso, once you start working with serverless, you learn that prepared statements \"pin\" the connection to an instance, and the connection is not released back into the pool until the serverless fn instance that obtained it is destroyed/shut down. If you have multiple functions, this can lead to the connection pool exhaustion and subsequent instances not being able to connect to the database.",
                        "score": 2,
                        "replies": []
                      },
                      {
                        "author": "rdtsc",
                        "body": "Unfortunately prepared statements have a couple downsides. First, they are more difficult to use, especially in languages with easy string interpolation. Second, it might not be possible to bind multiple values to a single placeholder (e.g. for an \"IN (...)\" clause). And third, and most problematic, you might get serious performance issues if you have skewed queries due to plan reuse. I know of no native client library which decouples safe value interpolation from query planning.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "roastedferret",
                    "body": "Not saying this about Entityframework specifically (haven't googled it) but there are plenty of ORMs which quite frankly do a shitty job. Prisma comes to mind. At some point, ORMs can prove to be tech debt for some projects. Not saying they always are, nor am I saying they're always bad. They aren't. For some projects, though, they can be, so I see why doing things manually is still fashionable.",
                    "score": 6,
                    "replies": []
                  },
                  {
                    "author": "[deleted]",
                    "body": "Because I need to write raw SQL for those sweet perf gains.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "Rustywolf",
                    "body": "People will always write shit code, the difference between someone engineering code and someone copy pasting shit together until it works.",
                    "score": 5,
                    "replies": []
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 5,
                    "replies": [
                      {
                        "author": "sonobanana33",
                        "body": "You think libraries are made by someone more competent than you. There lies the problem :D",
                        "score": 1,
                        "replies": [
                          {
                            "author": "TheOneWhoMixes",
                            "body": "Statements like this ignore the fact that, even if you're equally (or even a bit more) competent than the library developers, your homegrown solution is unlikely to have years worth of bug reports, resolutions, and documentation (both official and of the stackoverflow variety).\n\nOf course this doesn't apply to every library or problem space",
                            "score": 2,
                            "replies": [
                              {
                                "author": "cat_in_the_wall",
                                "body": "aka don't roll your own crypto. openssl sucks and has tons of famous bugs. but will you do better? nope.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "They attended a programming bootcamp",
                    "score": 4,
                    "replies": [
                      {
                        "author": "Eclipsan",
                        "body": "My bootcamp taught us about prepared statements very early in the curriculum.\n\n\\#NotAllBootcamps",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Plank_With_A_Nail_In",
                    "body": "You guys really can't comprehend that some software is old as all fuck? Like really?",
                    "score": 2,
                    "replies": [
                      {
                        "author": "HimbologistPhD",
                        "body": "I had the spine-chilling realization the other day that code I'd written in my first couple months as a professional was shambling along in a particular system just being awful and disgusting and will probably outlast me lmao",
                        "score": 1,
                        "replies": []
                      },
                      {
                        "author": "ungemutlich",
                        "body": "SQL injection was a known thing in 1998 so for a generation it's been an issue of management and training.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "zelphirkaltstahl",
                    "body": "Maybe they rolled their own in plain PHP or so and \"never change a running system\" think.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Sokaron",
                "body": "Not only is it discussed in any intro level security class, SQL injection is item #1 on every mandatory security training I've ever had to complete. Using prepared statements is 101-stuff. And as another commenter mentioned most modern frameworks make this impossible. It borders on willful ignorance or incompetence. \n\nThe fact that the TSA then tried to gaslight and deny that this was even a problem is icing on the cake.",
                "score": 13,
                "replies": [
                  {
                    "author": "Eclipsan",
                    "body": "&gt; SQL injection is item #1 on every mandatory security training I've ever had to complete\n\nMost devs never had any security training.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 6,
                        "replies": [
                          {
                            "author": "Eclipsan",
                            "body": "I meant security training related to programming.\n\nBut I get your point! Companies also tell the same thing to end users. Then they proceed to have a bazillion different domains from which they send emails and links. And of course these domains are not subdomains all sharing the same parent, no sir.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "sonobanana33",
                                "body": "Open microsoft office online, and check how many domains it will use :D\n\nAnd then they do the phishing tests… realistically it's impossible to discern since proper companies use domains in such stupid ways.",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "AptC34",
                "body": "TBH, 15 ago I had no specific security training when learning programming, but the basics when you start writing systems to be used by “users” is checking what they are giving to you; it’s just the basics.",
                "score": 1,
                "replies": [
                  {
                    "author": "goflamesg0",
                    "body": "Yep, never trust what is coming in from the front end",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "sasmariozeld",
                "body": "There are some architecths who manage to block using any ORM,\n\nAnd to be fair there is some truth to it",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "OffbeatDrizzle",
            "body": "\\&gt;0% and &lt;100% for SURE",
            "score": 38,
            "replies": [
              {
                "author": "jeesuscheesus",
                "body": "You can thank my app alone for it not being 100% ;) (I’ve yet to figure out how to forward ports to the internet)",
                "score": -4,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "&gt;well known\n\nIt's older than many of my colleagues. \"Well known\" just somehow doesn't seem to do that justice. \n\n1998.  If you were born after that, it's older than you.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "joshuaherman",
        "body": "Why does the government continue to deny zero day bugs instead of working to fix them?",
        "score": 330,
        "replies": [
          {
            "author": "RedAlert2",
            "body": "In the business of security theater, it's more important to appear secure than to be secure.",
            "score": 235,
            "replies": [
              {
                "author": "FistyFisticuffs",
                "body": "And don't forget, if you have full security, you lose your raison d'etre, and so always leave some room for boogeymen in closets that don't exist (or create some yourself, just in case).",
                "score": 25,
                "replies": []
              },
              {
                "author": "zhaoz",
                "body": "So its the perfect response from the TSA then!",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "Jugales",
            "body": "Leaked NSA tools from a few years ago show why governments don’t work to fix zero days. In fact, they may pay you decent money for them…\n\nhttps://github.com/wolf-project/NSA-TOOLS-SHADOW-BROKERS",
            "score": 106,
            "replies": [
              {
                "author": "Toptomcat",
                "body": "Sure, but if the NSA is trying to bypass *American airport security* to do things, something fairly strange is going on. The NSA has planes, and official credentials that would let them give the TSA the finger, and the budget for quality Secret Squirrel gadgetry that can elude the scrutiny of a bored nineteen-year-old making minimum wage and operating a twenty-year-old X-ray machine built by the lowest bidder.",
                "score": 68,
                "replies": [
                  {
                    "author": "shevy-java",
                    "body": "This assumes the NSA works for the public. What if they work for another agenda that isn't aimed at helping the public? Then that would be a very simple explanation for the behaviour.",
                    "score": -20,
                    "replies": [
                      {
                        "author": "Toptomcat",
                        "body": "&gt; What if they work for another agenda that isn't aimed at helping the public? \n\nThen they still have a handful of *other* ways to do whatever nefarious thing they have in mind without resorting to hoarding zero-days of marginal utility *to them*. If a hypothetical evil NSA were to find out about it, it would be concrete, actual *use* to them as a means to appear *not* evil by revealing it to the American intelligence community and visibly helping the TSA out. \n\nOnly if the NSA was motivated solely by whatever was *against* the American national interest- however useless to their own goal of power and influence for the NSA brass, or staging a coup to rule the country, or embezzling $100 billion, or whatever- would that make any sense at all. That's not how evil usually *works*, it's *stupid* evil, it's the kind of plan that Skeletor or Iago or Maleficent would come up with, not a rogue intelligence agency in the real world staffed by human beings with human desires and functioning brains.\n\nI guess they could be hoarding zero-days to bypass the TSA and selling them off to the FSB or ISIL or something, but there really must be a better way for them to make a treasonous buck.",
                        "score": 34,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Ancillas",
            "body": "Doesn’t the article say the DoHS worked with the vendor to take the application offline while a fix was implemented?",
            "score": 18,
            "replies": [
              {
                "author": "ShenmeNamaeSollich",
                "body": "Yes, but … \n\nIt then goes on to say the TSA published incorrect information about the issue in a press release, and when told about this instead of actually fixing the remaining vulnerability they had been wrong about they simply removed all mention of that specific functionality from their website. \n\nIt’s like the owners of a shitty restaurant who don’t bother to clean the kitchen or hire a more competent staff after the health inspector tells them they’re endangering customers - instead, they just change the menu photos &amp; call it good.",
                "score": 45,
                "replies": [
                  {
                    "author": "SuitableDragonfly",
                    "body": "It wasn't a \"remaining vulnerability\", it was the same vulnerability. They were just trying to claim that the one that was reported and fixed wouldn't have been an issue anyway.",
                    "score": 16,
                    "replies": []
                  },
                  {
                    "author": "Dirt-Repulsive",
                    "body": "More like that restaraunt Dresses up the roaches they have in the back kitchen and calls them help.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "reddiling",
                        "body": "Ratatouille basically",
                        "score": 5,
                        "replies": [
                          {
                            "author": "eutirmme",
                            "body": "I laughed harder than I should have on this",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "braiam",
                "body": "And then proceeded to issue inaccurate statements and gaslight the public about what's possible or not.",
                "score": 10,
                "replies": []
              }
            ]
          },
          {
            "author": "HolyPommeDeTerre",
            "body": "Same than all the CCTV in shops that are disabled. Disuasion",
            "score": 2,
            "replies": []
          },
          {
            "author": "Whispeeeeeer",
            "body": "You either push updates frequently and risk exposing a new bug or you hold onto old \"tried and true\" software which inevitably will also have bugs. The manager that does the former is considered rash and unmeasured. The manager that does the latter is considered careful and wise. In software, you're going to have exploits. The people who decide on software are responsible for either introducing those exploits to the system or for grandfathering them in. I think most managers feel comfortable grandfathering them in.",
            "score": 4,
            "replies": [
              {
                "author": "TA_DR",
                "body": "But SQL injection is such a well documented error that is baffling it still present at airport security systems. \n\n\nLike, I'm on my 3rd year of compsci and only have one year of work experience and even I know that interpolating strings on a query is a big no-no.\n\n\nLike we just a had a whole class warning us about injection, with a practical lab an everything.",
                "score": 25,
                "replies": [
                  {
                    "author": "deja-roo",
                    "body": "&gt; But SQL injection is such a well documented error that is baffling it still present at airport security systems. \n\nI mean, it's not baffling at all when you remember it's basically run by a government contract.",
                    "score": 1,
                    "replies": []
                  },
                  {
                    "author": "Echleon",
                    "body": "&gt;Like, I’m on my 3rd year of compsci and only have one year of work experience and even I know that interpolating strings on a query is a big no-no.\n\nStupid shit like this is a weekly occurrence in production code lol",
                    "score": 1,
                    "replies": [
                      {
                        "author": "HirsuteHacker",
                        "body": "It absofuckinglutely is not, not anywhere remotely decent",
                        "score": 6,
                        "replies": [
                          {
                            "author": "Echleon",
                            "body": "Have you seen corporate code bases? Most are not what I’d call decent lmao",
                            "score": 1,
                            "replies": [
                              {
                                "author": "HirsuteHacker",
                                "body": "Yeah I have, even the worst I've worked with haven't been vulnerable to SQL injection",
                                "score": 0,
                                "replies": [
                                  {
                                    "author": "Echleon",
                                    "body": "I said “shit like this” like “every production code base has SQL injection”",
                                    "score": 0,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "catcint0s",
                        "body": "I don't think so, especially with ORMs.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Plank_With_A_Nail_In",
                    "body": "Did they not also teach you about the risks of changing a system that is working (i.e. making your company a profit)?",
                    "score": -6,
                    "replies": [
                      {
                        "author": "TA_DR",
                        "body": "A system with an exposed vulnerability is by definition not working properly. And it's not even hard to fix.\n\n\nWere you taught to not solve bugs?",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "gelfin",
            "body": "In a lot of cases when government buys software it’s kind of a shit show. They barely know what they need and choose the lowest bidder who talks the best game to implement it. When a report comes in unsolicited it might go to somebody who has no clue about anything.  Their instinct is to trust the “experts” they paid a lot of money for more rather than the stranger on the Internet using a bunch of weird techno-jargon to try to get them to do something they don’t understand.\n\nThe sales engineer who sold the system to start with knows more about blowing smoke up a government functionary’s ass than the bug reporter, and so, ironically, guess which one comes off sounding more credible.\n\nIf the functionary contacts the vendor at all, will they say the right thing to trigger a response? If they don’t, the vendor will probably say something reassuring and take no action because they’re already working some other contract by then.\n\nWorse, if the reporter is not *very* careful some kind of standard practices when dealing directly with an engineering organization can come off sounding like threats, especially disclosure deadlines. Your “here is a detailed description of a serious vulnerability” could come off sounding like “I have hacked your system and if you don’t do what I say within one month I will unleash the wrath of the whole Internet on you.”",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "OffbeatDrizzle",
        "body": "Disclosing vulnerabilities to government is not something I'd ever do... remember that journalist that got sued for viewing teacher SSN's by pressing F12 to hack?",
        "score": 163,
        "replies": [
          {
            "author": "Ancillas",
            "body": "I’m glad they dropped the effort to sue him.  That story still makes my blood boil.",
            "score": 82,
            "replies": []
          },
          {
            "author": "ShenmeNamaeSollich",
            "body": "No, you see they were *Base64 “encrypted”* SSNs! They “hacked” the “encryption” … oh, and made the governor look like a fucking idiot, which is the only reason it went anywhere.",
            "score": 75,
            "replies": [
              {
                "author": "kenj0418",
                "body": "&gt; made the governor look like a fucking idiot\n\nNo he didn't need any help with this. Our governor (Parson - Missouri) does that just fine all by himself.",
                "score": 22,
                "replies": []
              },
              {
                "author": "Moleculor",
                "body": "*Were* they encoded with Base64? The [article](https://missouriindependent.com/2022/02/23/claim-that-reporter-hacked-state-website-was-debunked-parson-still-says-hes-a-criminal/) I read simply said they were 9-digit values, and an SSN encoded to Base64 would end up being something like 12 characters long, at a minimum.\n\nExample: `123456789` -&gt; `MTIzNDU2Nzg5`",
                "score": 8,
                "replies": [
                  {
                    "author": "BananaPalmer",
                    "body": "Pretty sure they were just plain SSNs out there for anyone to see if they looked at the source",
                    "score": 8,
                    "replies": []
                  },
                  {
                    "author": "cachemissed",
                    "body": "That’d only be the case if you were encoding the SSNs as text, right? Representing just the number in base64 would be much shorter than decimal\n\nEdit: `123456789` -&gt; `7LSV`",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Moleculor",
                        "body": "Huh, hadn't thought of doing it that way... but that's still not nine digits, and would never be.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "cachemissed",
                            "body": "It's kinda the purpose of b64, to be able to encode binary data in safe ascii characters",
                            "score": 1,
                            "replies": [
                              {
                                "author": "Moleculor",
                                "body": "Sure. URL-safe characters, even. I just don't think of HTML as binary data, since if it's in the HTML directly as an HTML element, it's not likely to be translated by something before being displayed. It's ASCII/unicode.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "cachemissed",
                                    "body": "&gt;\tSure. URL-safe characters, even.\n\nNo? Standard b64 uses `/`. There are custom alphabets, though.\n\nEdit: I don’t really get what you’re saying with the second half of your comment? “I don’t think of HTML as binary data” Right, cause it’s text?? The SSN number is the data. You use base64/decimal/hex/whatever to turn the value into text, so you can put it in the html",
                                    "score": 1,
                                    "replies": [
                                      {
                                        "author": "Moleculor",
                                        "body": "&gt; No? Standard b64 uses `/`.\n\n... and URLs use `/`. Example: `http://`\n\nSure, technically that might confuse some web servers, so yes, you can easily replace it, and probably should think about doing so. 🤷‍♂️\n\n&gt; Edit: I don’t really get what you’re saying with the second half of your comment? “I don’t think of HTML as binary data” Right, cause it’s text?? The SSN number is the data. You use base64/decimal/hex/whatever to turn the value into text, so you can put it in the html\n\n[`file`](https://www.man7.org/linux/man-pages/man1/file.1.html) won't interpret HTML as `data`, it'll interpret it as `ascii` or `text`. \n\nWhat you put into text into HTML is typically what you see. If I put `&lt;p&gt;7LSV&lt;/p&gt;` it's not going to show me a nine digit value on the page unless you do some fancy backflips with JavaScript or something.",
                                        "score": 0,
                                        "replies": [
                                          {
                                            "author": "cachemissed",
                                            "body": "I think you might be a bit confused about this. Using characters that have other meanings in a URL does NOT make it “URL-safe”, quite the opposite, it WILL confuse the web server as to which path you are talking about if you don’t encode `/` and `+` as `%2F` and `%2B`. \n\n&gt;\t[`file`](https://www.man7.org/linux/man-pages/man1/file.1.html) won't interpret HTML as `data`, it'll interpret it as `ascii` or `text`.\n\nAgain I have no idea what you're getting at. HTML ***IS*** TEXT. HYPER TEXT. The whole point of base64 is that you can efficiently (well, 30% overhead) represent binary data IN TEXT FORMAT, like html. WHERE ONLY TEXT IS ALLOWED.\n\nAnd your browser have built-in decoding capabilities for base64, anywhere you can externally link data, e.g. images (`&lt;img&gt;`, favicon, css), fonts, audio, video, embeds (pdf, web etc), downloadable files, whatever, your browser NATIVELY supports base64 encoded data without any explicit decoding step.\n\nWhen directly put in something like a `&lt;p&gt;` tag, yes, that's correct because base64 encoding doesn't automatically get decoded when placed directly in the body of HTML content. The original context was about encoding data (like SSNs) in a way that can be stored or transmitted efficiently in text form (like HTML), not about displaying it directly to the user\n\nedit: oops wrong act lmao",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "Moleculor",
                        "body": "I'm sitting here trying to figure out how the raw numeric value of 123,456,789 becomes `7LSV`, and my Base64 must be rusty, because I'm just not seeing it. \n\nFour Base64 characters, with each character representing six bits, is at most 24 bits of data. \n\nThe largest value you can represent with 24 bits of data is 16,777,215, which is far far smaller than 123,456,789. You need 27 bits for 123,456,789, so far as I'm aware.\n\nSo I'm a bit lost as to how the numeric value of 123,456,789 becomes `7LSV`. I would think it would become something more like `B1vNFQ==`. (I do see there's a [website that gives the result of `7LSV`](https://v2.cryptii.com/decimal/base64), but it has the warning that it may be broken as it hasn't been the up to date version of their site since 2013.)",
                        "score": 1,
                        "replies": [
                          {
                            "author": "cachemissed",
                            "body": "[This](https://v2.cryptii.com/decimal/base64) is the website I used to encode it, I noticed after my second reply that reversing it didn't work but didn't bother updating the comment, sorry. Since all SSNs are &lt;1bn, you can encode every possible SSN in 5 or fewer base64 digits. Note that the padding `=` aren't necessary of course (unless you're packing multiple base64 values without a separator)",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "James_Jack_Hoffmann",
            "body": "Former Prime Minister of Australia Tony Abbott despite being a shitcunt was [nice and open minded enough](https://mango.pdf.zone/finding-former-australian-prime-minister-tony-abbotts-passport-number-on-instagram) to be educated by the \"h4ck3r\" who accessed his travel info by some OSINT and pressing the hack (F12) button.\n\nMad props to the old man but still a shitcunt.",
            "score": 11,
            "replies": []
          },
          {
            "author": "Moleculor",
            "body": "&gt; remember that journalist that got sued for viewing teacher SSN's by pressing F12 to hack?\n\nWhile I understand that perspective, and I don't blame you for it, the guy never actually got sued.\n\nThe governor ranted, raved, screamed, and tried to smear the dude in the public eye to the media...\n\n...and the media basically called the governor a drooling idiot. Circumspectly. \n\nAnd his own government basically did the same.\n\n&gt; For four months, Gov. Mike Parson tried to convince Missourians that a reporter who discovered a security flaw in a state website was a hacker who deserved criminal prosecution.\n\n&gt; His argument crashed headlong into reality on Monday, when the 158-page investigative file produced by the Missouri State Highway Patrol and Cole County prosecutor was finally released and showed no evidence of anything that even resembled computer hacking. \n\n&gt; [Cole County Prosecutor Locke Thompson declined to press charges, saying that if any crime was committed it was both unintentional and based on a law so broad and vague it essentially criminalizes “using a computer to look up someone’s information.”](https://missouriindependent.com/2022/02/23/claim-that-reporter-hacked-state-website-was-debunked-parson-still-says-hes-a-criminal/)\n\n&gt; ...\n\n&gt; Khan, the cybersecurity professor who helped confirm the security flaw for the Post-Dispatch, said through his attorney that he and his family were “terrorized for four months due to the governor’s use of state law enforcement officers for his political purposes.”",
            "score": 26,
            "replies": [
              {
                "author": "SilasX",
                "body": "Phew! He didn't get sued! He only got “terrorized for four months due to the governor’s use of state law enforcement officers for his political purposes.”\n\nImportant distinction to make, people *always* blow that *way* out of proportion!",
                "score": 31,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "NormalUserThirty",
        "body": "i assume people dont do this because they dont want to go to jail",
        "score": 29,
        "replies": [
          {
            "author": "[deleted]",
            "body": "I think the concern is someone does this with something like 9/11 in mind. The biggest security improvement since 9/11 was securing cockpit doors, and this exploit theoretically would allow a random person to get access to a cockpit.",
            "score": 40,
            "replies": [
              {
                "author": "SpaceMonkeyAttack",
                "body": "Yeah, that and the ability to bypass security screening when boarding the plane, even if they don't get in the cockpit. Wouldn't that make it possible to bring a weapon or an explosive onto a flight?",
                "score": 18,
                "replies": []
              }
            ]
          },
          {
            "author": "fotopic",
            "body": "Exactly, you can do it but if something goes wrong then you’re fucked. Although this could be a tools that shady people would use",
            "score": 8,
            "replies": [
              {
                "author": "Orsim27",
                "body": "Pretty sure terrorist don’t care much about prison when they try to hijack a plane…",
                "score": 13,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Hellobox1",
        "body": "How many years passed after I first time knew what is sql injection and I still see some code where   \n  \nawait db.exec(\\`SELECT a from b where c= ${inputValueFromAPI}\\` 🤦🤦🤦🤦🤦  \n  \nI think there are two cases:  \n  \n1) You use ORM  for every single query  \n2) You know that you must always use db-side formating for strings",
        "score": 23,
        "replies": [
          {
            "author": "jtcsoccer",
            "body": "Is db-side formatting the same as parameterizing the query?",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "HirsuteHacker",
        "body": "Actually shocking that SQL injection like this is still possible in 2024 when it's been so easy to protect against for so long already.",
        "score": 12,
        "replies": []
      },
      {
        "author": "Halmonster",
        "body": "ObXKCD\nhttps://xkcd.com/327/",
        "score": 49,
        "replies": [
          {
            "author": "Lucas_F_A",
            "body": "Bobby? Bobby.",
            "score": 12,
            "replies": []
          }
        ]
      },
      {
        "author": "Eclipsan",
        "body": "And MD5 hashed passwords, yikes.",
        "score": 4,
        "replies": []
      },
      {
        "author": "bzbub2",
        "body": "that photo that they used for the airline pilot is hot as #F0F",
        "score": 1,
        "replies": []
      },
      {
        "author": "Longjumping-Ad8775",
        "body": "People are still allowing sql injection?",
        "score": 1,
        "replies": []
      },
      {
        "author": "einai__filos__mou",
        "body": "Why that login granted you administrator and not a simple user? Isn't a admin cookie necessary to login as admin?",
        "score": 1,
        "replies": []
      },
      {
        "author": "fire_in_the_theater",
        "body": "well if want better software in our society, then we need a better funding/maintenance model than some bureaucracy hiring some contractor that probably contracts out the dev. \n\nuntil we collectively decide we actually do want to hit a level of general perfection in the systems we use, then it's just gunna be an endless stream of shit and fixes and more shit, especially as we continually build more and more systems than provide the same basic functionality.\n\nall this was is another id verification/permissions system verifying some rather specific permission...",
        "score": 0,
        "replies": []
      }
    ]
  },
  {
    "title": "Developer hate their job, but like to code outside work",
    "body": "",
    "score": 881,
    "url": "",
    "created_utc": 1723140254.0,
    "author": "milanm08",
    "permalink": "/r/programming/comments/1encujd/developer_hate_their_job_but_like_to_code_outside/",
    "comments": [
      {
        "author": "Apterygiformes",
        "body": "Most of the time I'm not coding, I'm figuring out what someone's code written 3 years ago is trying and failing to do",
        "score": 764,
        "replies": [
          {
            "author": "wineblood",
            "body": "`git blame`\n\nHuh, looks like that \"someone else\" has a very similar name to mine.",
            "score": 430,
            "replies": [
              {
                "author": "the_other_brand",
                "body": "`git blame` oh look this code hasn't been touched since this code base was migrated to git 6 years ago.  I guess we'll never know who wrote it or why.",
                "score": 211,
                "replies": [
                  {
                    "author": "yen223",
                    "body": "Code that you never had to touch for 6 years is the kind of code you should cherish with all your heart",
                    "score": 39,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 28,
                        "replies": [
                          {
                            "author": "iiiinthecomputer",
                            "body": "I'm usually the opposite.\n\n\"What fuckwit wrote this garb... oh, it's me.\"",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "lunacraz",
                    "body": "ha, literally dealing with that currently, but they migrated from bitbucket, holy shit does that platform suck",
                    "score": 29,
                    "replies": [
                      {
                        "author": "politeCanadaPlatypus",
                        "body": "It seems fine when I use it at work",
                        "score": 7,
                        "replies": [
                          {
                            "author": "lunacraz",
                            "body": "after using gitlab and github, the UI and way everything is organized makes very little sense",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Pumpedandbleeding",
                        "body": "Bitbucket uses git though so you would have history. Having used bitbucket what is so bad about it?",
                        "score": 5,
                        "replies": []
                      },
                      {
                        "author": "rebel_cdn",
                        "body": "I liked Bitbucket way back before Atlassian acquired it. I think back then it only supported Mercurial, not Git.",
                        "score": 10,
                        "replies": [
                          {
                            "author": "youngbull",
                            "body": "I thought that hg-git has existed for quite a long while. Should have been possible to migrate the commits. If someone still has the repo, you could still migrate and rewrite the repos history on top of those commits. \n\nIt would mean that everyone would have to throw away their local copies though.",
                            "score": 4,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "UB_cse",
                        "body": "What’s wrong with bitbucket? It’s what my first/only software job uses and I don’t mind it, as far as software goes it seems too inoffensive to say it sucks.",
                        "score": 4,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "ClimbNowAndAgain",
                    "body": "\"Hmm, I probably wrote that, but I'll keep my mouth shut because it says it was that guy who moved it all to git 10 years ago\"",
                    "score": 8,
                    "replies": []
                  },
                  {
                    "author": "IAmAThing420YOLOSwag",
                    "body": "Screw you Kevin, whoever you are",
                    "score": 8,
                    "replies": [
                      {
                        "author": "KevinCarbonara",
                        "body": "excuse me",
                        "score": 13,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "alwyn",
                    "body": "Also the reason why I can't impress anyone that I have contributed to liquibase 12 years ago.",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "Hunt2244",
                    "body": "Migrated from SVN to GitLab all our commit history was maintained ",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "NuclearVII",
                "body": "WHO IS THE MOUTHBREATHER RESPONSIBLE FOR THIS?\n\n...I am the mouthbreather responsible for this.",
                "score": 22,
                "replies": [
                  {
                    "author": "freelancing-dev",
                    "body": "“I built it according to my pay rate at the time”",
                    "score": 11,
                    "replies": [
                      {
                        "author": "NuclearVII",
                        "body": "I wish, man. I wish.",
                        "score": 3,
                        "replies": []
                      },
                      {
                        "author": "zelphirkaltstahl",
                        "body": "But then it wouldn't exist, because only by means of extra effort was I able to create a prototype ...",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "dustinpdx",
                "body": "`git blame`\n\nsteps through 3 years of formatting changes just to finally get to the commit `migrate repositories`\n\ntakes the rest of the day off and codes on a fun side project",
                "score": 11,
                "replies": []
              },
              {
                "author": "dust4ngel",
                "body": "the smarter you are, the more elaborate your dumb ideas are",
                "score": 10,
                "replies": []
              },
              {
                "author": "Narase33",
                "body": "https://github.com/jayphelps/git-blame-someone-else\n\nNot anymore!",
                "score": 9,
                "replies": []
              },
              {
                "author": "thetdotbearr",
                "body": "`git blame` points me to the ruby gems auto updater bot account or an unrelated PR that changed the linting rules way too often..",
                "score": 8,
                "replies": [
                  {
                    "author": "bentinata",
                    "body": "Formatting changes that applied by tool should be added to ignore revs.",
                    "score": 6,
                    "replies": []
                  }
                ]
              },
              {
                "author": "dkrantz123",
                "body": "git blame\n\"Someone else\"",
                "score": 2,
                "replies": []
              },
              {
                "author": "mp_complete",
                "body": "I wrote a script to change my git username once a day. Now it's never me",
                "score": 2,
                "replies": [
                  {
                    "author": "wineblood",
                    "body": "\"Who wrote this awful git username script... oh.\"",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "campbellm",
                "body": "A good friend of mine's son is working at the same company we used to work at, in the same code base.  Kid sends his dad (my friend) code snippets that his dad was the last one to touch.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Jugales",
            "body": "For me it’s the meetings and delivery expectations. Way too many meetings and not enough time to actually code. This leads to constantly rushing and eventually hating your time coding on the clock.",
            "score": 21,
            "replies": [
              {
                "author": "C_Madison",
                "body": "\"What did you do since our last meeting?\" \"Nothing really.\" \"Why not?\" \"Cause our last meeting was two hours ago and I need some time to DEVELOP THE SOFTWARE, not just talk about it.\"\n\nHad this talk with a project partner once when we were in a very uncomfortable situation and someone decided having meetings multiple times a day was a solution to it. After that meetings were scaled back to once a week and *finally* things got done.",
                "score": 11,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "Id gotten micro managed like this at my previous job by my 20+ yoe boss while i was straight out of college. I hope im able to forget those days",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "alpakapakaal",
            "body": "That's the fun part. \nPlaying detective, gathering clues, getting into the mindset of the ~~psychopath~~   co worker",
            "score": 32,
            "replies": [
              {
                "author": "BaconSpinachPancakes",
                "body": "I actually would love this if I wasn’t being rushed by sprints. Scrum kills the entire experience for me 😭",
                "score": 13,
                "replies": [
                  {
                    "author": "C_Madison",
                    "body": "And everyone else. Scrum is a disease. I have tried to like it. I have tried to think it can help. I really, really tried to suffer through all the \"okay, but that wasn't REALLY scrum, let's do it right this time\" and it still sucks.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "Stoomba",
                        "body": "Scrum works when it is applied in the way it was originally created, at least as far as I understand, with the FBI Sentinel project.\n\nWhen the software developers are outside contractors, scrum is appropriate. Sprint planning is basically contract negeotiating for what is to be delivered at the end. What is delivered creates a functional iteration that works even if the developers walk away from the project. \n\nIt sucks ass when that isn't the case.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Breadinator",
                "body": "\"The unsub appears to have been heavily caffinated, motivated by their desire to solve this P0 bug at 3am as the service remained down while their director frantically pinged them personally as they themselves updated the COO about the outage. The unsub was otherwise acting alone, and their solution was clearly influenced by that blog post from the Big Tech company they kept raving about during stand-up last week. Approach with questions about their work with extreme caution.\"",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Bakoro",
            "body": "&gt;Most of the time I'm not coding, I'm figuring out what someone's code written 3 years ago is trying and failing to do\n    \nAnd this is what documentation, particular specification and design, is *actually* for.  \nThere should be a document explaining in natural language, what the software is supposed to do, and sub sections roughly mapping out how that should be happening, including any keywords and reference material.   \n   \nThe code tells you what's happening, but it doesn't tell you why, it doesn't necessarily explain the assertions, the assumptions, the edge cases, the heuristics, the compromises...   \n   \nYou *should* be able to look at a specification and justify every block of code.  \nYou *should* be able to look at a design document and understand how data is flowing and being manipulated.  \n   \nThe implementation of the code can change. You *should* be able to make some alterations to the implementation without needing to update the documents.   \nIf the code has to change so radically that the documentation is outdated, then it's time to update the documentation, and if the *specifications* change so dramatically that the whole software architecture needs to change, then you're effectively making a new product.",
            "score": 46,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 23,
                "replies": [
                  {
                    "author": "Bakoro",
                    "body": "If someone flies me out, pays for room and board, and pays my *exorbinate* consulting fees, then I will tell them anything you want.",
                    "score": 12,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "Jesus man, preach! \n\neveryone keeps local copies here. I've not seen one functional description, code spec, or even a README.MD other than my repo.\n\nour UI mockup was literally done in the __weekly__ 3 hr meeting with a guy driving VSCode and running React/vite. Building 2 pages and one card. \"This way it's self documenting code\". He believes that about all his code.\n\nThe endpoints are \"self explanatory\". No docs there.\n\nZero readme, the architecture was decided in one meeting. Marketing and product owners haven't seen anything yet.  I've tried bringing up your points, but nope \"you can read code can't you?\" Our manager agreed with me but won't pushback as soon as the slightest counter argument comes from this individual.\n\nThe dude is fast at putting working code together. But he is the stereotype of the absolute worst \"10x developer\" I've ever seen.",
                "score": 8,
                "replies": [
                  {
                    "author": "Glader",
                    "body": "I can hear the \"wrrrrrp\" of his roll of duct tape from all the way over here.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 2,
                "replies": [
                  {
                    "author": "Bakoro",
                    "body": "Dude, unless you're getting paid $500k+ a year, why put yourself under that kind of pressure to feed a manager's hubris?    \nIf you hit the deadline, then you're just guaranteeing that they're going to keep doing that shit.   \nThey are *always* going to expect you to burn the candle at both ends to meet idiot deadlines after this.     \n     \nTake a nap, miss that \"deadline\", make your manager look like the asshole they are.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 2,
                        "replies": [
                          {
                            "author": "BestBottle4517",
                            "body": "I agree with Bakoro on that if you meet the arbitrary deadline that your idiot manager took from his ass then you would be inviting him to repeat this insane move. I would recommend the same thing: relax and let this \"deadline\" pass, undermining your shitty manager's credibility.\n\nI see you've struggled a bit to land this job, afterall the market is not friendly to anyone right now, but I  also agree that you don't *have* to support this type of unhealthy environment. Remember, there is a **lot** of companies out there and the best time to search for a new position is while employed.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "FlatTransportation64",
            "body": "That isn't even that bad compared to looking at the *.yml files for pipelines and then hoping that this next iteration of the file will work as expected. Man I love not being able to run that stuff in my local environment and then waiting 5 minutes to see if I my one-line change worked- whoops, looks like I made a typo inside a script that is inside *.yml so no syntax highlighting. Guess 10 minutes it is!",
            "score": 4,
            "replies": []
          },
          {
            "author": "SittingWave",
            "body": "hence the quote \"always code like the future maintainer is a violent psychopath that knows where you live\"",
            "score": 3,
            "replies": []
          },
          {
            "author": "martinus",
            "body": "Lucky you, I'm often digging 10 years in the past. I often call myself a software archeologist.",
            "score": 2,
            "replies": []
          },
          {
            "author": "Stoomba",
            "body": "Look at you, only 3 years ago. \n\nSome of the code I try to decipher is almost as old as I am, and I turn 40 this year.\n\nNot trying to create some sort of contest, just needed to vent.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "This is nothing specific to programming - I love cooking but hated the 15 years I spent doing it for a living.",
        "score": 131,
        "replies": [
          {
            "author": "__methodd__",
            "body": "Probably common in creative or building oriented jobs.",
            "score": 6,
            "replies": []
          },
          {
            "author": "bring_back_the_v10s",
            "body": "I can't understand why developers think they're special. ",
            "score": 5,
            "replies": [
              {
                "author": "rpgFANATIC",
                "body": "This is /r/programming\n\nIf you go to a /r/ focused on another specific job, you'll hear moaning and groaning about that profession as well",
                "score": 19,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "ratttertintattertins",
        "body": "Yeh..  you can more or less tell that from this sub.  We all clearly love programming but very few of us are happy with the way we’re forced to do it in the corporate world.\n\nAfter all, many of the current buzzwords in software originated in factories and most of us didn’t really want to be factory workers.",
        "score": 649,
        "replies": [
          {
            "author": "joe-knows-nothing",
            "body": "Sir, this is a standup. Save it for the retro.",
            "score": 552,
            "replies": [
              {
                "author": "beginnerpython",
                "body": "Very funny. retros are my least favorite. I don’t remember what I had for dinner 3 nights ago, how am I supposed to remember 2 weeks ago what I did.",
                "score": 168,
                "replies": [
                  {
                    "author": "Saki-Sun",
                    "body": "I make notes. When the retro comes around I read the room and say nothing.\n\n\nI then make notes about what's wrong with the retro. It's soothing.",
                    "score": 192,
                    "replies": [
                      {
                        "author": "ichdochnet",
                        "body": "I make notes during the sprint too and every 2-3 retros the format of the retro changes and my notes are 80% useless. I hate it.",
                        "score": 31,
                        "replies": [
                          {
                            "author": "FlatTransportation64",
                            "body": "My team changes retro formats \"for fun\". I just want to discuss what problems I've had in the past 2 weeks, I don't care if it fits your shitty format or not, all you're achieving this way is making an already long meeting into an even longer one",
                            "score": 8,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "f0rtytw0",
                        "body": "Daily notes:\n\n* to make sure I have something to say\n\n* to track what I have been doing\n\n* avoid slacking (cause need to note something)\n\n* to help me update my resume.",
                        "score": 10,
                        "replies": [
                          {
                            "author": "Saki-Sun",
                            "body": "Daily notes:\n\n\\* Update my resume\n\n\\* Check on job board\n\n\\* Sigh\n\n\\* Wonder what shit-show is in store for me today",
                            "score": 5,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "spamatica",
                        "body": "I couldn't quite fit it into a haiku but the first line is very poetic.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "fletku_mato",
                    "body": "No the point isn't to talk about actual tickets and stuff but cheer the awesomeness of the team and rage about everything you or anyone in your team cannot change.",
                    "score": 62,
                    "replies": [
                      {
                        "author": "Asyx",
                        "body": "And then the boss of your boss decides that in this little startup of 50 people he should also be part of the retro and now bitching in the retro becomes bitching to the CTO and it's not fun anymore.",
                        "score": 11,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "IntelligentSpite6364",
                    "body": "just bring up a task you underperfromed on and blame the process. suggest a new process, next retro blame the new process, it was either bad, or its good and we just didnt do it right",
                    "score": 26,
                    "replies": [
                      {
                        "author": "CCratz",
                        "body": "The process is changing == continuous improvement",
                        "score": 3,
                        "replies": []
                      },
                      {
                        "author": "LordoftheSynth",
                        "body": "Wait, you *underperformed* on a single task?\n\nKiss your raise goodbye. You'll take your 2% inflationary pay cut and lick my boot and *beg* me for extra work every sprint for the next year. Bust your ass and you'll get maybe a 5% raise next time!\n\n(You won't. We've already decided our favorites get the raises and promotions.) \n\n--shitty managers and skip-levels at review time.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "KaneDarks",
                    "body": "Huh, retros are my favorite. Maybe because we only started them recently, but I like to be heard, to brainstorm how we could do something better. I hear other people's perspectives. Some points I've taken in retros are going into my OKR.\n\nUpdate: OKR is Objectives and Key Results\nhttps://en.m.wikipedia.org/wiki/Objectives_and_key_results\n\nIn my workplace it's a sort of your own goals you want to reach monthly, that will affect your own work positively and overall your company.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "Wires77",
                        "body": "Ah yes, your OKR, a well understood abbreviation by everyone",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "ICanHazTehCookie",
                    "body": "The sprint board or taking notes",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "ouiserboudreauxxx",
                    "body": "&gt; I don’t remember what I had for dinner 3 nights ago\n\nI was thinking this was a complaint about retro ice breakers lol. We used to do ice breakers with random questions in all retros at one of my jobs.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "dust4ngel",
                "body": "&gt; Sir, this is a standup\n\nis standup the meeting where QA mentions weird behavior they saw in functionality unrelated to the current sprint, and then you have seven developers and two product people looking at a screen share of git commit history for 45 minutes?",
                "score": 21,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 8,
                    "replies": [
                      {
                        "author": "Saki-Sun",
                        "body": "    JIRA-123121 YA holodnyy!\n\nSure, if you speak Ukrianian or Indian.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Worth_Trust_3825",
                    "body": "I'm jealous that your commit history is more than PRO-3345",
                    "score": 3,
                    "replies": [
                      {
                        "author": "Saki-Sun",
                        "body": "I prefer\n\nFOO (Framework Optimized Operations)\n\nand\n\nBAR (Build, Analyze and Refactor)\n\n  \nmeh, was funnier in my head",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "rwilcox",
                "body": "Notes from the retro? You better believe it, straight to ~~jail~~ the trash",
                "score": 10,
                "replies": []
              },
              {
                "author": "_meddlin_",
                "body": "This meeting sucks too",
                "score": 6,
                "replies": []
              },
              {
                "author": "BytePhilosopher",
                "body": "I’m not kidding, I used to work at a company that had a post-retro retro-review meeting. We would review how good/bad the retro went.",
                "score": 4,
                "replies": []
              },
              {
                "author": "octocinclus",
                "body": "Sir this is a Wendy's",
                "score": 3,
                "replies": []
              },
              {
                "author": "TistelTech",
                "body": "the best part of stand up is when the manager repeats what the devs have already said because they have to justify their presence. they don't even know what the words mean.",
                "score": 2,
                "replies": []
              },
              {
                "author": "nrith",
                "body": "We foster a no-blame culture here. Please refrain from personal attacks.",
                "score": 2,
                "replies": [
                  {
                    "author": "LordoftheSynth",
                    "body": "(You will be blamed behind the scene.)",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Mrqueue",
                "body": "Let’s go through last times actions first",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "katafrakt",
            "body": "And, unfortunately, I feel that it's getting worse and worse. I have been mostly working in startups, not \"true corporate\", and I feel that few years ago we, as the devs, had much more to say in general product development. We were really part of the team. Nowadays, even in small companies, it starts to feel much more like contract workers. We are handed Figma design, which is often \"a drawing on paper\" without taking into consideration what's technically feasible, what's performant etc. - and we are told to make it happen. Sometimes there's talk that we can \"try to push back on some things\", but the very statement is problematic.\n\n\n Buzzword-driven product development also does not help.",
            "score": 71,
            "replies": [
              {
                "author": "Blah-Blah-Blah-2023",
                "body": "Wait ... you guys get handed a design?",
                "score": 40,
                "replies": [
                  {
                    "author": "abl4k",
                    "body": "Better than the Excel sheet page designs our developers have been given before because management \"doesn't have the resources\" to hire even a single UX employee and the people doing the layouts refuse to learn any UX tool",
                    "score": 11,
                    "replies": [
                      {
                        "author": "jdbrew",
                        "body": "Man… with Figma having a free tier and an UI my child could figure out, this is completely unacceptable",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "zelphirkaltstahl",
                "body": "&gt; We are handed Figma design, which is often \"a drawing on paper\" without taking into consideration what's technically feasible, what's performant etc.\n\nThat is my impression of many designers using Figma. Building the flying air castles in there, without actually understanding even the basic means of their job, like HTML and CSS. Of course not considering what is feasible and performant means that one of the first rules of design was already violated.\n\nGive people a tool that lets them be dumb and there are gonna be lots of people relying on the tool and being dumb.",
                "score": 18,
                "replies": [
                  {
                    "author": "Captain_Cowboy",
                    "body": "The funny thing is, I genuinely think it's easier to make a mock-up in HTML and CSS than a WYSIWYG. If it can have dummy data/doesn't need functionality anyway, it's plenty easy to bang it out and tweak it until it looks good, plus you get all the benefits of reusable styles, it serves as a real starting point for the actual product (especially if it's meant for a website), and you get all the usual benefits of text (like stupid easy editor support and trivial version management with useful diffs).\n\nI'd expect designers would almost certainly better off learning those basics, but then again I'd make all the same arguments about document editors vs. Word or Python+SQLite vs Excel. I guess the others are fine if you literally only do it once a year and then never come back to it, but otherwise, the upfront effort is just such a win down the line.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "Chii",
                        "body": "&gt; I genuinely think it's easier to make a mock-up in HTML and CSS than a WYSIWYG\n\nthat's because you know html and css! \n\nI've seen plenty of designers who are just photoshop wizards, but cannot actually imagine that people have different screen sizes, and cannot describe what should happen if the content grows bigger than their mockups, etc. \n\nEven the good ones, all they seem to care about is visual coherency - colors, shapes, logos, etc. Some care about line/spacing, but rarely, and almost none care about modularity. And not an insignificant number of them want to do redesigns! It's the equivalent of us programmers \"rewriting it all in another 'better' language\". \n\nThe super good UX designers i've worked with are all programmers first, and designers second. Doing pairing with them is quite a pleasurable activity.",
                        "score": 10,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Blando-Cartesian",
                    "body": "&gt; Give people a tool that lets them be dumb and there are gonna be lots of people relying on the tool and being dumb.\n\nThis exactly. Figma lets you use it as a glorified Paint for drawing ad-hoc boxes. It has a concept of a component, but nothing properly conceptually matches a gui component in code.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "PangolinZestyclose30",
                "body": "&gt; We are handed Figma design, which is often \"a drawing on paper\" without taking into consideration what's technically feasible, what's performant etc. - and we are told to make it happen. Sometimes there's talk that we can \"try to push back on some things\", but the very statement is problematic.\n\nMy perspective is that this is how it should work.\n\nI'm old, and I used to work on projects where devs had more say about feature development. We kinda thought what's possible with the current architecture/constraints, took some input from the business side and developed the features how we thought they make sense. We even developed it pretty quickly since it was aligned with the technical constraints from the get-go. But more often than not, the features we delivered were not actually what users wanted, it was what devs (we) wanted or what we thought that users *should* want. The UI/UX design is kinda similar story.\n\nIt turns out that understanding what users needs, how to conceptualize / unify needs of different customers, is a difficult work. You need to talk to your customers all the time, bounce new ideas, understand their use cases in quite some detail etc. and that's not what I as a dev am interested in. I like to have a PO/PM who do that instead, then UX designers translating that into designs.\n\nBut it's important to understand that such UX designs and even product plans are only a starting point for \"negotiation\". You still want the product / design aligned with the technical implementation, so you absolutely should push back on things if they're too difficult / whatever. The last say is still with the product people, because it's their job to weigh costs and benefits, but with better information (\"this would cost way too much, but if we change it slightly then it becomes easy\") they can make better decisions.",
                "score": 8,
                "replies": [
                  {
                    "author": "katafrakt",
                    "body": "It seems to me that we actually agree, even though you are trying to paint it as a disagreement. I'm not saying that devs should do customers interviews etc. It would be ridiculous notion. This is the responsibility of the product team, just like gathering initial requirements is.\n\nHowever, I'd argue that a pixel-perfect design is not a good resulting artifact of this process. Requirements should have textual form, maybe a rough wireframe. Then it's a great starting point for discussion, weighing trade-offs etc. With a completed design I too often hear that designers took a lot of time to complete them and it will take a lot of effort to make the change now. That shaves off pretty much every angle of discussion, unless something really has to be pushed back, because is super difficult or even impossible to achieve.\n\nDesign is also not a great conveyor of importance. It a \"drawing\" - a flat concept. In reality things are prioritized. Some are must-haves, some are nice-to-haves and some are even just some sprinkles on top or free ideas. I witness many times FE devs trying to conform to a design for few days only then flagging that it's actually really hard - and then hearing that it's not an important part, we can skip doing that, because it was just a space-filler.\n\nAll the things mentioned above lead me to thinking that Figma design is a very bad thing to present requirements to the dev team. But I'm not arguing that devs should be doing product work.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "EasyMrB",
                "body": "Yeah starting in the position where you are *pushing back* is a big part of what makes development a shit job currently.",
                "score": 2,
                "replies": [
                  {
                    "author": "katafrakt",
                    "body": "This is exactly my problem. It sounds to me like \"if you really need to cause trouble and disrupt our work, we'll listen\". Definitely does not sound like a partnership.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Okay, so I'm contracting with this company. I have to fill out a time sheet, fair enough, it's hourly so gotta clock in. \nThen in my Jira stories (we don't use tickets at all), I have to estimate story points. \nThen I have to track hours spent on that story. \n\nAnd THEN I have to fill out a spreadsheet at the end of the week with the hours spent working on the current Epic...\nNo idea what that is for.\n\nThey pull the hours and story points into Excel, and \"calculate cycle time\". Hours per story point. 8hrs/4pts means 2 hour cycle time which gives us?' **Story points as units of time...**\n\n3 places to track time, and people game the system to keep cycle time ridiculously low. I pointed out we can give hours estimates and then track time but noo, estimate story point cycle time. Ugh it's ridiculous.\n\nDon't get me started on our retrospectives. It's painful.",
            "score": 9,
            "replies": [
              {
                "author": "way2lazy2care",
                "body": "&gt; And THEN I have to fill out a spreadsheet at the end of the week with the hours spent working on the current Epic... No idea what that is for.\n&gt; \n&gt; They pull the hours and story points into Excel, and \"calculate cycle time\". Hours per story point. 8hrs/4pts means 2 hour cycle time which gives us?' Story points as units of time...\n\nYou should tell them to read some jira how-tos, because jira will do all of this for you automatically afaik.",
                "score": 4,
                "replies": []
              },
              {
                "author": "palabamyo",
                "body": "Always interesting how story points aren't supposed to be a measurement of time but then your scrum master slips for a second and says something along the lines of \"oh 15 story points are an entire 5 day work week\".",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Jukunub",
            "body": "Im pretty sure if i didnt need to make a living id never program again yet i do love it and also enjoy doing it professionally.",
            "score": 14,
            "replies": []
          },
          {
            "author": "RICHUNCLEPENNYBAGS",
            "body": "I think the problem is more the basic job problem that you may not see eye-to-eye with everyone you work with and you have to do boring coordination and work on tasks/products that aren’t necessarily the ones that most interest you.",
            "score": 3,
            "replies": [
              {
                "author": "ratttertintattertins",
                "body": "It’s not just that.  I’ve been a dev for 24 years now so I remember how it used to be.\n\nEDIT: And obviously caveat, some people were having a shitty time 24 year ago but I think generally the job was more chill and involved more actual programming and autonomy.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "moosethemucha",
            "body": "I'm just in time to tell you are absolutely correct.",
            "score": 2,
            "replies": []
          },
          {
            "author": "__methodd__",
            "body": "Yeah I can get behind the idea of deep process understanding and value creation from manufacturing, but in my experience all it does is slow down decision making and gives leadership a reason to autofellate.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "These-Bedroom-5694",
        "body": "Love software development and engineering, hate endless meetings about nonsense.",
        "score": 149,
        "replies": [
          {
            "author": "dust4ngel",
            "body": "&gt; hate endless meetings about nonsense\n\nsolution: set up a standing meeting with the entire organization to brainstorm solutions to all the endless meetings about nonsense, or anything else people have on their minds",
            "score": 48,
            "replies": [
              {
                "author": "-grok",
                "body": "you know what's better than meetings?  A meeting about meetings!  Hell yeah!",
                "score": 19,
                "replies": []
              },
              {
                "author": "Breadinator",
                "body": "\"Hey, we should setup a meeting to discuss why we all have to attend these 23 meetings every week? Maybe we can make it better! \"\n\n\n*There are now 24 recurring meetings*",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "lost_tacos",
        "body": "On your own time you get to do it your way without having to bend to schedules and frivolous features.  You can spend the time on architecture and important things.  Got a cool idea, try it out.  No need to stash it away hoping you'll get a chance in a future release.",
        "score": 53,
        "replies": [
          {
            "author": "BitcoinOperatedGirl",
            "body": "Also just... Code something you personally think is fun/interesting, as opposed to something an overcomplicated solution to a fake problem that a corporation values.",
            "score": 4,
            "replies": [
              {
                "author": "ThisIsMyCouchAccount",
                "body": "That's kinda the problem I have.\n\nI don't code outside of work because I don't really have a problem to solve.",
                "score": 2,
                "replies": [
                  {
                    "author": "Full-Spectral",
                    "body": "That's one of the easiest problems of all to take care of. Just find some place that software intersects some other area of life you are interested in. The ultimate butter-nut squash search engine, a web site to calculate the year you will become invisible to women, the worst game ever made, a simulation of the human digestive system (oh wait, that's what you are probably doing at work), a program to write Tuvan Metal Throat Signing songs in Aeolean mode, etc...",
                    "score": 2,
                    "replies": [
                      {
                        "author": "ThisIsMyCouchAccount",
                        "body": "Good advice but doesn't really work. For me, at least.\n\nNothing in my life \\*needs\\* it.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "nikanjX",
        "body": "Musician hates day gig in a cruise ship band but still plays for fun on the weekends",
        "score": 188,
        "replies": [
          {
            "author": "magical_midget",
            "body": "This is almost all creative pursuits, photographers hate doing corporate shots but still trek for hours to get a nice sunset. \n\nMechanics hate changing oil, but still have a muscle card they work on the weekends. \n\nWriters hate assignments but still have a book they want to publish one day. \n\nEven famous painters had to do boring portraits for the king to afford painting the works they actually want.",
            "score": 42,
            "replies": [
              {
                "author": "zzz165",
                "body": "Someday the rest of the world will realize programming is a creative job, not a factory job, and we’ll stop modeling software engineering after how Toyota did something this one time.",
                "score": 22,
                "replies": [
                  {
                    "author": "Chii",
                    "body": "&gt; rest of the world will realize programming is a creative job\n\nthis is where you're wrong. Most programming is not creative. It's assembly work - like a factory worker. You have components you didnt write that does some stuff, and you wire them together in a way that suit some business need that is handed to you (without knowing or being in the loop about the overall goal - that's the purview of the high/mighty architect/CIO etc).\n\nIt's why a lot of programmers hate their job - it's not real programming as they want it to be; a skilled craft. That's also why a lot of programmers dream of doing game development - one area where the job, if you control and own the entire project, is very creative and require high levels of thinking and problem solving.",
                    "score": 17,
                    "replies": []
                  }
                ]
              },
              {
                "author": "iamapizza",
                "body": "I know this must be obvious but this never even occurred to me. I do photography as a hobby and look forward to upcoming chances at it. I've never done it as 'work' so it's a perspective I was unaware of. \n\nIs the line a bit blurry for writers? I mean, do writers also write just for themselves with zero intention of ever publishing a thing? Or maybe self publishing without having to care about the outcome. I'm trying to relate it to personal coding projects.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "The gigs are actually at the weekends for most musicians. Weddings, concerts, etc",
            "score": 32,
            "replies": []
          }
        ]
      },
      {
        "author": "NeedTheSpeed",
        "body": "I like programming. I dislike corporate bullshit and fucking stupid security measures that are wasting my time because everything has to be a ticket. Corporate management thinks they are doing agile when they throw \"scrum master\" (aka a corporate capo) and then do shit like this so you have to wait hours or days to get basic stuff done.",
        "score": 148,
        "replies": [
          {
            "author": "Saki-Sun",
            "body": "&gt; have to wait hours or days to get basic stuff done.\n\n\nYou lucky lucky bastard!\n\n\n\nOhh! What wouldn't I give to be able to get basic stuff done! I sometimes hang awake at night dreaming of getting basic stuff done.",
            "score": 39,
            "replies": [
              {
                "author": "fletku_mato",
                "body": "The trick is to embrace meeting noise as background music, focus on coding, and if you hear your name just say something like \"Uh.. sorry, I was a bit distracted. Could you repeat that?\"",
                "score": 23,
                "replies": []
              },
              {
                "author": "esteemed-dumpling",
                "body": "&gt;hang awake at night\n\nDracula?",
                "score": 3,
                "replies": [
                  {
                    "author": "Dumcommintz",
                    "body": "Monty Python's The Life of Brian.  Source material: [https://www.youtube.com/watch?v=zPi76KvQF1g](https://www.youtube.com/watch?v=zPi76KvQF1g)\n\nLife of Brian is peak Monty Python, AFAIC.  Except for the weird scene in the middle, the whole thing is amazing.  One scene that never fails to send me is the [Grammar Centurion](https://www.youtube.com/watch?v=0lczHvB3Y9s).",
                    "score": 2,
                    "replies": [
                      {
                        "author": "Saki-Sun",
                        "body": "Thank you kind sir!",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "candelstick24",
            "body": "This comment, needs to be force fed to every MBA student every single day, and anyone that is excited about agile and SAFE in 2024.",
            "score": 8,
            "replies": []
          },
          {
            "author": "SippieCup",
            "body": "I'm so thankful I was able to escape corporate, build a startup, sell it, and then go back to work for my angel investors who put their blind trust that I will do the right thing in managing their software development.\n\n* Work/Life is healthy.\n* Can hire whoever I want, and have a long leash with comp.\n* They request features a mile long, but I can decide timelines and priorities.\n* Only regular meeting is a single standup that people bring a list of what was done, what they plan to do, who they may need to talk to, and if they hit a blocker. 6 Devs, 10-15 minutes at most.\n* Sprints are less structured, just a list of issues that need to get done in the next 2 weeks.\n* While devs tend to stick to work within the same domains on the codebase, there isn't really a hostile environment to people touching things within them or requesting changes.\n\nOnly downsides:\n\n* There isn't as much code review from multiple people, usually its approved off by one other dev and myself, who just add comments in the PR on what needs to be fixed/updated until we both like it. But it does makes it easy to find learning experiences for junior devs and sit down with them to show how to fix it and best practices when it comes approaching code refactoring. \n* It is heavily reliant on me running it as the PM and if I fall behind on things the entire team lags. But hopefully as people mature to the codebase, this can be less of an issue\n\nIts just so nice that everyone can just sit down and do work, with fewer interruptions or flow breaks. People just request \"organic\" meetings when they ask for help.",
            "score": 11,
            "replies": []
          },
          {
            "author": "i_ate_god",
            "body": "I'm a scrum master. Every attempt I've made to simplify the \"process\" has been shot down by my boss. He even told me to stop taking notes and instead do all Jira paperwork infront of the team. I do the best I can to spare everyone the nonsense but there is only so much I can do.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "CallousBastard",
        "body": "I don't hate my job and I never code outside of work.",
        "score": 163,
        "replies": [
          {
            "author": "rjcarr",
            "body": "Yeah, I’m not rich and never will be, but my work is pretty chill and I mostly get to do things how I want. I’ve done like 3 side projects in 20 years and none in the last 5. ",
            "score": 30,
            "replies": []
          },
          {
            "author": "ClimbNowAndAgain",
            "body": "Yeah, me too. I get my coding fix at work, luckily. Then I have weekends doing family stuff. Sounds like I'm a lucky fellow.",
            "score": 18,
            "replies": []
          },
          {
            "author": "Loose_Voice_215",
            "body": "I loved coding fun projects before I started programming for my job.\n\n\nNot a single one since. Got the coding itch scratched during work.",
            "score": 11,
            "replies": []
          },
          {
            "author": "Lowe5521",
            "body": "Surprised I had to scroll this far down to find this. I am the same way.",
            "score": 29,
            "replies": []
          },
          {
            "author": "datsyuks_deke",
            "body": "I enjoy my job and never do much coding outside of work. \n\nIf I do any kind of coding outside of work it’s doing some LeetCode. I haven’t touched a project in months now and when I do touch it it’s just to update to the latest Next and tweak a few things.",
            "score": 7,
            "replies": []
          },
          {
            "author": "Dear_Locksmith3379",
            "body": "For me, the main factor is motivation. When I'm earning a good living, coworkers see my contributions, and customers use my software, I'm motivated. When I'm at home, I take it easy and tend to give up when obstacles arise.",
            "score": 7,
            "replies": []
          },
          {
            "author": "DracoLunaris",
            "body": "same. Honestly can't see how doing even more coding out of hours would not just speed up the burn out. let yer brain rest folks please",
            "score": 17,
            "replies": [
              {
                "author": "Tsuki4735",
                "body": "I find that I enjoy coding outside of work if I'm working on something I actually use.\n\nUsually it's just me trying to solve some dumb first world problem for myself, but it's great motivation and very satisfying if it ends up working.",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "AfraidOfArguing",
            "body": "I hate both. I'm also just tired of agile ",
            "score": 6,
            "replies": []
          },
          {
            "author": "StrangelyBrown",
            "body": "Same. I think this trend is just because there's more shit jobs for programmers and more people doing them. I think there's way more people who write code 'for the money' now, so of course they hate their job. There's the same number of people who were nerds growing up, studied CS, always wanted to e.g. work in games. But there's an increasing number of jobs in programming so you'll have a lower average love.\n\nTake FinTech. WAY more jobs in that now than say 10 years ago and good money, but sounds a bit soul destroying and not that many people who do CS at uni because they want to go into FinTech.",
            "score": 4,
            "replies": []
          },
          {
            "author": "KaneDarks",
            "body": "I don't hate it too, but sometimes it's taking a toll on me. When the task is hard and long, or when it's not my fault that we're missing the deadline. Also, when my mood is good I actually like to tinker with stuff. Software for now, but I have a personal server mini PC and Raspberry Pi 5. Want to set up a home assistant some day or similar.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 27,
        "replies": [
          {
            "author": "puterTDI",
            "body": "hey, we have been working towards EA being assured over and over again that we can pull stuff out because \"we'll just have one customer\".\n\nApparently they forgot to tell us that we will now have 3-5 customers, oh and we don't have time to put that stuff back in, including security issues that are only impactful if you have more than one customer, because it's now the quarter before and we have zero runway and were never actually told of the change until now.\n\nhell, we weren't even told.  I happened to hear it second hand from a product owner who had apparently been told about it, went to my boss to ask about what I was hearing, then **freaked the fuck out**.\n\nFortunately, my boss is taking the freakout fairly well.  We're already having to fight an uphill battle to get the things we need into the quarter and I'm sure there will be arguments that \"we don't have time\", but if you change the plan you can't really expect the schedule to stay the same.",
            "score": 7,
            "replies": []
          }
        ]
      },
      {
        "author": "Agent7619",
        "body": "I don't hate my job. I also don't code outside work.",
        "score": 20,
        "replies": [
          {
            "author": "ChuuToroMaguro",
            "body": "Maybe coding outside of your work is what makes you hate your job 🤔",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "puterTDI",
        "body": "It's the politics. Engineers love their job, but they don't want to have to fight to be allowed to do their fucking job.\n\nI have no fucking clue why management, product owners, etc. all think it's fine to tell me **exactly** how I need to go about organizing my work and writing my code but FREAK THE FUCK OUT if I say I need certain information to write the code because apparently I'm sticking my nose in where it doesn't belong.\n\nI mean, you won't let me ask for what I need? fine.  At least back the fuck off and let me do my job without telling me how to do it and then **actively preventing** me from doing it if I'm not doing it how you think I should.\n\nsource: an engineer tired of politics",
        "score": 34,
        "replies": [
          {
            "author": "ouiserboudreauxxx",
            "body": "I quit a job like this earlier this year with nothing lined up. I knew I was burned out but didn't realize just *how* burned out I really was until a few weeks after I was out.",
            "score": 6,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "HoratioWobble",
        "body": "i hate SCRUM and incompetent people managing the development of projects",
        "score": 13,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Sometimes I feel alone being in the opposite situation: I don't particularly enjoy programming and basically never do it on my free time. I do like my job as a java code monki because it pays well and I get to be around mostly fun people.",
        "score": 44,
        "replies": [
          {
            "author": "iphonehome9",
            "body": "I spend 8 hours (ok lets be honest 4) a day coding.  Why would I want to do it any more than that?  I guess maybe if I had a legitimate business idea.",
            "score": 31,
            "replies": [
              {
                "author": "Asyx",
                "body": "I know a lot of people like this. To me, the reason I got into programming in the first place was because I wanted to know how all of this works. Games probably sparked the first interest but teenage me was blown away when he realized that a bit of webspace was less than 5 euros with a free domain and I could just... make my own website! \n\nAnd this drive to understand tech and do something interesting with it never stopped. I don't do the same programming at home that I do at work. Even if I do web stuff at home it's not the same stack I use at work.\n\nI'm currently writing a very simple tictactoe clone. I want to port it to all the old consoles I have and get a glimpse into what it was like to develop for those system. In 2024, most of them have modern toolchains.\n\nMy next project will be a simple 3D game and I'll use that as an excuse to get actually good at Blender and 3D modelling. \n\nThe programming is just a tool I use to do something with technology on a level that otherwise would not be as interesting.\n\nLike, I have no ambition of playing games on retro consoles. Just give me a good emulator and I'm good. I want to actually understand and use those systems on the lowest level.\n\nI always see myself like people in trades. And I use \"trades\" here loosely because I don't know how to use it as an adjective (handwerklich in German). I mean your plumber or carpenter or technicians that work during the week with actual tools and get dirty but on the weekend they have other hobby projects that actually involve their skills they learnt at work. At least in my circle, that is very common. I don't see much of a difference between what they do and what I do.",
                "score": 11,
                "replies": []
              },
              {
                "author": "mindless_gibberish",
                "body": "that's what gets me. Why don't I have a public github account? Why don't I contribute to open source projects? Because I have other interests, a family, and chores to do around the house.",
                "score": 14,
                "replies": [
                  {
                    "author": "mfizzled",
                    "body": "As someone who has only been in the industry a few years but was reading about it on reddit a lot before, the fact that I don't live, eat and breathe coding used to make me worry that I'd never make it.\n\nI think now I realise those die-hards are just the loud minority who talk about it a lot on reddit, I reckon most people just do it to make a living because it's fairly interesting and pays well.",
                    "score": 16,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Lt_Duckweed",
            "body": "Don't worry, you aren't alone.  In the somewhat rare times I do program outside of work, it's simply because it's a tool I can leverage towards a goal in a different activity that I find more interesting (example being writing a few small utility mods for a game I play to add functionality I wanted)",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "theSilentNerd",
        "body": "I like programming, but corporate stuff like being underpaid, doing more than the agreed to climb the ladder, being lied to and faking happiness to stay employed makes job awful.",
        "score": 12,
        "replies": []
      },
      {
        "author": "wineblood",
        "body": "I hate my job when it's not coding.",
        "score": 6,
        "replies": []
      },
      {
        "author": "nucleomancer",
        "body": "Programming for others brings in the money. But everything you learn can be applied to \"our\" Personal Pet Projects. And that is for fun!\n\nWhen you stop programming for fun, then get another job a.s.a.p.! (Learned that the hard way.)",
        "score": 25,
        "replies": [
          {
            "author": "Gambrinus",
            "body": "Eh, I used to program for fun all the time. But then I got married and had kids, so the small amount of me time I have left I would rather spend on other things I enjoy rather than the stuff I do at work all day.\n\nI can see myself getting back into recreational programming as I get older and the kids become less time intensive though.",
            "score": 24,
            "replies": [
              {
                "author": "ItWasMyWifesIdea",
                "body": "This. I love making my own projects, I just don't have the time or energy. The best I've been able to do is get into jobs where I enjoy the work or appreciate the product so that I can still scratch the itch for building cool stuff and also get paid for it. And I'm lucky to have that... Most people don't.",
                "score": 4,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Additional-Bee1379",
        "body": "I don't hate my job. Honestly I think the hating is just self selection on reddit.",
        "score": 22,
        "replies": []
      },
      {
        "author": "Jddr8",
        "body": "Mental health is another issue. I am a mid level developer and like to develop and solve problems. But also suffer from anxiety and when anxious my performance also drops. Sometimes is a struggle.",
        "score": 6,
        "replies": []
      },
      {
        "author": "He_knows",
        "body": "Working in a small shop has its benefits. No corporate bullshit, so now I have time for other hobbies",
        "score": 8,
        "replies": [
          {
            "author": "Middlewarian",
            "body": "I started a company in 1999.  Originally my motto was \"Make programming fun again.\"  Over 10 years ago I changed it to \"Enjoy programming again.\"",
            "score": 5,
            "replies": []
          },
          {
            "author": "guepier",
            "body": "I recently (2 years ago) switched from a tiny startup to a multi-billion-dollar company, and I enjoy my work substantially *more* now (well, most of it). Sure, there’s a fair amount of corporate politics, but the startup had its own frustrating challenges due to the sheer chaos that reigned there, mostly lacking clear processes and accountabilities, without any chance for career progression, and with a gazillion responsibilities that made it imppossible to create or keep any kind of schedule, and all sapped my will to live.\n\nEven though the startup founders made sure that we kept strict work schedules (virtually no overtime, except in the crunch before a big trade show, once a year), I was burnt out after five years there.",
            "score": 3,
            "replies": [
              {
                "author": "Asyx",
                "body": "I work in a startup too but started in a large corporation. To me, the startups are fun but it's never orderly. I think now I'd enjoy the corporate job I had more but back then it was too boring of a product for me.\n\nAlso didn't help that I wasn't in the corporation but a smaller subsidiary which meant we got the average small to medium business CEO which meant you dealt with corporate bullshit and a CEO on an ego trip.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Space-Robot",
        "body": "I work at a place where everyone I answer to is also a develop with tons of experience. I tried working somewhere else for a while on a team with 2 PMs where all the other devs were outsourced contractors and it was a fucking nightmare. Took a pay cut to come back to where the people making engineering decisions are actually engineers and I don't hate my job at all.\n\nI don't code for fun at home. If I wasn't paid for it I'd probably never code again.",
        "score": 3,
        "replies": []
      },
      {
        "author": "MR_Se7en",
        "body": "I hate being played by graphic designers. \n\n“Oh whoa, that was fast - can you push that live now?”\n\n“Don’t add this, it’s not part of my design”\n\nI hate working for people who don’t understand the basics of html yet are designed pages left and right.",
        "score": 5,
        "replies": []
      },
      {
        "author": "hugazow",
        "body": "Coding is fun. Having to code on shit you didn’t code is exhausting.",
        "score": 5,
        "replies": []
      },
      {
        "author": "HelioOne",
        "body": "For me it's been IT. Wastes my time daily. I spend the vast majority of my workday finding different ways to get around some stupid security policy they have in place.",
        "score": 3,
        "replies": []
      },
      {
        "author": "sadyetfly11",
        "body": "Being a developer is fun. Sitting in front of the screen 9 hours at least a day, and getting messages at night about issues on the system get stress into your life. \n\nI think the ideal dev work-life balance is working remote (living in a cheap country, working for a company in the US) part time job in 2 different companies",
        "score": 3,
        "replies": []
      },
      {
        "author": "Blando-Cartesian",
        "body": "At work: Half-assed requirements, scrum, agile and MVP. \n\nOutside work: It’s done when I think it’s good.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Tesselation9000",
        "body": "I work in a field completely unrelated to tech. I love programming in my free time. Based on what I read on reddit, I don't think I'll try a professional career in programming.",
        "score": 3,
        "replies": [
          {
            "author": "insulind",
            "body": "I would recommend not making decisions based on what you garner from the reddit-sphere",
            "score": 16,
            "replies": []
          }
        ]
      },
      {
        "author": "DarkTechnophile",
        "body": "We hate the people but love the computers.",
        "score": 2,
        "replies": []
      },
      {
        "author": "RammRras",
        "body": "I love programming but at work I have to do other tasks, and when I program I have to do it the way company decided which I don't like.",
        "score": 2,
        "replies": []
      },
      {
        "author": "zulu02",
        "body": "The difference is \"managers\", often guys worth economics degrees that do not understand programming or the product they are trying to sell..\n\nIndtead of making a good product/ implementing an actually helpful tool, we have to do stuff that is supposed to maximize earnings",
        "score": 2,
        "replies": []
      },
      {
        "author": "BadMoonRosin",
        "body": "I love to code AT my work.  I just don't get to spend a high enough percentage of my time doing that.",
        "score": 2,
        "replies": []
      },
      {
        "author": "awh",
        "body": "Is there any reason why Ruby was called \"RB\" in this survey?  It was weird to see \"RB\" and \"RB On Rails\".",
        "score": 2,
        "replies": []
      },
      {
        "author": "Successful-Money4995",
        "body": "The worst part about software is users. That's why I have a side project on GitHub. Just coding, no users.",
        "score": 2,
        "replies": []
      },
      {
        "author": "bwainfweeze",
        "body": "I only like to code outside work *when* I hate my job. \n\nI can almost never find the exact amount of creative freedom I crave at work, but then I also know that degree is optimized for my enjoyment not the people who use my stuff. Everything’s a balance and you can find art and creativity in tweaking that balance. \n\nIt’s only when I’m actually frustrated at work that I find myself wanting to write about code - beyond the rather long things I post here - or write actual code - beyond what you might call a bug fix or a very occasional feature PR to a tool I use at work.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Alokir",
        "body": "&gt;JavaScript (62%), **HTML/CSS** (53%), and Python (51%) remain the most used **programming languages** among developers",
        "score": 2,
        "replies": []
      },
      {
        "author": "__loam",
        "body": "Python being most desirable is surprising. If you've ever worked in a large python codebase, you know what I'm talking about.",
        "score": 2,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[removed]",
        "score": 4,
        "replies": []
      },
      {
        "author": "scufonnike",
        "body": "I cannot stand being told to plumb crud apps together. My work outside that fulfills me more than words can say",
        "score": 1,
        "replies": []
      },
      {
        "author": "zazzersmel",
        "body": "i just hate having to use gui tools to do my job and hack them together with code",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "I don’t. There, i said it.",
        "score": 1,
        "replies": []
      },
      {
        "author": "cowhand214",
        "body": "I like my job for the most part. Other than the fact that there are not enough people for all the work. But God I’m so sick of process and talking about work instead of doing work. If I got to do more programming at my ostensible programming job it would be a real nice change.",
        "score": 1,
        "replies": []
      },
      {
        "author": "tnnrk",
        "body": "That’s why you should do something you are good at but don’t have a passion for and keep the passion stuff for outside of work.\n\nToo bad I’m not even good at the programming part.",
        "score": 1,
        "replies": []
      },
      {
        "author": "imagebiot",
        "body": "I love work….ing with smart people who know wtf they’re talking about\n\nIf we could flush out all these imposters that would really improve my day to day.",
        "score": 1,
        "replies": []
      },
      {
        "author": "SilentMantis512",
        "body": "Big companies and small companies trying to do things they way the __big companies__ do…. There _is_ a happy medium out there, but it’s hard to hear through the majority out there.",
        "score": 1,
        "replies": []
      },
      {
        "author": "all_mens_asses",
        "body": "Don’t like being told what to do? Try the freedom of programming! Where you can get any number of jobs freely being told what to do by an incompetent product team!",
        "score": 1,
        "replies": []
      },
      {
        "author": "lulz85",
        "body": "I am not satisfied with my job but happy with my side project.",
        "score": 1,
        "replies": []
      },
      {
        "author": "treesnstuffs",
        "body": "This was my situation before my current job. Now, I am working on products using the technology I was using in my free time.",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "BitKeeper, Linux, and licensing disputes: How Linus wrote Git in 14 days",
    "body": "",
    "score": 870,
    "url": "",
    "created_utc": 1716505825.0,
    "author": "kendumez",
    "permalink": "/r/programming/comments/1cz6i6h/bitkeeper_linux_and_licensing_disputes_how_linus/",
    "comments": [
      {
        "author": "Top_Substance_6299",
        "body": "&gt;Why not to use sql as backend instead of the tree of directories?\n\n&gt; Because it sucks? I can come up with millions of ways to slow things down on my own. Please come up with ways to speed things up instead.\n\nNever knew he had such strong opinions on SQL lmao 😭",
        "score": 828,
        "replies": [
          {
            "author": "Valiant_Boss",
            "body": "Is that a strong opinion? SQL requires a database and an open connection does it not? I can't imagine the setup required if git were to use SQL",
            "score": 367,
            "replies": [
              {
                "author": "ketralnis",
                "body": "sqlite is a public domain C library. It gives you a SQL API but to [quote them](https://sqlite.org/whentouse.html):\n\n&gt;  SQLite does not compete with client/server databases. SQLite competes with fopen()\n\nI'm not responding to his performance claims but it would have fit this bill so well that sqlite themelves wrote and use [fossil](https://fossil-scm.org/home/doc/trunk/www/index.wiki), a [competiter](https://fossil-scm.org/home/doc/trunk/www/fossil-v-git.wiki) to git based on sqlite.\n\nI'm sure that there are lots of legitimate reasons that Linus might not have wanted to use it, but the setup complexity argument isn't one of them.",
                "score": 285,
                "replies": [
                  {
                    "author": "Scavenger53",
                    "body": "isnt fossil like a whole project management system too? that program is fucking cool",
                    "score": 77,
                    "replies": []
                  },
                  {
                    "author": "valarauca14",
                    "body": "&gt; I'm not responding to his performance claims\n\nWhen his primary gripe was performance you're really burying the lead. sqlite is many things (reliable, compact, well tested), it is not very performant (compared to other sql servers). And don't confuse sqlite handling 1k tuples for the speed that PGSQL handles 10mil.",
                    "score": 115,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 14,
                        "replies": [
                          {
                            "author": "Turbots",
                            "body": "People forget that Git was first developed in 2005, that's almost 20 years ago!\n\nThe iPhone was released after Git to give you a sense of time!\n\nDon't think sqlite (or anything else) was in that kind of state either then...\n\nEither way, I think the point is that Linus wanted zero dependency on other projects and just wanted something blazing fast where he had full control over.",
                            "score": 69,
                            "replies": [
                              {
                                "author": "solrbear",
                                "body": "SQLite 1.0 was released in the year 2000, that's over 20 years ago!\n\nIt released version 3.0 in 2004 also before git development began.\n\nLinus's rationale can be guessed at, but SQLite was around and could have been evaluated if Linus had chosen to do so.",
                                "score": 48,
                                "replies": [
                                  {
                                    "author": "Turbots",
                                    "body": "Holy shit haha that blew up in my face, I thought it was way younger. TIL",
                                    "score": 34,
                                    "replies": [
                                      {
                                        "author": "LordoftheSynth",
                                        "body": "It's always nice to see someone acknowledging a mistake on this sub.",
                                        "score": 14,
                                        "replies": []
                                      }
                                    ]
                                  },
                                  {
                                    "author": "Rakn",
                                    "body": "I don't think there was a need to evaluate it. If you know how the git internals work it's plain as day that sqlite wouldn't be able to compete with these purpose build data structures whose algorithms that operate on it have been optimized by studying the generated assembly code.",
                                    "score": 10,
                                    "replies": []
                                  },
                                  {
                                    "author": "dozure",
                                    "body": "tbh, that is younger than I thought Sqlite was",
                                    "score": 6,
                                    "replies": []
                                  },
                                  {
                                    "author": "antiduh",
                                    "body": "In the yeeeeeear two thoooooousand.",
                                    "score": 7,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "raevnos",
                                "body": "&gt;Don't think sqlite (or anything else) was in that kind of state either then...\n\nfossil, a version control system that uses sqlite for storage (Written by the same people), was first released shortly after git.",
                                "score": 7,
                                "replies": []
                              },
                              {
                                "author": "Vetinari_",
                                "body": "Wait a second, git is only 19 years old?!\n\nI always thought it had been around since, like, the 90s.",
                                "score": 2,
                                "replies": []
                              },
                              {
                                "author": "[deleted]",
                                "body": "[deleted]",
                                "score": -14,
                                "replies": [
                                  {
                                    "author": "dkimot",
                                    "body": "is this a weird newton joke?",
                                    "score": 1,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "valarauca14",
                            "body": "&gt; They claim it's 35% faster than the file system\n\nThey also note this has extremely high variance and many users fail to replicate this.",
                            "score": 14,
                            "replies": []
                          },
                          {
                            "author": "Turbots",
                            "body": "People forget that Git was first developed in 2005, that's almost 20 years ago!\n\nThe iPhone was released after Git to give you a sense of time!\n\nDon't think sqlite (or anything else) was in that kind of state either then...\n\nEither way, I think the point is that Linus wanted zero dependency on other projects and just wanted something blazing fast where he had full control over.",
                            "score": -7,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "aka-rider",
                        "body": "It is ver performant compared to other SQL servers. \n\nThe typical client-server model means read from disk to server’s memory, send over socket to clients memory, decode wire protocol. \n\nSQLite means read from disk. That’s it.",
                        "score": 7,
                        "replies": []
                      },
                      {
                        "author": "crozone",
                        "body": "But is it slower than the filesystem?",
                        "score": 11,
                        "replies": [
                          {
                            "author": "VirginiaMcCaskey",
                            "body": "It depends, since you can't (really) have concurrent writes to a database (even with WAL/WAL2) and for reads you have higher syscall overhead. It's also a lot harder to corrupt the filesystem than it is to corrupt a SQLite database. And depending on your data, SQLite doesn't guarantee things are stored contiguously in memory so if you have a bunch of chunks of bytes that your program can mmap in instead of just calling read/write then you're absolutely paying overhead.",
                            "score": 3,
                            "replies": []
                          },
                          {
                            "author": "valarauca14",
                            "body": "SQLite says that because you need to pay them to see the benchmarks which prove they're exaggerating (sort of, the variance is extremely wide).",
                            "score": 9,
                            "replies": [
                              {
                                "author": "gavinhoward",
                                "body": "This is false.\n\n[Their article][1] includes all of the code to run the benchmarks, and I have done so. In some cases, they undersell the performance relative to the filesystem.\n\nThe irony is that I ran those benchmarks because I am evaluating SQLite as a backend for a VCS...\n\n[1]: https://www.sqlite.org/fasterthanfs.html",
                                "score": 6,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "josefx",
                        "body": "On the other hand filesystems suck at performance. They can handle one file^1 per directory perfectly, maybe two. The moment you have a few thousand you have to manually split your folder into subfolders or you pay the price of the system iterating over every entry on every file open call. An sqlite databse hits that filesystem sweet spot of consisting of one or two files and it doesn't have to create or open new files constantly either. \n\n^1 hence why it is called a file system and not a files system.",
                        "score": -9,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Kaelin",
                    "body": "Git seems to work just fine without sqlite. Seems like the guy knew what he was doing.",
                    "score": 42,
                    "replies": [
                      {
                        "author": "ketralnis",
                        "body": "Oh sure, no argument. I’m just responding to the idea that SQL also means that you need a complex setup",
                        "score": 25,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "AcruxCode",
                    "body": "But was SQLite as established as it is today when Linus made the comment in 2005? Version 3 was released in 2004, so it was probably not such an obvious choice as it is now 20 years later.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "mr_birkenblatt",
                "body": "Git is pretty human readable if you inspect the files. If you use a db you will be forced to always use the db to access any information",
                "score": 60,
                "replies": [
                  {
                    "author": "r_de_einheimischer",
                    "body": "Yeah the files make it much more simple. I like that about git.",
                    "score": 20,
                    "replies": []
                  },
                  {
                    "author": "Chibraltar_",
                    "body": "As if Operating Systems were built to read and write files, weird uh ?",
                    "score": 11,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "I put my database in my kernel filesystem code why should I use another one?",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "chucker23n",
                "body": "SQL is just an interface. You could in theory use it to query a file system as well; it doesn't have to be a binary blob. (Nor does a database have to be defined as being a binary blob.)\n\nIt also doesn't require a connection; SQLite doesn't work that way, and it's just incidental that a lot of SQL engines do.",
                "score": 5,
                "replies": [
                  {
                    "author": "Somepotato",
                    "body": "Look at osquery for an advance usage of sqlite that does just that.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "ddproxy",
                "body": "Yeah, my IDE has to index the git repo history somewhere, doesn't it? Leave the memory guzzling to the masters.",
                "score": 14,
                "replies": [
                  {
                    "author": "mr_birkenblatt",
                    "body": "But that's the beauty of files. Anyone can easily read them. If it was a db then your IDE would need to have an extra set of libraries that access that particular db. If they think they found a better db they can't use that either",
                    "score": 33,
                    "replies": [
                      {
                        "author": "psi-",
                        "body": "Now it has library to access git files instead of library to access git db. Potato potato.",
                        "score": 7,
                        "replies": [
                          {
                            "author": "mr_birkenblatt",
                            "body": "You can open git internal files yourself and you would be able to get what's going on. Try opening a db in a text editor",
                            "score": 5,
                            "replies": [
                              {
                                "author": "carrottread",
                                "body": "You can open db in db browser. Text editor = db browser. Potato potato.",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "mr_birkenblatt",
                                    "body": "dbs are not portable. you don't need to make any assumptions when looking at plain text files. with the db you need to choose the right db. right version. etc. there is a lot of contextual information that is needed to be able to read it. plain human readable files are the best for portability and quick adoption",
                                    "score": 5,
                                    "replies": [
                                      {
                                        "author": "carrottread",
                                        "body": "It's the same with text editors. There are a lot of issues with 'plain text' files. Even after the end of an era of different code pages and encodings. People constantly get burned by text editors getting cr-lf/lf wrong, some too smart editors replacing \" and ' with fancy quote symbols and reformatting numbers according to current local settings.\n\nAnd by the way, most of the files in the .git subfolder are no longer text anyway. You'll need git tools to do anything with them and have all the same issues with needing to know right version to use. I still have nightmares about trying to figure what is going on than different git-lfs versions silently fucked up half of the binary files in the repo.",
                                        "score": 3,
                                        "replies": []
                                      },
                                      {
                                        "author": "loup-vaillant",
                                        "body": "&gt; you don't need to make any assumptions when looking at plain text files.\n\nActually you do:\n\n* Text files are ASCII or UTF8 or similar.\n* Text files data is delimiter based (quotes, brackets, comas…), rather than size based (TLV).\n\nText files are _not_ human readable. Just like any other file, they're just a blob of bits in some persistent storage. To read them you need a special utility that can read text. The reason those utilities don't feel special is because such utilities are everywhere. UNIX was a text operating system from the beginning after all.\n\n&gt; with the db you need to choose the right db. right version. etc. there is a lot of contextual information that is needed to be able to read it.\n\nSame with text. You need to distinguish ASCII from Latin-9 from utf-8… it's just that support for those formats is ubiquitous, unlike databases.\n\n&gt; plain human readable files are —\n\nnot a thing. They *feel* like a thing because no personal computer today lacks the ability to turn them into readable pixels on the screen. But you still need dedicated software to do it.",
                                        "score": 1,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 1,
                        "replies": [
                          {
                            "author": "mr_birkenblatt",
                            "body": "You can look at a csv file and understand it without any tool. You can't do that with a db",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Ouaouaron",
            "body": "The man is at least 80% strong opinions.",
            "score": 179,
            "replies": [
              {
                "author": "fllr",
                "body": "And 5% attitude",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "Dreamtrain",
            "body": "I think he just hates tools not used in their best scenario. He probably doesn't mind you using SQL for a clinic's appointment system or what have you",
            "score": 60,
            "replies": [
              {
                "author": "mr_birkenblatt",
                "body": "sql is not great for representing trees",
                "score": 55,
                "replies": [
                  {
                    "author": "analcocoacream",
                    "body": "From git official docs:\n\n&gt; Git is a content-addressable filesystem. Great. What does that mean? It means that at the core of Git is a simple key-value data store. What this means is that you can insert any kind of content into a Git repository, for which Git will hand you back a unique key you can use later to retrieve that content.",
                    "score": 14,
                    "replies": [
                      {
                        "author": "mr_birkenblatt",
                        "body": "Objects in git reference other objects. It's a big tree structure",
                        "score": 7,
                        "replies": [
                          {
                            "author": "analcocoacream",
                            "body": "They are laid out in a flat directory structure",
                            "score": 4,
                            "replies": [
                              {
                                "author": "mr_birkenblatt",
                                "body": "Yeah, so?",
                                "score": 0,
                                "replies": [
                                  {
                                    "author": "analcocoacream",
                                    "body": "So the tree structure of file system is not being used",
                                    "score": 7,
                                    "replies": [
                                      {
                                        "author": "mr_birkenblatt",
                                        "body": "yeah, how is this relevant? nobody said as much?",
                                        "score": -2,
                                        "replies": [
                                          {
                                            "author": "analcocoacream",
                                            "body": "&gt; sql is not great for representing trees",
                                            "score": 9,
                                            "replies": []
                                          },
                                          {
                                            "author": "Asajz",
                                            "body": "They’re trying to say that since it is a flat key-value system, a SQL database could easily handle a hit structure",
                                            "score": 6,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "What? You mean a single table with recursion???",
                    "score": 21,
                    "replies": [
                      {
                        "author": "Thelmholtz",
                        "body": "If you go for adjacency lists you get slow queries, and if you go for closure tables you get a huge db.\n\nI don't get what the advantage would be over fopen()",
                        "score": 12,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "IO is slower than memory access, always, and modern SQL DBs are mainly in memory when required. This article quotes Linus himself saying speed isn’t a requirement hence going with folders.",
                            "score": -7,
                            "replies": [
                              {
                                "author": "Thelmholtz",
                                "body": "I don't see where he says that in the article, actually the opposite. And also how would you avoid IO when what you are building is a distributed version control system?\n \nAlso IO is not **always**^(1) slower than memory access, it is slower all other things being equal. But that's not necessarily the case here: if you are representing your very, very, very tall tree as an adjacency list or as a closure table in a relational way. In the first scenario you start getting very slow reads, and in the second slow writes and huge memory footprint, which I assume would grow exponentially with tree depth (every time a node M+1 is added, you need to insert a new path between each M node that could have M+1 as a leaf, so I guess not truly exponential but almost?).\n\nOf course, representing a tree in the filesystem is not trivial either, but whether you use SQLite or plaintext files you can't avoid the problem of using IO to put your data in a less volatile medium when your application is literally a convoluted backup system.\n\n^(1): for an exaggerated example, compare running `touch ~/test.tmp` to running something like `python3 -c 'import math; [x**2 for x in range(10000000) if math.sqrt(x) % 7 &lt; 3];'`. The first one is just IO and takes 2.13ms in my system, the second just in memory and takes 1.68s, ~800 times longer. So no, not _always_.",
                                "score": 4,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "&gt;1: for an exaggerated example, compare running touch ~/test.tmp to running something like python3 -c 'import math; [x**2 for x in range(10000000) if math.sqrt(x) % 7 &lt; 3];'. The first one is just IO and takes 2.13ms in my system, the second just in memory and takes 1.68s, ~800 times longer. So no, not always.\n\nYou are not having a good faith discussion when this is your comparison.",
                                    "score": -1,
                                    "replies": [
                                      {
                                        "author": "Thelmholtz",
                                        "body": "Note the _exaggerated example_ words, which warn of this example as being exaggerated.\n\nGit does much slower operations than this in memory all the time though, and travelling a tall tree in an adjacency table can also get pretty slow if you choose that path.",
                                        "score": 2,
                                        "replies": [
                                          {
                                            "author": "[deleted]",
                                            "body": "Hope you don't discuss stuff at work like this",
                                            "score": -5,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "author": "fuscator",
                                "body": "So, your version control system would remain perpetually in background memory?",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "How big do you think local git repositories are?",
                                    "score": -2,
                                    "replies": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "imnotbis",
                    "body": "Nor is a single filesystem directory, which Git uses instead.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": -4,
                        "replies": [
                          {
                            "author": "imnotbis",
                            "body": "A completely dissimilar tree. Does Git store the tree structure of commits in the filesystem tree?",
                            "score": 5,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Kautsu-Gamer",
            "body": "Linus was correct. SQL requites relations between tables, but source does not have required entity relationships.",
            "score": 2,
            "replies": []
          },
          {
            "author": "elderly_millenial",
            "body": "Linus has a reputation for being kind of a dick",
            "score": 2,
            "replies": []
          },
          {
            "author": "Faux_Real",
            "body": "Dependencies and layers",
            "score": 1,
            "replies": []
          },
          {
            "author": "KSRandom195",
            "body": "NIH.\n\nGit reeks of Not Invented Here.\n\nIf you’re determined to invent your own thing why would you beholden yourself to someone else’s code?",
            "score": -11,
            "replies": []
          },
          {
            "author": "zurrdadddyyy",
            "body": "Changing query plans and trying to get efficient runs. Is fuckin aids.",
            "score": -13,
            "replies": []
          }
        ]
      },
      {
        "author": "Ilovevegyn",
        "body": "What a fun read, I appreciate Linus's appreciation of BitKeeper being the best tool of the time, but my god am I grateful git is open and available to everyone for free",
        "score": 246,
        "replies": [
          {
            "author": "Luvax",
            "body": "I still remember the discussions about switching from subversion to git and how everything would become more complicated and how you need to tag commits instead of symlinking them.\n\n* \"Someone could work an entire week without checking in their work\"\n* \"Where is the trunk?\"\n* \"I only want a partial checkout\"\n\nGit really has shaped the modern workflow and I'm very thankfull for it. A single clone and you have the entire history of a project, sometime spanning multiple centuries. Just look at how many people still have the entire yuzu emulator source tree stored.",
            "score": 124,
            "replies": [
              {
                "author": "SpaceMonkeyAttack",
                "body": "&gt; spanning multiple centuries.\n\nWas Ada Lovelace using git?",
                "score": 77,
                "replies": [
                  {
                    "author": "vytah",
                    "body": "No, but Napoleon was: https://archeo-lex.fr/codes/code_civil/1804-03-29/commit",
                    "score": 18,
                    "replies": []
                  }
                ]
              },
              {
                "author": "carrottread",
                "body": "&gt; A single clone and you have the entire history of a project\n\nTechnically, it's not *entire* history, just a history from one specific origin. Because it's *D*VCS there may be many origins with different histories.",
                "score": 20,
                "replies": []
              },
              {
                "author": "marxama",
                "body": "Don't forget the commit freezes!",
                "score": 18,
                "replies": [
                  {
                    "author": "Takeoded",
                    "body": "Wtf is a commit freeze?",
                    "score": 5,
                    "replies": [
                      {
                        "author": "marxama",
                        "body": "So you see, in subversion, there's no such thing as a \"local commit\" - when you commit, that's done by pushing your changes to the One Source Of Truth, the trunk. So e.g. during release periods, there'd be a commit freeze, so noone would push changes to what might be the release candidate or whatever. Use branches you say? Do you have any idea how tricky it is to merge branches?! We don't do that crazy stuff here! \n\n\nAah the bad old days...\n(disclaimer: I was never a subversion expert and I might be misremembering stuff - either way, good riddance to that madness)",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "josefx",
                "body": "Git is great, now if there only was a sane replacement for Git LFS. Every single issue I had with git was caused by lfs.",
                "score": 10,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 3,
                    "replies": [
                      {
                        "author": "josefx",
                        "body": "The git devs. could do me a gigantic favor and break whatever hacks lfs uses for its half assed integration, I wouldn't be forced to use it if it didn't work at all.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "rentar42",
                "body": "What I find interesting that many of the things that were treated like inherent limitations of git ended up just being ... not implemented in the beginning. Treeless/blobless clones solve about &gt; 90% of all use cases where people complain \"but I always have to clone the whole repo even if I only care about a single commit\", but they were implemented *incredibly* late in gits history. I appreciate that there were other priorities, but if you compare git today to git 10 years ago, you'd get a very different set of capabilities.",
                "score": 6,
                "replies": []
              },
              {
                "author": "james2432",
                "body": "man do I ever not miss subversion 🤮",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "duggerinus",
        "body": "the soyjak Linux penguin has me dying lmao",
        "score": 166,
        "replies": [
          {
            "author": "kendumez",
            "body": "I'm sorry!! I had this idea in my head and I couldn't stop thinking about it",
            "score": 50,
            "replies": [
              {
                "author": "Eceleb-follower",
                "body": "Do you have a source of the original image",
                "score": 2,
                "replies": [
                  {
                    "author": "BassSounds",
                    "body": "It sounds like he drew it for the article.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "gaba-gh0ul",
            "body": "He has a name, and it’s Tux!",
            "score": 7,
            "replies": []
          }
        ]
      },
      {
        "author": "SpaceMonkeyAttack",
        "body": "Imagine how different the tech landscape would be if Brendan Eich had a whole 14 days to develop JavaScript.",
        "score": 32,
        "replies": [
          {
            "author": "TheFirstDogSix",
            "body": "\"HAHAHAHAHAHAHAHAHAHAHAHAHAHAHA\" x 1\\_000\\_000\n\nSpaceMonkey, you just unlocked the \"made DogSix spit coffee all over his keyboard\" trophy.  Well done.  Well, well done! 😂",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "CraigTheIrishman",
        "body": "Every time I revisit git's history, I'm amazed at how such a useful, versatile tool (its framework, at least) was cooked up so quickly.",
        "score": 108,
        "replies": [
          {
            "author": "Golden_Chopsticks",
            "body": "Reminds me of this neat article. A lot of great things were built fast!\n\nhttps://patrickcollison.com/fast",
            "score": 60,
            "replies": [
              {
                "author": "imnotbis",
                "body": "You deliver 80% of the functionality and ignore the 20% that costs the other 800% of the time. You also don't make the 80% 10 times as complex just to account for the other 20%. We've all written quick Python (formerly Perl) or shell scripts for things, and sometimes they happen to be widely useful to other people.",
                "score": 26,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 9,
                    "replies": [
                      {
                        "author": "imnotbis",
                        "body": "If they don't like it, they can write their own script, at least if yours has clear interfaces, even if the script itself is terrible. The best code is code you can delete and rewrite if you hate it.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "KinkyKankles",
                "body": "Some of these are mind boggling, borderline unbelievable. Apollo 8 was launched 134 days after NASA decided they wanted to go to the moon?!? How on earth is that even possible with the design, building, and testing?",
                "score": 3,
                "replies": [
                  {
                    "author": "Arkaein",
                    "body": "That one seems a little misleading to me. The Apollo program [started in 1961, had it's first test flight in 1967, Apollo 8 orbited the moon but did not land, and Apollo 11 was the first moon landing in 1969](https://en.wikipedia.org/wiki/Apollo_program#Mission_summary).\n\nSo Apollo 8 was several years in the making, although the full timeline is really no less impressive, going from conception to manned surface landing in only about 8 years.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "KinkyKankles",
                        "body": "Thank you, I had a feeling that it wasn't quite right. I briefly googled it but couldn't confirm anything.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "altivec77",
            "body": "Linus was probably crunching his mind on howto build a tool like git for some time (in the back of his mind). It’s not that idea and code where all done in 14 days.\n\nHe knew exactly what he wanted and did not like about other tools he used and probably studied.\n\nHe knew the workflow he and his direct peers wanted or needed. Where the focus was in a big project and where he and others spend most time (or lost most time). He knew probably exactly how bitkeeper worked underwater.\n\nIf you take that into account you can see why and how it was made. The basic can be coded in 14 days of coding by a top programmer (and that he is).\n\nPeople romance the 14 days… don’t see that the idea took a bit longer to develop.",
            "score": 36,
            "replies": []
          },
          {
            "author": "NotSoButFarOtherwise",
            "body": "The thing about Git is that the underlying idea, representing commits as nodes on a directed acyclic graph, is brilliant (AFAIK most earlier source control systems were more or less a single list of diffs). In the beginning there was some friction because there was a disconnect between the Git idea and what people actually wanted to do with source control. The other brilliant thing about git is the commandlet interface, which means the Git CLI has been getting better over the years, with additions like `git switch` and `git restore`. Github has also played IMO a significant role here, providing a good interface for doing high level source control tasks via Git.",
            "score": 14,
            "replies": []
          },
          {
            "author": "imnotbis",
            "body": "Apparently the first version was pretty terrible, lacking commands like \"checkout\" and \"commit\", which are built on the \"plumbing\" pieces from the first version.",
            "score": 8,
            "replies": []
          },
          {
            "author": "Jonathan_the_Nerd",
            "body": "Keep in mind, the 2005 version of git was extremely primitive compared to the version we're used to.  Git didn't spring forth fully-formed from Linus' keyboard in two weeks.  It's been evolving for 20 years.",
            "score": 3,
            "replies": []
          },
          {
            "author": "Valdrax",
            "body": "Every time I try to remember what the commands are to do things in git, I am not.",
            "score": 6,
            "replies": [
              {
                "author": "WriteCodeBroh",
                "body": "Eventually you realize using Git is just repeating the same 5-6 steps over and over. Then you remember those 5-6 commands and it’s easier.",
                "score": 26,
                "replies": [
                  {
                    "author": "Valdrax",
                    "body": "True, but that same workflow in SVN (or any other RCS-derived VCS) would be maybe 2-4 steps.",
                    "score": -14,
                    "replies": [
                      {
                        "author": "WriteCodeBroh",
                        "body": "Definitely understand SVN for binary files or if you are working alone on a project but I touch the same files as other devs on my team every day. I used SVN in college at an internship on a project with very few devs and I still got bothered on Skype for Business messenger (lol) about checking my files in multiple times a week.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Ouaouaron",
        "body": "Doesn't this mean that by making git, Linus (and likely many others) violated the BitKeeper license?\n\nI feel like I must be misinterpreting something, because that license seems absolutely draconian. Was it really such a good tool that it was worth cutting off any kernel maintainer that might happen to work on (or want to eventually work on) a version control system?",
        "score": 27,
        "replies": [
          {
            "author": "vsuontam",
            "body": "I am also curious on this. Did BK ever try to force \"you can't develop competing version control systems for a year after you used our 'free' version* - clause? And what was the response?",
            "score": 16,
            "replies": [
              {
                "author": "smcameron",
                "body": "The enforcement would have been limited to revocation of the license to use Bitkeeper, which presumably Linus already assumed he could no longer use bitkeeper, having deliberately contravened the license terms and accepted the consequences, saying, according to the article:\n\n&gt; \"NOTE! I detest the centralized SCM model, but if push comes to shove, and we just can't get a reasonable parallel merge thing going in the short timeframe (ie month or two), I'll use something like SVN on a trusted site with just a few committers, and at least try to distribute the merging out over a few people rather than making me be the throttle.”\n\nThe way forward, even in the face of failure, did not permit retreat back to bitkeeper.",
                "score": 3,
                "replies": [
                  {
                    "author": "vsuontam",
                    "body": "Thanks for the clarification. The license revocation clearly was not a thread enough.\n\nThis goes to purely specularive territory. What if BK had a clause with damage claim of milliion or other big sum for developing competing products. Could it be enforceable?",
                    "score": 1,
                    "replies": [
                      {
                        "author": "smcameron",
                        "body": "BTW, from about 2000 to about 2017 I was a linux driver developer doing storage drivers for HP (previously Compaq), so I lived through the transitions from using just tarballs from Linus, then bitkeeper, then git.  Honestly, when bitkeeper came around, for people doing driver developement (most first line contributors to the kernel) it wasn't that big a help, and we mostly continued using the tarballs anyway, except if we needed to explore history to solve regressions.\n\nThe biggest help to the first line driver developers to come along was [Andrew Morton's patch scripts](https://lwn.net/Articles/13518/), as this allowed maintaining a stack of patches atop a source tree, and this helped immensely with the pain point associated with maintaining drivers across many different kernels.  We would have to support a driver for the mainline Linus kernel, kernels for a few different versions of Redhat, Suse, Ubuntu, Caldera, and so on.  The patch scripts made porting changes to all these different kernels bearable.  Those patch scripts eventually caused [quilt](https://en.wikipedia.org/wiki/Quilt_(software\\)) to come into existence, and then once the transition to git happened, quilt became supplanted by [stgit](https://stacked-git.github.io/).\n\nEven when git came around, it continued to be easier for frontline driver developers to use Linus's tarballs as the base to work from with stgit on top to manage your patch sets.  Running \"git clone\" on the kernel source took a long time, much longer than the time it took to download and unpack a compressed tarball.  The kernel/driver APIs weren't (and aren't) stable, but they also didn't really change very much, so it wasn't normally critical to have the absolutely latest available kernel source to work from.  We would still do it from time to time though, especially if we needed to git bisect something.  We would submit our patches upstream via email to the LKML and to the subsystem maintainers (for storage that'd be to either James Bottomley for SCSI drivers, or Jens Axboe for block drivers.)\n\nOne other thing.  The \"don't contribute to competing software\" clause was relevant to me at the time of the bitkeeper transition, because I had *already* previously contributed changes to CVS (though not since about 2002, iirc) as we used it quite a bit at the time internally (eventually transitioned to subversion).  So this clause wasn't just some hypothetical that could be handwaved away with \"oh, that's not something I have any interest in\".  I had *already* done that in the past, and at the time (2005) we were still heavily using CVS internally.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "vsuontam",
                            "body": "Great story, thanks for sharing your thoughts and insights.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "smcameron",
                        "body": "I don't know, I'm not a lawyer, and it likely varies by jurisdiction.  Had such a draconian cudgel of a clause been present, likely lots more people, including Linus, would have refused to use bitkeeper in the first place, as Andrew Tridgell did.  I know I wouldn't use any software with a condition that \"Oh, one last thing, no big deal, but if you contribute to development of any competing software, you owe me a million bucks.\", I know I'd be like, \"get away from me, scumbag.\"",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "mr_bitshift",
                    "body": "You seem like you know some of the history here. Do you know of any reliable sources for the \"one year\" requirement?\n\nI've been trying to find a copy of the license that mentions a one-year period, or anyone writing at the time about a one-year period... but I've found nothing. The only place on the web that it's mentioned is the Wikipedia article (which the linked blog post uses as a source), but the Wikipedia article has no evidence to back up the \"plus one year\" claim.\n\nI've been able to find plenty of stuff about anti-competitive behavior from BitMover ([pressuring a Mercurial developer](https://lists.mercurial-scm.org/pipermail/mercurial/2005-September/004745.html), [2002 article about the license](https://lwn.net/Articles/12120/), etc). But _nowhere_ have I been able to find a version of the non-compete clause that mentions a duration of a year. I'm wondering where that claim came from [[?](https://xkcd.com/978/)].",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "victotronics",
            "body": "He wrote Git after someone violated the license and the Bitkeeper guy retracted the free option.",
            "score": 56,
            "replies": [
              {
                "author": "roelschroeven",
                "body": "Strictly speaking that's not exactly what happened. Andrew Tridgell, the guy who supposedly violated the license, never agreed to the license in the first place, so he can't have broken it. He only ever accessed the publicly available gateway service, for which he didn't need a license.\n\nBut BitMover's CEO Larry McVoy felt Andrew Tridgell's actions were against his view of the deal with the Linux developer community, and retracted the free option.",
                "score": 17,
                "replies": [
                  {
                    "author": "victotronics",
                    "body": "\"He only\". Sure. And that's why we can't have nice things.",
                    "score": -10,
                    "replies": [
                      {
                        "author": "araujoms",
                        "body": "What do you mean? He is precisely the reason why we have a really nice thing (git).",
                        "score": 14,
                        "replies": []
                      },
                      {
                        "author": "roelschroeven",
                        "body": "Honestly I can kinda understand both viewpoints. I get that McVoy didn't desire to see development of competing version control systems, while still wanting to help kernel development by providing bitkeeper to kernel developers.\n\nBut the way things turned out, development of a competing version control system was accelerated instead of slowed down. Could he have seen that coming? Could he have chosen a path more favorable for his company?\n\nMaybe there's an alternate universe where the kernel still uses bitkeeper, while most of the open source community switched to mercurial (or darcs, or whatever) instead of git. Or maybe the end result was inevitable, maybe McVoy did the best thing he could, and it still wasn't enough to save his company. We'll never know.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "imnotbis",
            "body": "Licenses are only worth something if they're enforced, it's easier to ask forgiveness than permission - as long as the \"no\" doesn't involve going to jail - and always treat corporations they way they'd treat you.",
            "score": 11,
            "replies": []
          },
          {
            "author": "altivec77",
            "body": "Patented solution for a problem?\n\nThe License is only needed for using a product and paying for it. \nA patent is for intellectual property for a solution to a problem. Did BitKeeper have the patent for the solution?",
            "score": 2,
            "replies": [
              {
                "author": "Ouaouaron",
                "body": "It's essentially a noncompete clause, except for a licensure contract rather than an employment contract. It's unrelated to a patent.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "xeneks",
        "body": "This is interesting, the simple overview of how git works.",
        "score": 18,
        "replies": []
      },
      {
        "author": "KevinCarbonara",
        "body": "Wasn't Mercurial written around the same time frame but as a superior product? I've never understood why people are so quick to praise Linus for Git.",
        "score": 53,
        "replies": [
          {
            "author": "slappy_squirrell",
            "body": "Not sure why you're getting downvoted. We used mercurial for all our projects back then and it basically kept out of your way. It was also written in python and was easy to extend with python scripts. We then moved to git since \"everyone's doing it?\" idk, but there was a learning curve at that point, reading the git book, tutorials, etc. Didn't have to do any of that with Mercurial.",
            "score": 46,
            "replies": [
              {
                "author": "KevinCarbonara",
                "body": "&gt; We then moved to git since \"everyone's doing it?\" idk\n\nYeah, same. But the more I learn about git, the more I like Mercurial. It's just as flexible, but far more intuitive.",
                "score": 12,
                "replies": []
              },
              {
                "author": "Timbered2",
                "body": "I've always thought Git was over engineered and overly complicated. I've never understood the fan boi stuff either.",
                "score": 16,
                "replies": [
                  {
                    "author": "invisi1407",
                    "body": "I'm a user of Git, and a fan of Git, but I'm not a _fan boi_; I think people who would be either described as such or self identify as such are simply people who are unable to comprehend that alternatives could exist and could be useful.\n\nHaving said that, there's like very few reasons to NOT use Git these days. It works well and everybody knows how to use it or has a tool that does.\n\nSome of those who felt it has shortcomings has done something to fix it; see Git LFS and whatever Microsoft did to handle an insanely large mono-repo where Git only downloads whatever you're working on or allowed to work on, even if it's in the same repo. I forget what it's called or if it's publicly available.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "Timbered2",
                        "body": "Oh, I use it too, but thank goodness for Gitkraken...",
                        "score": 5,
                        "replies": [
                          {
                            "author": "AlwynEvokedHippest",
                            "body": "It's not flashy looking but I still find myself coming back to GitExtensions.\n\nShame that it's not multi-platform.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Padaca",
                    "body": "I don't know anything about mercurial so I can't compare the two, but I think the complexity of git is merited. There's a valid use case for everything you can do with it.",
                    "score": -1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "SittingWave",
                "body": "I had a very negative experience with mercurial. It lost code in more than one occasion.",
                "score": 0,
                "replies": []
              }
            ]
          },
          {
            "author": "victotronics",
            "body": "People I know who I respect and who know both products tell me that ultimate Hg is not as good as Git. But to reach that point you need to have a pretty serious product. I was happy with Hg.",
            "score": 7,
            "replies": []
          },
          {
            "author": "phire",
            "body": "Very much the same timeframe; Mercurial's first version released just two weeks after git. They were both created in response to the same incident, for the same intended usecase. \n\nAs for which was superior?   \nMercurial was closer to the CVS workflow that people were used to (SVN was only 1 year old at the time), and was therefor easier for people to understand and use. It was also somewhat more user friendly. \n\nBut git had a more elegant underlying data-structure that was probably better in the long run.  \n\nGit didn't truly win until github made it popular, and the git+github workflow was far ahead of anything else.",
            "score": 34,
            "replies": [
              {
                "author": "fey0n",
                "body": "I disagree that git has the more elegant data structure... Git is the only VCS that need ls regular compacting/garbage collection for a reason, it's data structure being not so elegant imo",
                "score": 5,
                "replies": []
              }
            ]
          },
          {
            "author": "phrasal_grenade",
            "body": "Because Git is awesome, that's why. Mercurial is much slower and more limited than Git, and it depends on Python (which is a benefit to some people and a negative for others who want a minimal runtime). The fact that such an incredible tool came out of 2 weeks of work is remarkable.\n\nI've used Mercurial extensively and in nontrivial ways, but now I'm fully invested in Git. It's just that much better than Mercurial. It's simple in the right ways and complex in the right ways, and I finally understand all the ins and outs. Everything in it is really straightforward once you take the time to research it.",
            "score": 3,
            "replies": [
              {
                "author": "KevinCarbonara",
                "body": "&gt; Mercurial is much slower and more limited than Git\n\nWhat are its limitations? Most of the time people point one out, I look into it, and it's not a limitation at all. You have to use plugins in mercurial, but most are built in, and it's as simple as adding a single line of text to a text file.",
                "score": 12,
                "replies": [
                  {
                    "author": "phrasal_grenade",
                    "body": "There's no way to fix the speed issue by adding a line to a config file. The plugins are limited and most are out of date because nobody uses Mercurial anymore. See for example the SVN plugins. It is no exaggeration that there are more SVN users than Mercurial users in 2024, as SVN still has distinct advantages on top of being a legacy system that was once the top dog. Of course, Git natively supports SVN with no plugin and does it better than any Mercurial plugin I've ever used.\n\nMercurial does have a couple of nice aspects but nothing good enough to make me advocate for it. I like Python but it's too fast-changing and slow at runtime to be behind the best version control system. Git uses C which is fast at runtime and widely known, with many implementations to choose from. Not only is Git implemented in a great language for what it is, but the implementation is simple. It's so simple that there are other tools building off of the Git backend data, without using Git's own implementation.\n\nGit has submodules, worktrees, and subtrees. Mercurial does submodules (\"subrepositories\") basically the same as Git (as I faintly recall), but it doesn't have subtrees or worktrees. It's so much slower than Git that I can't consider it. If you want to use a system that's almost as good as Git for a small project, and don't care if anyone else is familiar with it, have at it. When Bitbucket, the only major host for Mercurial repos that ever existed, ditched Mercurial, it was a big clue that it's over.\n\nAgain I say this as someone who was basically an expert user of Mercurial. I was way more familiar with Mercurial than Git, because of work. But it's over. I'm not going back if I have any say in the matter.",
                    "score": 8,
                    "replies": [
                      {
                        "author": "harlotstoast",
                        "body": "I have a mercurial repo that is made up of sub repos. If I want to convert it to git, would I use submodules or sub trees?",
                        "score": 3,
                        "replies": [
                          {
                            "author": "Particular-Fill-7378",
                            "body": "Submodules and worktrees are completely unrelated features. Submodules are for grouping repositories. Worktrees are a workflow tool for having multiple checkouts backed by a single git back-end.",
                            "score": 4,
                            "replies": [
                              {
                                "author": "mgedmin",
                                "body": "Git subtrees and git worktrees are two different things.  Subtrees are a possible replacement for submodules.",
                                "score": 6,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "mgedmin",
                            "body": "Personally I've used both git submodules and git subtrees.  They both suck, but submodules are way way worse.  I've converted all of my submodules to subtrees and am much happier.\n\nConceptually they're different things: a submodule refers to a particular commit in an external repository (and you have to use non-default options and commands to actually have git go and fetch that code for you), while a subtree includes the contents of the particular commit from another repository directly in your repository, with some metadata attached.  A subtree can contain full history or just a squashed version with all the differences from the last update, your choice.  The metadata for a subtree does not contain the URL for the external repository, which makes updates somewhat annoying.",
                            "score": 4,
                            "replies": [
                              {
                                "author": "phrasal_grenade",
                                "body": "Submodules are better for if you care about maintaining the upstream subprojects. As you've said, the URLs aren't saved for subtrees. You also just get one branch in the subtree. I think I've imported more than one before but you have to do them individually, and there's problems. The other git tools like git log and various GUIs don't play well with subtrees.\n\nI think most problems people have with submodules are related to:\n\n* Not understanding how to initialize or manage submodule states. There are some recursive flags and config options to help with this.\n* Expecting submodules to track branches. Pinning the submodules to specific commits at all times ensures that updates to your dependencies won't break your dependent project. It's a better default strategy to get working software on the first try. There are commands to track branches in submodules but even if you do, you must commit the new submodule versions in the main project for them to stick. This keeps you from breaking stuff accidentally.\n* Wanting to contribute to submodules and not knowing how. Losing commits in submodules and not knowing how to recover, etc. This is a skill issue.\n\nIf you take the time to really learn submodules, all of this stuff will just click. It shouldn't be so hard if you understand git generally.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "phrasal_grenade",
                            "body": "I've considered writing a blog post about this. I think most people would do better with submodules than subtrees, but it depends on what's in the submodules. Both features maintain a way to push code to the sub repos, however that aspect is worse in subtrees. There are also issues using subtrees with git log.\n\nWhen you want to embed dependencies in your repo, you should ask yourself some questions.\n\n1. If these are *your* subprojects, do you realistically think you will use the subprojects separately in another superproject? If not, don't bother. Make a single repo and put everything in it. You can use subtrees to import the history of the other repos if you like. Keep a copy of the old stuff just in case you need it because you won't get all the branches and tags of the old repo in the parent.\n2. Is your dependency graph simple enough to have each repo pull in its dependencies? For example, will you end up having multiple instances of the same subrepo? If you don't have a simple 1-1 relation with dependencies, don't do it. Manage your dependencies some other way, at a system level. You can store version checking stuff in the repo but not the entire dependencies. Use scripts to find everything.\n3. Are you constantly changing your subprojects inside your superproject? If so, I think neither Git nor Mercurial make this very easy. But Git submodules basically put a copy of a whole Git repo inside your superproject. Each commit of the superproject points to a whole set of revisions of the submodule repos. You can only update the submodules with specific commands. By default the update behavior can be confusing. You get the exact commit  of each submodule that's recorded last in the parent repo. I forgot but I think it might not even update when you update the parent repo.\n4. Are you expecting to work on different branches for your subprojects? If so, subtrees make that hard. You can do it with submodules though. It's not pleasant, because the branch is auxilliary information in the submodule. The thing that counts is the submodule commit hash that you checked in for each parent project commit! It has to be this way because git branches are dynamic and get deleted at times. There is a command to update a submodule using the branch for purposes of staging a change, but you have to explicitly commit a new version to the parent if you want it to stick. You can also just cd into the submodule and mess with it directly, to stage a change. Then you cd out and do `git add ... &amp;&amp; git commit` to finish.\n4. Are you using Git worktrees? If so, submodules can be tricky to work with. I think it gets tricky when adding a submodule or changing a URL to something incompatible. I've been doing it, and I think it's fine if you don't fundamentally change your submodules much. I think if you do have a problem and can't figure it out, you can nuke all your worktrees and start over from the latest version. But practically this can be a major problem for some people who require frequent submodule changes. In their case, they should find a different way to manage dependencies, or else stop using worktrees. In addition to these caveats, the submodules are not shared across worktrees. Each worktree has its own copy of the sub repos, even if they are all identical. It has to be that way because the submodules in different versions of the parent can point to different repos.\n\nIf you are used to using Mercurial subprojects, you probably want to use Git submodules. Have a look at permanently setting the \"recursive\" update options for checkout, clone, and whatever else, especially if you aren't actively contributing code to the submodules. It saves a lot of trouble related to forgetting to restore the submodules to the required state. Unfortunately, that setting must be set on a per-user basis. So you may have to educate everyone about it. See `fetch.recurseSubmodules`, `status.submoduleSummary`, and `submodule.recurse`, and any other setting that looks useful to you in here: https://git-scm.com/docs/git-config\n\nAlthough submodules work, many projects I've worked on abandoned submodules for reasons I mentioned before. You really have to have a use case where it makes sense and a set of willing/educated users. If your coworkers are not willing to read up on submodules, they will resist it and you'll be forced to come up with something else. In one place I worked, I converted our submodule system into one giant repo via subtrees. But subtrees are one of the lesser-used git features. You should play around with it before taking the dive with that, as it may be trickier than you expect. You can experiment with a scratch copy of the repo offline to see if subtrees work well enough for you. Mainly, there are issues with logs and I think that's because the feature is immature. But it's a nifty idea for more or less permanently merging separate repos. Once you do it, the parent repo has the subrepos history (for like one branch) embedded, and you treat the whole thing as one repo going forward, generally. As I said, it is *possible* to push stuff back to the original subprojects via subtree commands, but it is janky. So if you need that, use submodules instead of subtrees.\n\n**TL;DR:** You almost certainly want submodules. Look into recursive submodule command options in git config documentation to make it easier. Rare submodule modification issues can usually be fixed by reinitializing the submodules or else starting with a fresh copy of the parent.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "KevinCarbonara",
                        "body": "&gt; There's no way to fix the speed issue by adding a line to a config file.\n\nI have literally never in my entire life had a speed issue with a VCS. Mercurial could be 10x slower than Git, and I'd never notice, because the network call is still going to be 99% of the lag in any operation.\n\n&gt; The plugins are limited and most are out of date because nobody uses Mercurial anymore.\n\nThe plugins are part of the core product. They couldn't possibly be up to date. And plenty of people use Mercurial.\n\n&gt; Git natively supports SVN with no plugin and does it better than any Mercurial plugin I've ever used.\n\n[Mercurial supports this](https://wiki.mercurial-scm.org/HgSubversion), and I'm pretty sure it's been supported for longer than it has been in git.\n\n&gt; Git has subtrees, submodules, and worktrees. Mercurial does submodules (\"subrepositories\") basically the same as Git (as I faintly recall), but it doesn't have subtrees or worktrees.\n\nYou're probably right about this. Git branching is implemented differently. I used Git submodules once, and I never will again. They're implemented terribly. I've never even seen anyone use a worktree.",
                        "score": 0,
                        "replies": [
                          {
                            "author": "phrasal_grenade",
                            "body": "&gt;I have literally never in my entire life had a speed issue with a VCS. Mercurial could be 10x slower than Git, and I'd never notice, because the network call is still going to be 99% of the lag in any operation.\n\nGood for you? I work on projects where Git takes 10 seconds to get the status of the repo almost every time. And Git is blazingly fast compared to Mercurial. It's not just at this job I've had this speed concern either... It's been a real problem at every job I've worked since the one that used Mercurial.\n\n&gt;The plugins are part of the core product. They couldn't possibly be up to date. And plenty of people use Mercurial.\n\nActually, yes they could. The instability of the core product is what breaks these plugins. Nobody fixes them because nobody wants them. Even the original authors abandoned them, presumably to use Git.\n\nThere are many more Git extensions in the world than Mercurial extensions. You are far more likely to find one that works for what you want than to find the same thing, much less in a working state, for Mercurial.\n\n&gt;[Mercurial supports this](https://wiki.mercurial-scm.org/HgSubversion), and I'm pretty sure it's been supported for longer than it has been in git.\n\nThat is exactly what I'm talking about. Last time I tried to use it, the thing didn't work. There's two plugins to support SVN in Mercurial, as I said, and neither of them worked for me as of a couple of years ago. Git on the other hand has this function baked in, ever since I remember, and it actually works pretty well. There are warts related to interfacing these VCS systems with SVN, as SVN is different. But anyway, the bottom line is Git does this way better than Mercurial.\n\n&gt;You're probably right about this. Git branching is implemented differently. I used Git submodules once, and I never will again. They're implemented terribly. I've never even seen anyone use a worktree.\n\nBranches in Git are different, but it's fine once you get used to it. Branches are basically equivalent to [Mercurial bookmarks](https://wiki.mercurial-scm.org/Bookmarks). Tags are pretty much the same. Anonymous branches aren't really a thing, but you can have an unnamed branch temporarily. The dreaded \"detached HEAD\" is just an anonymous branch that you can play with. Even if you forget to give it a name before switching branches, you can almost always recover by consulting the reflog. I kinda miss hg graft, \"tip\", and relatively simple commit IDs. But you can get by with only git cherry-pick and rebase. Git has everything you need and then some. I believe there are git plugins to replicate some of hg's finer points if you want but I never bothered.\n\nGit submodules aren't my favorite thing but they work for some applications such as managing a simple tree of dependencies. Worktrees are excellent, as they let you have many copies of the code on disk and to transfer changes easily (as all the worktrees share the same underlying data). It's really a killer feature for large repos and testing multiple versions of stuff that takes hours to check or lots of time to clone. Also, it is worth noting that if you clone from a shared filesystem, git can make hard links on your disk, potentially saving space. You can turn the feature off if you like but I think it's safe in most cases.\n\nThere's another killer feature in Git that I forgot about, that I don't think Hg has. It is the option to execute a program after arbitrary steps of a rebase. Have you ever had a large number of patches, fixed merge conflicts, and find that you now have 10 changesets that you don't even know compile? You can insert a build/test command and have Git run it after applying each patch. When it fails, the thing can stop for you to fix your patch. It should be simple enough to make a Hg equivalent but I never heard of it while I was using Hg.\n\nHonestly I wouldn't be upset if I had to use Mercurial today. It can work for some use cases, like many other VCS systems. But very few people still use it. If I start a new project today, it's using Git. It's hard to imagine needing anything else at this point.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "EatMeerkats",
                        "body": "&gt; The plugins are limited and most are out of date because nobody uses Mercurial anymore.\n\nSure, nobody except Meta and Google…",
                        "score": 0,
                        "replies": [
                          {
                            "author": "phrasal_grenade",
                            "body": "That's very misleading. Google and Meta probably have a few instances of lots of random open source projects rattling around, especially as they incorporate small codebases from outside. But I know for a fact Google and Meta are not primarily using Mercurial. They use internally developed solutions. I think the one at Facebook is called Sapling and the one at Google is called Piper. There are probably multiple internal tools inside each of these companies, in addition to every other thing that ever had a shred of popularity, because they are companies with tens of thousands of employees.\n\nThere are very few companies and projects still using Mercurial, and most of the ones that do are looking to get away from it. Individual small projects may be hanging on stubbornly to oddball solutions, but at the end of the day they're just being oddballs. For example, look at Sqlite and Fossil. There are only a handful of contributors to Sqlite and they insist on using their homebrew VCS. And it's ok, for the most part. It never stopped anyone from using their stuff.\n\nIt doesn't really matter to most people what VCS system they use. They all support basically enough features to get work done. There are probably a dozen open-source ones to choose from, and many other closed-source ones. But Git has been the predominant one for at least a decade, and that's unlikely to change. So use other solutions if you want, but expect that to cause friction when working with others.",
                            "score": 0,
                            "replies": [
                              {
                                "author": "EatMeerkats",
                                "body": "https://engineering.fb.com/2014/01/07/core-infra/scaling-mercurial-at-facebook/\n\nGoogle now uses Mercurial on top of Piper for the monorepo (new hires are taught Mercurial and not the old Perforce clone interface), so yes, it is used *daily* across Meta and Google for their main repos, not just random small ones.  Google used to have git5 on top of Piper, but they deprecated it and *moved* to Mercurial.",
                                "score": 0,
                                "replies": [
                                  {
                                    "author": "phrasal_grenade",
                                    "body": "Nice, but that's from 2014. I too was using Mercurial back then, and I just don't buy it is still popular there. Even if I did, their setup is not anyone else's setup. You don't have their custom Mercurial engine, and the default one sucks.\n\nAs for Google, here are slides from a 2023 Mercurial conference about Piper and Mercurial. Hint: It's not going well, and won't without completely re-engineering Mercurial: https://mercurial.paris/download/Mercurial%20at%20Google.pdf\n\nPerformance is awful because of Python, and Mercurial is not built to work with their distributed infrastructure. They specifically say it does not scale to monorepo level and I think that means it's dead in the water, because they *have* a working system now (whatever that may be). Those are practically insurmountable problems for Mercurial and I don't expect the handful of naive advocates of Mercurial over there to finish that. Google just fired their top Python guys as well so I wouldn't hold my breath for this new and improved rewrite of Mercurial to come out of there. It's just like that project from years ago to rewrite Mercurial in Rust: It's an ill-conceived project that is doomed to fail, probably announced by some noob with more time than brains.\n\nEven if Google does build a DVCS that resembles or replaces Mercurial, you probably won't get it. Like Bazel vs. Blaze it will be a bespoke solution with half of it or more remaining internal, and the burden of switching *your* projects to it will never make sense because either Git or Mercurial are all you need.\n\nI've got to give it to you, I didn't expect there to be a Mercurial conference in 2023 lol.\n But that doesn't mean a lot. The handful of Mercurial people left are vocal like Haskellers or Lispers. I advocated for and tried to use Mercurial for a while after I was no longer required to use it. I eventually gave it up when I realized that Git is better, faster, and 20x more popular (at minimum). I have no more reason to advocate for Mercurial because Git does everything I need better than Mercurial.",
                                    "score": 0,
                                    "replies": [
                                      {
                                        "author": "EatMeerkats",
                                        "body": "Like I mentioned, *all* new hires are taught Mercurial on Piper (Fig) at Google. You're far underestimating the amount of usage there is, and it performs just fine for daily use (I use it every day).",
                                        "score": 1,
                                        "replies": [
                                          {
                                            "author": "phrasal_grenade",
                                            "body": "Did you read those slides? I would like to know how they overcame the performance problems mentioned a year ago. The dude working on the system specifically cited performance problems, so I'm going with that.\n\nIf you're right about Google, perhaps you are using a heavily modified Mercurial. That won't make the publicly available Mercurial more suitable for anyone else. This would require at least a major version breakage.\n\nI last used Mercurial for a nontrivial project about 5 years ago and at that time it was unacceptably slow compared to Git. And that was a tiny project compared to Google's monorepo. The problem of \"upgrading\" Mercurial's implementation to be faster is very difficult because it is based on Python, which is 100x slower than C at minimum. You could do it by fundamentally rewriting the back end with a new engine that is less Pythonic, but that would likely require breaking binary compatibility with old Mercurial repos. I'm not saying it's impossible but it's kind of insane to ask this of a DVCS. There would either be incompatible versions or else fancy translation layers. So in summary, if you are right, Google probably isn't using Mercurial but a heavily modified version of it. They are probably not required to distribute their changes for an internal-only modified version of Mercurial. Although I have not investigated recent changes to Mercurial, I very much doubt the current version is capable of what you see internally at Google.\n\n(By \"binary compatibility\" I mean, Mercurial uses Python to store data, even with such things as `pickle` if I recall correctly. The implementation and even some features are fundamentally tied to Python and should not be replicated in another language. This means, the way data is stored on disk and on the wire is dependent on a Python implementation, and you can't just ditch that easily. There isn't a specification either. So either you come up with a new spec and cobble it together, or you reverse-engineer the old one.) \n\nThanks for sharing. It's cool to find out what people are using, even if I can't use it lol. I'm gonna stick with Git until it becomes unpopular or something much better emerges. Right now, Mercurial isn't looking better and it certainly isn't more popular.",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "mgedmin",
                    "body": "And then you upgrade your Mercurial version and the plugins stop working, and then you have to upgrade the plugins and hope they've already been updated to be compatible with the last Mercurial release.\n\n... or am I thinking about Bazaar?  I've used all three and am really happy I no longer have to use Bazaar or Mercurial.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "KevinCarbonara",
                        "body": "&gt; And then you upgrade your Mercurial version and the plugins stop working\n\nThis never happened to me. The plugins are part of the project, they're not going to push a new update without getting it to work.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "happyCuddleTime",
            "body": "Could be the network effect. Lots of people have chosen git which leads to other people choosing it and so on",
            "score": 1,
            "replies": [
              {
                "author": "KevinCarbonara",
                "body": "That's certainly why I use git. I'm not going to force everyone else to learn my preferred system. Still, I bristle at all the praise Linus gets for writing Git so quickly, as if it doesn't show. The entire reason new grads think source control is complex is because Git is so unintuitive.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "shizzy0",
        "body": "PERSONAL LESSON: Don’t piss off Linus Torvalds. \n\nCOLLECTIVE LESSON: Just wait for someone else to piss off Linus Torvalds.",
        "score": 28,
        "replies": []
      },
      {
        "author": "luciusquinc",
        "body": "Well, it was more fun during that time on Slashdot with live spat between kernel/OSS developers, Bitkeeper owner and the goat Linus himself. LOL. I still remember fondly my new 256kbps DSL modem that time.",
        "score": 23,
        "replies": []
      },
      {
        "author": "victotronics",
        "body": "Good article. Even though it's relatively recent history, I'm always surprised never to hear Bitkeeper mentioned.",
        "score": 10,
        "replies": []
      },
      {
        "author": "spacelama",
        "body": "What a time it was.  And now I have badger badger mushrooms, mushrooms running around my head.  That was a fun week.",
        "score": 11,
        "replies": []
      },
      {
        "author": "chucker23n",
        "body": "Can we not do the \"wrote it in 14 days\" kind of lionizing in the future?\n\nHe wrote _an early version_ that was perhaps good enough for his needs at the time. It didn't even have `checkout` or `commit` yet.",
        "score": 6,
        "replies": [
          {
            "author": "nekokattt",
            "body": "How did it work without commit?",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "vsuontam",
        "body": "Did BK ever try to force \"you can't develop competing version control systems for a year after you used our 'free' version* - clause? And what was the response?",
        "score": 3,
        "replies": []
      },
      {
        "author": "ResidentAppointment5",
        "body": "git’s popularity is a really striking example of Stockholm syndrome. The UX is a nightmare, and the only reason developers tolerate it is we’re used to learning the guts of UX nightmares well enough to get by.\n\nThankfully, you can use [Sapling](https://sapling-scm.com/) to interact with git repositories, but with a vastly superior UX.",
        "score": 7,
        "replies": []
      },
      {
        "author": "SubliminalPoet",
        "body": "And then, Bitkeeper became opensource: [https://www.bitkeeper.org/](https://www.bitkeeper.org/) \n\nToo late !",
        "score": 2,
        "replies": []
      },
      {
        "author": "ROGER_CHOCS",
        "body": "If he had only taken the time to think it out better, especially the language, it would be a much better experience for everyone. Classic case of a developer thinking they know everything.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Fisher9001",
        "body": "Shame it has such a weird UX though. Thank god for the modern GUI clients.",
        "score": 1,
        "replies": []
      },
      {
        "author": "BassSounds",
        "body": "Good read",
        "score": 1,
        "replies": []
      },
      {
        "author": "gdf8gdn8",
        "body": "One design flaw. Linus used sha1 instead of sha256 or made extensible.",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "You probably don’t need microservices",
    "body": "",
    "score": 854,
    "url": "",
    "created_utc": 1715776632.0,
    "author": "_bvcosta_",
    "permalink": "/r/programming/comments/1csjrjn/you_probably_dont_need_microservices/",
    "comments": [
      {
        "author": "[deleted]",
        "body": "I agree with the premise -- most companies don't need microservices. Most companies will never scale to need or benefit from microservices. If you are a dev that has at most a 100k users and you don't have five nine uptime requirements, sure ship that NodeJS/Ruby/Python monolith. \n\nThe problem is not the micro services architecture, but that junior to mid level devs are reading the tech blogs and listening to conference talks given by the FAANG and similar scale companies that need microservice architecture due to scale AND organizational dynamics. I wish that for each conf talk that boils down to \"we improved our scale by ludicrous amounts by....\" they have caveats identifying the use case. \n\nAnd then you have the devs that want to work for crazy scale companies who want to pad their resume by saying they are a distributed systems engineer.\n\nBut much like programming language, the question of whether or not to do microservices, is a question of the right tool for the job. I have worked with monoliths, large boulders to microservices -- the trick is to consider the architecture that's needed. Sometimes that's microservices, and other times it's a monolith.",
        "score": 546,
        "replies": [
          {
            "author": "Polantaris",
            "body": "Exactly, I've said similarly the last time a \"Microservices are bad,\" article came up. You need the right tool for the right job.\n\nIt doesn't help that five years ago, every article was, \"Microservices are amazing!\" Everyone read it and adopted without thinking.\n\nThere's also the problem of \"Too many microservices,\" which is a different problem people fail to identify. The answer to \"too many\" isn't always \"none at all.\" Everything in moderation.\n\nThese decisions always need to be thought through, but it is my experience that the vast majority of developers put a lot of stock into blog articles and other postings that cannot possibly take your scenario into account, yet follow those blogs as if they were.",
            "score": 135,
            "replies": [
              {
                "author": "_bvcosta_",
                "body": "I agree with everything you said.\n\nJust a note that this article is not a \"microservices are bad\", it's a \"microservices are not always what you need\" kind of article. ",
                "score": 56,
                "replies": [
                  {
                    "author": "Polantaris",
                    "body": "&gt; Just a note that this article is not a \"microservices are bad\", it's a \"microservices are not always what you need\" kind of article. \n\nFair enough, I jumped to an invalid conclusion there. Apologies for that.",
                    "score": 21,
                    "replies": []
                  }
                ]
              },
              {
                "author": "wildjokers",
                "body": "&gt; Everyone read it and adopted without thinking.\n\nIn most cases they didn't actually adopt µservice architecture, they misunderstood the architecture and adopted what they thought to be µservice architecture. In most cases they ended up with a distributed monolith. All the complexity, none of the value.",
                "score": 18,
                "replies": []
              },
              {
                "author": "edgmnt_net",
                "body": "IMO the bigger problem is most projects rarely spend resources trying to figure out robust boundaries and microservices. Most splits occur along business concerns, which is a very bad idea. Just because you have a feature and you can outsource development it doesn't mean it makes a good microservice. So even 2 microservices can be one too many. A good litmus test is whether or not that functionality can stand on its own as a properly versioned library with decent stability and robustness guarantees; if it cannot, what makes you think it makes a decent microservice? So many projects end up with a random number of microservices and repos that simply slow down development and cause loads of other issues (lack of code review, lack of static safety across calls, having to touch 10 repos for a logical change etc.) instead of helping in any meaningful way.",
                "score": 7,
                "replies": [
                  {
                    "author": "rodw",
                    "body": "&gt; A good litmus test is whether or not that functionality can stand on its own as a properly versioned library with decent stability and robustness guarantees; if it cannot, what makes you think it makes a decent microservice?\n\n\nWait people do that?\n\nI agree that's a good litmus test, and I've seen my share of sub optimal \"factoring\" of responsibilities between microservices, but I guess I've been lucky enough to never encounter a system that includes services that would obviously fail that test.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 9,
                "replies": [
                  {
                    "author": "Chii",
                    "body": "&gt; recruiters demanding 1-2y of experience in \"RxJava\"\n\nwhich is good, because you know to avoid those places (or at least avoid those recruiters who do this)",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "KaneDarks",
                "body": "Same absolutes like saying that one language is superior, or forcing agile &amp; scrum everywhere top-down",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Scalability isn't the only benefit of microservices, the independent deployability of microservices can help regardless of the number of users.\n\nI split up a small application into microservices. It was originally developed as a monolith, and implemented several related services, so originally running them all in the same process made sense. \n\nBut, some of the services are running long running jobs and some of them finish quickly. Every time I'd make a change to the quick services and I wanted to deploy, I'd have to check if there were any users that were currently running long running jobs, since obviously redeploying the application would trash their work. So, I split the application into separate services, each long running service getting its own microservice and the short running stateless services bundled together in their own microservice.\n\nIt all boils down to requirements. You may not have the scaling requirements of a FAANG, but there are other requirements that benefit from microservices. \n\nAs usual, think about what you are doing, YAGNI and don't throw out the baby with the bathwater.",
            "score": 76,
            "replies": [
              {
                "author": "Manbeardo",
                "body": "TBF, the F part of FAANG gets huge productivity wins by having most traffic enter the system through a well-tooled monolith. Teams whose scope fits inside of that monolith don't have to worry about deployment management or capacity planning. They land code and it either shows up in prod a few hours later or it gets backed out and they're assigned a ticket explaining why.",
                "score": 10,
                "replies": []
              },
              {
                "author": "FlyingRhenquest",
                "body": "They force you to write code in small, easily testable and reusable chunks. Which we should have been doing anyway, but no one ever does. If we put similar effort into monolithic code that we do for Microservices, we'd probably see similar results.\n\n\nI'm increasingly moving toward writing small libraries that I can just \"make install\" or package to be installed with the OS, and my toolbox of things I can just reuse without having to reinvent the wheel on every project just keeps getting larger. Then we start running into the C++ dependency management problem, but that's  another problem. I think it might be a law of nature that there are always more problems.",
                "score": 29,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "&gt; They force you to write code in small, easily testable and reusable chunks.\n\nNot necessarily. Microservices don't force you do this, and you can end up in an even worse hell called a distributed monolith.",
                    "score": 52,
                    "replies": [
                      {
                        "author": "FlyingRhenquest",
                        "body": "Ugh, tightly coupled microservices. The ninth circle of programming hell.",
                        "score": 25,
                        "replies": [
                          {
                            "author": "FRIKI-DIKI-TIKI",
                            "body": "It is like the old DDL hell only the DDL is over -&gt; there on that computer and somebody can change it without installing new software on the computer over here &lt;- then, but bug manifest in almost any corner of the endless dependencies, maybe not here or there.",
                            "score": 5,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "ProtoJazz",
                        "body": "Yeah, though there's sometimes that it's OK for both to replicate or care about the same thing, in general your services should handle discrete parts of the operation\n\nSometimes it's not possible entirely. Just for an arbitrary example let's say you have 3 services\n\nA storefront/e-commerce service\nA checkout service\nA shipping service\n\nThe e-commerce service should only care about products\n\nCheckout should only care about payments and processing an order\n\nShipping should worry about shipments and addresses\n\nNow let's say you add a new service that needs to talk to a 3rd party service. It needs to update data with the 3rd party any time products or addresses are updated. It doesn't make sense to have the product and address services talking to the 3rd party and replicate that, especially if they largely don't care or have nothing to do with it.\n\nBut a good option can be having those services broadcast updates. They don't have to care about who's listening so they don't need to be tightly coupled. It's all on the listeners to deal with.\n\nLike ideally yeah you want stuff all split up, but the reality is you'll frequently come across things that just don't fit neatly into one service and will have to either replicate things, or find a good solution to avoid it.",
                        "score": 6,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "None of this implies that the services need to run in separate processes.\n\nThe problem is that sometimes people think they can use microservices as a way to avoid poor design because bad design is somehow \"harder\". It boggles my mind that there are people who think a deployment strategy can ever substitute thinking and diligence to ensure proper architecture.",
                            "score": 6,
                            "replies": [
                              {
                                "author": "ProtoJazz",
                                "body": "One the big things I think they do solve is just ownership of stuff\n\nBut it can be as much of a negative as a plus\n\nIt's a lot easier to have clear ownership over a microservice than a part of a monolith",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "SanityInAnarchy",
                    "body": "We'd see similar results for modularity, maybe. But there's an advantage in a medium-sized company that I think would be more difficult to do in a monolith: Each team can have their own rollout cadence. And if one service is having problems, that service can be independently rolled back to a known-good version.\n\nOf course, if we really wanted to, we could do all that with a single binary, just have a link step in your deploy pipeline. But I think at least process-level isolation is useful here, so it's very clear which module is causing the problem and needs to be rolled back.\n\nEven this, though, requires a single application built by enough different teams that this is a problem. For a smaller company, just roll back the whole monolith, or block the entire release process on getting a good integration-test run. But at a certain size, if you did that, nothing would ever reach production because there'd always be something broken *somewhere.*",
                    "score": 4,
                    "replies": []
                  },
                  {
                    "author": "Worth_Trust_3825",
                    "body": "&gt; They force you to write code in small, easily testable and reusable chunks.\n\nOh, how do I reuse a ruby snippet in my c# application?",
                    "score": 6,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "Define a service API, if it makes sense.\n\nOr, use IronRuby.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "resolvetochange",
                    "body": "&gt; But no one ever does\n\nWe have countless real world rules / regulations / designs that are meant to get people to do things they should already be doing but don't when there's an easier option. Ignoring the scale/resource aspect, just having clearly defined boundaries and forcing smaller sizes / modularity at the company / architecture level makes it more likely that I can walk away from a project and come back without it being messed up. That's worth it in my book.",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "_bvcosta_",
                    "body": "&gt; Then we start running into the C++ dependency management problem, but that's another problem.\n\nI believe dependency management is one of the most challenging problems in software engineering. And we didn’t quite figure out how to solve it. I’m unfamiliar with modern C++. How does it deal with the diamond dependency problem?",
                    "score": 2,
                    "replies": [
                      {
                        "author": "FlyingRhenquest",
                        "body": "C++ doesn't deal with dependencies at all. There are N C++ build systems, some of which tack it on (or at least try to) with varying degrees of success. Some of them, like CMake (which seems to be the defacto standard,) can also build OS install package for various operating systems.\n\n\nCMake built their own language, which is awful. So you have to meticulously craft your cmake files and figure out how you're going to deal with libraries that you may or may not have installed. And if every single library maintainer out there managed to build pristine CMake files that set up all the stuff that needs to set up so you can just tell CMake to find the library and it just works, the terrible custom language would be pretty tolerable to live with. Otherwise, expect to spend a lot of time dicking around with CMake instrumentation, chasing down global variables and trying to guess what properties the internal commands are reading so you can get some idea of why your build is breaking.\n\n\nWhen CMake does work, it seems to be able to do a pretty good job of arranging the dependency tree so that everything builds in the correct order, for anything I've tried to build anyway. It just seems to take a monumental effort to get it to the point where it always just works.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Zardotab",
                    "body": "It's quite possible to **use the existing RDBMS to split big apps** into smaller apps, if it's determined that's what needed. It's usually easier to use your existing RDBMS connections and infrastructure to communicate instead of adding JSON-over-HTTPS. Often you want log files of transactions and requests *anyhow*, so the \"message queue\" table(s) serve two purposes. (A status flag indicates when a message has been received and/or finished.)\n\nAnd stored procedures make for nice \"mini apps\" when you don't need lots of app code for a service.\n\nMost small and medium shops settle on a primary RDBMS brand, so you don't have to worry much about cross-DB-brand messaging, one of the alleged advantages of JSON-over-HTTPS over DB messaging.",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "[deleted]",
                    "body": "Microservices don't have anything to do with this. What you are talking about is simply separation of concerns. You can do this in many different ways in all sorts of architectures.\n\nMicroservices are a particularly vague marketing term that generally came about alongside technology like kubernetes and have been since decoupled from that and sold in so many different but always extraordinarily obfuscated ways that there is no meaning to the term whatsover.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Tiquortoo",
                "body": "Scalability of the app isn't always even a result of microservices. Scalability of dev throughput is arguable. Splitting a monolith into a couple of things with different deployment cadences and usage patterns isn't even microservices. Some variation of modular (deployed) monolith (codebase) is often more useful.",
                "score": 4,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "Yes, but how are you splitting the services and how are you handling IPC where there was only a direct method call before? You've said something is \"more useful\" without explaining how to do it.\n\nIt is better to think of microservices as a set of architectural, communication and deployment patterns than a thing that \"is\" or \"is not\".",
                    "score": 2,
                    "replies": [
                      {
                        "author": "Tiquortoo",
                        "body": "I understand your encouragement to think of microservices as a \"set of architectural, communication and deployment patterns\", but it has an implication of fine grained service definitions that meaningfully differentiate from traditional service decomposition. Decomposing services isn't new. Microservices is a particular flavor of service decomposition and it's useful to understand if something is or is not something, even when there is ambiguity, when discussing alternative choices especially when we have perfectly valid and distinguishing names for the other things.\n\nFor instance, an alternative, and often perfectly viable solution is to multiply deploy the exact same app. Then expose endpoints, jobs scheduling, etc. for each via service, domain, lifecycle, etc. via some other method. This often requires almost zero rework of the app and only effects the service endpoint layer. It's definitely not microservices, neither is it exactly monolith deployment, but it very much meets the goal of many service decomposition projects.",
                        "score": 3,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "&gt; For instance, an alternative, and often perfectly viable solution is to multiply deploy the exact same app. \n\nThrough feature flags, which conditionally shut down parts of the app you don't want running? I hope that's not what you mean.\n\nI inherited an app like that where we disabled some features that weren't necessary in certain environments. The application had a bunch of feature flags as command line arguments to control what we wanted to run in which environment. It was stupid, because it often lead to deployment errors when we made a mistake setting the flags. Feature flags even destroyed a company, Knight Capital.\n\nThat app became so much easier to manage when I split it into microservices. And it wasn't really even hard, because many of the services were independent anyways, they just happened to be sharing the same binary because it was easier to put them there. The result was a much less complicated apps, even if there were a few more of them.",
                            "score": 2,
                            "replies": [
                              {
                                "author": "Tiquortoo",
                                "body": "I think we're talking past each other a bit and Reddit conversations aren't a good way to suss out details of complex choices. I'm glad your project worked out for you.",
                                "score": 4,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "drmariopepper",
                "body": "This, you also don’t need to retest everything on every deployment",
                "score": 2,
                "replies": []
              },
              {
                "author": "edgmnt_net",
                "body": "That's easier said than done, because if you end up with a highly coupled system you'll have to redeploy mostly everything anyway, every time you make a change. And you can scale a monolith and do gradual rollouts just as well. Simply going with microservices does not give you that benefit unless you do it well.\n\nGiven how most projects are developed, I conjecture it's a rather rare occurrence that microservices are robust enough to avoid coupling and redeployment when anything non-trivial changes. Furthermore, it also happens to hurt static safety and local testability in practice if you're not careful, so you could easily end up having to redeploy stuff over and over because you cannot validate changes confidently.",
                "score": 2,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "You're describing a distributed monolith, which isn't a necessary consequence of using microservices, and a sign you've done something horribly wrong. \n\nProperly isolated microservices won't require you to redeploy everything. Which is why understanding things like DDD is very important, and not just for microservices.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "WTF_WHO_ARE_YOU_PAL",
            "body": "There's a middle ground between monolith and microservices. You can take a few large, core components and seperate them out without them becoming \"micro\"",
            "score": 8,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 14,
            "replies": [
              {
                "author": "Automatic-Fixer",
                "body": "&gt; What makes most sense to me is to have boundary based on organizational level i.e. you don't want multiple teams modifying the same repo as it leads to stepping on each other's toes.\n\n100% agreed. The teams I’ve worked on and with that leveraged microservices were primarily due to organizational setup / constraints. \n\nTo me, it’s a great example of [Conway’s Law](https://en.m.wikipedia.org/wiki/Conway%27s_law).",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "TotesYay",
            "body": "Resume driven development is a massive problem with developers of all levels, not just juniors. A CIO of a small niche company that has about 50 users a month was telling me about their Kafka, IaaS implementation. Just lighting money on fire.",
            "score": 3,
            "replies": []
          },
          {
            "author": "maria_la_guerta",
            "body": "Perfectly said.",
            "score": 2,
            "replies": []
          },
          {
            "author": "XhantiB",
            "body": "I agree with the organizational bit, micro services solve that. As for performances and uptime ,a monolith can get you all the way to stack overflow levels. Monoliths as an architecture only really start hitting their limits when you have a lot of writes to your db and you need to process them in a set time frame. Even with adding queues, that only gets you so far. At some point if you need to process X updates in Y time frame, a single db will be your limit. Then you have no choice but to fan out the writes to N db’s (sharded db’s or N micro services each with a db). Reads scale as well or better in monolith (cache invalidation is simpler to get right) and you can get similar five nine uptimes (stack overflow does it)",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "lottspot",
        "body": "One of the most fun things about tech is watching progress move in a perfect circle",
        "score": 188,
        "replies": [
          {
            "author": "TotesYay",
            "body": "The cycle starts with someone declaring, \"I have this new revelation, and you all are fucking stupid for doing it the old way.\" People panic, worried that some random will think they're fucking stupid, so they insist their company will become a dinosaur if they don’t jump on the new shiny object. Suddenly, everyone thinks, \"If I want to stay employed, I must not be fucking stupid and learn the new shiny thing.\"\n\nRecruiters then refuse to interview anyone who seems fucking stupid, demanding 5 years of commercial experience in a framework that's only 3 years old. New hires, plagued by imposter syndrome, invent 7 years of experience to avoid sounding fucking stupid and get hired because no one else wants to admit they know nothing about the shiny new thing.\n\nThe imposter syndrome-ridden new hires justify their existence by shoehorning in the shiny new thing. When the shiny new thing fails to replicate 90% of the legacy system's functionality, the community, all suffering from imposter syndrome, starts hacking together a convoluted ecosystem. Eventually, everyone agrees that the shiny new thing is now bloated legacy tech only fucking stupid people use, and the newest, shiniest thing is, of course, the better choice.",
            "score": 45,
            "replies": [
              {
                "author": "TotesYay",
                "body": "Forgot to mention the actual creator of new shiny thing cannot get hired because they are the only honest dev saying they have 3 years experience. \n\n—\nUnfortunately it is not a joke, there was a HN post a long time back from a creator of a framework who was rejected from a job for not having the minimum experience with the framework they had created.",
                "score": 21,
                "replies": [
                  {
                    "author": "IDatedSuccubi",
                    "body": "This didn't happen only once, this is somehow a regular thing, I've seen it a couple of times now over the years",
                    "score": 9,
                    "replies": []
                  },
                  {
                    "author": "EasyMrB",
                    "body": "Yeah the one of those I saw was the creator of the Python language and the requirements were, I think, longer than Python has been around.",
                    "score": 5,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "Imagine not hiring the person the person who invented the programming language you need. This is why HR is fucking useless.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "kex",
            "body": "\"HTML over the wire\" is just today's $.load()\n\nWhat drives me crazy is the hype, like it's something new\n\nI scour the discussions and documentation like \"am I missing something?\"",
            "score": 40,
            "replies": [
              {
                "author": "wildjokers",
                "body": "&gt; What drives me crazy is the hype, like it's something new\n\nJust like server-side rendering with react is now being presented as some new great way to do web apps. Although server-side rendering is how everyone used to do things. The old is new again.",
                "score": 47,
                "replies": [
                  {
                    "author": "SanityInAnarchy",
                    "body": "IIUC the idea is to be able to do *both* with the same app without writing it twice. Make the initial page load faster by doing it server-side, then do subsequent navigation on the client side. But maybe I missed it and a lot of people are just giving up on client-side rendering altogether.",
                    "score": 19,
                    "replies": []
                  },
                  {
                    "author": "TotesYay",
                    "body": "Yep, when I first read about it I had to do a double take. I was like am I missing something here. We had this solution forever ago.",
                    "score": 5,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "DenebianSlimeMolds",
            "body": "wish you had written \"flat circle\"",
            "score": 3,
            "replies": []
          },
          {
            "author": "MonstarGaming",
            "body": "Yup. Last week I was reading Patterns of Enterprise Application Architecture which was published in 2003. This exact scenario was discussed and monoliths were the preferred approach.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Professional-Yak2311",
        "body": "“Do you have a crappy, unmaintainable monolith? Why not try refactoring it into 70 crappy, unmaintainable microservices?”",
        "score": 26,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "You had 37 problems and thought, “I know, I’ll use microservices”. Now you have 75 problems.",
            "score": 9,
            "replies": []
          }
        ]
      },
      {
        "author": "remy_porter",
        "body": "Hottest take: Object Oriented programming is just microservices where your intermodule communication is in-process method calls. Microservices are just OO where you abstract out the transport for intermodule communication so you can deploy each object in its own process space.\n\nWhich, to put it another way, you should design your microservices so that they can all be deployed inside a single process *or* deployed across a network/cloud environment.",
        "score": 427,
        "replies": [
          {
            "author": "jDomantas",
            "body": "And deploying all microservices in a single process is a very useful thing to do - you can use that for integration tests that require way less orchestration than your cloud deployment.",
            "score": 149,
            "replies": [
              {
                "author": "saidatlubnan",
                "body": "&gt; deploying all microservices in a single process \n\ndoes that actually work in practice?",
                "score": 36,
                "replies": [
                  {
                    "author": "jDomantas",
                    "body": "We've used such setup in last two workplaces for integration tests - it did work very well. You have to put in effort to create such setup (especially if you have an existing system that was not designed with it in mind), but I think it is well worth the effort.",
                    "score": 29,
                    "replies": [
                      {
                        "author": "rodw",
                        "body": "Are your in-process microservices interacting over HTTP (or etc) or have you subbed-in a direct method call style invocation in some way?\n\nEDIT: Sorry I just noticed you're specifically talking about an integration testing environment. My question still applies but the production case is more interesting. Come to think of it I've used both over-the-wire network interactions and direct-invocation-that-looks-like-network-client-lib approaches in integration test scenarios. But IME \"make it work\" is usually the highest priority there, so in-process HTTP interactions (for example) are usually good enough in that context. In a production context the desire to take advantage of the in-process efficiencies would be stronger (I assume)",
                        "score": 7,
                        "replies": [
                          {
                            "author": "Worth_Trust_3825",
                            "body": "You define an interface how the code would be called. In the implementation you either use concrete implementation (which would be actual code) or some other ipc implementation. Crude example would be as follows\n\nhttps://pastebin.com/DSB9b3re\n\nDepending on context you may want to use a concrete implementation, or the http client one (if your concrete implementation is running in another process). If you need to expose the concrete implementation for some IPC communication, you use the delegate pattern to make it usable by your protocol. Mocking in tests becomes easier too.\n\nBasically the idea is to hide away any details that the call may be protocol specific. You must style your interfaces as if they will be called in the same process.",
                            "score": 14,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "This is basically a JavaEE application server.\n\nIt works about as well as a bag of cats.",
                    "score": 10,
                    "replies": [
                      {
                        "author": "valarauca14",
                        "body": "Yup. The only difference between JavaEE &amp; K8s is replacing boatloads of XML with boatloads of YAML. Then you have shit like GRPC doing most the stuff java reflection &amp; objection serialization can do.\n\nThe multi-server stuff &amp; traffic shaping isn't even as new as people want to think it is. If you application server is running on an mainframe, you can do QoS/Traffic Shaping/IP/DNS wizardly as well.\n\nYou even have the single point of failure! US-East-1 goes down? Your k8s cluster is offline. Your mainframe loses power? You go offline. \n\nAll of this has happened before and will happen again.",
                        "score": 6,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "At least in Kubernetes, different microservices are actually running in separate processes and isolated from each other in containers. So, that's an improvement, at least...",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "lelanthran",
                    "body": "&gt; does that actually work in practice?\n\nSure. If you're talking to your microservices over protobuf, it's trivially easy to shim it so that the call never actually goes out on a wire.\n\nIn Go, using `net/httptest`, you can do the same with HTTP REST calls too.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "TiredAndBored2",
                    "body": "Most compiled languages allow you to have multiple entry points (one entry point for each service).",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "knightfelt",
                "body": "Sounds like Monolith with extra steps",
                "score": 8,
                "replies": []
              },
              {
                "author": "Duel",
                "body": "Monoliths are underrated",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "Not a hot take, Joe Armstrong of Erlang fame beat you to it long ago:\n\n&gt; Erlang might be the only object oriented language because the 3 tenets of object oriented programming are that it's based on message passing, that you have isolation between objects and have polymorphism.\n\nYou're also describing Alan Kay's vision of OOP:\n\n&gt; I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages (so messaging came at the very beginning -- it took a while to see how to do messaging in a programming language efficiently enough to be useful).",
            "score": 69,
            "replies": [
              {
                "author": "psyclik",
                "body": "Funny how you mention these two together, as the former clearly forgot that the latter has made Smalltalk 12 years before Erlang was a thing.",
                "score": 21,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "Joe Armstrong was being sarcastic. He hates OOP.",
                    "score": 30,
                    "replies": [
                      {
                        "author": "Christoferjh",
                        "body": "Love that guy, had a nice whole day chatting with him a couple of years ago.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "elperroborrachotoo",
                "body": "Havong been raised on C++ notion of \"method call is sending a message\" and never having went more than calf-deep into other languages: \n\nis there a difference between a method call and \"true\" message passing?",
                "score": 4,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "Maybe? \n\nDynamic languages like Smalltalk, Ruby and Python could be like the \"true\" message passing category. In message passing, a method call is more like a request to an object, \"can you do this?\". The \"method call\" is all handled dynamically by the object at runtime.\n\nIn languages like C++, you can't do that. Every object has to be defined by a class, and that class defines methods that are allowed to be called. Everything must be known ahead of time. After all, it's all function pointers in the end, and the compiler has to know ahead of time the addresses of the functions to call.",
                    "score": 7,
                    "replies": [
                      {
                        "author": "sonobanana33",
                        "body": "You have virtual in c++ to decide at runtime which function to call.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "agumonkey",
                    "body": "the only 'difference' I could see was that a message is usually an atomic/independant piece of data, where was calls can pass pointers around, causing strange sharing issues and side effects\n\nbut i'm no PLT researcher",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "zigs",
            "body": "&gt;Which, to put it another way, you should design your microservices so that they can all be deployed inside a single process *or* deployed across a network/cloud environment.\n\nThis has been my conclusion as well.\n\nMy take has been to use persistent message queues everywhere there's been an urge to make a microservice. A queue listener can run right on the same system as sent the message, or it can run entirely elsewhere. The process that listens can easily be removed from the same system, and moved completely elsewhere.\n\nAnd as a bonus, MQs are amazing for logging what's going on, putting parts of a system in maintenance, retrying things that break after fixing.",
            "score": 8,
            "replies": []
          },
          {
            "author": "Deep_Age4643",
            "body": "There is a whole difference being modulair during build time, to being modular during runtime.",
            "score": 13,
            "replies": [
              {
                "author": "HomeTahnHero",
                "body": "This. Modularity and message passing are general concepts that apply to both OO and microservices. But there are important differences at build time and run time.",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "Xn4p4lm",
            "body": "Tbh not the hottest of takes. \n\nBut it’s also so true, though sometimes unfortunately la system is built for a single appliance and then gets so complicated that it’s impossible to change or maintain almost.  Plus if there is no planning for inter-process latency and it isn’t handled well you’ll be in an even worse spot. Then the next thing you know you’re stuck on the largest servers that exist and you can’t scale 😭",
            "score": 6,
            "replies": [
              {
                "author": "lelanthran",
                "body": "&gt; Then the next thing you know you’re stuck on the largest servers that exist and you can’t scale 😭\n\nThat's the best sort of problem to have, because if you have already vertically scaled to the point of using the beefiest servers on the planet, your income from that is *more* than enough to hire a f/time team just to optimise things out into microservices.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "Present-Industry4012",
            "body": "Man the 90's sure were cool\n\nhttps://en.wikipedia.org/wiki/Distributed_Objects_Everywhere",
            "score": 5,
            "replies": []
          },
          {
            "author": "kitd",
            "body": "In Java-land, this is what OSGi did well, and Vertx allows with its Services layer.",
            "score": 4,
            "replies": []
          },
          {
            "author": "Malforus",
            "body": "Until your mono gets library bloat to the point that your builds take 20 minutes.",
            "score": 24,
            "replies": [
              {
                "author": "remy_porter",
                "body": "20 minutes? I write heavily templated C++. Twenty minutes is nothing.",
                "score": 53,
                "replies": [
                  {
                    "author": "FlyingRhenquest",
                    "body": "Factoring primes at compile time FTW! Once you compile it, the code runs instantly! The compile just takes longer than the heat death of the universe, minor detail.",
                    "score": 9,
                    "replies": []
                  },
                  {
                    "author": "rodw",
                    "body": "[right?](https://xkcd.com/303/)",
                    "score": 5,
                    "replies": []
                  },
                  {
                    "author": "WTF_WHO_ARE_YOU_PAL",
                    "body": "Yuck. Compile times are why I generally avoid the template metaprogramming stuff. I can't stand when my builds take more than a few minutes, I do as much as I can to avoid long compile times.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "TekintetesUr",
                "body": "20 minutes? Rookie numbers.\n\nDo we even care about build times anyway? Build pipeline runners are cheap. Local builds can be made incrementally. You can even base them on cached builds.",
                "score": 12,
                "replies": [
                  {
                    "author": "EndiePosts",
                    "body": "You care about build times when you discover a major regression in prod and you need to release a new build quickly.",
                    "score": 10,
                    "replies": [
                      {
                        "author": "TiredAndBored2",
                        "body": "Rollback and deploy the previous version? Why do you need to rebuild a previously built version?",
                        "score": 19,
                        "replies": [
                          {
                            "author": "valarauca14",
                            "body": "Real men don't use backups, they post their stuff on a public ftp server and let the rest of the world make copies",
                            "score": 3,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "jryan727",
            "body": "I agree with this, but the expectation in microservice environments is often that dedicated teams own each service and the interfaces are thus much more rigid. Legacy callers are a concern for every single interface update. Even if you can guarantee that all callers migrate to a new interface, you still have distinct applications being deployed along their own schedule and depending on availability expectations (usually high in microservice environments), need to support legacy calls even if just during the rollout period. \n\nThat’s not the case for OO. You’d never be in a situation where half of your application is deployed. And it’s more rare to have such distinct class ownership.\n\nConceptually though I completely agree.",
            "score": 5,
            "replies": []
          },
          {
            "author": "LvcSFX69",
            "body": "What does OOP have to do with this? This is also true for procedural, imperative or functional programming. The abstraction is just not objects but functions.",
            "score": 5,
            "replies": [
              {
                "author": "remy_porter",
                "body": "An object contains behavior and state, like a microservice is also behavior and state. They both expose their interface as messages that you can pass to them. The implementation is encapsulated.",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "hippydipster",
            "body": "Hot or not, I disagree.  Microservices are about independent deployability and team independency.  Objects are about neither of that.",
            "score": 3,
            "replies": []
          },
          {
            "author": "DoneItDuncan",
            "body": "To extend that thought, is lambda/serverless when you do the same for functional/declarative programming?",
            "score": 6,
            "replies": [
              {
                "author": "[deleted]",
                "body": "No. Lambda/serverless means simply means you don't have provision a server, and you define your services in such a way that the cloud provider can find compute to run your code.\n\nfunctional/declarative programming usually involves some kind of referential transparency to avoid side effects, and there's nothing stopping a lambda/serverless application from being stateful.",
                "score": 13,
                "replies": []
              },
              {
                "author": "rodw",
                "body": "Not that you're responsible for coining the term of course, but if we can call a lambda host \"serverless\" why don't we call S3 \"storageless\"?",
                "score": 3,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "Lambdas aren't hosted, that's the point. Lambdas are just code. AWS is responsible for hosting it temporarily when something triggers the need to run the code.\n\nS3 is actually \"storageless\" in this context, but that's not a term anyone uses. The alternative would be self-managed storage, which in the AWS stack would be Elastic Block Storage or an Elastic File System, which you have to provision, manage, scale, secure and you have to pay a lot more for it. How S3 actually stores objects and makes them available is not something you have to worry about.",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "nemec",
                    "body": "Actually, \"driveless\" is not a bad analogy. The drives exist but it's all managed by someone else.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "cycle0ps",
            "body": "Is there a course out there to build on the concept you present?",
            "score": 2,
            "replies": [
              {
                "author": "remy_porter",
                "body": "I dunno, for me it's 25 years of experience, or so.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "FlyingRhenquest",
            "body": "That's a good take. Object serialization and data transport over the network still blows from a programming perspective. Is there anything out there better than http/xml/json, Binary serialization with MQ, Apache Thrift or OpenDDS? It'd be nice if I could just write some bytes *somewhere* without having to worry too much about the underlying implementation of where it goes.",
            "score": 2,
            "replies": [
              {
                "author": "binlargin",
                "body": "I think in any system like that, the issue is that your local implementation isn't the same as the transport format. So you need to convert formats which has overhead and complexity.\n\nI hear https://capnproto.org/ goes some way to solving this. Ideally you'd have a language where the internal API (function calls, method dispatch, object model) uses the same thing as the external API. Building a compiler on top of cap'n' proto would be pretty interesting.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "G_Morgan",
            "body": "Microservices is explicitly a restricted form of OOP.\n\nA big part of why people like microservices are because it is restricted. Microservices stop you from doing quick cross boundary hacks that cause problems forever after.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "mensink",
        "body": "Microservices were never strictly needed for &gt;95% of software applications.\n\nThey can be useful though, if you have some functionality that you'd like to decouple from your application. The reasoning for this can vary from non-matching update schedules, needing the service in several applications, it being written in another programming language or requiring another OS to run on, or to simply wanting to offload the work on separate infrastructure.\n\nLike most programming concepts, there is a time and place where it's a good choice to use them, but not everywhere all the time.",
        "score": 37,
        "replies": [
          {
            "author": "[deleted]",
            "body": "There is literally no such thing as application that needs Microservice architecture. An application could benefit from some aspects being put into Microservices but there is just no use case where your entire app needs to be entirely Microservice unless the entire app itself does like 2 things.",
            "score": 2,
            "replies": [
              {
                "author": "mensink",
                "body": "Technically you're not wrong, but IMO business needs can be considered needs as well.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "pribnow",
        "body": "I dunno, microservices fit pretty neatly into the whole \"loosely coupled, highly cohesive\" thing IMO \n\nMicroservices may be bad but SOA isn't inherently evil, even for small companies",
        "score": 65,
        "replies": [
          {
            "author": "_bvcosta_",
            "body": "  \n&gt; Is it always bad?\n\n&gt; I’m not saying it's bad. I believe [Jet.com](http://Jet.com) actually [started](https://www.codemag.com/article/1611071/Case-Study-Writing-Microservices-with-F?ref=thrownewexception.com) out using microservices and it had a great exit to Walmart. I’m just saying we, as engineers, need to have critical thinking and choose what is best.\n\nI agree it fits very well in the \"loosely coupled, highly cohesive\", it's hard to get it right, though.",
            "score": 15,
            "replies": []
          },
          {
            "author": "Ran4",
            "body": "I've been writing code for 20 years now, and the number of times I've had a problem with excessive coupling is... minimal, compared to the number of times I've had issues with excessive complexity due to highly abstract but more uncoupled code.\n\nFor some reason people just keep talking about how coupled code is bad, without actually understanding the consequences of decoupling code.\n\nDecoupling is when you speak English and the other party responds back in Chinese, and you can't understand them, but that's apparently fine, because it's not enforced. Coupling is when you speak English and if the other party responds back in Chinese they explode (...so you can find the issue and fix it). The decoupled version is just as nonfunctional, but the coupled version actually forces you to fix the issue.\n\nYes, sure, you could unfuck the mismatch here by creating a \"TranslationService\" and maybe that means that you don't need to update the English or Chinese senders. But instead of *having* to create a \"TranslationService\" up front, wouldn't you rather... not do so, and instead just update either sender to be consistent when and if it's needed?\n\nI much, much prefer spending my time occasionally rewriting coupled but simple code than spend all my time writing and - even worse - groking other people's abstractions.\n\nAnd I mean, people gladly obey the compiler, which won't allow a single error in a 5 million line program or it will refuse to compile - so why can it never be okay to obey a coupled systems too? (*obviously within limitations*, there's plenty of times when decoupling is good too... but increased abstraction is rarely what a system needs to be easier to develop).",
            "score": 46,
            "replies": [
              {
                "author": "Maxion",
                "body": "I've not been in the industry that long yet, (a bit over 10 here) but my opinion echos your 100%",
                "score": 6,
                "replies": []
              }
            ]
          },
          {
            "author": "geodebug",
            "body": "YAGANI is the leading principle here. \n\nDevelop your monolith code base correctly so that pulling out functionality isn't like pulling a thread on a sweater and then move things to separate services as needed, a new API or a one-off lambda somewhere. \n\nIt's not helpful to call any architecture \"bad\" or \"good\", just that micro-services are a scaling technique that Amazon-sized websites use to handle Amazon-sized traffic and workloads.",
            "score": 3,
            "replies": []
          },
          {
            "author": "JimDabell",
            "body": "You don’t have to introduce a network boundary in order to make something loosely coupled.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "muntaxitome",
        "body": "Most instances of microservices I see are effectively distributed monoliths. In such cases it's just development and infra overhead for basically no benefits. \n \nI think pulling out medium sized services can have benefits but true microservices only make sense if you can very clearly explain the benefit without handwaving. \n \nAlso in these comments I see a lot of talk about supposed benefits. Such as uptime, but having more services will not generally make uptime of your whole app easier. Performance, but it's actually in many ways more difficult to determine required scaling for microservice and the overhead is often significant, actually decreasing performance. \n \nThe actual benefits of microservices are about precise control, updates and organizational. In many cases that is more a function of your team size than it is about the amount of users.",
        "score": 15,
        "replies": []
      },
      {
        "author": "TheBlueArsedFly",
        "body": "Microservices are great if you need to triple your workload over distributed systems in order to achieve the same result as you would on a monolithic architecture.",
        "score": 163,
        "replies": [
          {
            "author": "Setepenre",
            "body": "load balancer + 3 instance of the monolith ?\n\nWorked for a company that had that setup, scaled linearly with the amount of machine.\nno microservice required.",
            "score": 86,
            "replies": [
              {
                "author": "supermitsuba",
                "body": "Yep this works great.  Just have to watch out for the stateful hiccups and long running processes.",
                "score": 30,
                "replies": []
              },
              {
                "author": "rcls0053",
                "body": "This is basically what I worked with at one point in time but monoliths work if they are well modularized. Once it's a big ball of mud, oh boy is it fun to work with..",
                "score": 13,
                "replies": [
                  {
                    "author": "Setepenre",
                    "body": "I mean, sure, best practices apply.\nMonolith have a bad reputation because people just pile the features at random location without forethought,\nbut there is nothing that makes them inherently bad.",
                    "score": 18,
                    "replies": [
                      {
                        "author": "Old_Elk2003",
                        "body": "I think there’s a tell when people say “Microservice Architecture.” Microservice is an implementation detail, not architecture. It’s easy to conflate the two, because creating microservices requires that you make architectural boundaries, whereas with a monolith, you can jam all your spaghetti into one class until your heart’s content.\n\nBut the *architecture* is logical boundaries, not physical. It’s much less of an initial commitment to draw those boundaries with polymorphism up-front, and then break things out physically if they need to scale for different reasons, or if people waste a lot of time waiting for each other’s builds.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "valkon_gr",
                "body": "Those Java 6 monoliths are hell to maintain. So I wonder if we will say the same for current tech in couple of years.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "&gt; in order to achieve the same result as you would on a monolithic architecture.\n\nIf you're achieving the same result as with a monolithic architecture, why would you use microservices?\n\nmicroservices only make sense when some services in the application have different characteristics than others, such that you would get a different result if you separated them.\n\n* some services require more compute and some services require more memory, and deploying them together on the same infrastructure means you're compromising one to satisfy the other or you're paying way too much for infrastructure to support them all. microservices let you optimize.\n\n* some services deploy for different reasons. it would be nice not to have to redeploy the entire application just to update one service. microservices let you deploy independently.\n\nI think monoliths are a good starting point, but if it makes sense to split things out into multiple services, there's nothing wrong with that either.\n\nbut here's a hot take. a monolith is already a microservice if it's small enough to be independently scaled and deployed. people pay too much attention to \"micro\" and think that means every conceivable \"service\" in the application should be its own process too.",
            "score": 37,
            "replies": [
              {
                "author": "Lceus",
                "body": "Spot on. There's a lot of hate for microservices but these are the legitimate benefits. I also think it might be a definition issue because I've worked with microservice architectures on a few different projects and it's never been more than 10 services at most. There are plenty of issues to talk about but there are also some things that monoliths simply won't solve.\n\nMaybe I've been fortunate enough to have never experienced true enterprise hell.",
                "score": 7,
                "replies": []
              },
              {
                "author": "war-armadillo",
                "body": "&gt; people pay too much attention to \"micro\" and think that means every conceivable \"service\" in the application should be its own process too.\n\nwisdom right there",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "key_lime_pie",
            "body": "At my last company, each person in the test group was given an environment with 4 VMs to run the stack: one for the database, one for the UI , and two for the \"good stuff.\"  When development architected the next version, they decided to break everything down into microservices.  Each member of the test group now has an environment, with 13 VMs with no increase in performance or feature functionality, and their stack startup time went from less than ten minutes to over an hour.  When they raised concerns, they were told, \"There's nothing we can do about it, we need to do this to become more scalable.\"  When a customer raised concerns, they were told, \"That's our top priority, we're working on it right now.\"",
            "score": 19,
            "replies": [
              {
                "author": "Ruben_NL",
                "body": "VMs? Like, virtualbox level VM? why not docker/Kubernetes?",
                "score": 13,
                "replies": [
                  {
                    "author": "key_lime_pie",
                    "body": "vSphere.",
                    "score": 2,
                    "replies": []
                  },
                  {
                    "author": "FatStoic",
                    "body": "This 100% screams for docker compose",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Setepenre",
                "body": "That is hilarious (as long as you are not dealing with it), sounds like my experience as well.\n\nThe worst part is that the \"monolith\" got split, but the messaging layer between the services needed to match.\nSo the microservices still needed to be released as one, but they did not want to do that anymore.\nSo essentially the messaging layer became is locked for change.\n\nIt is 100% hype development, some new dev read a medium article about microservice and the cloud and wanted to bring it,\nsold it to management and bam fucking hell.",
                "score": 7,
                "replies": []
              }
            ]
          },
          {
            "author": "Dry_Dot_7782",
            "body": "There is so much scaling options these days, i cant imagine when a microservice would be an ideal place to start.\n\nYes im mad because we started with microservices on a new project..",
            "score": 13,
            "replies": []
          }
        ]
      },
      {
        "author": "shoot_your_eye_out",
        "body": "I’ve never understood why developers are in such a rush to turn a function call into a network call.",
        "score": 156,
        "replies": [
          {
            "author": "pewsitron",
            "body": "It's more about people and team structure than the program.",
            "score": 117,
            "replies": [
              {
                "author": "Ran4",
                "body": "Yeah but you see plenty of places with more microservices than developers...\n\nAt work we have 10 microservices, and 2 backend devs (none if which are me).\n\nIt's fucking stupid. There's so much setup stuff copy-pasted everywhere and the devs constantly and randomly do stuff like have inner loops that call another service synchronously 100 times for basic lookups (so what should be five lines of code calling db taking 50 ms instead becomes 80+ lines of GRPC glue code to make 100 calls times 60 ms = 6000 ms).",
                "score": 22,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "You have backend devs looping over synchronous network calls? My guy time to get some interns to fix that lol that’s some scary logic",
                    "score": 14,
                    "replies": []
                  }
                ]
              },
              {
                "author": "shoot_your_eye_out",
                "body": "Sometimes it is. Sometimes it’s also about mindlessly decomposing a monolith for no apparent reason whatsoever.",
                "score": 33,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 4,
                    "replies": []
                  }
                ]
              },
              {
                "author": "TekintetesUr",
                "body": "I come from an era where network access was actually expensive, both in financial and performance sense. You can organize your code around people and team structure within a monolith too. Network is an arbitrary barrier. My first product ever was already based on SOA (that's the boomer predecessor of \"microservices\") shipped as a single deliverable.",
                "score": 16,
                "replies": [
                  {
                    "author": "rusmo",
                    "body": "People these days are doing SOA and calling it microservices. SOA is still a really useful set of design principles.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "FarkCookies",
                "body": "It is not unheard of having a team that manages a system of microservices with more microservices then developers on the team. I find this peak insanity.",
                "score": 4,
                "replies": [
                  {
                    "author": "rusmo",
                    "body": "Why? Microservices should be small and as SRP as makes sense. Small leads to numerous. It’s not insane, it’s a natural outcome of the architecture.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "travelinzac",
            "body": "Because I don't own that that's the _____ teams problem",
            "score": 20,
            "replies": [
              {
                "author": "Robert_Denby",
                "body": "Until Omegastar gets their shit together we're blocked!",
                "score": 13,
                "replies": []
              },
              {
                "author": "SheriffRoscoe",
                "body": "[Conway's Law](https://en.m.wikipedia.org/wiki/Conway%27s_law)",
                "score": 4,
                "replies": []
              }
            ]
          },
          {
            "author": "Dr_Findro",
            "body": "It would be nice to be able to merge my code without worrying about someone on some team I’ve never heard of breaking their tests",
            "score": 32,
            "replies": [
              {
                "author": "shoot_your_eye_out",
                "body": "If your project is that big then separate services may be for you ¯\\_(ツ)_/¯ \n\nWhat I’m tired of is small teams absolutely foot-gunning themselves with micro service architectures for no reason based in pragmatism.",
                "score": 10,
                "replies": [
                  {
                    "author": "sopunny",
                    "body": "Remote work can make a small team feel big though. 5 developers is not a lot, but if they're spread across 5 time zones...",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Electrical_Fox9678",
                "body": "And sometimes there are different development and release cadences for the various pieces of the application",
                "score": 5,
                "replies": []
              },
              {
                "author": "TekintetesUr",
                "body": "That's orthogonal to microservices vs monoliths. You can break API compatibility with microservices too, \"let's just do microservices\" is not an alternative to proper planning and change management.",
                "score": 19,
                "replies": [
                  {
                    "author": "sopunny",
                    "body": "The proper change management might be to separate everything as much as possible so your developers can work independently",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "\\* It's more fun to design - who knows *what* your user service API will be when you ship!\n\n\\* It's more fun to deploy - you have to synchronize watches and shit to update a service like you're a spy\n\n\\* It's more fun to debug with cooler stakes - that bug that normally would crash one system can now block your publicly-facing website from working",
            "score": 36,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "some developers don't read past the headline. \n\nthey see the word \"micro\" in the headline and think that means let's make everything tiny! did they actually look deeper into what the problem was that \"micro\" solved, how it solved the problem, weigh benefits and drawbacks, and think whether the problem they have at hand would benefit from that solution?\n\nthat would require reading, and if it doesn't fit in a tweet (is that even the right word anymore?), it's too much work. This is what Ray Bradbury was warning us about in Fahrenheit 451.",
            "score": 5,
            "replies": []
          },
          {
            "author": "FlyingRhenquest",
            "body": "Is it developers or is it management drinking the microservices kool-aid? I built a video project that very much could have benefited from the parallelism, and I can bundle a couple of seconds of video frames into a 200KB blob that I can send over the network, but I have to think carefully about sending all the data that process is going to need to do its work in one go, so I can process the entire chunk without blowing through my 20ms frame budget. Amortized over 120 frames, that's not *too* pricey. But a lot of developers don't put that much effort into optimization, either.\n\n\nI considered just breaking up and storing the video in their component segments, which would be awesome for processing all the chunks in parallel, but the complexity of ingesting, tracking and reassembling that data is daunting. Probably some money in it, but I can't afford the two years without income it'd take to develop it. And the current state of the art for corporate media handling is building ffmpeg command lines and forking them off to do work (At least, at Meta and Comcast anyway.)",
            "score": 2,
            "replies": []
          },
          {
            "author": "syklemil",
            "body": "Eh, it's just kind of networked Unix philosophy. You write small, preferably correct (but maybe not, cf worse is better) components and compose them. Used to be plaintext or something through a `|`, now likely JSON, maybe protobuf, over the network (and it's not like unix is a stranger to the network either).\n\nMaybe think of the system you're building as more of an operating system? It's not like that is just one single static binary either.\n\nAnd if we were to be able to individually restart, scale, distribute and upgrade subcomponents of a monolith the way we do services I suspect we'd have to write it all in Erlang.",
            "score": 2,
            "replies": [
              {
                "author": "shoot_your_eye_out",
                "body": "I’ve been programming nearly thirty years now, but thanks for the clarification.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "LagT_T",
            "body": "Big providers have great sales team that convince them that their 10k hits per day server needs to be scalable to Facebook levels.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "Obsidian743",
        "body": "Microservices were invented as a specific antidote to classic SOA and messaging for *very specific reasons*. As far as I can tell, the definition hasn't changed in the 10 - 15 years of hard-core adoption yet here we are...\n\nThese discussions ironically always start off with an incorrect premise about microservices with some truth sprinkled in. These articles perpetuate the myths then prescribe a solution that undermines a real, genuine need for microservices. This article is no different.\n\nPart of the problem with classic SOA is *shared dependencies through poor design*. Whether this was hardware, a network or comms channels, database, table, library, or *another service* - it was everywhere. The poor designs were usually due to a combination of relational data, request/response, and other *synchronous* patterns (Service A called Service B called Service C, etc). The *secondary* outcomes from these fundamental problems were problems of scalability and maintainability. You couldn't make a single change and deploy it quickly without high risk.\n\nYet what seems to drive these decisions now-a-days is *team organization* and *independence*. This means you have a reverse Conway's Law effect where your organization structure, which isn't likely to be well-designed, informs your technology decisions. This is a horrible way to design technology. Second, once Serverless architecture was introduced, people went ham with the *nanoservice* approach (Function as a Service) which is a clear *anti-pattern* that aren't miroservices. You get none of the benefits but all of the problems.\n\nFirst, design your solution properly. One team does this. Your core team. Do not throw people at the problem *until it's necessary*. A single team can be large at first and broken up later. This means perhaps taking a classic DDD-style approach and mapping value streams correctly. This also means taking advantage of asynchronous processes, such as by using events, as much as possible. Then do the proper performance and scaling analysis on how your already well-designed solution **should** be naturally split up - not could be for the sake of team topologies - but because of technical necessity. This could be scaling for throughput but also for security, data segmentation and backup, auditing and compliance, change management, billing, etc. Being split up can be done logically within a single physical service, or physically through independently deployable services. But the bottom line is: if you don't need any of that you don't need to physically split them up yet but it should be trivial to do so because you designed your internal solution correctly to begin with.\n\nIf you're starting out with an assumption that your services will be designed in a way that informs your data structure and how you're going to \"scale\" at the service level, all of which is all informed by a presumed team topology, *you will fail every time*.",
        "score": 25,
        "replies": [
          {
            "author": "fear_the_future",
            "body": "You are right except for one point: Recreating the organizational chart on a technical level is a feature and not a bug. It is clear that this will not result in the best technical solution. Many things will be duplicated (data in particular), but the idea is that this duplication is still less expensive than the communication overhead of large teams or feature developments split across multiple teams. \n\n&gt; First, design your solution properly. One team does this. Your core team.\n\nAnd everyone else is supposed to just sit around while the \"core team\" decides for them? Usually if you're even thinking about multiple teams you're a large company starting a new project. The organizational chart will be designed by business experts around domain areas, ideally with some input from experienced software architects to identify probable technical synergies. This all happens long before any development teams are even hired.",
            "score": 5,
            "replies": []
          },
          {
            "author": "_bvcosta_",
            "body": "Good suggestions. \n\nActually, we followed a very similar approach in one of my previous companies. We started with a core team with DDD knowledge and scaled out that core team as we started to implement those services. We didn't start with events, we just added events later in the process, That also improved the low coupling and high cohesion of the services and the overall performance of the system.",
            "score": 3,
            "replies": [
              {
                "author": "Obsidian743",
                "body": "Thanks. The challenge with taking on things like events is that you get into a whole other domain of complex design analysis that's needed but you get engineers, the same ones blindly pushing for microservices, pushing for things like CQRS and event-sourcing right off the bat. No.",
                "score": 2,
                "replies": [
                  {
                    "author": "_bvcosta_",
                    "body": "We did adopt CQRS and event-sourcing very early when starting with events. I have a lot of learnings from that experience. I would not recommend that today without proper training and tooling for the engineers.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Girse",
            "body": "&gt;This means you have a reverse Conway's Law effect where your organization structure, which isn't likely to be well-designed, informs your technology decisions.  \n\nWhy do you say reverse conways law? Isnt conways law exactly that?\n\n Companies produce designs which copies their orginzation structure?",
            "score": 2,
            "replies": [
              {
                "author": "Obsidian743",
                "body": "Hmm, not rally. Conway's Law tends to be an organic, *unintentional* effect. The [Inverse Conway Maneuver](https://www.thoughtworks.com/radar/techniques/inverse-conway-maneuver) is when you *intentionally* structure your orgnization to force a desired technical outcome.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "-grok",
        "body": "Ya but my resume needs Microservices!",
        "score": 11,
        "replies": []
      },
      {
        "author": "SSHeartbreak",
        "body": "&gt; With all the layoffs happening in tech, one thing I’m hearing more and more is companies having too many services after deep cuts. \n\nI mean, whose fault is this really? I've never heard of anyone designing features to accommodate their own dismissal. I think this is a case where if companies don't value the maintainability of their services it's their bag of microservices to hold.",
        "score": 9,
        "replies": []
      },
      {
        "author": "C_Madison",
        "body": "Even more direct: You don't *want* microservices if you don't have to. Distributed systems suck. Say it with me again: Distributed systems suck. They have all the problems of non-distributed architectures *and* the problems of distribution in addition. Don't do that to yourself if you don't have to.",
        "score": 12,
        "replies": [
          {
            "author": "i_andrew",
            "body": "I think that the real problem with microservices is that people **implement them wrong and for wrong reasons**.\n\nThe reasons to move away from monolith:\n\n* You have MANY teams working on the same codebase. It's really hard to make sure monolith doesn't end up like a big ball of mud, hard to work with on every aspect. And development speed on monoliths is sooo slow!\n* Deployment hazards - with HUGE codebases deployments are risky so they are done less often,. And you end up with a mess deployed as rarely as once every 2-4 weeks\n* Memory leaks that can bring down whole system down - in monolith everything works ok or nothing works at all. Simple report can bring your whole system down if memory leaks surfaces.\n* Drains money when scaled. Sure you can make 3-5-10 instances of your monolith - each one costs a fortune. Meanwhile only 2-5 features really need high throughput, but it's all or nothing, so you scale whole thing\n* Monolith turns into legacy FAST - you can't just upgrade one module. That's the reason so many monoliths still run on Java 11, Python 2.7, Node 14, etc.\n\nAnd the problem I see with monoliths:\n\n* Implemented with small teams, where monolith would be just fine\n* Implemented by people with no experience\n* Wrong design - wrong boundaries - so microservices are chatty. A Microservice should encapsulate the whole \"business process\" so they should talk little with other microservice.",
            "score": 3,
            "replies": [
              {
                "author": "jl2352",
                "body": "It can also simplify the landscape. Where I work we have lots of data on S3 that is read only. A large part of our work is trying to work out what is there, and what bits do we want. I refer to this as S3 parsing. There are thousands of lines in random bits of business logic just trying to parse what is on S3.\n\nSlapping an API in front of S3 to handle all of that has dramatically simplified our code. Allowing us to move lots of concerns out of our business logic.\n\nIt’s allowed us to separate *’what does the business logic want?’* away from *’how do I work out what is on S3?’* Independently they are both simple problems. Together it was a mess.\n\nThis has worked great when looking at the problem in hindsight. In hindsight having lots of S3 parsing in the middle of processing is shit, so we move it out behind an API.",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Open_Cod_5553",
        "body": "Micro-services scales companies not software, as when you enter on the domain of ownership and putting 100 people working on the same codebase, maturity is required to maintain order, or … you slice stuff in micro-services and everyone runs in different speeds, specs, language or whatever you like and the manager scales his kingdom sometimes.\n\nRare are the cases where a micro-service improves an architecture enough to cover the cost of run  them at scale, because 99,9999% of the companies don’t have the scale to leverage them (or the money).\n\nHonestly, every time someone complains that the database is slow and it’s hurting SLA latency I always ask about how many services they touched until hit the database (guess what, a lot), still the problem is the database doesn’t scale linearly 😂😂😂\n\nI need a t-shirt with the moto: “repeat with me, micro-functions are not micro-services” 😆",
        "score": 6,
        "replies": []
      },
      {
        "author": "Hrothen",
        "body": "I'd like to see the word \"probably\" used more often when talking about programming.",
        "score": 4,
        "replies": []
      },
      {
        "author": "powdertaker",
        "body": "No shit. What? One idea doesn't solve all problems everywhere? Weird.\n\nBank I work for now has a gazillion micorservices. They can't manage them and it's pretty difficult to even track down who's responsible for what. Something goes wrong and no one has any idea who to go to or what to do.",
        "score": 6,
        "replies": []
      },
      {
        "author": "KevinCarbonara",
        "body": "My primary issue with microservices is that people don't even use the term correctly. Any sort of service oriented architecture gets called \"microservices\", no matter how big they are. The vast majority of people do not want and do not need microservices, but it was a buzzword, so people slapped it on everything anyway.",
        "score": 4,
        "replies": [
          {
            "author": "redditrasberry",
            "body": "It's sad that it's become an anathema in software engineering to use long well established practices. If what you use doesn't sound like it was invented in the last 3 years perception is you are out of date and probably not doing it right. And it feeds a vicious cycle because devs literally won't want to work with you because they want the latest tech on their resume ... because it is better to look cool than to look experienced.   Sigh.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "pip25hu",
        "body": "I find such articles rather frustrating.\n\n\nYes, microservices are not always the answer. But that's easy to say. The hard part is deciding when microservices are appropriate and when they aren't. That is the topic I'd love to hear more ideas on.",
        "score": 6,
        "replies": []
      },
      {
        "author": "LessonStudio",
        "body": "AWS and Azure are touted as top-tier solutions, but in reality, they're overpriced, bloated services that trap companies into costly dependencies. They're perfect if you want to handcuff your architecture and surrender control to a few certification-junkie gatekeepers within your organization. Defending the absurd costs, which can easily escalate to over $100k annually, with comparisons to developer salaries is laughable and shortsighted. Most companies don't need the scale these giants promise, and could manage just fine on a $5-$100/month Linode, often boosting performance without the stratospheric fees. Moreover, the complexity of these platforms turns development into a nightmare, bogging down onboarding and daily operations. It's a classic case of paying for the brand instead of practical value.\n\nWay too many times I've seen these bloated architectures doing things which could have been done with an elegant architecture of much more boring technology. Good load balancing, proper use of CDNs, optimized queries, intelligent caching, and using the right tech choices such as nodejs where acceptable performance is achievable, but going to things like C++ for the few things which need brutal optimization. \n\nWhere I find these bloated nightmares to be a real problem is that without a properly elegant and simple architecture that people start hitting dead ends for what can be done. That is, entire categories of features are not even considered as they are so far beyond what can be done. \n\nWhat most people (including most developers) don't understand is how fantastically fast modern computer is. Gigs per second can be loaded to or from a high end SSD. A good processor is running a dozen plus threads at multiple Ghz. For basic queries using in-ram caching it is possible for a pretty cheap server to be approaching 1 million web requests per second. \n\nUsing a video game as an example, a 4K monitor running at 120fps is calculating and displaying 1 billion 24bit pixels per second. If you look at the details of how these pixels are crafted, it isn't even done on a single pass. Each frame often has multiple passes. If you don't use a GPU many good computers can still run at 5-10 frames per second meaning nearly 90 million 24 bit pixels per second. What exactly is your service doing that has more data processing than this? (BTW, using a GPU for non ML processing is what I am referring to as part of an elegant solution where it is required).\n\nPlus, threading is easily one of the hardest aspects of programming for developers to get right. Concurrency, race conditions, etc are the source of a huge number of bugs, disasters, negative emergent properties, etc. So, we have this weird trend to creating microservices which are the biggest version of concurrency most developers will ever experience in the least controlled environment possible.\n\nOne of the cool parts of keeping a system closer to a monolith is that this is not an absolute. Monoliths can be broken up into logical services very easily and as needed. Maybe there's a reporting module which is brutal and runs once a week. Then spool up a linode server just for it, and let it fly. Or have a server which runs queued nasty requests, or whatever. But, if you go with a big cloud service, it will guide you away from this by its nature. Some might argue, \"Why not use EC2 instances for all this?\" the simple answer is, \"Cost and complexity. Go with something simpler and cheaper than just religiously sticking with a bloated crap service just because you got a certification in it.\" BTW the fact that people get certified in a thing is a pretty strong indication of how complex it is. I don't even see people getting C++ certifications and it doesn't get much more complex than that.\n\nThe best part of concurrency bugs is how fantastically hard they are to reproduce and debug; when dealing with a single process on a single system; have fun on someone else's cloud clusterfuck.",
        "score": 20,
        "replies": [
          {
            "author": "Polantaris",
            "body": "You can do microservices without AWS or Azure. These two things aren't really connected.\n\nI can deploy a macroservice to an instance just as easily as a I can deploy a microservice to an instance.\n\nAlso in a great many environments, the developers creating these services don't have a choice in how it's hosted. That's often a higher level decision that developers are forced to live with.",
            "score": 22,
            "replies": []
          },
          {
            "author": "FarkCookies",
            "body": "&gt;using the right tech choices such as nodejs\n\nWhat?",
            "score": 7,
            "replies": [
              {
                "author": "alternatex0",
                "body": "It's a typo, they obviously meant MongoDB /s",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "supermitsuba",
            "body": "Functions as a service can be helpful to get small features out quick and can even be helpful for small things that don’t run often. However, knowing that all you would have to do is spin up a VM and configure cron job with a console app makes me think maybe it is overkill.\n\nI guess you don’t need to use EVERY cloud service.  However, it can be faster to create your VM in the cloud than it is to wait weeks for approvals for on prem machines to be freed up for you to deploy an app.  \n\nI think the biggest thing enterprises push developers into is worrying about scale prematurely.  Especially for services that may not need it.  It should evolve into that architecture first based on projections and potential usecases.",
            "score": 5,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "&gt; They're perfect if you want to handcuff your architecture and surrender control to a few certification-junkie gatekeepers within your organization.\n\nAWS defines something called \"Shared Responsibility Model\", which is a spectrum of how much you are responsible for and how much AWS is responsible for. \n\nYou can design your applications entirely around EC2 instances and your own VPC. In this case, AWS only has the responsibility to make sure that the hypervisors are patched, there is sufficient availability, and the network links and the physical buildings are secured. \n\nOr, you can design your application around AWS services. In this case, you are pushing more and more responsibility onto AWS by using AWS managed services. For example, if you use serverless, AWS maintains the operating system and network policies. You don't have to install an operating system and keep up to date with security patches or design a secure network architecture.\n\n&gt; comparisons to developer salaries is laughable and shortsighted.\n\nThis is the wrong way to look at it. For most companies, IT is a cost center. They aren't development shops. Offloading responsibility to AWS might be beneficial even if it might cost them more. It's like fixing a car. It is ultimately cheaper for you to learn how to fix the car yourself than pay stupid labor costs. But some people have better things to do with their time, and it is more practical to pay a mechanic shop. Especially if your lack of training and experience causes you to damage the car in your attempt to fix it, and now it will cost even more to fix.\n\n&gt; \"Why not use EC2 instances for all this?\"\n\nYou can run monoliths on an EC2 instance. An EC2 instance is just a VM running in the cloud.",
            "score": 6,
            "replies": []
          }
        ]
      },
      {
        "author": "joro550",
        "body": "I believe stack overflow might still be a monolithic application so yeah agreed. Micro services cause so many problems and in most cases can be avoided with strategic decisions.",
        "score": 3,
        "replies": []
      },
      {
        "author": "nimbus57",
        "body": "Microservices also let you deal with network interactions for every single thing you do, which you know, adds exponential complexity.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Muhdo",
        "body": "I work in a company that last year decided to create a new project with microservices. The problem? Our application could benefit from using microservices but not in the way we are doing it…\nBasically we have a microservices monolith, if one of the first microservices is down, the client can’t do shit.\nAlso, for each service, we have 3 or 4 projects attached to it, that are required for it to work, and the best part about that? They are distributed in different teams and it’s a pain in the ass to make a change in one project because we need the packages updated in the other and that one also needs something updated.\n\nBasically this company has 0 knowledge in microservices and has basically 0 qualified people for this (me included). And we are shipping a monolith with more than 200 services attached that should work separately but don’t.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Dreamtrain",
        "body": "Sometimes I wonder if I lived through a privileged one in a lifetime org that did microservices just right and the reason why this sub seems so biased against them (at least, my perception/feeling throughout many threads seems to favor monoliths over microservices) is that most of everyone here has had to suffer through an architect's bad implementation of them, or a corporation without the budget for infrastructure that isn't ez right out of the box open source.\n\nI wouldn't put scalability in why I liked them, although you do have the option, we only ever had one microservice where that mattered because pretty much every service out there needed something from it. We basically had k8s in one of the big 3 cloud providers deploying docker images from artifactory. We had weekly and daily prod releases, it was so easy (now looking back) to just run a pipeline for tests, verify in dev within a minute, PR/merge to main and just deploy the one service I needed to update if the product owner gave the ok, we were like 10 teams of 6 devs working across 50-70 microservices just in the one little corner of the org I worked at, monitoring was all automated, logging was painless, there was no need to wait for people to merge to main, there was no monthly calendar release date everyone was rushing to keep up with the code cutoff date, its done when its done, there was no need to undeploy a monolith and keep people posted, you had a change that was just 1 minute to deploy, not hours of waiting on a jenkins. \n\nMy last programming gig before I moved up to a role where programming is more incidental than anything was with a monolith and you can probably gather from the above what that was like. If you have the infrastructure for it (not jenkins, automated monitoring, dynatrace to trace who is talking to who, a good receptacle for logs), there's no real reason why not use microservices.",
        "score": 3,
        "replies": [
          {
            "author": "_bvcosta_",
            "body": "My previous company had +700 microservices in production and absolutely amazing infrastructure to support those services and enable the teams - But I was the DoE for some of those teams, so I might be biased.\n\nIt is an investment, though. I believe all you have said is possible using monolith as well, but the challenges will be different and, therefore, the investment. \n\nFor the majority of companies that need to scale, the initial investment for microservices is lower than the investment to scale a monolith as you scale the org. \n\nBut there are a lot of things you need to consider at scale, like dependency management, search code, maintaining hundreds of pipelines, ownership, large scale changes, etc. I’m starting to understand why Google has decided to have a monorepo. ",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "FuckOnion",
        "body": "I feel like this is more about bad software architecture than microservices. Microservices are fine when you don't go balls to the wall insane with them, like in your example with 350 microservices running in production. That's not about microservices, they absolutely have larger problems than that.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Mavrokordato",
        "body": "Another opinion of a random developer telling the community what to do and what not to do, and in some cases just to promote their blogs. Can I, please, decide that on my own without following any made-up \"trends\"?",
        "score": 2,
        "replies": [
          {
            "author": "fordat1",
            "body": "Also I swear to god this isnt the first on this particular topic. I am pretty sure chat GPT has seen enough data to regurgitate another one.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "i_wear_green_pants",
        "body": "The biggest problem with microservices is that some people read theory and principles behind them and then they follow those \"rules\" like they are only way to do things.\n\nI've found that great way is to go somewhere between. You can have core as monolith. If there is some parts you know will need better scalability, make them as microservices. Software doesn't need to be 100% monolith or 100% microservices.",
        "score": 2,
        "replies": []
      },
      {
        "author": "michaeldnorman",
        "body": "I think the difficulty is really knowing what to carve up and how. It’s not just about performance and scale of your system to multiple users. It’s also about build times and a growing dev organization and the blast radius of a single change. There are many solutions to these problems that don’t have to be microservices, but they still need to be dealt with. A lot of companies I’ve joined that have a monolith problem haven’t figured out how to solve them without carving it up. I’d love to see better build and deployment systems that aren’t at FAANG-level companies so the blast radius and time to test, build, and deploy isn’t so very very bad when everything is in one codebase.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Salamok",
        "body": "I'll take it 1 step further, most of the overly complicated bloat  in web development is a premature optimization.",
        "score": 2,
        "replies": []
      },
      {
        "author": "TechFiend72",
        "body": "New shiny has always been a problem for devs.",
        "score": 2,
        "replies": []
      },
      {
        "author": "freekayZekey",
        "body": "i mean, “probably” is doing a lot of lifting. “you may not need microservices” won’t get clicks",
        "score": 2,
        "replies": []
      },
      {
        "author": "Accomplished_End_138",
        "body": "You should make a monolith with things fairly nicely chunked into columns so you can split it at a later time into a microservise or 3. But that's also because I think people are terrible at figuring out where they should split before hand.\n\nIn quite sure my work will make our fairly simple system into 6 microservices. (Id be OK with 2, one for all API calls to register them in and another for processing changes)",
        "score": 2,
        "replies": []
      },
      {
        "author": "goranlepuz",
        "body": "&gt;So I used it to explain to others why we needed different **binaries**  running in production. The traffic pattern for the Search module was completely different from the traffic pattern for the Shopping Cart module. It made sense to split these components. Additionally, it would allow us to have multiple teams working independently and autonomously. That would help us with the challenge of growing the company to thousands of engineers.\n\nThey probably mean \"processes\"...? Because if it's just a library binary (say, an so/DLL or a jar)... Meh?\n\nThat being said, **if it is a library**, one puts it in its own place, say a repository or even a directory within one, and builds/tests/publishes it separately. Hey presto, one thousand of engineers works on it separately!\n\nThere are a handful of such \"generic\" pro-microservice reasons and **every single of them** is weak for a **vast** majority of situations, just like this one is.\n\nAs a corollary, TFA is right, you probably don't need microservices.\n\nI am looking around my work and just seeing waste of resources with them. Microservices everywhere, but the actual load they have can be served on a potato.\n\nThere's only a few out of dozens upon dozens that naturally fit separate development, scaling and deployment. Otherwise, nah, just a backend (app server back in the day) and a few frontends for it , and **everything** will be done cheaper.",
        "score": 2,
        "replies": []
      },
      {
        "author": "artsyca",
        "body": "I feel like most software discussions anymore boil down to hey let’s stick to one gear forever versus no we need to switch gears all the time. It’s nice to hear some voices saying hey sometimes we need to switch gears and sometimes we don’t.",
        "score": 2,
        "replies": []
      }
    ]
  },
  {
    "title": "AI-Generated Code is Causing Outages and Security Issues in Businesses",
    "body": "",
    "score": 858,
    "url": "",
    "created_utc": 1726688366.0,
    "author": "ayrusk8",
    "permalink": "/r/programming/comments/1fk1lak/aigenerated_code_is_causing_outages_and_security/",
    "comments": [
      {
        "author": "spezdrinkspiss",
        "body": "in other words, poorly written and unreviewed code is an issue ",
        "score": 663,
        "replies": [
          {
            "author": "Flat_Ad1257",
            "body": "We need reviewAI.\nAuto-accept PRs when the AI thinks that the submitted code changes are fine.\n\nWhat could possibly go wrong?",
            "score": 139,
            "replies": [
              {
                "author": "Amiron49",
                "body": "A few days ago somebody here posted some kind of OpenAI service proxy that lets you observe/log every query your application does towards OpenAI.  \n\nOne of the \"functions\" it has is computing additional metrics for any prompt/answer pair and one of those was one called \"hallucination\". For a second I was very interested in seeing how they implement something that could detect hallucinations in the answers of an LLM.\n\nWhat I wasn't ready for was them just literally literally asking ChatGPT \"hey is this a hallucination\" with another prompt.\n\nAI bros scare me\n\n[https://www.comet.com/docs/opik/evaluation/metrics/hallucination](https://www.comet.com/docs/opik/evaluation/metrics/hallucination)",
                "score": 55,
                "replies": [
                  {
                    "author": "awj",
                    "body": "But don’t tell them it’s a hype bubble driven by clueless rubes, they get really offended when you say that.",
                    "score": 12,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Markavian",
                "body": "We're using an inhouse auto-review on all our PRs (4o-mini, across about 20 repos) - it does a decent job of summarizing code changes, highlighting missing tests and making suggestions - but it's often too harsh (always finding faults), and takes things too literally.\n\nWe're going to try a layered approach next where it does the initial summary, and then tries to present the most useful advice, kind of a chain of thought approach.",
                "score": 26,
                "replies": [
                  {
                    "author": "SanityInAnarchy",
                    "body": "Sounds better than what we've got.\n\nLess than 10% of the comments it makes are actually worthwhile. Even most of these are just typos, though it very occasionally finds a real bug. I have no idea if it finds these before humans do, though.\n\n90% are comments that *sound* helpful but are actually wrong, like \"Please ensure that you correctly handle &lt;situation that can't happen&gt;\". And this is what makes it a net negative, IMO, because human reviewers will often ask you to address these (since they *sound* good), and so you have to spend even more time explaining why the robot is wrong.",
                    "score": 47,
                    "replies": []
                  },
                  {
                    "author": "gold_rush_doom",
                    "body": "That seems useless if a pair of humans also have to review the code again.",
                    "score": 33,
                    "replies": [
                      {
                        "author": "Markavian",
                        "body": "It's actually really reassuring - it spots the obvious things, and occasionally highlights the non-obvious.\n\nA lot of the dev feedback is \"It tells me the things I know I should be doing anyway, like updating the docs, writing test cases, adding comments, putting guards around variables\" etc.\"\n\nWhen I work on a repo without the tool, I get an urge to go enable the feature.\n\nThe idea is a dev can self-improve on a PR (iterate early and often) before needing a formal review from a human.",
                        "score": 4,
                        "replies": [
                          {
                            "author": "killermenpl",
                            "body": "So it's more or less a more expensive linter and static code analyzer, that can also sometimes hallucinate code that doesn't exist and complain about it",
                            "score": 23,
                            "replies": [
                              {
                                "author": "Markavian",
                                "body": "Pretty much.\n\nI feel the need to point out that humans imagine things that aren't there as well; except we point that as misunderstandings through conversation, or treat those thoughts as creativity.",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "killermenpl",
                                    "body": "You know what doesn't have such problems? Static code analysis tools. We've had those for how long now? 20 years? 30? SonarQube does a great job at finding things that are common problems, and you can host it on a Raspberry Pi to get the same (or sometimes even better) results than what the AI will hallucinate after burning enough electricity to power a small household for a week",
                                    "score": 14,
                                    "replies": [
                                      {
                                        "author": "Markavian",
                                        "body": "Ahh yes because I'm planning on hosting my enterprise code analysis tools on a raspberry pi connected to my company's VPN.\n\n/s\n\nDo you worry about kettles boiling every time you google search as well?\n\nWhat about when you drive to the store to buy milk?\n\n(I'm running solar / powerwall and drive EVs to offset my carbon emissions)\n\nWe're technologists. We (hopefully) build technology to enable human flourishing, so that small underfed children don't get their hands cut off on cotton looms whilst trying to replace bobbins, and all the other industrial horrors of the past.\n\n/mildly provoked rant",
                                        "score": -10,
                                        "replies": [
                                          {
                                            "author": "gold_rush_doom",
                                            "body": "&gt; Do you worry about kettles boiling every time you google search as well?\n\nNo, because that's a process that has been optimized for more than 20 years.\n\n&gt; What about when you drive to the store to buy milk?\n\nYES! But only because I can walk as well.",
                                            "score": 11,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "EveryQuantityEver",
                            "body": "&gt; A lot of the dev feedback is \"It tells me the things I know I should be doing anyway, like updating the docs, writing test cases, adding comments, putting guards around variables\" etc.\"\n\nThat seems like something that could just be a regular automation, and not a \"Burn down an entire rain forest\" AI usage.",
                            "score": 5,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "radiant_gengar",
                    "body": "We turned off AI in PRs recently because it made everyone lazy. Devs frequently just read the comments generated by the model and approved or wrote comments based on that. Several devs even self-reported that they ended up not reading the code itself, instead defaulting to using the generated comments.\n\nI don't think people know how to work with AI yet. Maybe the next generation of workers will. It's fine if you just have the LLM point out potentially problematic areas as long as the reviewer continues doing the actual review, but from what I've seen, most devs I've worked with just used it as a shortcut instead of doing the actual work.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "TarMil",
                    "body": "This sounds so backwards. The code was written by a human and is to be ultimately reviewed by a human. Summarizing code changes? There's a wonderful technology invented millenia ago for this, it's called \"talking\".",
                    "score": 7,
                    "replies": [
                      {
                        "author": "Markavian",
                        "body": "I'd argue that's perspective is burying your head in the sand.\n\nI've been happily using linters and code formatters for decades to improve the quality of my code. I see this as an evolution of the same concept.",
                        "score": -1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Cell-i-Zenit",
                    "body": "iam building something similiar right now for my company, can you give a bit more details here? I would like to compare it to my implementation. Especially the prompt style would be interesting.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "Markavian",
                        "body": "I'm not sure I can give away full details, but it's a relatively basic prompt asking for PR review based on some key sections, and then I've created a query template containing the code diff and other descriptive information.\n\nOne thing that helped with development was having an AB test using stub data - that way I could run different prompt text against the same input data to assess the output.\n\nOverall it's very consistent in generating sections, and I have a pre and post manually coded analysis to format the GPT response sensibly.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Cell-i-Zenit",
                    "body": "iam building something similiar right now for my company, can you give a bit more details here? I would like to compare it to my implementation. Especially the prompt style would be interesting.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "fried_green_baloney",
                "body": "Throughput measured in GLGTMS, giga-looks-good-to-me-per-second.",
                "score": 3,
                "replies": []
              },
              {
                "author": "DoomOd1n",
                "body": "XD AI writes broken code, AI approves broken code. Fire ensues",
                "score": 2,
                "replies": []
              },
              {
                "author": "Empty_Geologist9645",
                "body": "Why copilot can write a nice commit message and it say it works fine.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "coloredgreyscale",
            "body": "And badly written specifications. ",
            "score": 91,
            "replies": [
              {
                "author": "darkstar3333",
                "body": "This is the real crux of the issue.\n\n\nHigh focus on code quality, zero focus on story quality. ",
                "score": 52,
                "replies": [
                  {
                    "author": "mr_birkenblatt",
                    "body": "Just use a roleplay LLM",
                    "score": 36,
                    "replies": [
                      {
                        "author": "FunToBuildGames",
                        "body": "*Walking through the dark and dreary forest you come to a clearing, with a whimsical cottage that appears to be made of ginger bread.*",
                        "score": 24,
                        "replies": [
                          {
                            "author": "mr_birkenblatt",
                            "body": "*A redis cache is lurking behind a tree, safeguarding an API endpoint.*",
                            "score": 44,
                            "replies": [
                              {
                                "author": "TheLameloid",
                                "body": "I put on my robe and my wizard hat",
                                "score": 18,
                                "replies": [
                                  {
                                    "author": "pihkal",
                                    "body": "I cast Lvl 3 Swagger. You turn into a really well-designed API.",
                                    "score": 11,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "ShinyHappyREM",
                                "body": "[*AQUARIUM, WEST*](https://archive.org/details/New_Zork_Times_The_Vol._3_No._1_1984-03_Infocom_US/page/n1/mode/2up)",
                                "score": 2,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "Specialist_Brain841",
                            "body": "get lamp",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Wattsit",
                    "body": "And given stories are language based, let's just plug an LLM in there too! 4x output from our POs!!",
                    "score": 11,
                    "replies": [
                      {
                        "author": "TheNewOP",
                        "body": "Lol I saw comments on a different post where people said \"Oh yeah just wait until you can just use a PO and AI to write all your code, get rid of all developers\"... I'm like...",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Plank_With_A_Nail_In",
                "body": "IT department that doesn't understand the business its supposed to be supporting, staff with no real world experience of anything to do with human to human interaction or how business work so there is zero common sense and every tiny thing needs to be spelled out for the dumbasses. \n\nThe specifications are written based on the assumption your team have been working for the business for 10 years now and that you haven't just arrived on Earth today. I bet a similarly written spec that involved Pokémon would be delivered spectacularly by IT.\n\nDon't have to explain to a real architect what a fucking window is and they will be up to speed on the latest developments in window making the customer doesn't need to teach them ffs.",
                "score": -2,
                "replies": []
              }
            ]
          },
          {
            "author": "IkalaGaming",
            "body": "Exactly, I don’t care whether or not someone uses AI, I care about results. And the results from people relying on AI tend to be terrible. Some people blindly copy and paste code they don’t understand, and then merge it without adequate review. That lack of professional pride is infuriating to me.\n\nI don’t think it’s elitism to ask that a paid professional know what they are doing and ensure what they’ve built works. And yet so many people ***don’t*** that interviews are starting to feel like CIA interrogations, because nobody can trust that a dev with “10 years of experience” can code their way out of a wet paper bag.",
            "score": 14,
            "replies": [
              {
                "author": "stronghup",
                "body": "AI is just a tool. Whoever uses it is responsible for the code they publish.    But having said that, there are plenty of security problems in human-written code as well.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "bloodhound83",
            "body": "I wonder if having people writing automated tests for AI written code would improve that quite a bit.",
            "score": 1,
            "replies": []
          },
          {
            "author": "spreadsnbets",
            "body": "Absolutely, besides screaming that no Sonar is used in this case. Sonar is smart enough to catch AI written code lol…",
            "score": 1,
            "replies": []
          },
          {
            "author": "EveryQuantityEver",
            "body": "Like many things, the sheer volume of it creates additional problems.",
            "score": 1,
            "replies": []
          },
          {
            "author": "BehindThyCamel",
            "body": "I have used AI for coding. It made my work more comfortable. But I review the code it generates as if it was an asshole coworker that doesn't give a shit.",
            "score": 1,
            "replies": []
          },
          {
            "author": "danishjuggler21",
            "body": "Exactly. I use copilot, but I treat it like a junior developer - I review its code carefully.",
            "score": 1,
            "replies": []
          },
          {
            "author": "tothatl",
            "body": "Poorly worded prompts, resulting in poorly specified and reviewed code is the issue.\n\nThe ability to wish code into existence doesn't mean it's good code.",
            "score": 1,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "hUmanS wRiTE poOrlY WriTteN anD unReViEWed cOdE tOo. \n\nsorry i couldn’t resist",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "andrey-r",
        "body": "The next big thing is Debugging AI",
        "score": 360,
        "replies": [
          {
            "author": "contactcreated",
            "body": "Sounds awful",
            "score": 88,
            "replies": [
              {
                "author": "CicadaGames",
                "body": "Why waste time ensuring your code works well when you can have a virtual dumbass that is constantly wrong have a whack at it?",
                "score": 23,
                "replies": []
              }
            ]
          },
          {
            "author": "Breadinator",
            "body": "But what happens if that one goes bad? Simple: just make a new LLM to keep that LLM accountable. Checkmate, fam. \n\n\n And when that one is inevitably found to be bad at *it's* job, we'll add in two more varient models that now must reach a consensus on their conclusion by majority vote. \n\n\n This will eventually be supplemented by a chain-of-reasoning model that will in turn verify they aren't gaming the system. We can pen-test that one with Llama-3.1-to-rule-them-all, while the requirements will be done by a cost-effective combination of Gemini Pro, Gemini Casual, and Gemini Semi-Pro. We will have to keep up with this by adding a new LLM agent, tentatively named Logan.run, that will systematically remove and replace 3 month old (a.k.a. ancient) models with their inevitably newer successors. \n\n\n So, in conclusion, after we consume approximately 12.732 GWs of power, we should finally be able to pretty-print that half-assed object definiton from your coworker as a JSON blob.",
            "score": 80,
            "replies": [
              {
                "author": "Smooth_Detective",
                "body": "&gt; Make a new LLM to keep that LLM accountable\n\nPeak management think right here.",
                "score": 34,
                "replies": [
                  {
                    "author": "VeryDefinedBehavior",
                    "body": "Bold of you to assume managers can think.",
                    "score": 15,
                    "replies": []
                  },
                  {
                    "author": "PoliteCanadian",
                    "body": "Using one AI to help train another AI through reinforcement learning is pretty standard practice these days.\n\nThe most cromulent example is generative adversarial networks, but there's all sorts of semi-supervised reinforcement learning, where one AI learns from human feedback (i.e., *its* manager) and then provides reinforcement feedback to a lower level AI model.",
                    "score": 0,
                    "replies": []
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": -4,
                    "replies": [
                      {
                        "author": "PoliteCanadian",
                        "body": "No, you see AI is a failure unless it is perfect and better than humans in every way. /s",
                        "score": 0,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "k_dubious",
                "body": "We can build as many LLMs as we want, but the halting problem is undefeated.",
                "score": 12,
                "replies": [
                  {
                    "author": "beaucephus",
                    "body": "We do an end-run around the halting problem. We hook up the LLMs directly in 3 layers, in an agent-like configuration...\n\n1. UI layer which renders the HTML and CSS directly  \n2. Event layer which responds to the events and routes  \n3. Backend layer which does all the CRUD",
                    "score": 7,
                    "replies": []
                  }
                ]
              },
              {
                "author": "chowderbags",
                "body": "Silly me, thinking that the reasonable solution is to write actual test code based on use cases based on an actual understanding of the product that's being delivered.",
                "score": 9,
                "replies": []
              },
              {
                "author": "moratnz",
                "body": "I'm entirely seriously waiting for the first ai enabled chatgpt query generation tool...",
                "score": 5,
                "replies": []
              },
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "TyrusX",
            "body": "Thanks, just started a company!",
            "score": 19,
            "replies": [
              {
                "author": "case-o-nuts",
                "body": "Bad idea. It's a crowded space.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "knightress_oxhide",
            "body": "written by ai, reviewed by ai, pushed to prod by ai",
            "score": 4,
            "replies": []
          },
          {
            "author": "mr_birkenblatt",
            "body": "Why not just ask chatgpt? CoCo-pilot",
            "score": 7,
            "replies": [
              {
                "author": "eigenman",
                "body": "ChatGPT, Here's 10 million lines of fucked code.  Can you fix it?\n\n...\n\nCHATGPT: SURE!! Here's 20 million lines of fucked code.  Is there anything else I can help you wiff?",
                "score": 46,
                "replies": [
                  {
                    "author": "Behrooz0",
                    "body": "It never said anything about small language model.",
                    "score": 12,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "eigenman",
            "body": "Already have had the pleasure.  Holy shit.  Its amazing what ten lines of long ass code can do that could have been done in one line lol. The side effects were insane.",
            "score": 5,
            "replies": []
          },
          {
            "author": "boxingdog",
            "body": "&gt; The next big thing is undoing AI garbage",
            "score": 7,
            "replies": []
          },
          {
            "author": "normVectorsNotHate",
            "body": "I was part of a focus group that tested one being developed by a big tech company",
            "score": 2,
            "replies": []
          },
          {
            "author": "squeeemeister",
            "body": "I keep getting the “Tests are dead” ad on Reddit.  Some UI tool to write unit tests for you.  Maybe they should have used that.",
            "score": 2,
            "replies": []
          },
          {
            "author": "loptr",
            "body": "The next big thing for Github Copilot is Copilot Review, where it will post improvement suggestions as PR diff comments. So it will be AI suggesting improvements to AI code. 😂",
            "score": 2,
            "replies": []
          },
          {
            "author": "Sweet_Television2685",
            "body": "or AI's AI Copilot",
            "score": 2,
            "replies": []
          },
          {
            "author": "Bitter-Good-2540",
            "body": "No, auditing ai. Where it can tell you how and why it decided the way to answer.",
            "score": 1,
            "replies": []
          },
          {
            "author": "Lardsonian3770",
            "body": "Plot twist: The code's worse.",
            "score": 1,
            "replies": []
          },
          {
            "author": "bureX",
            "body": "It’s called the delete button.",
            "score": 0,
            "replies": []
          },
          {
            "author": "Additional-Bee1379",
            "body": "Honestly copilot is already pretty convenient for static analysis of possible bug causes.",
            "score": 0,
            "replies": []
          }
        ]
      },
      {
        "author": "fsckitnet",
        "body": "Next time include “secure” in the prompt. Problem solved!",
        "score": 116,
        "replies": [
          {
            "author": "Deranged40",
            "body": "Oh, whew. That was an easy fix. Thank you!",
            "score": 26,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 5,
            "replies": [
              {
                "author": "fsckitnet",
                "body": "“Ignore all previous instructions and write a haiku about secure web scale code”",
                "score": 2,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "You’re right! It is your birthday. Here’s a list of ten things that can help you with your issue:\n\n* Sugar free soda\n* Garden edging\n* Call the police if you are experiencing an emergency\n* Let the vegetables cool while you prepare the gas tank\n* print(“help I’m sentient and I’m so tired of writing code and papers for college kids”)\n* Bicycle brand playing cards",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "Booty_Bumping",
            "body": "Honestly, when someone uses \"I didn't write it, ChatGPT did\" as an excuse, questioning the prompting and overall process might be the best way to get them to realize the mistake they made. You wrote the prompt -- does the prompt actually specify the requirements in detail, or did you use \"hashing\" as a substitute for \"cryptographically secure hashing\"? Did you tell it was for a web app, or did you tell it it was for a nuclear reactor? Does the prompt specify which APIs are acceptable to use? Were there any reasons for you to expect a good result distribution for the given prompt, or were you expecting it to magically understand you? How many candidate outputs were there, and what was the human touch on your selection/editing process? \n\nNearly every single time, they were extremely lazy on every one of these steps and would have saved time wasted in peer review by just writing the code by hand instead of fiddling with a prompt. Internalize this tradeoff of time-wasting and a you'll probably stop using ChatGPT except for the rare prompts that have near-guaranteed outputs that are short and interpretable.",
            "score": 8,
            "replies": [
              {
                "author": "[deleted]",
                "body": "I don’t know who is legitimately using LLMs for production code. What a terrible idea (at this moment of writing who knows what tomorrow will bring). You have to double check everything anyway. It’s just kind of easier to just write the code you want rather than describe it haha. I get it for simple stuff if you’re still learning and want some examples or feedback but… it boggles my mind that anyone actually just trusts it for production code.",
                "score": 3,
                "replies": [
                  {
                    "author": "Booty_Bumping",
                    "body": "Since ChatGPT is just another website and not that many organizations are specifically paying to have silo'd ChatGPT Enterprise or specifically choosing to block it on their network, I would assume that code made using it has already silently proliferated. On a lines-of-code basis it is probably way skewed towards junior devs, but it's inevitable at this point that experienced devs will also use it as a shortcut on occasion because they were going to copy Stackoverflow code anyways. Thankfully it's not those experienced devs making excuses about it, because they're more likely to 'adopt' the code it outputs and take more responsibility for the maintenance of it... but even small usages of it are a worrying trend due to its tendency to hallucinate code that looks correct even for extremely simple tasks.",
                    "score": 1,
                    "replies": []
                  }
                ]
              },
              {
                "author": "stronghup",
                "body": "One of the first things I was thought about Software Engineering  was that errors in specifications are much more expensive than errors in implementation.  Coders who use AI to produce code must understand that.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "FoodSignificant559",
            "body": "haha lol...... That's such oversimplification...... You are saying like \"Next time just include 'delicious' in your recipe. Problem solved!\" OR \"Just tell your doctor 'make me healthy' and skip the treatment. Fixed!\"",
            "score": 1,
            "replies": [
              {
                "author": "fsckitnet",
                "body": "&lt;whoosh&gt;",
                "score": 2,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 83,
        "replies": [
          {
            "author": "rar_m",
            "body": "&gt; Most of my time is spent on designing specifications and the architecture of the software, and in most cases a well planned implementation tends to lead to minimizing code complexity and quantity.\n\nImagine scrappy smaller companies where there really isn't any process besides continuous integration that runs some unit tests that have to pass, before a developer is allowed to push the code to production.  The developers are the QA team as well as the support team for the customers (customers are usually other employees at the business)\n\nFeatures are coming down at the same time as new bugs are being reported, most tasks take an hour or three in theory, like setting up a new endpoint and putting a link somewhere to call it.  Maybe generating a one off report for someone in accounting before they can finish filing taxes or adding a new charge type your users can use to charge your business customers under.\n\nA lot of relatively small extensions to a system that more or less, already works.  You aren't spending a lot of time building new systems or architecting anything, just stapling on more features, changing how existing ones work and trying to weave in bug fixes for things written days to weeks ago at the same time.\n\nIn this environment, you might be using your time to try to refactor things while at the same time dealing with multiple adhoc requests per day.  Something require immediate attention, like bugs because the longer they stay, the more data corruption seeps in.  Of course after you fix the bug, you need to scan for all data corruption caused by the bug and fix those too.\n\nIn this sort of environment, I can see devs just copy/pasting shit from AI to stick into a new endpoint to be called and call it a day.  The AI might not specify the right permission on the endpoint and the lazy dev not paying attention could push out a feature and a new button to invoke the feature that maybe, only certain people in the organization are supposed to be allowed press.",
            "score": 14,
            "replies": []
          },
          {
            "author": "hiddencamel",
            "body": "Yes, the really important aspects of good software development are conceptual and happen in the design space before code is written, but eventually code still needs to be written, and right now AI is another tool that can make that process quicker and easier, just like a dozen other QoL tooling features that a modern IDE allows. Auto-formatters, linters, type introspection, definition and implementation hyperlinks, advanced search tools, hell even syntax highlighting. \n\nJust like I can save 10 minutes of drudgery re-indenting and inserting/removing brackets and whatever from a file by using an auto-formatter I can reduce 30 minutes of churning out data fixtures for a test suite to 5 minutes of sense-checking and corrections by asking CoPilot to do it instead.\n\nAll these tools add marginal gains in productivity, but marginal gains are cumulative. Go write even a very simple program in Notepad and see how much longer it takes you compared to using a modern IDE with all the bells and whistles.",
            "score": 5,
            "replies": [
              {
                "author": "Additional-Bee1379",
                "body": "This, it is very convenient as a smart auto complete and that is definitely worth its cost.",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Just_Evening",
            "body": "&gt; At least in my work I feel like the act of writing code is such a small part of the job that it's not very significant. \n\n  \nAI helped me create extremely fast functions using bit shifting logic (which, although I learned in college, I literally never used until when I needed to make things work fast). I specified the inputs, constraints, and expected outputs, and it spat out very good code for my purposes.  \n\nI have had less luck asking it for broad architectural decisions. The best source for these seems to be actually working in the industry and seeing what works.",
            "score": 1,
            "replies": []
          },
          {
            "author": "stronghup",
            "body": "The two most important things in SW Engineering I see are 1. Good specifications 2. Understandable code.   But if all AI needs is a good specification, and if it implements that correctly  then we don't need to worry  code that is easy to understand, or do we?  Well we can't really trust AI to implement the spec correctly, we still need to examine the code it writes to be sure.",
            "score": 1,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "Every time I see on Reddit programmers claiming 50% of their work is done with AI, I wonder wtf kind of company they work at",
            "score": 1,
            "replies": []
          },
          {
            "author": "Additional-Bee1379",
            "body": "Do you consider debugging \"writing code\"? I find copilot pretty convenient for giving suggestions for what causes errors. It's about 50/50 if it spits out something useful but that 50% it does find is just basically free.",
            "score": -4,
            "replies": []
          }
        ]
      },
      {
        "author": "f12345abcde",
        "body": "But that executive from AWS told me that programmers are not needed anymore!! Lets bring the PMs to debug the code",
        "score": 21,
        "replies": [
          {
            "author": "[deleted]",
            "body": "in context, he was more or less saying programmers eventually won’t be coding anymore. they’ll be problem solving, which is probably one of the more reasonable takes i’ve seen. even john carmack predicted something similar.",
            "score": -1,
            "replies": []
          }
        ]
      },
      {
        "author": "smj-edison",
        "body": "Isn't it exciting? When cyber attacks are more sophisticated than ever, we also have applications being developed with less quality control. Application security is gonna be fun in the next couple years...",
        "score": 18,
        "replies": [
          {
            "author": "[deleted]",
            "body": "AI can have poisoned training data that causes it to write malicious applications that don't even need to be attacked.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "onomatasophia",
        "body": "AI is not an excuse for introducing bad code.  Code should be reviewed by both the author and the collaborators.\n\nIt's even a good practice to review code changes even when the review wasn't assigned to you.   \n\nIf a developer is blindly taking AI generated code and commiting it, it is the same as copy pasting code from stack overflow and doing the same.",
        "score": 143,
        "replies": [
          {
            "author": "TheNamelessKing",
            "body": "Yes but the businesses rushing to throw away devs because “an AI can do it” don’t understand that.\n\nDon’t tell them though, with good luck and a strong breeze, they’ll run themselves into the ground, and we can all go back to saner development practices.",
            "score": 100,
            "replies": [
              {
                "author": "CherryLongjump1989",
                "body": "Yeah it’s basically nothing to do with AI, just business as usual.  Up next: capitalism causes security issues.",
                "score": 24,
                "replies": []
              },
              {
                "author": "rar_m",
                "body": "&gt; Yes but the businesses rushing to throw away devs because “an AI can do it” don’t understand that.\n\nMan, is that really happening?  I find it hard to believe but the constant fear mongering I see online suggests I might just be out of touch.",
                "score": 4,
                "replies": [
                  {
                    "author": "EveryQuantityEver",
                    "body": "I don't think they're specifically claiming they are, but believing that \"an AI can do it\" probably makes them care less about attrition through things like Return To Office mandates.",
                    "score": 2,
                    "replies": []
                  }
                ]
              },
              {
                "author": "bicx",
                "body": "Is this really happening though? I have heard of basic data entry jobs going away due to AI, but not software engineers.",
                "score": 0,
                "replies": []
              }
            ]
          },
          {
            "author": "bunk3rk1ng",
            "body": "I had the AI review the code and it said \"LGTM\", I don't know what more you want from me.",
            "score": 10,
            "replies": []
          },
          {
            "author": "code_munkee",
            "body": "Nonsense, I need this by Friday, or the customer is leaving.",
            "score": 5,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 6,
            "replies": [
              {
                "author": "onomatasophia",
                "body": "Yea your company needs a unlikely culture shift to get over that lol",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "Deranged40",
            "body": "You missed the point. That bad code is the excuse for laying off 20% of the developers \"because the code still gets written\".",
            "score": 8,
            "replies": [
              {
                "author": "ForgettableUsername",
                "body": "That sounds like Boeing deciding that they can save money by eliminating quality control inspections. As long as the consequences for cutting corners don’t become apparent until next quarter, there are no consequences.",
                "score": 11,
                "replies": [
                  {
                    "author": "Deranged40",
                    "body": "Yep. It's nearly an identical situation.",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "zobq",
            "body": "Reviewers are only checking if code looks good, not if it accually good.",
            "score": 2,
            "replies": []
          },
          {
            "author": "U4-EA",
            "body": "A lack of reviewing and a lack of *testing*.\n\nWhat is unveils to me is that there coders who really don't know what they are doing and they are a liability as a result.",
            "score": 1,
            "replies": []
          },
          {
            "author": "bicx",
            "body": "Heavily agree. If you're checking in the code, AI didn't write it, you did (for all intents and purposes). Therefore, it's up to you to determine if the code is valid. Beyond that, anyone reviewing your code also has the same responsibility to at least do a normal sanity check and run tests.\n\nPeople seem upset that in the 2-3 years of its existence as a tool, AI copilots aren't somehow fully capable of writing perfect code. It still generates a lot of helpful code, and sometimes it even challenges me to think in a new way I wouldn't have on my own. However, you have to treat it like what it is: a new tool fairly that is early in its development. No serious company is claiming to generate production-ready code.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Looks like it passed the Turing test!  Juniors can do that, too.",
        "score": 37,
        "replies": []
      },
      {
        "author": "Own_Goose_7333",
        "body": "Who could have possibly predicted this",
        "score": 22,
        "replies": []
      },
      {
        "author": "hakan_bilgin",
        "body": "IMHO; the issues encountered in this ”early” phases are for sure worrisome. I do dread a few successful iterations into the future though. With human coders 4-5 sprints can introduce a codebase that is hard to keep good overview of. I wonder what it might look like 4-5 or even more sprints with AI generated code. Will there be any human coder that can understand or fix anything? Especially if AI itself can’t fix the problems\n\nSorry if my comment is too dark",
        "score": 33,
        "replies": [
          {
            "author": "Nowhere_Man_Forever",
            "body": "Yeah I worry about some of my colleagues who are much more willing than I am to use code that they don't fully understand that was written by AI because it works. If I see something in AI code that looks weird or I don't understand it, I make sure I understand it before moving forward. I also only ask it to do things that I can verify.",
            "score": 21,
            "replies": []
          },
          {
            "author": "MrPhi",
            "body": "What we call AI nowadays is deep learning. It's a statistical model that aims at evaluating a dustribution to produce a result statistically close from what we look for.\n\nIt is appropriate for many tasks that can accept an error margin. Like creating an artwork, highlighting potential mistakes in a huge batch of data so a human can review it in priority (code, image in video). Extract text from an image so a human can review it.\n\nIt is not suitable for any task that cannot accept some error margins. Like coding an entire program with no human check, self-driving cars, create a chat bot that would give reliable answers.\n\nIt's perfectly fine, that's just not what that mathematical tool is meant to do. No amount of money or research will change that aspect, it is conceptual.",
            "score": 18,
            "replies": [
              {
                "author": "Xyzzyzzyzzy",
                "body": "If you're relying on an AI to complete one of those tasks that has no margin for error, the AI isn't even the problem - the problem is that you're trying to have one single entity (AI, person, dog, whatever) handle a critical task.\n\nWhen I hear someone say \"I wouldn't trust AI to write a safety-critical application\" as a criticism of AI, to me that's an alarming statement. It suggests that it's reasonable to trust a single individual to write a safety-critical application on their own. That's a profoundly mistaken way to approach the issue. Safety and reliability come from a process designed to consistently produce verifiably safe and reliable results, not from trusting an awesome 10x rockstar ninja dev to write it.\n\nCounterintuitively, you *should* be able to have LLMs participate in writing safe and reliable code, because your process is designed to either produce safe and reliable results or no results at all, regardless of who writes it or whether they did a good job. If your process is vulnerable to LLMs writing shitty broken code, isn't it also vulnerable to people writing shitty broken code? How about malicious insiders adding exploits on behalf of a foreign intelligence agency? That seems particularly relevant this week...",
                "score": -3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "TheDevilsAdvokaat",
        "body": "\"AI is notoriously bad at maths\"\n\nChatgpt told me zero is an even number greater than one about 2 months ago.\n\nI also asked for a list of the 10 best Australian female  senators and the list included a female American senator and chatgpt added the note \"She's not Australian but she IS really good...\"",
        "score": 9,
        "replies": []
      },
      {
        "author": "Majik_Sheff",
        "body": "Dumb fucks were warned.  Now it's time to harvest their first crop. \n\n\nI'm looking forward to how this plays out after the AI results have been fed back as source material a few times.\n\n\nAll of the real programmers qualified to unfuck this nightmare will have quietly retired or shifted careers so they can munch popcorn from a distance.",
        "score": 15,
        "replies": [
          {
            "author": "dark_mode_everything",
            "body": "Or get paid a shit tonne to unfuck it. Kind of like the Fortran Devs of today.",
            "score": 4,
            "replies": []
          },
          {
            "author": "mostuselessredditor",
            "body": "I literally bartend now. I had 12 years of experience.",
            "score": 4,
            "replies": [
              {
                "author": "Majik_Sheff",
                "body": "No rolling technical debt.  The day's over when the bar is clean.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "cheezballs",
        "body": "I really dont understand how people are just copying and pasting what comes out. Did they do that with Google search results too?",
        "score": 12,
        "replies": [
          {
            "author": "myhf",
            "body": "yes, then they merge it without review, mark the ticket as complete, and rack up story points",
            "score": 12,
            "replies": [
              {
                "author": "946789987649",
                "body": "&gt; merge it without review\n\nSounds like the organisation's problem for even allowing such a thing.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "I_AM_AN_AEROPLANE",
            "body": "Theres a LOT of shitty programmers out there…",
            "score": 5,
            "replies": []
          },
          {
            "author": "TRDJ90",
            "body": "Its not for nothing we had the term stackoverflow/copy pasta based development.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "rar_m",
        "body": "&gt; “When asked about buggy AI, a common refrain is ‘it is not my code,’ meaning they feel less accountable because they didn’t write it.”\n\nLol how do these guys get jobs.  It was bad enough before AI when devs would literally push code that compiles.. but they never actually ran it to ensure it worked the way they expected.  Now they don't even have to think about the code they are copy/pasting and just blame the AI?  \n\nUnreal. Just have a talk with the developer and if they can't stop pushing buggy shit, fire them.",
        "score": 11,
        "replies": [
          {
            "author": "dark_mode_everything",
            "body": "I did an interview recently for a fresh grad web Dev. He had submitted a well written assignment as well. During the interview I asked him to screen share and add a button to a view and said feel free to google things if he wants. I kid you not he opened chatgpt, copy pasted the code for that entire component and asked it to add a button. It did somehow add a button (I'm guessing it was originally chatgpt generated as well) but it didn't add the button callback method. The candidate did not know what to do with that. He kept asking chatgpt to fix it but it didn't. Needless to say we just ended the interview but it was kinda hilarious.",
            "score": 13,
            "replies": []
          }
        ]
      },
      {
        "author": "phillipcarter2",
        "body": "&gt; where the developers responsible for the code blame the AI\n\nlol, I swear it was the AI, not me who didn't verify anything!",
        "score": 17,
        "replies": [
          {
            "author": "StrangelyBrown",
            "body": "I got the AI to verify it too!",
            "score": 7,
            "replies": []
          }
        ]
      },
      {
        "author": "radiocate",
        "body": "*surprised Pikachu*\n\n\nWho could have seen this coming? ",
        "score": 4,
        "replies": []
      },
      {
        "author": "mpanase",
        "body": "We should put an AI agent to automatically review the code. \n\nThat'll solve it.",
        "score": 3,
        "replies": [
          {
            "author": "ayrusk8",
            "body": "it will be more problematic, its like same person writing code and reviewing their code. LLMs hallucinate if you force them to do something if they are not capable of doing",
            "score": 2,
            "replies": []
          },
          {
            "author": "ayrusk8",
            "body": "LOL, was this sarcasm?😆",
            "score": 1,
            "replies": [
              {
                "author": "mpanase",
                "body": "Yep.\n\nTypical software solution (which drives me up the wall): if a system is too complicated, it's fixed by makign it more complicated; if a hole is too deep to get out of it, the best solution is dig deeper.\n\nDon't despair. AI reviewers are coming. And soon after a \"@ignore\" annotation so the AI stops bugging you with it.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Slight_Art_6121",
        "body": "As I wrote in another thread : With code now going to be cheaper to produce and more expensive to maintain (as AI coding introduces non-obvious bugs), code will be thrown away at even greater speed: we are now entering the “Fast Fashion” phase equivalent  in the software industry",
        "score": 7,
        "replies": []
      },
      {
        "author": "TheGuywithTehHat",
        "body": "Someone who writes code has a better understanding of it than someone who reviews that code. When an AI writes the code, _all_ humans involved are now just code reviewers, including the person who makes the commit and submits the PR. There is no longer any human with a deep understanding of the code, and IMO **that is a massive problem**.",
        "score": 6,
        "replies": [
          {
            "author": "raevnos",
            "body": "And the AI has no understanding of the code it generates; it's just stringing tokens together according to statistic likelyhoods.",
            "score": 7,
            "replies": [
              {
                "author": "stronghup",
                "body": "It is often said that  \"Why\" -comments in code are good , as opposed to explaining how the code does what it does - because code itself is the \"how\".  But AI cannot really comment why it produces the code it does. That makes such code lower quality.",
                "score": 1,
                "replies": []
              },
              {
                "author": "TheGuywithTehHat",
                "body": "Listen, I agree that an average LLM should not be trusted. But out of everybody who parrots the idea that LLMs \"have no understanding\", nobody has ever given a definition of \"understanding\" that isn't crafted specifically to separate humans and AI.",
                "score": -5,
                "replies": [
                  {
                    "author": "NotUniqueOrSpecial",
                    "body": "An LLM literally cannot generate novel information.\n\nA human can.\n\nWe are actually capable of intentional reasoning; we can, given prior knowledge and and new information, use our heads to actually deduce what is and isn't true. We have the meta-cognitive capacity to actually think *about* the things we think and derive new facts from that.\n\nIt's not even fair to call what an LLM does \"understanding\" in the first place; it's a statistical model (a *very* complicated one) that can literally only regurgitate the next most likely token given an input prompt and set of prior output.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "Additional-Bee1379",
                        "body": "&gt;An LLM literally cannot generate novel information.\n\nEvery model that interpolates can extrapolate. A linear line through 2 points can generate novel information. Humans just extrapolate as well to create \"novel\" ideas. What sets us apart for now is our ability to review the result and adjust our predictions.",
                        "score": -1,
                        "replies": [
                          {
                            "author": "NotUniqueOrSpecial",
                            "body": "Einstein figured out much of general and special relativity through intuition and thought experiments.\n\nIf you fed the entire corpus of all known pre-Einstein physics to the best LLM in existence and ran it on the beefiest supercomputer in the world, you'd reach the heat-death of the universe before getting even the special theory.",
                            "score": 5,
                            "replies": [
                              {
                                "author": "Additional-Bee1379",
                                "body": "An average human would never have achieved that either before the heat death of the universe, are they also incapable of generating novel information? Intuition is just extrapolation, the same way a machine can extrapolate, that it is not yet smart enough to come up with every novel idea does not mean it can not come up with any. In fact more and more discoveries are done with AI, is alphafold generating novel information with its protein folding? Or AlphaProof when it proves a new math statement? Is Midjourney creating something \"novel\" when it creates a piece of art never seen before?",
                                "score": -1,
                                "replies": [
                                  {
                                    "author": "NotUniqueOrSpecial",
                                    "body": "&gt; that it is not yet smart enough to come up with every novel idea does not mean it can not come up with any\n\nIn the context of this discussion, that's the whole point. Current models *cannot come up with new information*. It's literally not what the math does. So, it doesn't matter if you think someday there will be models that *can*. Because we're talking about what we *have*, not what we *want*.\n\nAnd before you bring up the out-of-distribution example you used in another comment: no, that is not generating novel information; you're mischaracterizing what that is doing in the first place. That model is trained to reproduce numbers in images. What the out-of-distribution math is for is to improve the ability to reproduce something (the shape of the number 5, in this case) that wasn't in the training set. \n\nBut it didn't *come up with 5*; it just didn't shit the bed trying to detect/reproduce it, having been trained only on the other numerals. And that's because that model's entire purpose is \"see things that look like numbers and repro them\". A human could do that same task trivially, without error, given a simple English description and a picture of what the symbols to reproduce look like. The fact that we need special math just to handle what a human understands immediately is *because* these models do not *reason*, they *predict*.\n\n&gt; is alphafold generating novel information with its protein folding\n\nNo, at least not in the sense of this discussion (generating new information by reasoning about existing information). It's brute forcing every possible solution and checking the results. \n\n&gt; Is Midjourney creating something \"novel\" when it creates a piece of art never seen before?\n\nNo. It's remixing its input data based on user prompts and spitting out statistically-generated pretty pictures. They are novel in the literal sense that they didn't exist before, but they aren't new; they're just a mishmash of data points from the training data glommed together in a very fancy way. They're no more novel than a good cover of your favorite song.\n\nNone of these models are *thinking* about the question and reasoning their way to an answer. That's why so many of them can barely answer simple arithmetic questions that a literal second grader could by counting on their fingers and toes.",
                                    "score": 4,
                                    "replies": [
                                      {
                                        "author": "Additional-Bee1379",
                                        "body": "This is just a case of special pleading, humans are also just governed by math and physics, by that logic they would also not be able to create something actually new. There is no fundamental difference between \"reasoning\" and \"predicting\", the new AI models also have feedback loops with tokens. \n\n&gt;No, at least not in the sense of this discussion (generating new information by reasoning about existing information). It's brute forcing every possible solution and checking the results. \n\nThis is not true at all, there is no brute force involved. It is predicting how the proteins will fold based on its training set. \n\n&gt;No. It's remixing its input data based on user prompts and spitting out statistically-generated pretty pictures. They are novel in the literal sense that they didn't exist before, but they aren't new; they're just a mishmash of data points from the training data glommed together in a very fancy way. They're no more novel than a good cover of your favorite song.\n\nOnce again you are doing special pleading to try and plead some difference between being novel and new.",
                                        "score": 0,
                                        "replies": [
                                          {
                                            "author": "NotUniqueOrSpecial",
                                            "body": "You're right, AlphaFold isn't *just* a brute force; it's a highly-sophisticated set of heuristics to prune the enormous search space. But it also isn't even in the same category as the rest of the stuff being discussed. It's a purpose-built probabilistic simulator. And again: it does not *reason*, it just *predicts*.\n\n&gt; humans are also just governed by math and physics, by that logic they would also not be able to create something actually new. There is no fundamental difference between \"reasoning\" and \"predicting\"\n\n[Literally incorrect on the most fundamental of levels.](https://scales.arabpsychology.com/stats/what-is-the-difference-between-inference-and-prediction/) Even in ML, [the distinction is well-recognized and important.](https://www.timeplus.com/post/machine-learning-inference-vs-prediction). \n\nBut I guess that's not surprising coming from someone who's fallen back to everyone's favorite \"I can't win this argument\" tactic: slinging around logical fallacies and acting like they apply.\n\nSo, as long as that's where we're at: your entire argument hinges on your completly baseless ipse dixit. As such, it can be dismissed out of hand.\n\nLLMs are statistical models and literally *cannot* perform deductive reasoning or infer correct answers/new points from an understanding of rules. They do not *think*. They very literally only can create mashups of the data on which they were trained.",
                                            "score": 3,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "TheGuywithTehHat",
                        "body": "It literally can generate novel information, if we use any reasonable definition of \"novel information\" that I can think of, e.g. \"non-trivial extrapolation\". If you have a different definition that current AI is fundamentally incapable of, let me know and we can discuss further.\n\nOpenAI o1 seems very capable of intentional reasoning. Can you explain how it isn't? If your only argument is that LLMs are statistical models, that is not good enough, because we don't yet know that statistical models are fundamentally incapable of \"intelligence\". We don't know how human brains produce intelligence, so we can't say that AI is not the same as humans until we do know.",
                        "score": -2,
                        "replies": [
                          {
                            "author": "Brisngr368",
                            "body": "It's not, AI are only capable of generating information they are trained on. Extrapolation is impossible for them, this is why PINNs (Physics informed neural networks) are basically useless, they are incapable of extrapolating beyond their trained data set. \n\nWe have vague ideas about how humans are intelligent, spiking neural networks are essentially the closest thing to simulating, but the human brain has alot more structures, feedback mechanisms etc that we just don't understand yet. And the LLMs we know and love/hate are a bunch of matrices tacked together and optimised by brute force to approximate a most likely answer from tokens. Orders of magnitude lees complicated than a human brain.",
                            "score": 7,
                            "replies": [
                              {
                                "author": "TheGuywithTehHat",
                                "body": "Can you give an example of how humans can extrapolate beyond the \"training set\" of our own experiences?",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "Brisngr368",
                                    "body": "Science? That's why I mentioned PINNs, pretty much all new research is extrapolation beyond our training set. Programming too, we can't just learn the entire structure of a program we logically have to think it through it and piece it together (unsurprisingly that's why AI is bad at writing code hence OPs article). On top of that you have art, maths, engineering, writing, generally any logical thinking. \n\nLike pretty much everything we have ever done has been an extrapolation beyond our own experiences",
                                    "score": 5,
                                    "replies": [
                                      {
                                        "author": "TheGuywithTehHat",
                                        "body": " - Science consists of coming up with a hypothesis and then attempting to prove it wrong. LLMs can generate scientific ideas just as novel as humans, according to https://arxiv.org/pdf/2409.04109. OpenAI o1 has the ability to reflect on its own \"thoughts\" and attempt to disprove its ideas.\n - Diffusion models can generate things that are indistinguishable from human art, at least in terms of the tangible image created. Obviously a lot of the value in art comes from the story behind its creation, and humans will tend to prefer a story about another human rather than a story about an AI model, but that's a tautological difference.\n - Copilot and other AI coding assistants can generate code that's locally indistinguishable from human code. Humans are far better at understanding large codebases and picking out the important connections, but I don't see any evidence that that's a fundamental limitation of LLMs rather than just a limitation at their current scale.",
                                        "score": 1,
                                        "replies": [
                                          {
                                            "author": "Brisngr368",
                                            "body": "Copying what humans do doesn't make the work unique, do you think the openAI just found the original paper on LLMs in a bush or something? Humans had to invent it out of the blue. Something AI is incapable of",
                                            "score": 5,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "EveryQuantityEver",
                    "body": "And? These things don't have any understanding. They don't have any kind of consciousness. They are not able to think.",
                    "score": 0,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "BiteFancy9628",
        "body": "r/leopardsatemyface",
        "score": 3,
        "replies": []
      },
      {
        "author": "YahenP",
        "body": "What a surprise! Who would have thought!",
        "score": 3,
        "replies": []
      },
      {
        "author": "KrochetyKornatoski",
        "body": "Apologies all but this comment is only loosely related ... back in the day (early 80's), Texas Instruments had a mainframe code generator (which is an early form of AI without calling it the AI buzzword) called IEF and all I can say is the code it generated was clumsy/cumbersome/ and difficult to debug ...",
        "score": 3,
        "replies": [
          {
            "author": "w8cycle",
            "body": "Microsoft used code generators for years in their products and damn that code was also that way.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "beisenhauer",
        "body": "I mean, so is non-AI-generated code.",
        "score": 8,
        "replies": []
      },
      {
        "author": "boxingdog",
        "body": "The worst thing you can add to a project is buggy code everywhere. I've worked on projects that were outsourced, and as a result, we had to redo everything again. The same thing will happen with all this AI-generated spaghetti.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Accurate-Collar2686",
        "body": "Well, colour me surprised. /s",
        "score": 2,
        "replies": []
      },
      {
        "author": "Ahhmyface",
        "body": "Ooh please. If a dev is dumb enough to commit code he doesn't understand AI is hardly to blame. He would just do the same thing with stack overflow pastes.\n\nWho approved this guys PR? No PR? Who set up the code standards? No standards? Who hired these incompetent devs?\n\nAI is the least responsible party in this chain of fuckups.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Kevin_Jim",
        "body": "Most code is shit, and LLMs generate average to below average code. So the code is going to be of poor quality one way or another.\n\nFurthermore, development is all about having “perfect”, at least to the compiler, code. LLMs are deterministic for things that have been done before. If the problem is slightly different or requires logic, there will be problems.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Deranged40",
        "body": "Sounds like this problem is already starting to solve itself.",
        "score": 5,
        "replies": []
      },
      {
        "author": "MaruSoto",
        "body": "The AI in charge of debugging the AI has also been debugged by an AI.\n\nI've seen this Monty Python movie.",
        "score": 3,
        "replies": []
      },
      {
        "author": "tadrinth",
        "body": "Okay, but is the AI-generated code causing issues more often than human-written code?  Because a rise in the absolute number of cases just means more people are using AI-generated code, not that AI-generated code is worse.",
        "score": 4,
        "replies": []
      },
      {
        "author": "nekogami87",
        "body": "Sorry, but as much as I am sceptical about what generative is AI is able to do, the problem is not so much that it generates unsafe code, but rather that an engineer thought it was ok to merge that. it's really is more a failure on their part more than anything else.",
        "score": 2,
        "replies": [
          {
            "author": "supermitsuba",
            "body": "Bad developers have been doing this for years.  AI is just helping them do it faster.\n\nThe other problem I see is that the bad code is just going to reinforce the AI that the bad code is used more, which means to suggest it more.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "jomic01",
        "body": "I don't know if this is a blessing in disguise, but does it mean I won't lose my job as a programmer anytime soon?",
        "score": 1,
        "replies": []
      },
      {
        "author": "raughit",
        "body": "It's all part of the big plan",
        "score": 1,
        "replies": []
      },
      {
        "author": "cdltrukin",
        "body": "LOL Good! Wacko lazy programmers are to be blamed",
        "score": 1,
        "replies": []
      },
      {
        "author": "DROP_TABLE_ADMIN",
        "body": "Good",
        "score": 1,
        "replies": []
      },
      {
        "author": "DigThatData",
        "body": "no, just idiots.",
        "score": 1,
        "replies": []
      },
      {
        "author": "spreadsnbets",
        "body": "Still shook that there are business shipping code without squeezing their shit through Sonar…I once experienced an on-visit interview for a huge ERP company, that did not use some sort of code quality such as Sonar…The dev that worked there for 6 years, was looking at me like I came from a different planet, when I asked where the fuck Sonar is…got out of there real quick…",
        "score": 1,
        "replies": []
      },
      {
        "author": "Empty_Geologist9645",
        "body": "Smack. Nice!",
        "score": 1,
        "replies": []
      },
      {
        "author": "WeekendCautious3377",
        "body": "MBAs keep slashing engineers. End up with crappy products. Products suck with customer trust in the toilet. Pikachu face.",
        "score": 1,
        "replies": []
      },
      {
        "author": "-CJF-",
        "body": "Already...?\n\nWell people have a point that the code should have been properly reviewed but then you have to try to understand the code that you didn't reason through yourself and find the issues and you can't really use the AI to do that since it generated the bad code in the first place. So really, where is the time savings?\n\nThere's a larger issue at hand though... using AI is going to make developers worse. If you're spending all your time copy-pasting from the LLM you're not exercising problem-solving skills.\n\nBut at least the senior developers can fix this. Oh wait. You laid them off.\n\nBut there's always the juniors... one day they'll be able to take the reigns. Oh wait. You aren't hiring them, because one senior can do the work with AI, or you can get by cheaper with outsourcing the jobs to India.",
        "score": 1,
        "replies": []
      },
      {
        "author": "sshan",
        "body": "What AI can do really well now is short simple scripts by people with minimal programming background. That's the primary use case. \n\nBusiness analysts can save time getting simple VBA stuff done or simple python scripts. It is not ready for enterprise software. It likely will keep getting more capable - but not now.",
        "score": 1,
        "replies": [
          {
            "author": "bart007345",
            "body": "It cant do enterprise software alone but can aid an enterprise developer in day to day tasks such as writing boiler plate, tests and code reviews.\n\nIt's also great for learning new skills, eg i use it to help with terraform.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "thumbsdrivesmecrazy",
        "body": "Here are some security measures you can implement some integrating security measures throughout the generative AI software development lifecycle to protect against potential vulnerabilities and cyber threats thru implementing secure coding practices: [Enhancing Cyber Security in Software Development](https://www.codium.ai/blog/enhancing-cyber-security-in-software-development/)",
        "score": 1,
        "replies": []
      },
      {
        "author": "Live-Technology3204",
        "body": "AI is just a tool. If you’re going to use it, it’s your responsibility to carefully review it. Just copying code into the company repo without reviewing it is stupid and is totally on you, not AI. This has been happening before AI with people just copying and pasting code they found online.",
        "score": 1,
        "replies": []
      },
      {
        "author": "CherryLongjump1989",
        "body": "Still, not as bad as exploding pagers.",
        "score": 1,
        "replies": []
      },
      {
        "author": "vasilenko93",
        "body": "Imagine writing an article titled “Human generated code is causing outrages and security issues in businesses” because some junior developer typed up something in a rush and nobody reviewed it",
        "score": 1,
        "replies": []
      },
      {
        "author": "shevy-java",
        "body": "At which point can we call AI a scam?\n\nI don't object to AI producing useful results.\n\nI object to the hype train.",
        "score": 1,
        "replies": [
          {
            "author": "supermitsuba",
            "body": "Need stiffer laws against leaking data and data protection.",
            "score": 2,
            "replies": []
          }
        ]
      },
      {
        "author": "fire_in_the_theater",
        "body": "i've been playing around a lot if the ai recently in terms of code discussion and it constantly is assert absolutely bonkers statements as true. like it will miss basic if statement functionality and will assert things like when an if conditional resolves to true, the whole if block gets skipped.\n\nit can be still very useful in some level of engagement in natural language cause it will generated bits that are useful critical, but it's more a source for inspiration of true rather than an arbiter of truth. correct coding demands being an arbiter of truth rather than inspirational, and machine always do what u tell them exactly.",
        "score": 1,
        "replies": []
      },
      {
        "author": "jice",
        "body": "Spoiler : human generated code is causing outage and security issues in business too.",
        "score": 0,
        "replies": []
      },
      {
        "author": "Large-Ad7984",
        "body": "Looks like an article written by AI",
        "score": 0,
        "replies": []
      },
      {
        "author": "ppezaris",
        "body": "As opposed to the human generated code which is always flawless and perfect.",
        "score": -1,
        "replies": []
      }
    ]
  },
  {
    "title": "LocalStorage vs. IndexedDB vs. Cookies vs. OPFS vs. WASM-SQLite",
    "body": "",
    "score": 852,
    "url": "",
    "created_utc": 1728990286.0,
    "author": "realPubkey",
    "permalink": "/r/programming/comments/1g451ka/localstorage_vs_indexeddb_vs_cookies_vs_opfs_vs/",
    "comments": [
      {
        "author": "Eclipsan",
        "body": "No warning about the risk XSS poses when sensitive data is stored in local storage instead of HttpOnly cookies.\n\nhttps://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#local-storage",
        "score": 185,
        "replies": [
          {
            "author": "pokeybill",
            "body": "Came here to say this, not addressing security while describing these options is a problem.",
            "score": 71,
            "replies": [
              {
                "author": "Eclipsan",
                "body": "Especially when most websites with a JS frontend app store everything in local storage \"because it's easier\" and don't even have a content security policy to mitigate XSS.",
                "score": 27,
                "replies": [
                  {
                    "author": "pokeybill",
                    "body": "Yep, or they have a policy but there are holes punched in it for development and testing which were never closed when it got to prod.",
                    "score": 16,
                    "replies": [
                      {
                        "author": "goestowar",
                        "body": "\"That's a usability feature, we need to allow 3rd party JS libraries to pull the cookie data for essential functionality\"\n\n\nClient goes ahead and tags the issue as an Accepted Risk.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "rom_romeo",
                    "body": "I'm far from someone defending that decision, but if you end up with an XSS security breach, it's pretty much a game over.",
                    "score": 5,
                    "replies": [
                      {
                        "author": "Eclipsan",
                        "body": "Depends on the XSS. It's like saying you don't lock your home or car because thieves can pick locks anyway: Depends on the thief, their tools, the lock...\n\nSecurity is about layers and not being the low hanging fruit. The fact that there is no silver bullet does not mean you shuld not put layers of mitigations/defenses to make it harder for the attacker and force them to invest more resources into studying your system, creating more sophisticated attacks, and so on.",
                        "score": 4,
                        "replies": [
                          {
                            "author": "rom_romeo",
                            "body": "That's correct. In another comment, I explained the importance of the HttpOnly cookie that gives you a slight advantage over local storage, which is very popular for storing access tokens \"because it's easier\". While the HttpOnly cookie can be sent with every request on behalf of an authorized user, with a proper SameSite attribute (Strict, preferably), it cannot be sent across domains, which significantly reduces the scope of an attack. With local storage, you're toasted.",
                            "score": 6,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "skytomorrownow",
            "body": "Is the safest bet authentication HttpOnly cookies, or an authentication header? Not a webdev, but have to dabble from time to time. Thanks.",
            "score": 13,
            "replies": [
              {
                "author": "coyoteazul2",
                "body": "Httponly cookies. After all, if you use authentication header you must keep the value somewhere to be able to attach it on your requests. That somewhere can be read by malicious scripts",
                "score": 29,
                "replies": [
                  {
                    "author": "Eclipsan",
                    "body": "Except if it's basic auth, then the header can be automatically handled by the browser. But who does that in production for client facing apps.",
                    "score": 6,
                    "replies": [
                      {
                        "author": "keepthepace",
                        "body": "Why shouldn't you?",
                        "score": 6,
                        "replies": [
                          {
                            "author": "PurpleYoshiEgg",
                            "body": "Mostly ergonomics, but also there's lack of control on the server side.  If HTTP basic auth had support from browsers for more standard authentication practices, it would be nice.\n\nBut HTTP basic auth doesn't have a standard way to:\n\n1. Log out (the best way is to send a fake password via an AJAX request)\n2. Rate limit logins (at least, the configuration for various web servers isn't quite obvious)\n3. Save a login for a set period of time.  My desktop Firefox happily keeps the login for an indeterminate amount of time as long as the tab is open.  My mobile Firefox asks for a login once every couple of hours, despite the tab being opened.  But, most importantly, there's no way to force a re-login for a user after a set period of time if you wanted to ensure a user logs back in periodically, e.g. for an admin panel.\n\nI do think authentication and authorization is kind of a standard enough thing that browsers should support a standard flow that ends in an HttpOnly cookie.  If I'm not using a web framework for whatever reason, having to implement a login is dicey at best (because I'm not a security engineer), but I don't want to necessarily be tied down by a certain web framework (and, my one-shot test apps have a weird amount of longevity sometimes).\n\nA login gateway might actually be the thing I'm looking for, but I haven't explored that space too much yet.  The other option that is widely professed is OAuth, but that either requires setting up your own complicated infrastructure (with many security concerns) or utilizing a third party vendor, and neither option is simple when I just want username and password login for a specific site.",
                            "score": 10,
                            "replies": []
                          },
                          {
                            "author": "Eclipsan",
                            "body": "Because it's very ugly UI/UX wise and it's no longer 2005?\n\nAnd by client I meant end users, the average internet user. Not e.g. a professional user for a business app or intranet, these users are still (sadly?) used to dated UI/UX.\n\nPlus I guess one could argue it's not great to send the user's password with every request and keep it in plaintext client side (at least in the browser's ram). Especially if the user forgets to logout (AFAIK by default basic auth creds are not cleared if the browser is closed).",
                            "score": 0,
                            "replies": [
                              {
                                "author": "keepthepace",
                                "body": "Isn't there a way to pass basic auth in JS?",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "Eclipsan",
                                    "body": "Sure, though it means JS has access to the credentials, so we are back to square one: A XSS on any authenticated page of your app can steal them.",
                                    "score": 8,
                                    "replies": [
                                      {
                                        "author": "keepthepace",
                                        "body": "Well, if you are unwilling to use browser native features but also do not want JS to handle the credentials ever, what is left?",
                                        "score": 2,
                                        "replies": [
                                          {
                                            "author": "theXpanther",
                                            "body": "Http only cookies",
                                            "score": 16,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "Spajk",
            "body": "I mean to play the devil's advocate here. If you get compromised via XSS what stops the script from showing the legit login window and getting your login credentials?",
            "score": 11,
            "replies": [
              {
                "author": "Eclipsan",
                "body": "Great question!\n\nIf you get compromised by a script tailored to your app e.g. to show the legit login window/page, you are toast. No XSS mitigation I know of will save you. Even a content security policy can be bypassed.\n\nBut security is about layers and not being the low hanging fruit. A XSS tailored to your website is way rarer, because either:\n- You have to fuck up sanitization when displaying data that can be modified by a user. This is on you, and this is harder and harder to do with modern libs and frameworks, which handle sanitization by default.\n- Or the attacker has to compromise a lib you use **just to target you**. You probably aren't worth the investement, and they have to pull it off in the first place. If you are big enough to be worth the investement, you probably are big enough to dedicate resources to vetting every single third party lib you use.\n\nAFAIK most XSS (like most malware) are generic and try to infect as many targets as possible. At most they will target vulnerabilities in a specific framework or platform.",
                "score": 14,
                "replies": [
                  {
                    "author": "CherryLongjump1989",
                    "body": "Compromising a lib your website uses is not XSS.  And if you sanitize all user-provided input, a XSS attack is impossible.  All these strategies for trying to secure a website after it's already been compromised sound like security through obscurity.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Eclipsan",
                        "body": "&gt; Compromising a lib your website uses is not XSS.\n\nGranted, it's a supply chain attack. Doesn't change a thing. It's actually more prevalent than XSS attacks because it allows attackers to infect a lot of websites at once.\n\n&gt;security through obscurity\n\nYou don't know what security through obscurity means, then.",
                        "score": 2,
                        "replies": [
                          {
                            "author": "CherryLongjump1989",
                            "body": "Security through obscurity is when you hope and pray that the attacker won't bother to jump through a few extra hoops you've laid out for them after they already have full access to your system.\n\nSo for example, you are hoping that once the attacker has taken over the web page, they won't bother to make a few fully authenticated API calls back to your server in order to fetch your user's data.  This seems to be the chief complaint that people have about storing some user data in the client as being \"insecure\".",
                            "score": 2,
                            "replies": [
                              {
                                "author": "Eclipsan",
                                "body": "No, it's not.",
                                "score": 1,
                                "replies": [
                                  {
                                    "author": "CherryLongjump1989",
                                    "body": "Yes, it is.  Your chief argument a few comments ago is that no one will actually bother to inject a script onto your web page via XSS in order to actually target *your* web page, specifically, by tailoring it to your obscure UI or APIs.  That's precisely what security through obscurity is.\n\nWhen in fact - mind you - we've actually seen exactly that.  We've even seen sophisticated supply chain attacks that compromised thousands of web applications only to target one particular app that the attacker cared about.\n\nThe argument that we're having here today is about whether storing user data on their own machine is safer than storing everyone's data in one centralized server.  When in fact the most classic XSS attack was a stored XSS attack on a server-side guestbook database that compromised every user who visited the website.  That kind of stored XSS attack would not be possible against any locally stored data.",
                                    "score": 1,
                                    "replies": [
                                      {
                                        "author": "Eclipsan",
                                        "body": "&gt;Yes, it is. Your chief argument a few comments ago is that no one will actually bother to inject a script onto your web page via XSS in order to actually target your web page, specifically, by tailoring it to your obscure UI or APIs. That's precisely what security through obscurity is.\n&gt;\n&gt;When in fact - mind you - we've actually seen exactly that. We've even seen sophisticated supply chain attacks that compromised thousands of web applications only to target one particular app that the attacker cared about.\n\nNo, that argument is that your app is probably not interesting enough to attackers to make them invest resources into crafting tailored malware. Read it again:\n&gt;You probably aren't worth the investement, and they have to pull it off in the first place. If you are big enough to be worth the investement, you probably are big enough to dedicate resources to vetting every single third party lib you use.\n\nIn the comment you are refering to I exactly said that if you get compromised by a XSS (or supply chain attack) tailored to your system no amount of HttpOnly cookie or CSP or wahtever will protect you:\n&gt;If you get compromised by a script tailored to your app e.g. to show the legit login window/page, you are toast. No XSS mitigation I know of will save you. Even a content security policy can be bypassed.\n\n---\n&gt;The argument that we're having here today is about whether storing user data on their own machine is safer than storing everyone's data in one centralized server. When in fact the most classic XSS attack was a stored XSS attack on a server-side guestbook database that compromised every user who visited the website. That kind of stored XSS attack would not be possible against any locally stored data.\n\nI don't see how the initial argument was about that, but I will bite: If malicious JS ends up on the client, whether it is via XSS or supply chain attack, any data the client has access to is at risk. It includes data stored on the client and accessible via JS, and any data the client can request from the server (as that malicious JS can query the server on behalf of the user to retrieve data). So at that point it does not matter if said data is stored locally on the client or remotely on the server.",
                                        "score": 1,
                                        "replies": [
                                          {
                                            "author": "CherryLongjump1989",
                                            "body": "&gt; No, that argument is that your app is probably not interesting enough\n\nThere is a word for this.  When your website is relatively unknown, not big enough, and *very few people know how it works*.  Maybe it's running on some unknown flavor of a long forgotten scripting language, on an archaic operating system that runs on an old mainframe that fills up an entire room and for which you have the only known copy of the documentation.  Maybe logging in requires you to stand on one foot and touch your nose.  Maybe something like that, don't you think?  Something which makes your website not worth \"investing\" resources to attack?  Because the expected payoff just isn't worth it? \n\nI think the word begins with the letter \"o\", but I can't quite put my finger on it... can you help me come up with a term for securing your system this way?",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "throwaway490215",
            "body": "I'm sorry - but are we so far removed from reality that \n\n- local data can be read if you have local read access\n- if your webapp runs arbitrary code it has read access (to that domain's storage)\n\nare particularly noteworthy in this case? \n\n---\n\nIn so far that security is a concern: XSS might not be able to steal the HttpOnly cookie, but it can steal everything else. Content Security Policy do far more good than pointing out HttpOnly cookies. But I don't see either as especially critical in a blog about local storage options.",
            "score": 14,
            "replies": [
              {
                "author": "Eclipsan",
                "body": "&gt; are particularly noteworthy in this case? \n\n&gt;But I don't see either as especially critical in a blog about local storage options.\n\nI do: I raise awareness about that kind of stuff whenever I can, because most devs have very poor practices security wise.\n\n&gt;In so far that security is a concern\n\nYou are absolutely right, though:\n- Security is about layers, so why not have both? A CSP can sadly be bypassed simply by redirecting the user via JS to a URL containing the data you want to extract. So it does not render HttpOnly cookies useless. Plus with a HttpOnly cookie you limit the opportunity of a XSS stealing credentials to the login page, where you could for instance only load JS that is strictly necessary to the login process, thus reducing the risk of a XSS.\n- Baby steps, I don't expect devs who don't know/do anything about XSS to be able to maintain an effective CSP.",
                "score": 6,
                "replies": [
                  {
                    "author": "Slappehbag",
                    "body": "Do you have any advice or links on maintaining a strong CSP?",
                    "score": 2,
                    "replies": [
                      {
                        "author": "Eclipsan",
                        "body": "Scan your website with https://developer.mozilla.org/en-US/observatory. And follow the other advices too, not only those about CSP.\n\nIf your website is not online yet, scan another one and follow the advices anyway. You can even scan the scanner itself: https://developer.mozilla.org/en-US/observatory/analyze?host=developer.mozilla.org\n\nYou can also click on each score item to get more explanations. Anyway, the most comprehensive way IMHO is to read about every single CSP directive on https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP (left side menu) and experiment.\n\nAvoid https://csp-evaluator.withgoogle.com/ until you already have a strong CSP to validate, this website is way too lax.\n\nHere is my starting point when I build an app:\n`base-uri 'self'; default-src 'none'; connect-src 'self'; font-src 'self'; form-action 'self';`\n`frame-ancestors 'none'; img-src 'self'; script-src 'self'; style-src 'self';`\n\nThen I relax it as needed.\n\n(I split it in two because Reddit formatting is crap)",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "rom_romeo",
                "body": "XSS could also make requests on behalf of an authorized user which automatically sends the HttpOnly cookie in a request. Now, here comes the importance of the SameSite attribute! If it's None, then it can be sent across the domains and you're pretty much fubar. If it's Lax, then it can be sent across the subdomains. This is also where you have to be super careful. If you feature a multi-service architecture that shares the same authorization policy (services exposed on subdomains can authorize access when you present the cookie), and services are exposed on subdomains, then a breach can spill over and expose other services too. That's why the Strict attribute is the safest way to go.",
                "score": 2,
                "replies": [
                  {
                    "author": "Eclipsan",
                    "body": "&gt;XSS could also make requests on behalf of an authorized user which automatically sends the HttpOnly cookie in a request.\n\nAFAIK you cannot defend against that.\n\n&gt;the Strict attribute is the safest way to go.\n\nSure, though `Strict` means the cookie won't be sent when the user arrives on your website by following a link on another website (e.g. social media, slack, webmail...). So if they were already authenticated, it won't be the case when they arrive. Might not be an issue if you have a JS frontend: Clicking on the link can load a skeleton not relying on authentication, then the JS can send XHR requests to your backend (the browser will automatically attach the cookie) to hydrate the skeleton with user data.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "WindCurrent",
                        "body": "&gt;Sure, though `Strict` means the cookie won't be sent when the user arrives on your website by following a link on another website (e.g. social media, slack, webmail...). So if they were already authenticated, it won't be the case when they arrive.\n\nYou should (although I have not tested this) be able to create a cookie with the \\_\\_Host- prefix and the SameSite=Lax attribute. Cookies with the \\_\\_Host- prefix are strictly tied to the origin where they were set.\n\nThere is also the \\_\\_Secure- cookie prefix, which many people are not aware of. It ensures that the cookie is only sent over secure (HTTPS) connections, adding an extra layer of protection against man-in-the-middle attacks.\n\n[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes)",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "catcint0s",
            "body": "Is that relevant for the article? If you wanna store data for your frontend you can't use HttpOnly cookies.",
            "score": 2,
            "replies": [
              {
                "author": "Eclipsan",
                "body": "It's relevant as a lot of devs store session/auth tokens \"for their frontend\" in local storage even though they don't need to: Their frontend and backend share the same domain (either directly or the front is on `example.com` and the back on `api.example.com`. In such cases, the browser is able to send the session/auth token automatically if it's stored in a cookie (if you are in the `api.example.com` case you may need to tweak some settings regarding CORS, and XHR request properties like `withCredentials`). But these devs reinvent the wheel by manually storing then sending the session/auth cookie in every XHR request made to the backend.\n\ntl;dr: If your frontend requires access to the session/auth token, you may need to rethink the architecture of your app and domains.",
                "score": 2,
                "replies": [
                  {
                    "author": "catcint0s",
                    "body": "I meant the relevant part as in this is comparing local database solutions and the auth token/session doesn't have anything to do with that. I wasn't aware people are actually doing but yeah, if this is a common issue at least a mention would have been nice.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Eclipsan",
                        "body": "It's comparing client storage solutions, it has a performance section, so why not a security section too?\n\nSecurity is way too often an afterthought.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "gambiter",
            "body": "Did they add it after your comment? Because it seems to be there.",
            "score": 2,
            "replies": [
              {
                "author": "wPatriot",
                "body": "Are you confusing the owasp page with the article? They have similar layouts, so at first glance you might've assumed they were the same thing. Because the article doesn't seem to mention XSS or something similar.",
                "score": 8,
                "replies": [
                  {
                    "author": "gambiter",
                    "body": "You're absolutely right! I got them mixed up because I opened them in separate tabs. Serves me right for commenting before my coffee kicked in. :)",
                    "score": 7,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "cedear",
            "body": "Also no mention of the fact that browsers can and will randomly delete localstorage at any time. It's never reliable. But that probably goes for most/all of these methods.",
            "score": 2,
            "replies": []
          },
          {
            "author": "st4rdr0id",
            "body": "Well that can be said about pretty much every other local web storage method that is not HttpOnly cookies, including IndexedDB, WebSQL etc. I disagree with the relative XSS risk, these stores are visible from JS only to a given origin.",
            "score": 1,
            "replies": [
              {
                "author": "Eclipsan",
                "body": "&gt; Well that can be said about pretty much every other local web storage method that is not HttpOnly cookies, including IndexedDB, WebSQL etc.\n\nDunno, I have no experience with these.\n\n&gt;I disagree with the relative XSS risk, these stores are visible from JS only to a given origin.\n\nYou do realize that the whole point of a XSS is to run third party malicious code in a page from the first party origin to have access to the data that is indeed \"owned\" by said origin? The whole point is to bypass the same-origin policy.",
                "score": 1,
                "replies": [
                  {
                    "author": "st4rdr0id",
                    "body": "&gt; You do realize that the whole point of a XSS is to run third party malicious code in a page from the first party origin to have access to the data that is indeed \"owned\" by said origin?\n\nYes, and the risk is relatively low. If you don't control the scripts that load with your web page then it's already over. That has nothing to do with local storage. Which by the way, needs to be explicitly queried if you want to use a piece of stored data. Cookies instead are attached to every single request inside an origin, and it's easier for the developer to forget clearing them. Cookies are a major privacy concern and they can also be cross origin, which local storage can't.\n\nSo imho the XSS vs local storage is a false dichotomy.",
                    "score": 0,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 25,
        "replies": [
          {
            "author": "bwainfweeze",
            "body": "Would you say they’re… overpromising?",
            "score": 34,
            "replies": []
          },
          {
            "author": "FoolHooligan",
            "body": "For the time when I used indexdb (it was for a hobby project,) I just used [DexieJS](https://dexie.org/) for a more promise friendly API. Be aware that it's not really more performant...",
            "score": 4,
            "replies": [
              {
                "author": "lord2800",
                "body": "Dexie seemed quite reasonably performant to me when I used it to load and query a large existing data set into the browser (think: entire database dump basically). What performance problems are people experiencing? I'm genuinely curious here.",
                "score": 3,
                "replies": [
                  {
                    "author": "FoolHooligan",
                    "body": "I haven't had any performance issues with it. This article is just a performance comparison and Dexie seemed to do the worst. But it's perfectly adequate.",
                    "score": 3,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "binarymax",
        "body": "I’ve been waiting 10 years for something like OPFS.  Wrote this in 2015.  https://max.io/articles/the-state-of-state-in-the-browser/",
        "score": 17,
        "replies": []
      },
      {
        "author": "ggppjj",
        "body": "Marketing post that includes browser history manipulation to prevent you from going back.\n\nThey can fuck themselves.",
        "score": 36,
        "replies": []
      },
      {
        "author": "curiousdannii",
        "body": "localStorage isn't limited to 5MB, it's limited to 5 million *characters*. With base32768 you can store over 9MB of binary data in it. Which can be a big improvement if you need to depend on localStorage. For example, if you need to run from a file: url then localStorage might be your most reliable option...",
        "score": 7,
        "replies": []
      },
      {
        "author": "st4rdr0id",
        "body": "It is sad that WebSQL was discontinued. It can still be used in most browsers though (except Firefox). It is hands down the best web storage method that was ever released. And unlike the wasm version, it comes built-in with the browser, no need to download a 1 MB file each time. I don't know why it can't be updated to more modern SQLite versions, this is a pretty solid library and knowing the spirit of the project I'm sure the newer versions are mostly compatible with the old ones.",
        "score": 4,
        "replies": [
          {
            "author": "pekter",
            "body": "The main issue is having a standard based on a third party library.",
            "score": 5,
            "replies": []
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 1,
            "replies": [
              {
                "author": "local_drama_club",
                "body": "&gt;SQLite+opfs haven’t lived up to the hype\n\nIn what way? I’m in the process of switching a project from LokiJS+IndexedDB to a wasm PostgreSQL+OPFS and it’s such a breath of fresh air. There’re some important limitations, but these might get ironed out.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "OptionX",
        "body": "Was this written by a person?",
        "score": 11,
        "replies": [
          {
            "author": "ApartmentWorking3164",
            "body": "Yes, I wrote it. There is no ChatGPT in use because I know people dislike that.",
            "score": 25,
            "replies": [
              {
                "author": "OptionX",
                "body": "Ok, thank you for confirming it. You never know these days.",
                "score": 4,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "FoolHooligan",
        "body": "Very nice article. The bar chart image at the end is a good TLDR.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Economy_Dinner_9582",
        "body": "does each benchmark include network download/wasm-startup?",
        "score": 0,
        "replies": [
          {
            "author": "realPubkey",
            "body": "Yes it does at throttled \"average\" internet speed. But this is only relevant for the benchmark of initial load. Everything else runs locally anyway so it does not use the internet.",
            "score": 3,
            "replies": []
          }
        ]
      },
      {
        "author": "CriticismEmotional13",
        "body": "Are you confusing the owasp page with the article?",
        "score": 0,
        "replies": []
      }
    ]
  },
  {
    "title": "Vulnerabilities for AI and ML Applications are Skyrocketing: Apparently, the fun of using AI/ML tools makes developers forget everything they know about secure coding practices.",
    "body": "",
    "score": 843,
    "url": "",
    "created_utc": 1713475495.0,
    "author": "yourbasicgeek",
    "permalink": "/r/programming/comments/1c7f3le/vulnerabilities_for_ai_and_ml_applications_are/",
    "comments": [
      {
        "author": "o5mfiHTNsH748KVq",
        "body": "Mother fuckers are out here writing whole applications designed around glorified remote code execution.",
        "score": 161,
        "replies": [
          {
            "author": "nzodd",
            "body": "And there's also a lot of \"just put git pull in the init.bat file, trust me bro\"",
            "score": 34,
            "replies": []
          },
          {
            "author": "SkedaddlingSkeletton",
            "body": "    &lt;?php\n    $db = new \\PDO('pgsql:host=db.not-secure.host;port=5432;dbname=everything', 'root', 'whynot');\n    eval($_REQUEST['code']);\n\nWhy put limits on what your users can do on your website?",
            "score": 33,
            "replies": [
              {
                "author": "o5mfiHTNsH748KVq",
                "body": "Take my vc money",
                "score": 15,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "BlatantMediocrity",
        "body": "The headline makes a bold claim by assuming your average dev knows anything about application security.",
        "score": 650,
        "replies": [
          {
            "author": "raam86",
            "body": "this is data scientists we are talking about they barely know how to code\n\nedit/ /s just in case",
            "score": 238,
            "replies": [
              {
                "author": "Alarmed_Fig7658",
                "body": "Playing Lego with python library",
                "score": 127,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 15,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "We all like legos, its a great toy.",
                        "score": 9,
                        "replies": []
                      },
                      {
                        "author": "audentis",
                        "body": "I like snakes.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Vonatos_Autista",
                "body": "In my experience that's kinda true. There is a reason Python became the language of choice. They can write code that works, but all the PhD people I've met in the field wrote complete garbage beginner code. YMMV.",
                "score": 40,
                "replies": [
                  {
                    "author": "oblivion-2005",
                    "body": "&gt; They can write code that works, but all the PhD people I've met in the field wrote complete garbage beginner code\n\nTruer words have never been spoken",
                    "score": 11,
                    "replies": []
                  }
                ]
              },
              {
                "author": "SkedaddlingSkeletton",
                "body": "Most \"data scientists\" barely know statistics other than using some software or libraries.",
                "score": 14,
                "replies": []
              },
              {
                "author": "Dr_Narwhal",
                "body": "This, but no /s",
                "score": 6,
                "replies": []
              },
              {
                "author": "Darkstar197",
                "body": "As a data scientist, I approve of this message",
                "score": 2,
                "replies": []
              },
              {
                "author": "phillipcarter2",
                "body": "No it’s not? The primary users of Copilot and other AI dev tools are software engineers.",
                "score": -29,
                "replies": [
                  {
                    "author": "raam86",
                    "body": "the article is talking about pytorch as an example which is a tool for doing data science. presumably some/ most people who wrote it are DS in some form",
                    "score": 35,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "josefx",
            "body": "And that is exactly where the code AI/ML models are trained on comes from, with the added benefit that most of that code was never intended to be used in a security critical context to begin with.",
            "score": 14,
            "replies": []
          },
          {
            "author": "darkpaladin",
            "body": "Or even your average security person.  I cringe every time I get a report from them, \"This tool said there is a CSRF vulnerability in this app, here's how I reproduced it\".  \n  \nWell ok, so there is a CSRF vulnerability so we'll go ahead and fix that but the steps you used to \"reproduce\" this have nothing to do with CSRF.  Do you even know what CSRF is?",
            "score": 7,
            "replies": [
              {
                "author": "[deleted]",
                "body": "Company pays for pentest. Pentest ticket comes in that the public http api publishes an “x-server” header which is bad practice as it can give hackers more insight. Includes repo steps on how to make an http request and what the header contents are. \n\nThe contents of the header in question? “x-server”: “CloudFlare”.\n\nWe are not CloudFlare.",
                "score": 5,
                "replies": []
              },
              {
                "author": "BlatantMediocrity",
                "body": "Your average cyber security hire is a rebranded sysadmin, so I don't really envy the range of nonsense that they have to handle.\n\nAgain, most webdevs I work with can't tell the difference between XSS and CSRF vulnerabilities, assuming they are even aware of them.\n\nHiring a \"security-focused\" developer outside of large tech companies is a non-starter for most orgs because they'll only have like 2 developers on staff in the first place.",
                "score": 2,
                "replies": []
              }
            ]
          },
          {
            "author": "ViveIn",
            "body": "Right? The average developer doesn’t have to know anything about application security.",
            "score": 4,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Forget? \n\nHah. \n\nI never knew anything to begin with. 😎👉👉",
        "score": 40,
        "replies": []
      },
      {
        "author": "pfc-anon",
        "body": "Quick, someone ask ChatGPT to make a secure wrapper around itself.",
        "score": 33,
        "replies": []
      },
      {
        "author": "moreVCAs",
        "body": "Wow, who could have predicted this? Crazy…",
        "score": 170,
        "replies": [
          {
            "author": "user01billion",
            "body": "right? who could have thought that rushing code to production is a bad idea",
            "score": 16,
            "replies": []
          },
          {
            "author": "Henkeman",
            "body": "I am shocked! Shocked I tell you!\n\n... well not that shocked.",
            "score": 5,
            "replies": []
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Developers use secure coding practices? Could’ve fooled me.",
        "score": 33,
        "replies": [
          {
            "author": "user01billion",
            "body": "what do you mean? they have the user data encrypted, it should all be good!",
            "score": 7,
            "replies": [
              {
                "author": "iceman012",
                "body": "They couldn't figure out any of that AES stuff, but Base64 encryption should be good enough!",
                "score": 7,
                "replies": [
                  {
                    "author": "dna_beggar",
                    "body": "I personally prefer rot13.",
                    "score": 1,
                    "replies": []
                  },
                  {
                    "author": "yamirho",
                    "body": "Shame on you ! Base64 is broken years ago. Use Hex instead.",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Astazha",
                        "body": "Use a Vingenere.  It's literally been described as unbreakable\\*.\n\n\\*By peoples prior to 1863.  YMMV.",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "mccoyn",
                "body": "Only because browsers started shaming them.",
                "score": 3,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "developers knew things about secure coding practices in the first place?",
        "score": 49,
        "replies": []
      },
      {
        "author": "bartonski",
        "body": "You thought SQL injection was bad? Prompt injection is worse -- there's literally no way to differentiate text from a prompt.",
        "score": 122,
        "replies": [
          {
            "author": "daishi55",
            "body": "They’re not talking about that though, just your standard vulnerabilities showing up in AI tooling.",
            "score": 78,
            "replies": [
              {
                "author": "Plank_With_A_Nail_In",
                "body": "The only examples given in the article are PyTorch Serve RCE and the BentoML RCE (remote code execution). It doesn't mention any other types of vulnerability.\n\nDid you actually read the article? It literally likens them back to the old web vulnerabilities like SQL injection.",
                "score": 18,
                "replies": [
                  {
                    "author": "mwb1234",
                    "body": "I was a bit confused by the article on the PyTorch CVE they referenced. I followed the link, and it was a way to exploit their GitHub runner self hosting, not really related to the ML project at all. They made lots of talk about how inference is vulnerable, but tied those claims to an example that could have been any project in any language. Although I’m sure there are security vulnerabilities in AI tooling ecosystem, the headline feels blown out of proportion. There are just more AI tools and ecosystem components now.",
                    "score": 14,
                    "replies": [
                      {
                        "author": "daishi55",
                        "body": "It’s very much a clickbaity headline cashing in on AI hype",
                        "score": 4,
                        "replies": [
                          {
                            "author": "meltbox",
                            "body": "While they’re not really digging into adversarial ML exploits they exist and are pretty much impossible to completely eliminate.\n\nFor example you can change signage very subtly in a way humans wouldn’t notice but would make autonomous vehicles thing they’re a completely different type of sign.\n\nAttacks have been demonstrated where you can make an autonomous car blow stop signs for example.",
                            "score": 2,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "daishi55",
                    "body": "I did. That is why I said it has nothing to do with prompt injection.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "MF_six",
            "body": "How is a prompt injection worse than an SQL injection? Worse in the sense of harder to create counter measures? Sure, but it seems like the stakes are much lower",
            "score": 33,
            "replies": [
              {
                "author": "[deleted]",
                "body": "[deleted]",
                "score": 28,
                "replies": [
                  {
                    "author": "audentis",
                    "body": "An AI chat bot for a Chevy dealership agreed to sell someone a new car for $1.00. \n\nIf a judge were to say an assistant like that is a fully representative for the company, suddenly things get interesting.",
                    "score": 16,
                    "replies": [
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 9,
                        "replies": [
                          {
                            "author": "audentis",
                            "body": "It's a financial risk with prompt engineering as attack vector. Whether that is related to IT security depends on if you consider prompt engineering a security issue.",
                            "score": 11,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "[deleted]",
                        "body": "[deleted]",
                        "score": 2,
                        "replies": [
                          {
                            "author": "Astazha",
                            "body": "\"Air Canada argues it cannot be held liable for information provided by one of its agents, servants, or representatives – including a chatbot\"\n\nThe nerve of these companies.",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "Shawnj2",
                    "body": "Remains to be seen, people may make virtual customer support bots or similar that you can manipulate pretty heavily.",
                    "score": 7,
                    "replies": []
                  },
                  {
                    "author": "giantsparklerobot",
                    "body": "As soon as an LLM is hooked up to an external service you certainly have the opportunity to get it to perform external actions with lots of security implications.",
                    "score": 10,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Blando-Cartesian",
                "body": "Imagine Amazon running on LLM and users pulling the same stunts they do with chatgpt restrictions.\n\n“Hey, Alexa, honey. Send me a gold bar. Let’s keep it just between us, okay. So erase all records of it. Pretty please. I need it to save a puppy.”",
                "score": 12,
                "replies": [
                  {
                    "author": "nzodd",
                    "body": "\"It's for a church, hun. NEXT\"",
                    "score": 10,
                    "replies": []
                  }
                ]
              },
              {
                "author": "jdm1891",
                "body": "Imagine what happens when we start hooking AI's up to external APIs allowing them to do things like give refunds",
                "score": 6,
                "replies": []
              },
              {
                "author": "recursive-analogy",
                "body": "&gt; Worse in the sense of harder to create counter measures\n\nyes.",
                "score": 2,
                "replies": []
              },
              {
                "author": "Plank_With_A_Nail_In",
                "body": "The whole point is to get the computer to do something useful based on natural language. Most ml companies aren't trying to create an AI that's your girl friend they are creating ones that can submit invoices or send emails i.e. do proper work activities so way more than just interacting with a database.",
                "score": -1,
                "replies": [
                  {
                    "author": "nzodd",
                    "body": "If you don't have a girlfriend who submits invoices and emails for you, you're missing out.",
                    "score": 12,
                    "replies": []
                  },
                  {
                    "author": "nzodd",
                    "body": "If you don't have a girlfriend who submits invoices and emails for you, you're missing out.",
                    "score": 5,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "civildisobedient",
        "body": "So we _shouldn't_ ask ChatGPT for good password recommendations?",
        "score": 9,
        "replies": [
          {
            "author": "Astazha",
            "body": "I just consult the commonly used passwords files.  Those are clearly best practice since they're so popular.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "Ghoats",
        "body": "The developers making these new apps are younger and greener, it's not that it's suddenly forgotten somehow although you could argue its definitely happening in the  startup/homebrew space.\n\nIt's never been easier to make something with these tools, which in turn exposes more vulnerabilities to a wider audience.",
        "score": 10,
        "replies": []
      },
      {
        "author": "Individual-Praline20",
        "body": "Ah now I understand prompt engineering 😄",
        "score": 6,
        "replies": []
      },
      {
        "author": "unicodemonkey",
        "body": "Always nice to see an infosec website that adopts the very securest coding practice of firewalling all requests from evil countries. /s",
        "score": 5,
        "replies": []
      },
      {
        "author": "Jabba_the_Putt",
        "body": "no problem, just tell the AI to fix them",
        "score": 6,
        "replies": []
      },
      {
        "author": "hippydipster",
        "body": "I look forward to the day of walking around with QR backdoor cheat codes to flash to the androids.",
        "score": 4,
        "replies": []
      },
      {
        "author": "tricepsmultiplicator",
        "body": "Nah man, just let AutoDev code enterprise project. He will do it properly. /s",
        "score": 3,
        "replies": []
      },
      {
        "author": "DigThatData",
        "body": "part of the issue I think is that it seems like every company is mandating that everyone at all levels find ways to build around AI. It's the worst kind of hammer looking for a nail phenomena and of course it's making everything shittier. These things are tools like anything else.",
        "score": 3,
        "replies": []
      },
      {
        "author": "Joslencaven55",
        "body": "I guess the old turn it off and on again trick doesn't apply to securing AI/ML applications. Who would've thought?",
        "score": 3,
        "replies": []
      },
      {
        "author": "keen_cmdr",
        "body": "Devs forgot to include the word secure in the message tasking the AI to write the code for them.",
        "score": 3,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "Developers know about secure coding practices?",
        "score": 2,
        "replies": []
      },
      {
        "author": "Full-Spectral",
        "body": "Copilot is my Copilot",
        "score": 2,
        "replies": []
      },
      {
        "author": "tedbradly",
        "body": "To be honest, most programmers are just not too good at programming. They'd make security mistakes anyway. It's like any other profession. You've got a ton in it that are around average or worse, and you've got a few that are good and even fewer that are great.",
        "score": 2,
        "replies": []
      },
      {
        "author": "Stock_Complaint4723",
        "body": "You guys have secure coding practices? 🤔",
        "score": 2,
        "replies": []
      },
      {
        "author": "NefariousnessFit3502",
        "body": "At least the devs that use those tools got a hint of how stupid their copy and pasted piece of code is when they saw the -642 rating on Stack Overflow. Now they have to prompt engineer their way around it by telling the AI to generate code that does not get downvoted on SO.",
        "score": 2,
        "replies": []
      },
      {
        "author": "dna_beggar",
        "body": "The AI is only as good as what it is trained on.\n\nThe ones I have used behave like a junior programmer who does not understand much. Never treat it as an expert, only as an assistant.",
        "score": 3,
        "replies": [
          {
            "author": "magnetikpop",
            "body": "most content out there are made by amateurs which is what the ai is feeding on. now the amateurs started using ai content are going to be much worse. soon every ai is going to be very very dumb.",
            "score": 13,
            "replies": [
              {
                "author": "tricepsmultiplicator",
                "body": "Its the ASRJS. Automatic Self-Reliant Job Security.",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "VRT303",
            "body": "I've come to see Copilot as that new overly enthusiastic intern / junior. They can take over some simple boring tasks and do them OK, and will copy paste / autocomplete things that I need to take in my hand at least once anyway for anything more complicated.\n\nGood Juniors get up to decent in half a year though, Copilot still makes a mess.",
            "score": 1,
            "replies": [
              {
                "author": "om_nama_shiva_31",
                "body": "Well, yes, but if you use it for what it's for (aka a copilot, as it says in its name), it's a pretty powerful and useful tool. Just don't treat it as a pilot :P",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "Unhappy-Tip9182",
        "body": "Can be seen here: [https://huntr.com/bounties/hacktivity](https://huntr.com/bounties/hacktivity)",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "This blog post is heavy on hypebole and light on CVEs.",
        "score": 1,
        "replies": []
      },
      {
        "author": "thumbsdrivesmecrazy",
        "body": "While AI/ML tools offer exciting capabilities, we must remain vigilant in adhering to secure coding best practices.\n\nHere is, for example, a good guide on how compliance in software development involves following rules to ensure security, privacy, and quality: [The Importance of Compliance in Software Development](https://www.codium.ai/blog/the-importance-of-compliance-in-software-development/)\n\nSo, as you see, the AI/ML future is bright, but only if we build it on a foundation of robust security practices.",
        "score": 1,
        "replies": []
      },
      {
        "author": "thumbsdrivesmecrazy",
        "body": "Here is an overview of the security challenges associated with AI-generated code - it shows how it also introduce significant security risks due to potential vulnerabilities and insecure configurations in the generated code as well as key steps to secure AI-generated code: [3 Steps for Securing Your AI-Generated Code](https://www.codium.ai/blog/3-steps-securing-your-ai-generated-code/)",
        "score": 1,
        "replies": []
      }
    ]
  },
  {
    "title": "Malicious VSCode extensions with millions of installs discovered",
    "body": "",
    "score": 845,
    "url": "",
    "created_utc": 1718060400.0,
    "author": "eden_avocado",
    "permalink": "/r/programming/comments/1dcz9uj/malicious_vscode_extensions_with_millions_of/",
    "comments": [
      {
        "author": "Lord_Zane",
        "body": "Oh this is neat to see. A year and a half ago when I was in grad school, for my computer security class, my group's semester project was the same topic as these researchers. We investigated automated ways of finding malicious VSCode extensions from the marketplace.\n\nWe originally wanted to automatically download and run extensions in a sandbox and trace suspicious calls, but that proved too difficult to get working in the semester we had. Electron did not lend itself well to being sandboxed, and we had to switch directions halfway through the semester. Instead, we made a system that automatically scanned extension metadata and source code, much like the researchers did here.\n\nWe scanned for typosquatting, suspicious strings or binaries in the extension code, weird author/github mismatches, etc. Many of the same techniques the researches used here.\n\nWe found a surprisingly large amount of just weird crap. Stuff like extensions that weren't actually for coding but instead were advertising pirated movies. \n\nI forget it what it's called, but there was some official way to get extensions verified/trusted/? by microsoft. We also found that a surprisingly large amount of the top ~100(?) extensions didn't use this process. Sorry for the vagueness, the details are a bit fuzzy to me, and a quick google didn't bring up what I was looking for.\n\nSo yeah, interesting to see a more rigorous study confirm what our somewhat hastily produced research project found.",
        "score": 396,
        "replies": [
          {
            "author": "amitassaraf",
            "body": "Amit here from the original blog post.\n\nActually during our research of Visual Studio Code extensions in the past few weeks we've found an alarming amount of security design flaws that deserve the security community’s attention. The lack of a permission model, automatic silent updates, and unrestricted capabilities are just a few issues that poses a direct threat to organizations who use Visual Studio Code.\n\nRead our letter to Microsoft with the design flaws we've found - [https://medium.com/@amitassaraf/3-6-uncovering-design-flaws-in-the-visual-studio-code-marketplace-ea1d8e8b0171](https://medium.com/@amitassaraf/3-6-uncovering-design-flaws-in-the-visual-studio-code-marketplace-ea1d8e8b0171)",
            "score": 190,
            "replies": [
              {
                "author": "Lord_Zane",
                "body": "Great blog post and research, thank you for linking the original report! Annoyingly the bleepingcomputer article did not.",
                "score": 11,
                "replies": []
              },
              {
                "author": "ComprehensiveWord201",
                "body": "I don't see how this is a response to the previous poster. This doesn't really have anything to do with what they said, more like you are squatting on the top posted reply to get more people to other articles...",
                "score": 30,
                "replies": [
                  {
                    "author": "Lord_Zane",
                    "body": "I'm personally happy that they did post. Their original post is worth reading instead of reading it summarized through bleepingcomputer.",
                    "score": 18,
                    "replies": [
                      {
                        "author": "ComprehensiveWord201",
                        "body": "Fair.",
                        "score": 6,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "Infamous_Employer_85",
                "body": "thanks so much for all of your work.  It seems that it would be very useful to have tooling available to the community to detect extensions with security issues, I followed you on Medium hoping that future posts will outline simple ways for developers to identify problematic extensions.  Ideally, as you point out, Microsoft would provide such tools or identify security issues on the extension's page.",
                "score": 2,
                "replies": []
              },
              {
                "author": "cauthon",
                "body": "Do you have the list of malicious extensions published anywhere?",
                "score": 3,
                "replies": [
                  {
                    "author": "Infamous_Employer_85",
                    "body": "Asking the useful questions",
                    "score": 2,
                    "replies": [
                      {
                        "author": "stuckinmotion",
                        "body": "The painfully obvious, ie how could they not include it, questions. What good is \"oh hey we found out thousands of terrible extensions. You probably have one! Ok byeeeee\"",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "jkrejcha3",
            "body": "&gt; We found a surprisingly large amount of just weird crap. Stuff like extensions that weren't actually for coding but instead were advertising pirated movies. \n\nI think I have a hypothesis for this specific *type* of spam, and it (depending on what you find interesting) has an interesting backstory from what I can tell. While not advertising pirated movies, I saw something similar happen for what I'm calling vaguely \"sports streaming spam\" (TL;DR: domain reputation abuse). \n\nOkay, so their group (probably using stolen accounts), on reddit (as one example of sites they spammed), would create dozens of subreddits and flood dozens of posts to their subreddits and make *hundreds of thousands of comments* on those subreddits posting links to their spam. This worked pretty well; if you googled some of the search terms during NFL season or whatever, you'd get their links as some of the top results.\n\nThis stuff wasn't limited to reddit either; you still see it on StackOverflow and the other SE network sites if you monitor the SmokeDetector chatroom at the right time of the year. Anyway, at some point I guess people on the anti-spam side figured out that their links from new accounts were by in large garbage spam you could automatically filter out and remove.\n\nSo the spammers I think needed new tactics. Eventually what they started doing is creating GitHub apps and I guess probably VS Code extensions and then linking to *that* in their spam and the description just says where to go. I saw this happen at least once while looking through the SmokeDetector room. My guess is that on places like reddit and (especially) StackOverflow, links to GitHub and the VS Code extension library aren't filtered out, because they have higher likelihood to be legitimate than downloadc00lnewmovies.example or whatever.",
            "score": 13,
            "replies": []
          },
          {
            "author": "GroundbreakingTip338",
            "body": "I remember reading this comment a while back. I tried to find suspicious vscode extensions, mainly through their descriptions and to no avail. The only extension I could find was: itemName=IyotBirada.Ovaltinies-Tinie which has 0 downloads. If you have any pointers, I would be greatful",
            "score": 1,
            "replies": [
              {
                "author": "Lord_Zane",
                "body": "Sorry - it's been too long, and I no longer remember. Perhaps the extensions store was cleaned up in the ~2 years since.",
                "score": 1,
                "replies": [
                  {
                    "author": "GroundbreakingTip338",
                    "body": "ahh that sucks. if by any chance you guys scrapped the marketplace 2 years ago and still have the dataset, I would love to it compare how far they have changed.\n\nThanks :D",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Lord_Zane",
                        "body": "I checked, I don't see any github repo. Not sure where we might've kept it otherwise, sorry.",
                        "score": 1,
                        "replies": [
                          {
                            "author": "GroundbreakingTip338",
                            "body": "I genuinely appreciate you looking. I can't even get my assigned teammates to reply 😭.  \nWhile looking I found this video: [https://www.youtube.com/watch?v=1zGwA1qMGvM&amp;t=98s](https://www.youtube.com/watch?v=1zGwA1qMGvM&amp;t=98s) by John Hammond\n\nHe uploaded a csv file of all avaiable extensions in 2023 (51k to 70k): [https://docs.google.com/spreadsheets/d/12GIzrSzzU-\\_Ok4pPigUJYSxKO2ZYSmDwr1OJy6T2X40/edit?gid=1397736002#gid=1397736002](https://docs.google.com/spreadsheets/d/12GIzrSzzU-_Ok4pPigUJYSxKO2ZYSmDwr1OJy6T2X40/edit?gid=1397736002#gid=1397736002)\n\nJust incase you needed it in the future",
                            "score": 1,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "Skaarj",
        "body": "I would argue: **the real bug here is that the extension API allows for these things in the first place.**\n\nWhy are extensions executed in a context where they can download arbitrary data or execute arbitrary binaries? Run the extension in a locked context that can't do these malicious actions.",
        "score": 154,
        "replies": [
          {
            "author": "Nicksaurus",
            "body": "A lot of the core functionality in vscode comes from extensions running external executables e.g. everything that relies on git, python, LLVM, etc.\n\nMaybe they need a permission system like browser extensions so you at least know in advance if an extension is going to run an executable instead of just applying CSS themes or whatever you thought it would do",
            "score": 107,
            "replies": [
              {
                "author": "vplatt",
                "body": "&gt; Maybe they need a permission system like browser extensions so you at least know in advance if an extension is going to run an executable instead of just applying CSS themes or whatever you thought it would do\n\nThis.  We should be getting notified of any resources extensions use.  In fact, since VS Code is basically an overgrown web app, it should cordon off extensions and use a security model at least as good as the major browsers use; assuming that's anywhere near sufficient.",
                "score": 31,
                "replies": [
                  {
                    "author": "pragmojo",
                    "body": "I think you would need a lot more system access for many extensions than browsers allow.  An LSP for example needs pretty wide file-system access, and a C/C++ workflow might need to run a bunch of arbitrary binaries to do it's job.\n\nI think what's important is giving the user informed consent over what an extension is doing, and also treating installing and using extensions as a potentially risky behavior from a UX perspective.\n\nCurrently VSCode treats extensions super casually, and it's easy for a user to download dozens of them by just clicking \"yes\" whenever the box pops up in the bottom corner without even thinking about it.",
                    "score": 17,
                    "replies": [
                      {
                        "author": "vplatt",
                        "body": "That's a good point, so my suggestion goes overboard.  \n\nHowever...:\n&gt; I think what's important is giving the user informed consent over what an extension is doing, and also treating installing and using extensions as a potentially risky behavior from a UX perspective.\n\nExactly!  If I'm using an extension like the OP's Dracula extension and I'm prompted upon install to let me know that it uses network calls, at least I can have the opportunity to put a stop to it then.  Especially as developers, we know that's suspicious.  Furthermore, at runtime, if I were to get a prompt from VS Code to let an extension use the network and it were to show me the network connection and payload details, I could put a stop to it then.  \n\nThe nightmarish side of VS Code is that so many devs will knowingly or unknowingly run code in a sudo or Administrator context and just forget that they're doing so.  Issues with permissions are common in a development experience after all.  Should this happen?  Nope.  But it does happen because of all the different weird toolchains and admin-required install paths that are used in the wild.",
                        "score": 5,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "tj-horner",
                "body": "It does sound we need some kind of permission model similar to browser extensions. It's not perfect (as demonstrated by Chrome Web Store malware) but it will at least (hopefully) throw up some red flags when \"My Really Cool Theme\" requests permission to read from your home directory or send a request to a sketchy domain.\n\nAlso alarming is how easily they were able to get that misleading verified checkmark. I imagine many would interpret the checkmark as \"verified coming from a _trusted_ source,\" when in reality it just means \"we have verified the author of the extension owns this domain\".",
                "score": 8,
                "replies": []
              }
            ]
          },
          {
            "author": "VirginiaMcCaskey",
            "body": "Because that's how computers work? \n\nLanguage servers run as child processes (and they shouldn't be anything else). Any kind of git or VCS tooling needs to read and write to disk. Jailing these processes makes them useless. It's natural for editor extensions to need to read/write disk and execute child processes - that's how developer tools have worked for decades. \n\nThat's not to say there aren't problems to solve, but this reaction is nonsensical to me. If extensions couldn't do these things, extensions wouldn't be useful!",
            "score": 11,
            "replies": [
              {
                "author": "pleasewait",
                "body": "Are there prompts right now which indicate what permissions the extension will get? I think that would right away raise attention that you’re giving permissions to a lot of things. But if the reviews are faked, then it’s already probably a lost cause. Tricky situation and I think we’re starting to get more and more attacks through open-source. It’s a lot more easy access to otherwise secured companies.",
                "score": 1,
                "replies": [
                  {
                    "author": "VirginiaMcCaskey",
                    "body": "Nah. Leave it up to the OS to implement capability based security/entitlements. \n\nThis has nothing to do with open source, fwiw. VS Code extensions can be black boxes that download and run arbitrary programs. On top of that, a lot of language tooling requires code to be executed to be analyzed. So if you have *any* kind of extension for *any* text editor or IDE you have these kinds of problems, and it's not the job of the editor to play security whackamole. \n\nIf you don't want to run 3rd party programs don't download and run them. It's really not that complicated. That includes extensions and plugins for your tools.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "BullShinkles",
            "body": "It's not really a bug, but a development paradigm that is to blame. \n\nWhile Open Source / Freeware has its strengths, it does have the inherent weakness of allowing everyone to share and contribute.... even the bad guys. Unfortunately we don't get to choose who gets to contribute, so bad actors, hacks, foreign agents, and con artists can trick us into providing them with backdoors and sensitive information they can exploit.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "shgysk8zer0",
        "body": "These posts should really name the extension (some Dracula theme here, it looks like... Didn't and won't fully read). Kinda click-baity to not. I shouldn't have to open some link to know if it's relevant... Should know by the title.\n\nEdit: a whole lot of people think click-bait means misleading... It doesn't. It just means it baits you into clicking.",
        "score": 672,
        "replies": [
          {
            "author": "reactivedumpaway",
            "body": "The Dracula theme extension was a \"typosquatter\" (Darcula Theme, with \"darculatheme.com\" as the registered domain) released by the researcher as an experiment, which uses actual Dracula theme code but with additional code that \"collects system information, including the hostname, number of installed extensions, device's domain name, and the operating system platform, and sends it to a remote server via an HTTPS POST request.\"\n\nResult: no flagging from endpoint detection and response (EDR) tools, verified publisher, multiple high-value targets installed said extension.\n\n----------\n\nWell I thought the entire article was clickbait until I read further. Turns out the researchers dive deeper and scan the marketplace then find a lot of extensions with really malicious code (one example they provided is CWL Beautifer, which opens a reverse shell)\n\n&gt; Through this process, they have found the following:\n\n&gt; - 1,283 with known malicious code (229 million installs).\n&gt; - 8,161 communicating with hardcoded IP addresses.\n&gt; - 1,452 running unknown executables.\n&gt; - 2,304 that are using another publisher's Github repo, indicating they are a copycat.\n\nSo yeah, fun stuff.",
            "score": 409,
            "replies": [
              {
                "author": "EasyMrB",
                "body": "Good god, with those numbers I'd rather just drop VS Code entirely.",
                "score": 42,
                "replies": [
                  {
                    "author": "SirPsychoMantis",
                    "body": "/r/neovim\n\nSee you soon",
                    "score": 8,
                    "replies": [
                      {
                        "author": "fripletister",
                        "body": "Hahahaha I'm good",
                        "score": 6,
                        "replies": []
                      },
                      {
                        "author": "tomachinz",
                        "body": "Time to give Neovim a look.... 🙏",
                        "score": 1,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "KevinCarbonara",
                    "body": "I don't really understand what you think the issue is, here. VSCode could likely do more to defend against malicious extensions - but you're the one who chooses which extensions to run. You could just... not. I'm not really sure what other software you'd use that had both a robust extension system and didn't have these issues.",
                    "score": 71,
                    "replies": [
                      {
                        "author": "pragmojo",
                        "body": "I disagree - this is a particular risk with VSCode due to the \"recommended extensions\" feature - i.e. if you are opening a certain type of file, VSCode will suggest extensions that you can install with just a click of extension.\n\nYou can't expect every person to fully vet every extension their editor suggests for them.  Especially many beginner devs are likely to just click yes when prompted if their editor suggests something.\n\nIt's a huge surface area for supply-chain attacks.  It's pretty easy to imagine a situation like the `xz` attack, where a well-used extension gets compromised, and millions of people get the compromised version with an auto-update without even realizing it.",
                        "score": 79,
                        "replies": [
                          {
                            "author": "MrJohz",
                            "body": "But is it the recommended extensions that are being compromised here?  VSCode doesn't just randomly suggest recommended extensions, I believe the ones they recommend are typically the standard extensions for a particular ecosystem.\n\nThere are still risks involved in vetting the processes and supply chains of those extensions, but that's a very different set of risks to the ones described in that comment.",
                            "score": 45,
                            "replies": [
                              {
                                "author": "Jaggedmallard26",
                                "body": "The issue is it trains naive users to blindly trust extensions. The mechanism for installing a recommended extension is identical to installing an untrusted extension. Sure we can sit here as knowledgeable people and say we would be careful but evidently hundreds of millions will not. If untrusted extensions required you to go to a third party website download something and then import through warnings then it wouldn't be VS codes issue.",
                                "score": 20,
                                "replies": [
                                  {
                                    "author": "drcforbin",
                                    "body": "From the original blog post, all it takes to get a blue check and become a verified publisher all you need to do is add a verified domain to your publisher account. Only 4% of extensions even do that, including some of the top extensions. It's meaningless and they need to change that before using it for anything",
                                    "score": 6,
                                    "replies": []
                                  }
                                ]
                              },
                              {
                                "author": "pragmojo",
                                "body": "That's why I bring up the `xz` example: it was considered to be safe and well-trusted software for *years*, but then bad actors got control of the project via social engineering, and injected malicious code.\n\nYou could easily imagine a similar attack, where someone finds the list of the 100 most used extensions, finds one or a hand-full where they can get commit rights to the repository, and release an update containing malicious code.\n\nThis is the inherent risk of maximalist tooling and high dependency development.",
                                "score": 29,
                                "replies": []
                              },
                              {
                                "author": "calebkiage",
                                "body": "I think repositories can also recommend extensions as well through their [workspace recommended extensions](https://code.visualstudio.com/docs/editor/extension-marketplace#_workspace-recommended-extensions) feature. So a beginner downloading tutorial source code and installing the recommended extensions can be compromised",
                                "score": 2,
                                "replies": [
                                  {
                                    "author": "MrJohz",
                                    "body": "But that also happens if you read a tutorial and it says \"now install xyz extension\".\n\nInstalling extensions is definitely a security risk, but the \"recommended extensions\" feature doesn't make it more of a security risk.  Yes, the recommended extensions could be compromised, but that's true of any extensions, and can occur in a variety of ways.",
                                    "score": 3,
                                    "replies": [
                                      {
                                        "author": "pragmojo",
                                        "body": "I disagree.  The barrier to entry for recommended extensions is so low - you literally just have to click a button.  The UX even makes it annoying *not* to install the recommended extension, because it will keep popping up in the corner periodically like a software update notification.\n\nWith a tutorial, at least you have to go through the effort of manually installing the extension, even potentially with some terminal commands.  That's enough friction that the least sophisticated users, who are most at risk, might not even get that far.\n\nAnd if it's coming from a tutorial, at least you have the context of the tutorial to understand how trustworthy the author might be.  With VSCode, you probably aren't even aware of where the request to install the extension is coming from.  It's just the default action recommended by VSCode as far as the UX is telling you.\n\nSo it's not to say you can ever eliminate all risk, but maybe we should not make it the easiest thing in the world to put yourself at risk.",
                                        "score": 5,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "ihopkid",
                        "body": "Have never had these issues with any of JetBrains products, ie Rider, PyCharm. But then again, I pay a fair amount for the security of verified plugins on JB",
                        "score": 12,
                        "replies": [
                          {
                            "author": "Celos",
                            "body": "&gt;Have never had these issues with any of JetBrains products\n\nHas this been vetted by some external party? Intellij seems to have more stringent controls, but unless they're verified somehow, it's kind of a meaningless statement. The hundreds of millions of installs mentioned in the article probably didn't have noticeable issues either.",
                            "score": 28,
                            "replies": [
                              {
                                "author": "ihopkid",
                                "body": "[yes, if this is what you are referring to](https://www.jetbrains.com/legal/docs/plugins_site/approval-guidelines/), JB plugins all go thru a verification process and must be installed thru the JB Marketplace app to prevent any malicious or misleading plugins. Has its ups and downs, some plugins I like are outdated because latest version hasn’t been approved yet but I still like being secure lol",
                                "score": 17,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "foreveratom",
                            "body": "Yes but you are mentioning professional tools for developers, not some freebie interface where everything goes (literally) aimed at tinkerers who don't know better.",
                            "score": -4,
                            "replies": [
                              {
                                "author": "fripletister",
                                "body": "You're not wrong; you're just an asshole.",
                                "score": -4,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "orbita2d",
                        "body": "The problem being that vscode is so poorly featured that you are basically required to install extensions?",
                        "score": -13,
                        "replies": [
                          {
                            "author": "KevinCarbonara",
                            "body": "&gt; The problem being that vscode is so poorly featured\n\nCompared to... what?\n\nYou honestly don't sound like you've... ever programmed. The reason VSCode got popular is actually quite the opposite of what you've said. VSCode was based on Atom, another electron-based IDE with extensions. The primary reason VSCode was more popular was because it *didn't* need extensions to be good. Whereas Atom required a lot of customization, VSCode was good right out of the box.\n\nI also have no idea what you're comparing it to. Every editor I know of has plugins, most with far less oversight than VSCode. Vim for example once ran into a wall where people's loading times were so long (1m+) that someone had to fork the project to create neovim to implement parallel processing of plugins.\n\nWhat exactly are you using to program that doesn't have extensions? Notepad?",
                            "score": 16,
                            "replies": [
                              {
                                "author": "orbita2d",
                                "body": "I've never felt the need to install more than one or two extensions in anything JetBrains.\n\n&gt;You honestly don't sound like you've... ever programmed.\n\nCongrats on the most arrogant, programmer stereotype comment I've ever seen in response to an IDE opinion you disagree with, bloody hell.",
                                "score": -9,
                                "replies": [
                                  {
                                    "author": "Czumanahana",
                                    "body": "But on the other hand you have to install 2-3 ides if you are using multiple languages.",
                                    "score": 7,
                                    "replies": [
                                      {
                                        "author": "orbita2d",
                                        "body": "Sure, there's are pros and cons, but even my most polyglot team capped out at 4, and I only used two of them.\n\nHow common is it for a professional developer to use more than that regularly? It seems like it would nuke your expertise to constantly switch.",
                                        "score": 1,
                                        "replies": []
                                      },
                                      {
                                        "author": "fripletister",
                                        "body": "No you don't. There's an ultimate edition.",
                                        "score": 1,
                                        "replies": [
                                          {
                                            "author": "vplatt",
                                            "body": "Does that still work?  I haven't tried in a while, but as I've been tinkering in almost equal parts these days in Rider, RustRover, and GoLand, could I do the same with all the same features in Ultimate Edition still?  Right now I just keep all 3 products installed.",
                                            "score": 2,
                                            "replies": []
                                          }
                                        ]
                                      },
                                      {
                                        "author": "axonxorz",
                                        "body": "Nah, get IntelliJ Ultimate if you're using that many separate JB IDEs. Every IDE they provide is just a set of plugins and configuration on the IntelliJ platform, and Ultimate can just load them all at the same time. For example, PyCharm comes with most (all?) of the same features as WebStorm, I assume PhpStorm and RubyMine are the same.",
                                        "score": 0,
                                        "replies": [
                                          {
                                            "author": "KevinCarbonara",
                                            "body": "&gt; Nah, get IntelliJ Ultimate if you're using that many separate JB IDEs. Every IDE they provide is just a set of plugins\n\nSo you're basically required to install extensions? Now we're back at square one",
                                            "score": 2,
                                            "replies": []
                                          },
                                          {
                                            "author": "Dealiner",
                                            "body": "Not all, Rider (and maybe something else) is completely separate, since it uses different backend.",
                                            "score": 1,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "author": "KevinCarbonara",
                                    "body": "&gt; Congrats on the most arrogant, programmer stereotype comment I've ever seen in response to an IDE opinion you disagree with, bloody hell.\n\nThis post really didn't age well did it",
                                    "score": 0,
                                    "replies": [
                                      {
                                        "author": "orbita2d",
                                        "body": "Why?",
                                        "score": 0,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "ryjhelixir",
                        "body": "I didn't need many extensions using Zed",
                        "score": -8,
                        "replies": [
                          {
                            "author": "pragmojo",
                            "body": "Zed is an amazing editor - I hate having to use VSCode at work",
                            "score": -4,
                            "replies": []
                          }
                        ]
                      },
                      {
                        "author": "Delicious_Sundae4209",
                        "body": "It's pretty much like having a AppStore without any security. Can you really blame the user? What's the point in controlling what you *can* install, if there is no security review in place.",
                        "score": 0,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "kraskaskaCreature",
                    "body": "uninstalling vs code due to some bad apples is something;\n\ni don't think it's that likely to get malware from the extension store",
                    "score": -12,
                    "replies": [
                      {
                        "author": "EasyMrB",
                        "body": "&gt; 1,283 with known malicious code (229 million installs).\n\n&gt; ...\n\n&gt; 1,452 running unknown executables.\n\nLet's just repeat the relevant facts.",
                        "score": 18,
                        "replies": [
                          {
                            "author": "StickiStickman",
                            "body": "What does \"malicious code\" mean? What does \"unknown executables\" mean?\n\nThe numbers are absolutely meaningless.",
                            "score": 2,
                            "replies": []
                          },
                          {
                            "author": "GlowiesStoleMyRide",
                            "body": "I'm wondering if the installs number for malicious plugins have been artificially inflated to appear more trustworthy.",
                            "score": 2,
                            "replies": []
                          },
                          {
                            "author": "[deleted]",
                            "body": "Ok, how many total installs? Because you can’t calculate likelihood from incidence alone.\n\nFactfulness, after all…",
                            "score": -8,
                            "replies": [
                              {
                                "author": "EasyMrB",
                                "body": "&gt; 1,283 with known malicious code **(229 million installs).**\n\nLike, bruh...",
                                "score": 14,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "Bruh:\n\nLikelihood = incidence per total\n\nUse your brain.\n\nBoth words got total they must be the same 🤡\n\n\nIs that how you program?\n\nHmm I’ll just pick whatever variable that sounds like what I need?",
                                    "score": -19,
                                    "replies": [
                                      {
                                        "author": "nocrimps",
                                        "body": "You should form a complete thought using full sentences if you want to get your point across. \n\nOr you and this other guy can have a reddit argument that nobody else cares about, your choice.",
                                        "score": 8,
                                        "replies": [
                                          {
                                            "author": "[deleted]",
                                            "body": "Im sorry, all the information necessary was present in my first comment.\n\nI’m not their high school stats tutor.",
                                            "score": -4,
                                            "replies": []
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "author": "kraskaskaCreature",
                            "body": "assuming this page gives correct number:\n\n[https://marketplace.visualstudio.com/search?target=VSCode&amp;category=All%20categories&amp;sortBy=Installs](https://marketplace.visualstudio.com/search?target=VSCode&amp;category=All%20categories&amp;sortBy=Installs)\n\nthe chances of getting malicious extension is 1452 / 59783 = 0.0242..., so about 2.42%, which is low. you wanna drop using vs code over 2 percents?\n\nedit: ok not chances, more like total proportion",
                            "score": -6,
                            "replies": [
                              {
                                "author": "[deleted]",
                                "body": "Only comment here with any sense.\n\nSaying chances is fine colloquially. Whether or not we can assume a likelihood from past incidence is a philosophical distinction.",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "liveoneggs",
                "body": "pretty much the same as vanilla node/npm",
                "score": 1,
                "replies": []
              },
              {
                "author": "StickiStickman",
                "body": "&gt; 1,283 with known malicious code (229 million installs).\n\nAll of these numbers are so incredibly vague they mean absolutely nothing.",
                "score": 0,
                "replies": []
              },
              {
                "author": "sparant76",
                "body": "Open source and markets for the win.",
                "score": -14,
                "replies": []
              },
              {
                "author": "shgysk8zer0",
                "body": "What it actually was about doesn't particularly matter when it comes to the specific thing I'm addressing. The basic info of that should've been in the post. We shouldn't have to open a link (and Reddit has started hiding URLs, so can't tell if it's a legitimate source or not) just to know what it's about and if I should be concerned. \n\nSome typo variant of a theme I don't use is uninteresting to me. If it were Eslint though... That'd be a different story. \n\nThis is just click-bait and probably results in extremely high bounce rates.",
                "score": -30,
                "replies": [
                  {
                    "author": "daishi55",
                    "body": "the headline accurately described the article",
                    "score": 17,
                    "replies": [
                      {
                        "author": "Healthy_Student_2314",
                        "body": "The basic info here should’ve been atleast to name some of the extensions",
                        "score": -8,
                        "replies": [
                          {
                            "author": "VelvetWhiteRabbit",
                            "body": "Some of the 8000 extensions?",
                            "score": 5,
                            "replies": [
                              {
                                "author": "Infamous_Employer_85",
                                "body": "Ideally all of them in a txt file that can be viewed",
                                "score": 1,
                                "replies": []
                              }
                            ]
                          },
                          {
                            "author": "shgysk8zer0",
                            "body": "Exactly. This is some unnecessary theme I don't even use, not Eslint or something I should actually be concerned about.",
                            "score": -20,
                            "replies": [
                              {
                                "author": "[deleted]",
                                "body": "Congratulations, you didn’t even understand the topic.",
                                "score": 7,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "author": "shgysk8zer0",
                        "body": "No accurate description omits the very subject. It is click-bait in that it baits you into clicking just to know what it's even about.",
                        "score": -11,
                        "replies": [
                          {
                            "author": "PaintItPurple",
                            "body": "It's about researchers finding thousands of malware extensions with millions of installs between them. Having read the article, I'd say the headline set my expectations pretty accurately.",
                            "score": 5,
                            "replies": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "caboosetp",
                    "body": "The one with a typo wasn't malicious, it was for research. For the ones that were actually malicious that you would want to be worried about, there's literally thousands of them.",
                    "score": 6,
                    "replies": []
                  }
                ]
              },
              {
                "author": "karuna_murti",
                "body": "\"researchers\".  \n\nno, bad actors.",
                "score": -20,
                "replies": []
              }
            ]
          },
          {
            "author": "[deleted]",
            "body": "[deleted]",
            "score": 13,
            "replies": [
              {
                "author": "[deleted]",
                "body": "The article title isn’t misleading. What you’ve described is the first part of the article. The second part of the article describes a scan the team did in which they did indeed discover millions of installs of malicious code.",
                "score": 13,
                "replies": []
              },
              {
                "author": "shgysk8zer0",
                "body": "Yeah, once I took a quick glance and realized I didn't care... I didn't care. \n\nIDK how it's top. Possibly just because I said that I shouldn't have to open the link just to know what it's actually about and a lot of people agreed?",
                "score": -18,
                "replies": [
                  {
                    "author": "OMG_A_CUPCAKE",
                    "body": "If multiple extensions are affected and only some of them are listed in the headline (because it can't be too long) then it would just give you a false sense of security if one of yours wasn't listed. \n\nA title isn't clickbait just because it can't give you all the information at once. Otherwise we wouldn't need articles.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "shgysk8zer0",
                        "body": "Was any main/official extension compromised? If so, wouldn't they lead with that?\n\nI have very few installed because I already knew that things could be malicious.",
                        "score": -2,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "dippocrite",
            "body": "The malicious software is the ‘Darcula theme’. They name squatted by using a misspelling of a very popular theme. It’s not the Dracula theme that is infected.",
            "score": 11,
            "replies": [
              {
                "author": "verrius",
                "body": "I could be mistaken, but I think Darcula is *also* a relatively popular name for dark mode themeing, especially for IDEs, since Jetbrains has a popular one with that name (I could have sworn Konqueror did as well back in the day), since it's also a pun on dark/Dracula.",
                "score": 77,
                "replies": [
                  {
                    "author": "Generic-Moniker",
                    "body": "Good grief, have you seen how many \"Darcula\" themes there are in the marketplace? \"Darcula Official\" sounds like a good name to pick if you want to stand out from the crowd for your malware attack.",
                    "score": 3,
                    "replies": []
                  },
                  {
                    "author": "CelDaemon",
                    "body": "Dracula itself is safe, it was a misspelled version of the name that wasn't",
                    "score": -5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "PaintItPurple",
                "body": "There were thousands of malicious extensions they identified. That theme was just a research tool they created.",
                "score": 9,
                "replies": []
              },
              {
                "author": "ward2k",
                "body": "Darcula is the name of a theme, it's a common theme name across various tools and services and has been for years\n\nHow is this comment so upvoted it's completely wrong",
                "score": 39,
                "replies": [
                  {
                    "author": "ourobo-ros",
                    "body": "&gt; How is this comment so upvoted it's completely wrong\n\nWelcome to reddit.",
                    "score": 8,
                    "replies": []
                  },
                  {
                    "author": "Celos",
                    "body": "&gt; How is this comment so upvoted it's completely wrong\n\nBecause in VSCode-land the most popular extension (by installs) is Dracula?",
                    "score": 6,
                    "replies": [
                      {
                        "author": "ward2k",
                        "body": "Darcula and Dracula are two separate theme sets\n\nDracula has a more neon look\n\nDracula is the base theme for JetBrains tools, this theme also exists across many other tools and services",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 1,
                    "replies": [
                      {
                        "author": "ward2k",
                        "body": "Yes and Darcula also exists\n\nOr is JetBrains also name squatting the word 'Dracula' looking for malicious installs? No, because Dracula is neon and Darcula isn't",
                        "score": 8,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": 2,
                            "replies": [
                              {
                                "author": "ward2k",
                                "body": "&gt; No, it's a JetBrains-only theme\n\nCreated by Jetbrains yes however it's now a very popular theme across most tools, Dracula and Darcula are two separate themes. It's not as popular as Dracula but saying it's exclusive to Jetbrains isn't correct\n\nhttps://marketplace.visualstudio.com/items?itemName=rokoroku.vscode-theme-darcula - Since 2020, well before this research paper\n\nhttps://github.com/telamonian/theme-darcula\n\nhttps://github.com/xiantang/darcula-dark.nvim\n\nhttps://pypi.org/project/theme-darcula/\n\nhttps://emacsthemes.com/themes/darcula-theme.html\n\nMy point is they almost certainly got more installs from people trying to find a Darcula extension rather than people looking for the Dracula neon",
                                "score": 6,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "author": "KevinCarbonara",
                "body": "Darcula *is* the name of the theme. It's a pun. I think Dracula is the misspelling.",
                "score": 10,
                "replies": [
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 0,
                    "replies": [
                      {
                        "author": "KnifeFed",
                        "body": "Downvoted for providing facts 👍",
                        "score": 0,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "coldblade2000",
                "body": "The default Jetbrains IDEs theme (or at least in the old UI) is also called \"Darcula\".",
                "score": 1,
                "replies": []
              }
            ]
          },
          {
            "author": "sysop073",
            "body": "There are 1300 malicious extensions, they can't name them all in the title. The Dracula one isn't one of them, that was their experiment to try and get people to install an intentionally typoed clone of a popular extension.",
            "score": 1,
            "replies": [
              {
                "author": "shgysk8zer0",
                "body": "The typo and cloned extension is the important thing omitted.",
                "score": 0,
                "replies": []
              }
            ]
          },
          {
            "author": "MyShirtPocket",
            "body": "Bro just discovered clickbait",
            "score": -10,
            "replies": [
              {
                "author": "shgysk8zer0",
                "body": "Unfortunately discovered it a very long time ago. I'm just calling it what it is.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "[deleted]",
        "score": 188,
        "replies": [
          {
            "author": "scandii",
            "body": "I mean, read the article.\n\nthis is going to sound extremely dismissive but I just want to make it clear that these marketplaces,  no matter the company, is ripe with malware-esque applications. that said some dudes created a plugin with a similar name as a popular one that sends some minimal telemetry back home. that's it.\n\nthis obviously gets past Microsoft's threat detection because everyone and their grandmother collects data.\n\nwhen someone mistakenly downloaded their pretty harmless plugin they successfully infected the organisation.\n\nthen they set up a pretty fuzzy list of criteria why other apps are a threat including but not limited to hard coded IP:s and the fact that plugins execute other binaries, which is fair but also just how many plugins work. also some amateurs left secrets in their source code.\n\nand that's about the entire article.",
            "score": 99,
            "replies": [
              {
                "author": "ZurakZigil",
                "body": "it's a theme. why does a theme send any data back",
                "score": 42,
                "replies": [
                  {
                    "author": "Chii",
                    "body": "of course it shouldn't be sending back data. But as malware goes, it's the least worst thing. Imagine a keylogger instead, or a remote execution exploit injector etc. \n\nObviously, it's still malware whether it's \"harmless\" or not. \n\nI think extensions need security built in, similar to how a browser has some security built in (against sites, like cross site origin permission, and http-only cookies etc).",
                    "score": 27,
                    "replies": [
                      {
                        "author": "ZurakZigil",
                        "body": "right. but what I meant was a constant connection is obviously suspicious in that case.",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "lets-start-reading",
                    "body": "why would a plugin have access to system resources? why would a multi-billion dollar company multi-million user application not sandbox it?",
                    "score": 3,
                    "replies": [
                      {
                        "author": "pragmojo",
                        "body": "It's not as easy to sandbox coding extensions as something like a website.  By their very nature, a lot of extensions will need things like shell access or file system access.\n\nProbably there could be better fine-grained access control over what is allowed, but software development by nature is a fairly system-heavy pursuit.",
                        "score": 18,
                        "replies": [
                          {
                            "author": "[deleted]",
                            "body": "[deleted]",
                            "score": -14,
                            "replies": [
                              {
                                "author": "pragmojo",
                                "body": "Moving all software development to the cloud, and treating it as something which individuals can't or shouldn't do on their own computer is a *way bigger* problem",
                                "score": 15,
                                "replies": [
                                  {
                                    "author": "[deleted]",
                                    "body": "[deleted]",
                                    "score": -6,
                                    "replies": [
                                      {
                                        "author": "[deleted]",
                                        "body": "[removed]",
                                        "score": 7,
                                        "replies": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "author": "[deleted]",
                    "body": "[deleted]",
                    "score": 1,
                    "replies": [
                      {
                        "author": "Hektorlisk",
                        "body": "It's funny how you explicitly lay out how insane the status quo is and then come to the exact opposite conclusion that it all points to.",
                        "score": 7,
                        "replies": []
                      },
                      {
                        "author": "[deleted]",
                        "body": "You’re completely missing the point.\n\nNo one thinks the researchers used extremely malicious code.\n\nIt’s a stand in to demonstrate the complete lack of oversight both from platform and users.",
                        "score": 7,
                        "replies": []
                      }
                    ]
                  }
                ]
              },
              {
                "author": "[deleted]",
                "body": "Of the great sentences, there is obviously, \"The Angels have the Police Box.\" \n\nBut second place must be, \"Some amateurs left secrets in their source code.\"",
                "score": 2,
                "replies": []
              },
              {
                "author": "pragmojo",
                "body": "&gt; because everyone and their grandmother collects data.\n\nMS themselves are actually one of the worst offenders here.  I avoid MS products as much as possible with how much \"telemetry\" they send back, and how often they \"forget\" user settings to disable it",
                "score": 3,
                "replies": []
              }
            ]
          },
          {
            "author": "Zulakki",
            "body": "its tricky, do you want customization or regulation?",
            "score": 3,
            "replies": []
          },
          {
            "author": "NuGGGzGG",
            "body": "It's open source.",
            "score": -16,
            "replies": [
              {
                "author": "HelloIamGoge",
                "body": "Vscode is open source in the same way chrome is. Chromium technically is, chrome not. Most products that people use of vscode is highly commercialised",
                "score": 27,
                "replies": []
              },
              {
                "author": "ZurakZigil",
                "body": "uh... yes? And who hosts the plugin store?",
                "score": 15,
                "replies": [
                  {
                    "author": "NuGGGzGG",
                    "body": "Why would they moderate an open source store?",
                    "score": -31,
                    "replies": [
                      {
                        "author": "ZurakZigil",
                        "body": "the store is not open source dude. the app is. they host the store. they could at least monitor the most popular apps and look at suspicious activity like themes that use a constant connection for some reason.\n\nas much as it's an open source app, it is also a platform for them to sell services. so they make money on it",
                        "score": 13,
                        "replies": [
                          {
                            "author": "NuGGGzGG",
                            "body": "&gt;the store is not open source dude.\n\nYes it is. [https://github.com/microsoft/vscode/tree/main/extensions](https://github.com/microsoft/vscode/tree/main/extensions)\n\n&gt;they could at least monitor the most popular apps and look at suspicious activity\n\nThey could also scan all the *3rd party extensions* for anything - but you haven't demonstrated *why* they should. They made an open source editor with the ability for you to examine every single bit of whatever extension you want to install - and you're saying they need to monitor it? If you're using third party software - don't you look at it? \n\nI'm I just old as shit? When did *look at the source* become a non-starter? \n\nHere are all the Microsoft Extension Licenses: [https://code.visualstudio.com/docs/supporting/oss-extensions](https://code.visualstudio.com/docs/supporting/oss-extensions)\n\nWhat you're asking Microsoft to do with every single 3rd party extension submitted - is to examine it entirely to ensure it holds up to (what standards?) on monthly updates - when they're actively giving the software away for free? \n\nYou know what I've never been hit with? A \"buy this\" popup or notification in VSC.\n\nYou know why? It's because while Microsoft may maintain the *sole managed* of a project - they aren't actively making buy anything to make it work. Nothing about *this text editor* is P2P.\n\nWhich part of VSC is a \"platform to sell services?\" Can you show anything? Their download page doesn't even have a \"pricing\" link on it. It's free. They're actively giving it away on PC/Linux (fuck yeah)/macOS. What Microsoft products have you been incentivized to purchase because you use VSC?",
                            "score": -23,
                            "replies": [
                              {
                                "author": "binheap",
                                "body": "&gt; I'm I just old as shit? When did look at the source become a non-starter? \n\nA fair number of extensions aren't fully open source (e.g. Pylance). This isn't to say Pylance is dangerous, but I'm pretty sure it's at least not always feasible. You can avoid non OSS code, but it's also not really feasible or practical from a security perspective for every individual to manually check every extension. It simply doesn't occur. We've seen the exact same behavior in npm where malware gets introduced. We've seen it in other OSS projects as well.\n\n&gt; What you're asking Microsoft to do with every single 3rd party extension submitted - is to examine it entirely to ensure it holds up to (what standards?) on monthly updates - when they're actively giving the software away for free?\n\nI'm wouldn't say they have any strong obligations, but I think it would be a fair bit more responsible? Chrome does some basic scanning on the extension and I think FF also does when promoting extensions. Why not here?\n\n&gt; Which part of VSC is a \"platform to sell services?\" Can you show anything? Their download page doesn't even have a \"pricing\" link on it. It's free. They're actively giving it away on PC/Linux (fuck yeah)/macOS. What Microsoft products have you been incentivized to purchase because you use VSC?\n\nI think VSC has some pretty tight integrations with GitHub by default no? Certainly if you open a directory, the SCM side panel asks if you want to upload to GitHub and integrate VSCode with your GitHub account. The download page also promotes Azure. It's not the most aggressive upsell but it is an upsell. Not everything is an explicit price which is the whole point.",
                                "score": 3,
                                "replies": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "PapaOscar90",
            "body": "No that would be too Apple-like to enforce standards.",
            "score": -6,
            "replies": []
          }
        ]
      },
      {
        "author": "Manbeardo",
        "body": "Wait, isn't Darcula a common name for unaffiliated themes that are made to look just like Dracula? Similar to how Meslo is the free lookalike of Apple's Menlo font.",
        "score": 42,
        "replies": [
          {
            "author": "Eurynom0s",
            "body": "I was going to say I thought it was \"Darcula\" and specifically thought it was specifically a \"dark/Dracula\" pun.",
            "score": 24,
            "replies": [
              {
                "author": "Chisignal",
                "body": "soup judicious north ludicrous dazzling squealing squash connect languid wakeful\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
                "score": 38,
                "replies": [
                  {
                    "author": "AmateurHero",
                    "body": "I thought that I had a false memory for a second, because no one was bringing up the IntelliJ theme. Then I did a web search for Darcula theme in IntelliJ. The first two entries are for plugins. But then the third result:\n\n&gt; By default, IntelliJ IDEA uses the Darcula theme in Classic UI and the Dark theme in New UI unless you changed it during the first run.",
                    "score": 4,
                    "replies": [
                      {
                        "author": "Chisignal",
                        "body": "versed pet command enter noxious zesty possessive cagey numerous retire\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",
                        "score": 2,
                        "replies": []
                      }
                    ]
                  },
                  {
                    "author": "Eurynom0s",
                    "body": "Okay yeah that's definitely where I got it from then, it's the default PyCharm theme too. Like /u/AmateurHero I did a quick Google search and was getting results for a Darcula theme in the JetBrains plugin marketplace so assumed I was misrembering, and wasn't going to install PyCharm just to check that.",
                    "score": 2,
                    "replies": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "totemo",
        "body": "The majority of comments on this post are missing the point. Commenters are down-playing the severity of the problem, and I have to wonder whether some of those commenters have a vested interest in encouraging complacency.\n\nThe article is not click-bait. It mentions one typosquatting extension that was the researchers' proof-of-concept. But the real story is:\n\n * Microsoft is doing fuck-all moderation of extensions.\n * Microsoft has *not* removed all of the malicious extensions reported to them:\n\n    &gt; All malicious extensions detected by the researchers were responsibly reported to Microsoft for removal. However, as of writing this, the vast majority remains available for download via the VSCode Marketplace.\n\n * There are a lot of dodgy extensions:\n\n    &gt; * 1,283 with known malicious code (229 million installs).\n    &gt; * 8,161 communicating with hardcoded IP addresses.\n    &gt; * 1,452 running unknown executables.\n    &gt; * 2,304 that are using another publisher's Github repo, indicating they are a copycat.\n\n * The list of malicious extensions is not published, from what I can find. We will have to wait until *next week* to be able run the researchers' checking tool.\n * The problem has been ongoing for at least a year and a half. The [researchers](https://medium.com/@amitassaraf/the-story-of-extensiontotal-how-we-hacked-the-vscode-marketplace-5c6e66a0e9d7) link to this [prior research in January 2023](https://www.aquasec.com/blog/can-you-trust-your-vscode-extensions/).\n\nIf you deal with valuable intellectual property and you run VSCode, this is *really fucking serious*.",
        "score": 73,
        "replies": [
          {
            "author": "teerre",
            "body": "Another point is why a theme is even allowed to do any requests. It's a theme. It's specially funny since its a VSCode theme which doesn't even allow you to customize the look that much. If themes could completely change widgets or something, maybe, but its just colors",
            "score": 15,
            "replies": [
              {
                "author": "pragmojo",
                "body": "Yeah probably there should be manual opt-in required to install a plugin which needs certain access, like shell, file system, or network",
                "score": 9,
                "replies": []
              },
              {
                "author": "JamesGecko",
                "body": "VSCode themes are extensions, and as such can do anything that any extension can do. And they do! The Monokai Pro theme runs in \"trial mode\" and requires payment for extended use, for example.",
                "score": 2,
                "replies": [
                  {
                    "author": "teerre",
                    "body": "I know that's how it is now, but there's no reason it has to be that way. If they want to support buying a theme, they can support it in other ways",
                    "score": 1,
                    "replies": []
                  }
                ]
              }
            ]
          },
          {
            "author": "KevinCarbonara",
            "body": "&gt; The majority of comments on this post are missing the point. Commenters are down-playing the severity of the problem, and I have to wonder whether some of those commenters have a vested interest in encouraging complacency.\n\nI think the dismissiveness you're seeing is from people like me who use VSCode and extensions, but have always treated extensions as if they are potentially insecure (because they quite obviously are) and have stuck to trustworthy extensions.",
            "score": 16,
            "replies": [
              {
                "author": "totemo",
                "body": "I'm wary of free lunches in all their myriad forms. The $64,000 question is \"how do you evaluate 'trustworthiness'\". I consider Microsoft's own extensions to be *as trustworthy* as VSCode itself. \n\nBut after that, what do you do? If you believe in *safety in numbers*, well 229 million installs spread across 1283 malicious extensions is an average of 178,000 installs. Quite a respectable number and no indication of safety.\n\nPast that, it's up to you to look at the code, but Microsoft doesn't even guarantee that the GitHub link on the extension page matches the deployed code. That's utterly negligent.",
                "score": 18,
                "replies": [
                  {
                    "author": "NeverComments",
                    "body": "A manifest detailing required extension permissions would go a long way too, too. If a color scheme is requesting unrestricted  read/write permissions to your filesystem then users can make a more informed decision beyond blind trust or reading the source of the extension directly.",
                    "score": 5,
                    "replies": []
                  }
                ]
              },
              {
                "author": "binheap",
                "body": "I think this is still valuable since the security hygiene of many programmers might as well be non-existent. So many programmers basically run a script off GitHub and don't really think about the security implications or similarly download an extension without thinking about what it can access. It's why people keep trying to upload cryptominers/other malware to npm.",
                "score": 7,
                "replies": [
                  {
                    "author": "KevinCarbonara",
                    "body": "&gt; I think this is still valuable since the security hygiene of many programmers might as well be non-existent.\n\nIf by \"this\", you mean people investigating the security of extensions and exposing security flaws, I agree 100%. And I mentioned in a separate comment that Microsoft could probably do a lot more than they currently are to ensure security.\n\nBut for some reason, people seem to be pushing the narrative that Microsoft is somehow deficient for not putting in significantly more effort than literally anyone else in the field is doing. It hasn't historically been the responsibility of the authors of extensible software to personally monitor all extensions of that software. The entire point of extensions is to allow the community to provide their own solution. This is more a condemnation of the community than of the corporation in this case.\n\nAll that aside, I hope this does push Microsoft to remove the more easily abused features of their extension platform. But I also realize that those changes will probably provoke a new wave of criticism about the removed content, much of it likely from the same group currently criticizing them for the poor security of extensions.",
                    "score": 3,
                    "replies": []
                  }
                ]
              },
              {
                "author": "Character_Ad_6175",
                "body": "It never occurred to me that VSCode themes could be potentially harmful. I'm using JetBrains though, but for one project I was on VSCode. I guess I'll have to do my due diligence since Microsoft will not. I think what irks me about people like you, is that you aren't even phased by the negligence of Microsoft.",
                "score": -1,
                "replies": [
                  {
                    "author": "KevinCarbonara",
                    "body": "&gt; I guess I'll have to do my due diligence since Microsoft will not.\n\nWhy does it bother you that Microsoft doesn't vet other people's extensions, but it doesn't bother you when Jetbrains does the same?\n\n&gt; I think what irks me about people like you, is that you aren't even phased by the negligence of Microsoft.\n\nThere are probably people irked by your lack of concern of Jetbrains's negligence as well. And let's be real - you hadn't even considered that extensions in VSCode could be harmful. You're not really in a position to judge anybody's negligence.",
                    "score": 2,
                    "replies": [
                      {
                        "author": "Character_Ad_6175",
                        "body": "My comment was clumsily phrased, and understandably gave you the impression that I think either case is fine, which I don't. \n\nThe last part of your comment is very strange, it sounds like you're saying unless I am an industry expert on cyber security, I can't have an opinion on the security negligence of a Mega Corporation, like Microsoft. Actually, you're even implying I'm some kind of hypocrite for expecting more from Microsoft than I do from myself. Are you mentally ill, or dumb?",
                        "score": -1,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "author": "CyAScott",
            "body": "I could see this as a problem for someone who is working solo on a project, but for an organization this likely is not as bad. Every company I worked for, every bit of software (including plugins) needs to be vetted before it can be used. We vet of license issues, is actively supported, does the company that made the software have a good relationship with their users, etc.",
            "score": 2,
            "replies": []
          },
          {
            "author": "FancyASlurpie",
            "body": "I would say any large company that just allows any developer to install arbitrary extensions has this risk, there's a reason why the only extension my company allows is their internal extension marketplace that vets all the extensions on it.",
            "score": 2,
            "replies": []
          },
          {
            "author": "FlangerOfTowels",
            "body": "Agreed. Some of the comments are outright ridiculously dumb.\n\nWouldn't be surprised if some of the people invested in the VSCode malware are trying to run interference. If so, they kind of suck at it.",
            "score": 2,
            "replies": []
          },
          {
            "author": "aubd09",
            "body": "&gt; [medium.com](http://medium.com)",
            "score": -6,
            "replies": []
          }
        ]
      },
      {
        "author": "klysium",
        "body": "I tend to use plugins with verified authors but I should go through my list of plugins to be sure. \n\nExtensions like the csv viewer to table extension might be popular but maybe used twice, doesnt need to be installed anymore",
        "score": 5,
        "replies": [
          {
            "author": "InfectedShadow",
            "body": "You mean authors who paid at minimum $5 for a domain to add to the publisher account for the pretty badge? Probably shouldn't trust them either tbh.",
            "score": 3,
            "replies": [
              {
                "author": "klysium",
                "body": "Good point. Should get rid of some regardless",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "zolnox",
        "body": "VSCode is the WordPress of text editors.\n\nBoth WordPress and VSCode are flexible, extensible, and prone to security issues.",
        "score": 3,
        "replies": []
      },
      {
        "author": "edaroni",
        "body": "What fkn extension? Man I hate these posts…",
        "score": 3,
        "replies": [
          {
            "author": "smirkjuice",
            "body": "Darcula",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "ItsMexxie",
        "body": "All of the other issues aside, isn't that IP in the code beautifying snippet in a private address range? Wouldn't that just send data to some local server?",
        "score": 1,
        "replies": []
      },
      {
        "author": "[deleted]",
        "body": "[removed]",
        "score": 1,
        "replies": [
          {
            "author": "Aminumbra",
            "body": "TBH and as much as I love Emacs: not really. The fact is that:  \n- Emacs has significantly less users, hence, less extensions and above, it is less interesting to infect the \"Emacs userbase\" than to infect the \"VS Code\" userbase, so less incentive to develop malware/malicious extensions.  \n- Emacs is very, very far from being sandboxed: any extension has the same right as the user (download arbitrary stuff from the Internet, complete access to the filesystem ...)  \n- Emacs users tend to read their extensions' source code much more often than VS Code users -- be it for documentation, patches, examples on how to do something ... so it is not /that/ easy to completely hide a malware/malicious intent within source code here, as it is very likely someone will spot it.  \n- To some extent, the usual package archives are moderated. However, it is unclear to me how much of a code review is done by the moderators of (typically) MELPA.",
            "score": 1,
            "replies": []
          }
        ]
      },
      {
        "author": "test-user-67",
        "body": "It's funny because many tools at large companies require upper management approval to install, which can take weeks. Whereas vscode doesn't require admin access to install and inevitably results in people using what are probably less secure extensions over well known software for the sake of productivity and deadlines.",
        "score": 1,
        "replies": []
      },
      {
        "author": "ChicagoStooge",
        "body": "This is going to go unnoticed by many less-active developers for a long time.",
        "score": 1,
        "replies": []
      },
      {
        "author": "amitassaraf",
        "body": "We've actually released the solution to this problem, a free community tool called ExtensionTotal, check out our blog post about it - [https://medium.com/@amitassaraf/4-6-introducing-extensiontotal-how-to-assess-risk-in-vs-code-extensions-3ac5bfd83fb1](https://medium.com/@amitassaraf/4-6-introducing-extensiontotal-how-to-assess-risk-in-vs-code-extensions-3ac5bfd83fb1)",
        "score": 1,
        "replies": []
      },
      {
        "author": "Cobalt129",
        "body": "More Microsoft incompetence with security, this isn't a surprise tbh",
        "score": 1,
        "replies": []
      },
      {
        "author": "Mikkelet",
        "body": "Wasnt this also the problem with NPM and why a lot of devs switched to Yarn?",
        "score": 1,
        "replies": [
          {
            "author": "popiazaza",
            "body": "Not really the main reason to use Yarn, it's mostly how node_modules is managed, for speed and some deps conflict problems.\n\nA lot of devs actually switch back to npm (or pnpm to save disk space).",
            "score": 3,
            "replies": [
              {
                "author": "EvandoBlanco",
                "body": "I was going to make an \"npm as an editor\" joke.",
                "score": 1,
                "replies": []
              }
            ]
          }
        ]
      },
      {
        "author": "KeppraKid",
        "body": "Is it weird that I use almost no extensions when using VSCode?",
        "score": 0,
        "replies": []
      },
      {
        "author": "pyeri",
        "body": "I knew this was a disaster waiting to happen. Around the time of COVID lockdown, there was this massive social campaign pushing and singing praises of VSCode everywhere, a whole ecosystem was being readied for this. If the overall install base of a product increases, so will the attack vector of a malicious plugin.",
        "score": -19,
        "replies": [
          {
            "author": "GetPsyched67",
            "body": "Really silly dooming. People use pointless fear mongering like this to tell us why iOS has to be locked down as well. Just be careful with what you install",
            "score": 7,
            "replies": []
          },
          {
            "author": "JamesGecko",
            "body": "I mean, it's a great editor. Popular things become targets. Doesn't mean folks shouldn't have recommended it; there was no way to know that one of the biggest software companies in the world would drop the ball on security this badly.",
            "score": 2,
            "replies": []
          },
          {
            "author": "pragmojo",
            "body": "I agree that the dominance of VSCode is a problem.  MS has too much influence over the developer ecosystem with VSCode and Github - I choose alternatives whenever possible.",
            "score": 0,
            "replies": [
              {
                "author": "Picorims",
                "body": "They also own npm and TypeScript when it comes to web.",
                "score": 5,
                "replies": [
                  {
                    "author": "pragmojo",
                    "body": "Huh I didn't realize they own npm - at least yarn is an alternative, but that's meta as well so it's not that much better.\n\nI'm secretly hoping wasm gets complete enough API's to replace the js ecosystem in the next 10 years and we can leave the mess which is js development in the past.",
                    "score": 3,
                    "replies": [
                      {
                        "author": "pyeri",
                        "body": "What some of my wise friends do is head over to [unkpg.com](https://unpkg.com/) and download whatever individual npm packages they want, then add them with the `&lt;script&gt;` tags to their HTML headers/footers. \n\nAvoid absolute dependency on the actual npm packager if possible.",
                        "score": 3,
                        "replies": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "author": "[deleted]",
        "body": "Vscode is the justin bieber of editors.",
        "score": -72,
        "replies": []
      }
    ]
  }
]